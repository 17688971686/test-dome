	public void test() {
		// 创建一个默认的HttpClient
		CloseableHttpClient httpclient = null;
		HttpPost httppost = null;
		try {
			// 接口地址
			String endpoint = "http://localhost:8089/FGWPM/restservices/FGWPMRest/uploadPszxData/query";
			Global.getInstance().LogApp(endpoint + ">>>>>>>>>>>>>>>>>>>>>>>>>>>>");
			httpclient = HttpClients.createDefault();
			// 以post方式请求
			httppost = new HttpPost(endpoint);
			List<NameValuePair> params = new ArrayList<NameValuePair>();
			// 建立一个NameValuePair数组，用于存储欲传送的参数
			HashMap<String, Object> dataMap = new HashMap<String, Object>();
			// dataMap.put("xmmc", "HLT备案11201644");// 项目名称
			// dataMap.put("jsdw", "测试建设单位");// 建设单位
			dataMap.put("swbh", "KY201700022");// 收文编号
			// dataMap.put("swrq", sdf.parse("2017/11/20").getTime());// 收文日期
			dataMap.put("psfs", "1");// 评审方式
			// dataMap.put("xmbm", "S-2017-A01-500046-11-01");// 项目编码
			dataMap.put("sssj", (new Date()).getTime());// 送审日期
			dataMap.put("psjssj", (new Date()).getTime());// 评审结束时间
			dataMap.put("xmpsyd", "项目评审要点项目评审要点项目评审要点项目评审要点项目评审要点项目评审要点项目评审要点");// 项目评审要点
			dataMap.put("sb", 1.2);// 申报投资额（万元）
			dataMap.put("sd", 2.1);// 审定投资额（万元）
			dataMap.put("hjz", 6.2);// 核减（增）投资额（万元）
			dataMap.put("hjzl", 58.62);// 核减（增）率
			dataMap.put("psbz", "备注备注备注备注备注备注备注");// 备注
			dataMap.put("xmjsbyx", "项目建设必要性项目建设必要性项目建设必要性项目建设必要性项目建设必要性");// 项目建设必要性
			dataMap.put("jsnrjgm", "建设内容及规模建设内容及规模建设内容及规模建设内容及规模建设内容及规模建设内容及规模建设内容及规模");// 建设内容及规模
			dataMap.put("tzksjzjly", "投资估算及资金来源投资估算及资金来源投资估算及资金来源投资估算及资金来源投资估算及资金来源投资估算及资金来源投资估算及资金来源");// 投资估算及资金来源
			dataMap.put("xyjdgzyq", "下一阶段工作要求下一阶段工作要求下一阶段工作要求");// 下一阶段工作要求
			ArrayList<HashMap<String, Object>> fjList = new ArrayList<HashMap<String, Object>>();
			HashMap<String, Object> fjMap = new HashMap<String, Object>();
			fjMap.put("url", "http://localhost:8089/FGWPM/LEAP/Download/default/2017/12/10/pdftest.pdf");
			fjMap.put("filename", "评审报告pdf");
			fjMap.put("tempName", "黄凌涛");
			fjList.add(fjMap);
			fjMap = new HashMap<String, Object>();
			fjMap.put("url", "http://localhost:8089/FGWPM/LEAP/Download/default/2017/12/10/wordtest.docx");
			fjMap.put("filename", "评审报告word");
			fjMap.put("tempName", "黄凌涛");
			fjList.add(fjMap);
			dataMap.put("psbg", fjList);// 评审报告（需上传pdf和word文档）

			fjList = new ArrayList<HashMap<String, Object>>();
			fjMap = new HashMap<String, Object>();
			fjMap.put("url", "http://localhost:8089/FGWPM/LEAP/Download/default/2017/12/10/pdftest.pdf");
			fjMap.put("filename", "投资估算审核表pdf");
			fjMap.put("tempName", "黄凌涛");
			fjList.add(fjMap);
			fjMap = new HashMap<String, Object>();
			fjMap.put("url", "http://localhost:8089/FGWPM/LEAP/Download/default/2017/12/10/wordtest.docx");
			fjMap.put("filename", "投资估算审核表word");
			fjMap.put("tempName", "黄凌涛");
			fjList.add(fjMap);
			dataMap.put("tzgsshb", fjList);// 投资估算审核表（需上传pdf和word文档）
			fjList = new ArrayList<HashMap<String, Object>>();
			dataMap.put("zjpsyj", fjList);// 专家评审意见
			fjList = new ArrayList<HashMap<String, Object>>();
			dataMap.put("zjpsmd", fjList);// 专家评审名单
			fjList = new ArrayList<HashMap<String, Object>>();
			dataMap.put("qtfj", fjList);// 其它

			ArrayList<HashMap<String, Object>> dataList = new ArrayList<HashMap<String, Object>>();
			HashMap<String, Object> psgcMap = new HashMap<String, Object>();
			psgcMap.put("blhj", "1");// 办理环节
			psgcMap.put("psblyj", "办理意见办理意见办理意见办理意见办理意见");// 办理意见
			psgcMap.put("blr", "办理人");// 办理人
			psgcMap.put("blsj", (new Date()).getTime());// 办理时间
			fjList = new ArrayList<HashMap<String, Object>>();
			fjMap = new HashMap<String, Object>();
			fjMap.put("url", "http://localhost:8089/FGWPM/LEAP/Download/default/2017/12/10/pdftest.pdf");
			fjMap.put("filename", "投资估算审核表pdf");
			fjMap.put("tempName", "黄凌涛");
			fjList.add(fjMap);
			psgcMap.put("cl", fjList);// 材料（附件）
			dataList.add(psgcMap);
			params.add(new BasicNameValuePair("dataMap", JSONSerializer.getInstance().Serialize(dataMap)));
			params.add(new BasicNameValuePair("dataList", JSONSerializer.getInstance().Serialize(dataList)));
			httppost.setEntity(new UrlEncodedFormEntity(params, "UTF-8"));
			// 创建响应处理器处理服务器响应内容
			ResponseHandler<String> responseHandler = new BasicResponseHandler();
			// 执行请求并获取结果
			String responseBody = httpclient.execute(httppost, responseHandler);
		} catch (Exception e) {
			Global.getInstance().LogApp(e);
		} finally {
			// 当不再需要HttpClient实例时,关闭连接管理器以确保释放所有占用的系统资源
			try {
				if (httpclient != null) {
					httpclient.close();
				}
			} catch (IOException e) {
				Global.getInstance().LogApp(e);
			}
		}

	}