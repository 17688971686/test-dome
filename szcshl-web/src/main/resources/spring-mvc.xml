<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<mvc:resources location="/contents/" mapping="/contents/**" />
	<!-- 自动扫描@Controller注入为bean -->
	<context:component-scan base-package="cs.controller" >
	 	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 移动端自动扫描@Controller注入为bean -->
	<context:component-scan base-package="cs.mobile.controller" >
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- <context:component-scan base-package="com.dingding.dingPC.controller" /> -->
	<mvc:interceptors>
		<bean class="cs.common.ApiFilter" />
	</mvc:interceptors>

	<!-- 以下为SpringMVC配置 -->
    <mvc:annotation-driven>
        <!-- 返回json数据，@response使用 -->
        <mvc:message-converters register-defaults="true">
            <bean class="cs.common.CustomerFastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                        <value>text/json;charset=UTF-8</value>
                    </list>
                </property>
                <property name="features">
                    <list>
                        <!-- Boolean字段如果为null,输出为false,而非null -->
                        <value>WriteNullBooleanAsFalse</value>
                        <!-- null String不输出  -->
                        <!--<value>WriteNullStringAsEmpty</value>-->
                        <!-- Date的日期转换器 -->
                        <value>WriteDateUseDateFormat</value>
                    </list>
                </property>
                <property name="defaultDateFormat" value="yyyy-MM-dd HH:mm:ss"></property>
            </bean>
        </mvc:message-converters>       
    </mvc:annotation-driven>

	<!--设置HttpOnly，而XSS就是在别人的应用程序中恶意执行一段JS以窃取用户的cookie-->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/*"/>
			<bean class="cs.spring.HttpOnlyInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 支持上传文件-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--允许最大上传10G文件(1024*1024)
		<property name="maxUploadSize" value="10485760"/>
		-->
        <property name="maxInMemorySize" value="4096"/>
	<!--	<property name="uploadTempDir" value="resources/upload/temp" />-->
		<property name="defaultEncoding" value="utf-8"/>
	</bean>
	<!-- <bean id="dictUtil" class="com.szcshl.utils.DictUtil"></bean> -->
	  <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
       <!-- 设置freeMarker的配置文件路径 -->
	<bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	    <property name="location" value="classpath:freemarker.properties"/>
	</bean>

	<!-- 配置freeMarker的模板路径 -->
	<!-- <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"> -->
	<bean id="freemarkerConfig" class="cs.common.ShiroTagFreeMarkerConfigurer">
		<!--<property name="configLocation" value="classpath:freemarker.properties"/>-->
	    <property name="freemarkerSettings" ref="freemarkerConfiguration" />
	    <property name="templateLoaderPath">
	        <value>/WEB-INF/views/</value>
	    </property>
		<!-- FreeMarker自定义指令自动加载 -->
	    <property name="freemarkerVariables">
	        <map>
	           <!--  <entry key="xml_escape" value-ref="fmXmlEscape" /> -->
	            <!-- <entry key="dict" value-ref="dictUtil" /> -->
	            <entry key="rowspan" value-ref="rowspanDirective"></entry>
	       </map>
	    </property>
	    <property name="defaultEncoding">
	    	<value>UTF-8</value>
	    </property>
	</bean>
	<!-- <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/> -->
	  
	<!-- 配置freeMarker视图解析器 -->  
	<!-- FreeMarker视图解析 如返回student。。在这里配置后缀名ftl和视图解析器。。-->    
	<bean id="viewResolver"    
	 class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">    
	     
		<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"></property>    
		<property name="suffix" value=".html" />    
		<property name="contentType" value="text/html;charset=utf-8" />    
		<property name="requestContextAttribute" value="request" />  
        <!-- 将请求和会话属性作为变量暴露给FreeMarker模板使用。要做到这一点，可以设置exposeRequestAttributes或者exposeSessionAttributes为true -->  
        <property name="exposeRequestAttributes" value="true" />  
        <property name="exposeSessionAttributes" value="true" />  
        <!-- 使用这些宏，必须设置FreeMarkerViewResolver的exposeMacroHelpers属性为true -->  
        <property name="exposeSpringMacroHelpers" value="true" />   
	</bean>

	<!-- 开启shiro注解 AOP代理-->
	<aop:config proxy-target-class="true"/>

	<!--Aop切面编程的配置-->
	<aop:aspectj-autoproxy proxy-target-class="true" />

    <!-- 定时器配置 The quartz scheduler configuration -->
	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
			<property name="jobFactory">
                <bean class="cs.quartz.unit.JobFactory"/>
            </property>
	</bean>

</beans>