(function () {
    'use strict';
    angular.module('app', [
        // Angular modules
        'ui.router',
        'kendo.directives',
        'angular-loading-bar',
        'ngAnimate',
        'ngFileSaver',
        'angular-toArrayFilter',
    ]).filter('trust2Html', ['$sce', function ($sce) {
        return function (val) {
            return $sce.trustAsHtml(val);
        };
    }]).filter('ntobr', function () {
        var filter = function (input) {
            if (input) {
                return input.replace(/\n/g, "<\/br>").replace(/ /g, "&nbsp;");
            }
        };
        return filter;
    }).filter('myFilter', function () {
        return function (collection, keyname, value) {
            var output = [];
            var valueArr = [];
            if (value instanceof Array) {
                valueArr = value;
            } else {
                valueArr.push(value);
            }
            angular.forEach(collection, function (item) {
                angular.forEach(valueArr, function (checkValue) {
                    //过滤数组中值与指定值相同的元素
                    if (item[keyname] == checkValue) {
                        output.push(item);
                    }
                })
            });
            return output;
        }
    }).filter('unique', function () {
        return function (collection, keyname) {
            var output = [],
                keys = [];
            angular.forEach(collection, function (item) {
                var key = item[keyname];
                if (keys.indexOf(key) === -1) {
                    keys.push(key);
                    output.push(item);
                }
            });
            return output;
        };
    }).filter('FormatStrDate', function () {
        return function (input) {
            var date = new Date(input);
            var monthValue = (date.getMonth() + 1) < 10 ? "0" + (date.getMonth() + 1) : (date.getMonth() + 1);
            var dayValue = (date.getDate()) < 10 ? "0" + (date.getDate()) : (date.getDate());
            var formatDate = date.getFullYear() + "/" + monthValue + "/" + dayValue;
            return formatDate;
        }
    })
        .config(["$stateProvider", "$locationProvider", "$urlRouterProvider", 'cfpLoadingBarProvider', function ($stateProvider, $locationProvider, $urlRouterProvider, cfpLoadingBarProvider) {
            $locationProvider.hashPrefix(''); // 1.6.x版本使用路由功能需加上这句
            cfpLoadingBarProvider.parentSelector = '#loading-bar-container';
            cfpLoadingBarProvider.spinnerTemplate = '<div style="position:fixed;width:100%;height:100%;left:0;top:0; z-index:10001;background:rgba(0, 0, 0, 0.3);overflow: hidden;"><div style="position: absolute;top:30%; width: 400px;height:40px;left:50%;"><i class="fa fa-spinner fa-pulse fa-1x fa-fw"></i>数据加载中...</div></div>';
            $urlRouterProvider.otherwise('/welcome');
            $stateProvider
                .state('welcome', {
                    url: '/welcome',
                    templateUrl: rootPath + '/admin/welcome.html',
                    controller: 'adminWelComeCtrl',
                    controllerAs: 'vm'
                })
                .state('gtasks', {
                    url: '/gtasks',
                    templateUrl: rootPath + '/admin/gtasks.html',
                    controller: 'adminCtrl',
                    controllerAs: 'vm'
                })
                //个人待办任务
                .state('agendaTasks', {
                    url: '/agendaTasks',
                    templateUrl: rootPath + '/admin/agendaTasks.html',
                    controller: 'adminAgendaCtrl',
                    controllerAs: 'vm'
                })
                //在办任务
                .state('doingTasks', {
                    url: '/doingTasks',
                    templateUrl: rootPath + '/admin/doingTasks.html',
                    controller: 'adminDoTaskCtrl',
                    controllerAs: 'vm'
                })
                //已办结任务
                .state('endTasks', {
                    url: '/endTasks',
                    templateUrl: rootPath + '/admin/endTasks.html',
                    controller: 'adminEndTaskCtrl',
                    controllerAs: 'vm'
                })
                //begin#流程公共页面
                .state('flowDeal', {
                    url: '/flowDeal/:businessKey/:processKey/:taskId/:instanceId',
                    templateUrl: function ($routeParams) {
                        return rootPath + '/flow/flowDeal/' + $routeParams.processKey + '.html';
                    },
                    controller: 'flowDealCtrl',
                    controllerAs: 'vm'
                })
                .state('flowDetail', {
                    url: '/flowDetail/:businessKey/:processKey/:taskId/:instanceId',
                    templateUrl: function ($routeParams) {
                        return rootPath + '/flow/flowDetail/' + $routeParams.processKey + '.html';
                    },
                    controller: 'flowDetailCtrl',
                    controllerAs: 'vm'
                })
                .state('flowEnd', {
                    url: '/flowEnd/:businessKey/:processKey/:instanceId',
                    templateUrl: function ($routeParams) {
                        return rootPath + '/flow/flowEnd/' + $routeParams.processKey + '.html';
                    },
                    controller: 'flowEndCtrl',
                    controllerAs: 'vm'
                })
                //end#流程公共页面

                //S 拟补充资料函管理

                //begin#添加拟补充资料函
                .state('addSupp', {
                    url: '/addSupp/:businessId/:businessType/:isControl',
                    templateUrl: rootPath + '/addSuppLetter/edit.html',
                    controller: 'addSuppLetterCtrl',
                    controllerAs: 'vm'
                })//end#添加拟补充资料函

                //begin#拟补充资料函列表
                .state('addSuppletterList', {
                    url: '/addSuppletterList/:businessId',
                    templateUrl: rootPath + '/addSuppLetter/list.html',
                    controller: 'addSuppLetterListCtrl',
                    controllerAs: 'vm'
                })//end#拟补充资料函列表

                //begin#拟补充资料函查看流程详细页面
                .state('addSuppLetterEdit', {
                    url: '/addSuppLetterEdit/:id',
                    templateUrl: rootPath + '/addSuppLetter/editUpload.html',
                    controller: 'addSuppLetterEditCtrl',
                    controllerAs: 'vm'
                })//end#拟补充资料函查看流程详细页面

                //begin#拟补充资料函查看流程详细页面
                .state('suppLetterView', {
                    url: '/suppLetterView/:id',
                    templateUrl: rootPath + '/addSuppLetter/view.html',
                    controller: 'suppLetterViewCtrl',
                    controllerAs: 'vm'
                })//end#拟补充资料函查看流程详细页面


                //begin#拟补充资料函查询
                .state('suppletterList', {
                    url: '/suppletterList',
                    templateUrl: rootPath + '/addSuppLetter/html/suppLetterList.html',
                    controller: 'addSuppLetterQueryCtrl',
                    controllerAs: 'vm'
                })//end#拟补充资料函查询


                //begin#拟补充资料函详细信息
                .state('querySuppLetterDetail', {
                    url: '/querySuppLetterDetail/:id',
                    templateUrl: rootPath + '/addSuppLetter/detail.html',
                    controller: 'addSuppLetterQueryEditCtrl',
                    controllerAs: 'vm'
                })//end#拟补充资料函详细信息


                //begin#拟补充资料函审批处理页面
                .state('suppLetterApproveEdit', {
                    url: '/suppLetterApproveEdit/:id',
                    templateUrl: rootPath + '/addSuppLetter/suppLetterApproveEdit.html',
                    controller: 'addSuppLetterQueryEditCtrl',
                    controllerAs: 'vm'
                })//end#拟补充资料函审批处理页面

                //E 拟补充资料函管理

                //begin#registerFile
                .state('registerFile', {
                    url: '/registerFile/:businessId',
                    templateUrl: rootPath + '/addRegisterFile/list.html',
                    controller: 'addRegisterFileCtrl',
                    controllerAs: 'vm'
                }) //end#registerFile
                .state('dtasks', {
                    url: '/dtasks',
                    templateUrl: rootPath + '/admin/dtasks.html',
                    controller: 'adminDoingCtrl',
                    controllerAs: 'vm'
                })
                .state('personDtasks', {
                    url: '/personDtasks',
                    templateUrl: rootPath + '/sign/personDtasks.html',
                    controller: 'adminPersonDoingCtrl',
                    controllerAs: 'vm'
                })
                .state('etasks', {
                    url: '/etasks',
                    templateUrl: rootPath + '/sign/etasks.html',
                    controller: 'adminEndCtrl',
                    controllerAs: 'vm'
                })
                //begin#role
                .state('role', {
                    url: '/role',
                    templateUrl: rootPath + '/role/html/list.html',
                    controller: 'roleCtrl',
                    controllerAs: 'vm'
                })
                .state('roleEdit', {
                    url: '/roleEdit/:id',
                    templateUrl: rootPath + '/role/html/edit.html',
                    controller: 'roleEditCtrl',
                    controllerAs: 'vm'
                })
                //end#role

                //begin#user
                .state('user', {
                    url: '/user',
                    templateUrl: rootPath + '/user/html/list.html',
                    controller: 'userCtrl',
                    controllerAs: 'vm'
                }).state('userEdit', {
                url: '/userEdit/:id',
                templateUrl: rootPath + '/user/html/edit.html',
                controller: 'userEditCtrl',
                controllerAs: 'vm'
            })
            //end#user

            //begin#org
                .state('org', {
                    url: '/org',
                    templateUrl: rootPath + '/org/html/list.html',
                    controller: 'orgCtrl',
                    controllerAs: 'vm'
                })
                .state('orgEdit', {
                    url: '/orgEdit/:id',
                    templateUrl: rootPath + '/org/html/edit.html',
                    controller: 'orgEditCtrl',
                    controllerAs: 'vm'
                }).state('orgUser', {
                url: '/orgUser/:id',
                templateUrl: rootPath + '/org/html/orgUser.html',
                controller: 'orgUserCtrl',
                controllerAs: 'vm'
            })
            //end#org

            //begin#sysdept
                .state('sysdept', {
                    url: '/sysdept',
                    templateUrl: rootPath + '/sysdept/html/list.html',
                    controller: 'sysdeptCtrl',
                    controllerAs: 'vm'
                }).state('sysdeptEdit', {
                url: '/sysdeptEdit/:id',
                templateUrl: rootPath + '/sysdept/html/edit.html',
                controller: 'sysdeptEditCtrl',
                controllerAs: 'vm'
            }).state('sysdeptUser', {
                url: '/sysdeptUser/:id',
                templateUrl: rootPath + '/sysdept/html/sysdeptUser.html',
                controller: 'sysdeptUserCtrl',
                controllerAs: 'vm'
            })
            //end#sysdept

            //begin#log
                .state('log', {
                    url: '/log',
                    templateUrl: rootPath + '/log/html/list.html',
                    controller: 'logCtrl',
                    controllerAs: 'vm'
                })
                .state('logFgw', {
                    url: '/logFgw',
                    templateUrl: rootPath + '/log/html/fgwSignLog.html',
                    controller: 'logFgwCtrl',
                    controllerAs: 'vm'
                })
                //begin#smslog  需要替换的注销2018
                .state('smslog', {
                    url: '/smslog',
                    templateUrl: rootPath + '/smslog/html/list.html',
                    controller: 'smslogCtrl',
                    controllerAs: 'vm'
                })
                //smslogSendCtrl
                // .state('maintainExpertConfirm', {//确定修改文件
                //     url: '/maintainExpertConfirm/:signid',
                //     templateUrl: rootPath + "/maintainProject/html/maintainExpertConfirm.html",
                //     controller: 'maintainExpertConfirmCtrl',
                //     controllerAs: 'vm'
                // })

                //begin#flow  发文:重做工作方案
                // .state('flow', {
                //     url: '/flow',
                //     templateUrl: rootPath + '/ReworkWorkPlan/html/getBranchInfo.html',
                //     controller: 'reworkWorkPlanCtrl',
                //     controllerAs: 'vm'
                // })

                //end#log

                //begin#config
                .state('config', {
                    url: '/config',
                    templateUrl: rootPath + '/sysConfig/html/list.html',
                    controller: 'sysConfigCtrl',
                    controllerAs: 'vm'
                })
                //end#config

                //begin#upload
                .state('upload', {
                    url: '/upload/:uploadid',
                    templateUrl: rootPath + '/upload/html/edit.html',
                    controller: 'uploadEditCtrl',
                    controllerAs: 'vm'
                })
                //end#upload

                //begin#meeting
                .state('meeting', {
                    url: '/meeting',
                    templateUrl: rootPath + '/meeting/html/list.html',
                    controller: 'meetingCtrl',
                    controllerAs: 'vm'
                }).state('meetingEdit', {
                url: '/meetingEdit/:id',
                templateUrl: rootPath + '/meeting/html/edit.html',
                controller: 'meetingEditCtrl',
                controllerAs: 'vm'
            })
            //end#meeting

            //begin#room
                .state('room', {
                    url: '/room',
                    params: {'businessId': '', 'businessType': ''},
                    templateUrl: rootPath + '/room/html/roomlist.html',
                    controller: 'roomCtrl',
                    controllerAs: 'vm'
                }).state('roomCount', {
                url: '/roomCount',
                params: {'id': ''},
                templateUrl: rootPath + '/room/html/countlist.html',
                controller: 'roomCountCtrl',
                controllerAs: 'vm'
            })
            //end#room

            //begin#company
                .state('company', {
                    url: '/company',
                    templateUrl: rootPath + '/company/html/list.html',
                    controller: 'companyCtrl',
                    controllerAs: 'vm'
                }).state('companyEdit', {
                url: '/companyEdit/:id',
                templateUrl: rootPath + '/company/html/edit.html',
                controller: 'companyEditCtrl',
                controllerAs: 'vm'
            })
            //end#company

            //begin#home
                .state('accountPwd', {
                    url: '/accountPwd',
                    templateUrl: rootPath + '/account/html/changePwd.html',
                    controller: 'homeCtrl',
                    controllerAs: 'vm'
                })
                //end#home
                //begin#demo
                .state('demo', {
                    url: '/demo',
                    templateUrl: rootPath + '/demo/html/list.html',
                    controller: 'demoCtrl',
                    controllerAs: 'vm'
                })
                //end#demo

                //begin Dict
                .state('dict', {
                    url: '/dict',
                    templateUrl: rootPath + '/dict/html/list.html',
                    controller: 'dictCtrl',
                    controllerAs: 'vm'
                })
                .state('dict.edit', {
                    url: '/edit/:id',
                    templateUrl: rootPath + '/dict/html/edit.html',
                    controller: 'dictEditCtrl',
                    controllerAs: 'vm'
                })
                //end Dict

                //begin expert
                .state('expert', {
                    url: '/expert',
                    templateUrl: rootPath + '/expert/html/queryAllList.html',
                    controller: 'expertCtrl',
                    controllerAs: 'vm'
                })
                .state('expertAudit', {
                    url: '/expertAudit',
                    templateUrl: rootPath + '/expert/html/audit.html',
                    controller: 'expertAuditCtrl',
                    controllerAs: 'vm'
                })
                .state('expertRepeat', {
                    url: '/expertRepeat',
                    templateUrl: rootPath + '/expert/html/repeat.html',
                    controller: 'expertRepeatCtrl',
                    controllerAs: 'vm'
                })
                .state('expertEdit', {
                    url: '/expertEdit/:id',
                    templateUrl: rootPath + '/expert/html/edit.html',
                    controller: 'expertEditCtrl',
                    controllerAs: 'vm'
                })

                .state('expertReviewEdit', {
                    url: '/expertReview/:businessId/:minBusinessId/:businessType/:reviewType/:isback/:processInstanceId/:taskId',
                    templateUrl: rootPath + '/expertReview/html/selectExpert.html',
                    controller: 'expertSelectCtrl',
                    controllerAs: 'vm'
                })

                .state('expertScore', {
                    url: '/expertScore',
                    templateUrl: rootPath + '/expert/html/scoreList.html',
                    controller: 'expertScoreCtrl',
                    controllerAs: 'vm'
                })

                .state('expertSelectHis', {
                    url: '/expertSelectHis',
                    templateUrl: rootPath + '/expert/html/selectHisList.html',
                    controller: 'expertSelectHisCtrl',
                    controllerAs: 'vm'
                })
                //end expert
                //begin#sign
                .state('addSign', {
                    url: '/addSign',
                    templateUrl: rootPath + '/sign/html/add.html',
                    controller: 'signCreateCtrl',
                    controllerAs: 'vm'
                }).state('fillSign', {//isControl用来控制按钮的显示
                url: '/fillSign/:signid/:isControl',
                cache: 'false',
                templateUrl: rootPath + '/sign/html/fillin.html',
                controller: 'signFillinCtrl',
                controllerAs: 'vm'
            }).state('listSign', {
                url: '/listSign',
                templateUrl: rootPath + '/sign/html/list.html',
                controller: 'signCtrl',
                controllerAs: 'vm'
            }).state('signFlowDeal', {
                url: '/signFlowDeal/:signid/:taskId/:processInstanceId',
                templateUrl: rootPath + '/sign/html/flowDeal.html',
                controller: 'signFlowDealCtrl',
                controllerAs: 'vm'
            }).state('signFlowDetail', {
                url: '/signFlowDetail/:signid/:taskId/:processInstanceId',
                templateUrl: rootPath + '/sign/html/signFlowDetail.html',
                controller: 'signFlowDetailCtrl',
                controllerAs: 'vm'
            }).state('signDetails', {//详细信息
                url: '/signDetails/:signid/:processInstanceId',
                templateUrl: rootPath + '/sign/html/signDetails.html',
                controller: 'signDetailsCtrl',
                controllerAs: 'vm'
            }).state('endSignDetail', { //已经办结的详情信息
                url: '/endSignDetail/:signid/:processInstanceId',
                templateUrl: rootPath + '/sign/html/signEndDetails.html',
                controller: 'signEndCtrl',
                controllerAs: 'vm'
            }).state('signList', { //项目查询统计
                url: '/signList',
                templateUrl: rootPath + '/signView/html/signList.html',
                controller: 'adminSignListCtrl',
                controllerAs: 'vm'
            })//end#signList
                .state('projectStopInfo', { //项目暂停表单（多个）
                    url: '/projectStopInfo/:signId',
                    templateUrl: rootPath + '/projectStop/html/projectStopInfo.html',
                    controller: 'projectStopInfoCtrl',
                    controllerAs: 'vm'
                })//end#signList
                .state('selectHeader', {
                    url: '/selectHeader',
                    templateUrl: rootPath + '/sign/html/selectHeader.html',
                    controller: 'selectHeaderCtrl',
                    controllerAs: 'vm'
                })
                .state('signGetBack', {//项目取回
                    url: '/signGetBack',
                    templateUrl: rootPath + '/sign/html/signGetBack.html',
                    controller: 'signGetBackCtrl',
                    controllerAs: 'vm'
                })
                .state('pauseProject', { //项目暂停审批
                    url: '/pauseProject',
                    templateUrl: rootPath + '/projectStop/html/pauseProjectList.html',
                    controller: 'pauseProjectCtrl',
                    controllerAs: 'vm'
                })
                .state('projectStopForm', { //项目暂停表单
                    url: '/projectStopForm/:signId/:stopId',
                    templateUrl: rootPath + '/projectStop/html/projectStopForm.html',
                    controller: 'projectStopFormCtrl',
                    controllerAs: 'vm'
                })
                .state('projectStopFormEdit', { //编辑项目暂停表单
                    url: '/projectStopFormEdit/:stopId',
                    templateUrl: rootPath + '/projectStop/html/projectStopForm.html',
                    controller: 'projectStopFormEditCtrl',
                    controllerAs: 'vm'
                })
                .state('reserveAdd', {	//新增预签收
                    url: '/reserveAdd',
                    templateUrl: rootPath + '/sign/html/reserveAdd.html',
                    controller: 'signReserveAddCtrl',
                    controllerAs: 'vm'
                }).state('reserveList', {	//预签收列表
                url: '/reserveList',
                templateUrl: rootPath + '/sign/html/reserveList.html',
                controller: 'signReserveCtrl',
                controllerAs: 'vm'
            }).state('reserveEdit', {	//预签收审批登记表
                url: '/reserveEdit',
                templateUrl: rootPath + '/sign/html/reserveList.html',
                controller: 'signReserveCtrl',
                controllerAs: 'vm'
            }).state('deletList', {	//作废项目列表
                url: '/deletList',
                templateUrl: rootPath + '/maintainProject/html/deletList.html',
                controller: 'signDeletCtrl',
                controllerAs: 'vm'
            })
            //end#signList

            //begin#workprogram
            /*.state('workprogramEdit', {
             url: '/workprogramEdit/:signid/:isControl/:minBusinessId/:businessType',
             templateUrl: rootPath + '/workprogram/html/edit.html',
             controller: 'workprogramEditCtrl',
             controllerAs: 'vm'
             })*/
            //流程处理中工作方案填写(新方法)
                .state('flowWPEdit', {
                    url: '/flowWPEdit/:signid/:taskid',
                    templateUrl: rootPath + '/workprogram/html/edit.html',
                    controller: 'flowWPEditCtrl',
                    controllerAs: 'vm'
                })
                //重做工作方案
                .state('reWorkFlow', {
                    url: '/reWorkFlow/:signid/:branchId',
                    templateUrl: rootPath + '/workprogram/html/edit.html',
                    controller: 'flowWPEditCtrl',
                    controllerAs: 'vm'
                })
                .state('initProjBase', {
                    url: '/initProjBase/:signid/:isadmin',
                    templateUrl: rootPath + '/workprogram/html/baseEdit.html',
                    controller: 'wpBaseCtrl',
                    controllerAs: 'vm'
                })
                //end#workprogram

                //begin#maintWorkprogram
                .state('maintWorkprogramEdit', {
                    url: '/maintWorkprogramEdit/:signid',
                    templateUrl: rootPath + '/maintainProject/html/workprogramEdit.html',
                    controller: 'maintWorkprogramEditCtrl',
                    controllerAs: 'vm'
                })
                //end#maintWorkprogram

                //begin#dispatch
                .state('dispatchEdit', {
                    url: '/dispatchEdit/:signid/:isControl',
                    templateUrl: rootPath + '/dispatch/html/edit.html',
                    controller: 'dispatchEditCtrl',
                    controllerAs: 'vm'
                })//end#dispatch

                //begin#fileRecord
                .state('fileRecordEdit', {
                    url: '/fileRecordEdit/:signid/:isControl',
                    templateUrl: rootPath + '/fileRecord/html/edit.html',
                    controller: 'fileRecordEditCtrl',
                    controllerAs: 'vm'
                })
                //end#fileRecord

                //begin#assistMng
                .state('assistPlan', {
                    url: '/assistPlan',
                    templateUrl: rootPath + '/assistPlan/html/manager.html',
                    controller: 'assistPlanCtrl',
                    controllerAs: 'vm'
                })
                //begin#assistMng

                //start #officeUser
                .state('officeUserList', {
                    url: '/officeUserList',
                    templateUrl: rootPath + '/officeUser/html/list.html',
                    controller: 'officeUserCtrl',
                    controllerAs: 'vm'
                })
                .state('officeUserEdit', {
                    url: '/officeUserEdit/:officeID',
                    templateUrl: rootPath + '/officeUser/html/edit.html',
                    controller: 'officeUserEditCtrl',
                    controllerAs: 'vm'
                })
                // end #officeUser

                //begin#dept
                .state('listDept', {
                    url: '/listDept',
                    templateUrl: rootPath + '/dept/html/list.html',
                    controller: 'deptCtrl',
                    controllerAs: 'vm'
                })
                .state('deptEdit', {
                    url: '/deptEdit/:deptId',
                    templateUrl: rootPath + '/dept/html/edit.html',
                    controller: 'deptEditCtrl',
                    controllerAs: 'vm'
                }).state('deptOfficeUser', {
                url: '/deptOfficeUser/:deptId',
                templateUrl: rootPath + '/dept/html/listOfficeUser.html',
                controller: 'deptOfficeUserCtrl',
                controllerAs: 'vm'
            })
            //end#dept
            //begin#assistUnit
                .state('assistUnit', {
                    url: '/assistUnit',
                    templateUrl: rootPath + '/assistUnit/html/assistUnitList.html',
                    controller: 'assistUnitCtrl',
                    controllerAs: 'vm'
                }).state('assistUnitEdit', {
                url: '/assistUnitEdit/:id',
                templateUrl: rootPath + '/assistUnit/html/assistUnitEdit.html',
                controller: 'assistUnitEditCtrl',
                controllerAs: 'vm'
            })
            //end#assistUnit
            //begin#assistUnit
                .state('quartz', {
                    url: '/quartz',
                    templateUrl: rootPath + '/quartz/html/list.html',
                    controller: 'quartzCtrl',
                    controllerAs: 'vm'
                })
                //begin workday
                .state('workday', {
                    url: '/workday',
                    templateUrl: rootPath + '/workday/html/list.html',
                    controller: 'workdayCtrl',
                    controllerAs: 'vm'
                })
                .state('workdayEdit', {
                    url: '/workdayEdit/:id',
                    templateUrl: rootPath + '/workday/html/edit.html',
                    controller: 'workdayEditCtrl',
                    controllerAs: 'vm'
                })
                //通过公告
                .state('annountment', {
                    url: '/annountment',
                    templateUrl: rootPath + '/annountment/html/list.html',
                    controller: 'annountmentCtrl',
                    controllerAs: 'vm'
                })
                .state('annountmentEdit', {
                    url: '/annountmentEdit/:id',
                    templateUrl: rootPath + '/annountment/html/edit.html',
                    controller: 'annountmentEditCtrl',
                    controllerAs: 'vm'
                })
                //通知公告详情页
                .state('annountmentDetail', {
                    url: '/annountmentDetail/:id',
                    templateUrl: rootPath + '/annountment/html/detail.html',
                    controller: 'annountmentDetailCtrl',
                    controllerAs: 'vm'
                })
                //通过公告
                .state('annountmentYet', {
                    url: '/annountmentYet',
                    templateUrl: rootPath + '/annountment/html/yetList.html',
                    controller: 'annountmentYetCtrl',
                    controllerAs: 'vm'
                })
                //begin#sharing
                .state('sharingPlatlform', {
                    url: '/sharingPlatlform',
                    templateUrl: rootPath + '/sharingPlatlform/html/list.html',
                    controller: 'sharingPlatlformCtrl',
                    controllerAs: 'vm'
                }).state('sharingPlatlformEdit', {
                url: '/sharingPlatlformEdit/:sharId',
                templateUrl: rootPath + '/sharingPlatlform/html/edit.html',
                controller: 'sharingPlatlformEditCtrl',
                controllerAs: 'vm'
            })
            //资料共享详情页
                .state('sharingDetil', {
                    url: '/sharingDetil/:sharId',
                    templateUrl: rootPath + '/sharingPlatlform/html/detail.html',
                    controller: 'sharingDetailCtrl',
                    controllerAs: 'vm'
                })
                .state('sharingPlatlformYet', {
                    url: '/sharingPlatlformYet',
                    templateUrl: rootPath + '/sharingPlatlform/html/yetList.html',
                    controller: 'sharingPlatlformYetCtrl',
                    controllerAs: 'vm'
                })
                //end#sharing
                //S 项目费用管理
                //评审费录入页面
                .state('financialManager', {
                    url: '/financialManager/:businessId',
                    templateUrl: rootPath + '/financialManager/html/add.html',
                    controller: 'financialManagerCtrl',
                    controllerAs: 'vm'
                })
                //协审费录入
                .state('financialAssistManager', {
                    url: '/financialAssistManager/:businessId',
                    templateUrl: rootPath + '/financialManager/html/assistCostAdd.html',
                    controller: 'assistCostEditCtrl',
                    controllerAs: 'vm'
                })
                //协审费录入列表页面
                .state('assistCostlist', {
                    url: '/assistCostlist/:costType',
                    templateUrl: rootPath + '/financialManager/html/assistCostList.html',
                    controller: 'assistCostCountEditCtrl',
                    controllerAs: 'vm'
                })
                //协审费统计列表
                .state('assistCostCountList', {
                    url: '/assistCostCountList',
                    templateUrl: rootPath + '/financialManager/html/assistCostCount.html',
                    controller: 'assistCostCountListCtrl',
                    controllerAs: 'vm'
                })
                //评审费录入列表
                .state('financialManagerList', {
                    url: '/financialManagerList/:costType',
                    templateUrl: rootPath + '/financialManager/html/list.html',
                    controller: 'financialManagerEditCtrl',
                    controllerAs: 'vm'
                })

                //专家缴费统计列表
                .state('expertPaymentCountList', {
                    url: '/expertPaymentCountList',
                    templateUrl: rootPath + '/financialManager/html/expertPaymentCount.html',
                    params: {'year': (new Date()).getFullYear() + '', 'month': ((new Date()).getMonth() + 1) + ''},//参数在这边声明
                    controller: 'expertPaymentCountCtrl',
                    controllerAs: 'vm'
                })
                //专家缴费明细统计列表
                .state('expertPaymentDetailCountList', {
                    url: '/expertPaymentDetailCountList/:year/:month',
                    templateUrl: rootPath + '/financialManager/html/expertPaymentDetailCount.html',
                    controller: 'expertPaymentDetailCountCtrl',
                    controllerAs: 'vm'
                })
                //专家费统计列表
                .state('exportCountList', {
                    url: '/exportCountList',
                    templateUrl: rootPath + '/financialManager/html/expertCount.html',
                    controller: 'exportCountCtrl',
                    controllerAs: 'vm'
                })
                //专家评审情况统计列表
                .state('expertRevCondCountList', {
                    url: '/expertRevCondCountList',
                    templateUrl: rootPath + '/signView/html/expertReviewCondCount.html',
                    controller: 'expertRevConCountCtrl',
                    controllerAs: 'vm'
                })
                //项目评审费统计列表
                .state('projectCostCountList', {
                    url: '/projectCostCountList',
                    templateUrl: rootPath + '/financialManager/html/projectCostCount.html',
                    controller: 'projectCostCountCtrl',
                    controllerAs: 'vm'
                })
                //项目评审费分类统计列表
                .state('proCostClassifyCountList', {
                    url: '/proCostClassifyCountList',
                    templateUrl: rootPath + '/financialManager/html/proCostClassifyCount.html',
                    controller: 'proCostClassifyCountCtrl',
                    controllerAs: 'vm'
                })
                //项目评审情况统计
                .state('proReviewConCountList', {
                    url: '/proReviewConCountList',
                    templateUrl: rootPath + '/signView/html/proReviewConCount.html',
                    controller: 'proReviewConditionCtrl',
                    controllerAs: 'vm'
                })
                //业绩统计表
                .state('achievementList', {
                    url: '/achievementList',
                    templateUrl: rootPath + '/signView/html/achievement.html',
                    params: {'year': (new Date()).getFullYear() + '', 'quarter': '0'},
                    controller: 'achievementListCtrl',
                    controllerAs: 'vm'
                })
                //E 项目费用管理

                //S 月报简报管理
                //月报简报管理列表
                .state('monthlyNewsletterList', {
                    url: '/monthlyNewsletterList',
                    templateUrl: rootPath + '/monthlyNewsletter/html/monthlyNewsletterList.html',
                    controller: 'monthlyNewsletterCtrl',
                    controllerAs: 'vm'
                })
                //新建月报简报管理
                .state('monthlyEdit', {
                    url: '/monthlyEdit/:id',
                    templateUrl: rootPath + '/monthlyNewsletter/html/monthlyNewsletterEdit.html',
                    controller: 'monthlyNewsletterEditCtrl',
                    controllerAs: 'vm'
                })

                //年度月报简报
                .state('theMonthsList', {
                    url: '/theMonthsList',
                    templateUrl: rootPath + '/monthlyNewsletter/html/theMonthsList.html',
                    controller: 'yearMonthlyNewsletterCtrl',
                    controllerAs: 'vm'
                })

                //年度月报简报列表理页面
                .state('monthlyFindByMultiyear', {
                    url: '/monthlyFindByMultiyear/:year',
                    templateUrl: rootPath + '/monthlyNewsletter/html/monthlyMultiyearList.html',
                    controller: 'monthlyMultiyearCtrl',
                    controllerAs: 'vm'
                })

                //编辑新建年度月报简报页面
                .state('monthlyMultiyearEdit', {
                    url: '/monthlyMultiyearEdit/:year/:id',
                    templateUrl: rootPath + '/monthlyNewsletter/html/monthlyMultiyearAdd.html',
                    params: {'year': (new Date()).getFullYear() + ''},
                    controller: 'monthlyMultiyearEditCtrl',
                    controllerAs: 'vm'
                })

                //月报简报查询页面
                .state('monthlyMultiyFileList', {
                    url: '/monthlyMultiyFileList',
                    templateUrl: rootPath + '/monthlyNewsletter/html/monthlyMultiyFileList.html',
                    controller: 'monthlyMultiFileCtrl',
                    controllerAs: 'vm'
                })

                //年度(中心文件)月报简报详细页面
                .state('monthlyMultiyView', {
                    url: '/monthlyMultiyView/:id',
                    templateUrl: rootPath + '/monthlyNewsletter/html/monthlyMultiyView.html',
                    controller: 'monthlyMultiyViewCtrl',
                    controllerAs: 'vm'
                })

                //月报简报历史数据列表
                .state('monthlyHistoryList', {
                    url: '/monthlyHistoryList',
                    templateUrl: rootPath + '/monthlyNewsletter/html/monthlyHistoryList.html',
                    controller: 'monthlyHistoryCtrl',
                    controllerAs: 'vm'
                })
                //新建月报简报历史数据
                .state('monthlyHistoryEdit', {
                    url: '/monthlyHistoryEdit/:id',
                    templateUrl: rootPath + '/monthlyNewsletter/html/monthlyHistoryAdd.html',
                    controller: 'monthlyHistoryEditCtrl',
                    controllerAs: 'vm'
                })
                //优秀评审报告填报
                .state('approveWindow', {
                    url: '/approveWindow/:signId',
                    templateUrl: rootPath + '/reviewProjectAppraise/html/approveWindow.html',
                    controller: 'approveWindowCtrl',
                    controllerAs: 'vm'
                })
                //优秀评审报告编辑
                .state('approveWindowEdit', {
                    url: '/approveWindowEdit/:id',
                    templateUrl: rootPath + '/reviewProjectAppraise/html/approveWindow.html',
                    controller: 'approveWindowEditCtrl',
                    controllerAs: 'vm'
                })

                //优秀评审报告列表
                .state('reviewProjectAppraiseList', {
                    url: '/reviewProjectAppraiseList',
                    params: {'id': ''},
                    templateUrl: rootPath + '/signView/html/list.html',
                    controller: 'reviewProjectAppraiseCtrl',
                    controllerAs: 'vm'
                })
                //评审项目评优列表
                .state('reviewProjectAppraiseEdit', {
                    url: '/reviewProjectAppraiseEdit',
                    templateUrl: rootPath + '/reviewProjectAppraise/html/edit.html',
                    controller: 'reviewProjectAppraiseEditCtrl',
                    controllerAs: 'vm'
                })
                //优秀评审报告审批列表
                .state('approveList', {
                    url: '/approveList',
                    templateUrl: rootPath + '/reviewProjectAppraise/html/approveList.html',
                    controller: 'approveListCtrl',
                    controllerAs: 'vm'
                })
                //E 月报简报管理

                //S 档案借阅管理
                //项目档案借阅录入页面
                .state('libraryAdd', {
                    url: '/libraryAdd',
                    params: {'id': ''},
                    templateUrl: rootPath + '/archivesLibrary/html/archivesLibraryAdd.html',
                    controller: 'archivesLibraryCtrl',
                    controllerAs: 'vm'
                })
                //档案借阅查询
                .state('archivesLibraryList', {
                    url: '/archivesLibraryList',
                    params: {'id': ''},
                    templateUrl: rootPath + '/archivesLibrary/html/archivesLibraryList.html',
                    controller: 'archivesLibraryListCtrl',
                    controllerAs: 'vm'
                })
                //档案借阅查看详情页
                .state('archivesLibraryView', {
                    url: '/archivesLibraryView/:id',
                    templateUrl: rootPath + '/archivesLibrary/html/archivesLibraryView.html',
                    controller: 'archivesLibraryViewCtrl',
                    controllerAs: 'vm'
                })
                //E 档案借阅管理

                //begin#dispatch
                /* .state('financialEdit', {
                 url: '/financialEdit/:signid',
                 templateUrl: rootPath + '/financialManager/html/addFinancial.html',
                 controller: 'financialManagerEditCtrl',
                 controllerAs: 'vm'
                 })*///end#财务管理
                //end#financial
                //系统安装包管理
                .state('pluginfile', {
                    url: '/pluginfile',
                    templateUrl: rootPath + '/file/html/pluginfile.html',
                    controller: 'pluginfileCtrl',
                    controllerAs: 'vm'
                })
                //个人中心
                .state('takeUser', {
                    url: '/takeUser',
                    templateUrl: rootPath + '/personalCenter/html/takeUser.html',
                    controller: 'takeUserCtrl',
                    controllerAs: 'vm'
                })
                //质量管理文件库
                .state('fileLibrary', {
                    url: '/fileLibrary',
                    templateUrl: rootPath + '/fileLibrary/html/fileLibrary.html',
                    controller: 'qualityCtrl',
                    controllerAs: 'vm'
                })
                .state('fileLibrary.fileList', { //文件列表
                    url: '/fileList/:parentId',
                    templateUrl: rootPath + '/fileLibrary/html/fileList.html',
                    controller: 'qualityListCtrl',
                    controllerAs: 'vm'
                })
                .state('fileLibrary.fileEdit', {//新建文件
                    url: '/fileEdit/:parentId/:fileId',
                    templateUrl: rootPath + '/fileLibrary/html/fileEdit.html',
                    controller: 'qualityEditCtrl',
                    controllerAs: 'vm'
                })
                //政策标准库
                .state('policyLibrary', {
                    url: '/policyLibrary',
                    templateUrl: rootPath + '/fileLibrary/html/policyLibrary.html',
                    controller: 'policyCtrl',
                    controllerAs: 'vm'
                })
                .state('policyLibrary.policyList', { //文件列表
                    url: '/policyList/:parentId',
                    templateUrl: rootPath + '/fileLibrary/html/policyList.html',
                    controller: 'policyListCtrl',
                    controllerAs: 'vm'
                })
                .state('documentLibrary', { //文件指标库
                    url: '/documentLibrary',
                    templateUrl: rootPath + '/fileLibrary/html/documentList.html',
                    controller: 'documentListCtrl',
                    controllerAs: 'vm'
                })
                .state('policyLibrary.policyEdit', {//新建文件
                    url: '/policyEdit/:parentId/:fileId',
                    templateUrl: rootPath + '/fileLibrary/html/policyEdit.html',
                    controller: 'policyEditCtrl',
                    controllerAs: 'vm'
                })
                //图书采购流程
                .state('bookBuyBusinessEdit', {
                    url: '/bookBuyBusinessEdit',
                    params: {'businessId': '', 'viewDetail': ''},
                    templateUrl: rootPath + '/bookBuyBusiness/html/bookBuyBusinessEdit.html',
                    controller: 'bookBuyBusinessEditCtrl',
                    controllerAs: 'vm'
                })
                .state('myBookBuyBusiness', {
                    url: '/myBookBuyBusiness',
                    templateUrl: rootPath + '/bookBuyBusiness/html/bookBuyBusinessList.html',
                    controller: 'bookBuyBusinessCtrl',
                    controllerAs: 'vm'
                })
                //图书查询
                .state('bookDetailList', {
                    url: '/bookDetailList',
                    templateUrl: rootPath + '/bookBuyBusiness/html/bookBuyList.html',
                    controller: 'bookBuyCtrl',
                    controllerAs: 'vm'
                })
                //图书详情页
                .state('bookBuyBusinessDetail', {
                    url: '/bookBuyBusinessDetail/:businessId/:viewDetail',
                    templateUrl: rootPath + '/bookBuyBusiness/html/bookBuyBusinessDetail.html',
                    controller: 'bookBuyBusinessDetailCtrl',
                    controllerAs: 'vm'
                })
                //借书查询
                .state('bookBorrowList', {
                    url: '/bookBorrowList',
                    templateUrl: rootPath + '/bookBuyBusiness/html/bookBorrowList.html',
                    controller: 'bookBorrowCtrl',
                    controllerAs: 'vm'
                })
                //固定资产申购流程
                .state('assertStorageBusinessEdit', {
                    url: '/assertStorageBusinessEdit/:businessId',
                    templateUrl: rootPath + '/assertStorageBusiness/html/assertStorageBusinessEdit.html',
                    controller: 'assertStorageBusinessEditCtrl',
                    controllerAs: 'vm'
                })
                .state('myAssertStorageBusiness', {
                    url: '/myAssertStorageBusiness',
                    templateUrl: rootPath + '/assertStorageBusiness/html/assertStorageBusinessList.html',
                    controller: 'assertStorageBusinessCtrl',
                    controllerAs: 'vm'
                })
                .state('assertApplyUse', {
                    url: '/assertApplyUse',
                    templateUrl: rootPath + '/userAssertDetail/html/userAssertDetailAdd.html',
                    controller: 'userAssertDetailAddCtrl',
                    controllerAs: 'vm'
                })
                //课题研究流程
                .state('addTopic', {
                    url: '/topicInfo/:id',
                    templateUrl: rootPath + '/topicInfo/html/add.html',
                    controller: 'topicAddCtrl',
                    controllerAs: 'vm'
                })
                //课题结题
                .state('editTopic', {
                    url: '/topicEditInfo/:id/:curNodeId',
                    templateUrl: rootPath + '/topicInfo/html/edit.html',
                    controller: 'topicAddCtrl',
                    controllerAs: 'vm'
                })
                .state('myTopic', {
                    url: '/myTopic',
                    templateUrl: rootPath + '/topicInfo/html/myList.html',
                    controller: 'myTopicCtrl',
                    controllerAs: 'vm'
                })
                .state('queryTopic', {
                    url: '/queryTopic',
                    templateUrl: rootPath + '/topicInfo/html/queryTopic.html',
                    controller: 'queryTopicCtrl',
                    controllerAs: 'vm'
                })
                .state('topicDetail', {
                    url: '/topicDetail/:businessId/:processInstanceId',
                    templateUrl: rootPath + '/topicInfo/html/topicDetail.html',
                    controller: 'topicDetailCtrl',
                    controllerAs: 'vm'
                })
                //表头设置
                .state('header', {
                    url: '/header',
                    templateUrl: rootPath + '/header/html/list.html',
                    controller: 'headerCtrl',
                    controllerAs: 'vm'
                })
                .state('headerEdit', {
                    url: '/headerEdit/:headerType',
                    templateUrl: rootPath + '/header/html/selectHeader.html',
                    controller: 'headerEditCtrl',
                    controllerAs: 'vm'
                })
                .state('statisticalList', {
                    url: '/statisticalList/:headerType',
                    templateUrl: rootPath + '/header/html/statisticalList.html',
                    controller: 'statisticalListCtrl',
                    controllerAs: 'vm'
                })
                //统计图表
                .state('statistical', {
                    url: '/statistical',
                    templateUrl: rootPath + "/statistical/html/list.html",
                    controller: 'statisticalCtrl',
                    controllerAs: 'vm'
                })
                .state('editWorkPlan', {
                    url: '/editWorkPlan/:topicId',
                    templateUrl: rootPath + '/workPlan/html/edit.html',
                    controller: 'workPlanEditCtrl',
                    controllerAs: 'vm'
                })
                .state('editFiling', {
                    url: '/editFiling/:topicId/:curNodeId',
                    templateUrl: rootPath + '/filing/html/edit.html',
                    controller: 'filingEditCtrl',
                    controllerAs: 'vm'
                })
                //系统管理员业务
                //评审费发放
                .state('reviewFee', {
                    url: '/reviewFee',
                    templateUrl: rootPath + "/reviewFee/html/list.html",
                    controller: 'reviewFeeCtrl',
                    controllerAs: 'vm'
                })
                //项目专家抽取修改
                .state('signwork', {
                    url: '/signwork/:signid',
                    templateUrl: rootPath + "/signwork/html/list.html",
                    controller: 'signworkCtrl',
                    controllerAs: 'vm'
                })
                //待办的附件右边列表页
                .state('signFlowDeal.fileList', { //文件列表
                    url: '/fileList/:id/:type',
                    templateUrl: rootPath + '/file/html/rightList.html',
                    controller: 'fileListCtrl',
                    controllerAs: 'vm'
                })
                //在办的附件右边列表页
                .state('signFlowDetail.fileList', { //文件列表
                    url: '/fileList/:id/:type',
                    templateUrl: rootPath + '/file/html/rightList.html',
                    controller: 'fileListCtrl',
                    controllerAs: 'vm'
                })
                //已办结的附件右边列表页
                .state('endSignDetail.fileList', { //文件列表
                    url: '/fileList/:id/:type',
                    templateUrl: rootPath + '/file/html/rightList.html',
                    controller: 'fileListCtrl',
                    controllerAs: 'vm'
                })
                //详细信息的附件右边列表页
                .state('signDetails.fileList', { //文件列表
                    url: '/fileList/:id/:type',
                    templateUrl: rootPath + '/file/html/rightList.html',
                    controller: 'fileListCtrl',
                    controllerAs: 'vm'
                })

                //课题研究的附件右边列表页
                .state('flowDeal.fileList', { //文件列表
                    url: '/flowDeal/:id/:type',
                    templateUrl: rootPath + '/file/html/rightList.html',
                    controller: 'fileListCtrl',
                    controllerAs: 'vm'
                })
                //维护项目附件右边列表页
                .state('MaintainProjectEdit.fileList', { //文件列表
                    url: '/MaintainProjectEdit/:id/:type',
                    templateUrl: rootPath + '/file/html/rightList.html',
                    controller: 'fileListCtrl',
                    controllerAs: 'vm'
                })

                //项目查询统计图表分析
                .state('signChart', {
                    url: '/signChart',
                    templateUrl: rootPath + "/signView/html/signChart.html",
                    controller: 'signChartCtrl',
                    controllerAs: 'vm'
                })
                /********************以下是项目维护***************************/
                .state('MaintainProjectList', {	//维护项目列表
                    url: '/MaintainProjectList',
                    templateUrl: rootPath + '/maintainProject/html/MaintainProjectList.html',
                    controller: 'MaintainProjectCtrl',
                    controllerAs: 'vm'
                })
                .state('MaintainProjectEdit', {	//维护项目的编辑
                    url: '/MaintainProjectEdit/:signid/:processInstanceId',
                    templateUrl: rootPath + '/maintainProject/html/MaintainProjectEdit.html',
                    controller: 'MaintainProjectEditCtrl',
                    controllerAs: 'vm'
                })
                .state('reviewWorkday', {	//评审工作日维护
                    url: '/reviewWorkday/:signid',
                    templateUrl: rootPath + '/maintainProject/html/reviewWorkday.html',
                    controller: 'reviewWorkdayCtrl',
                    controllerAs: 'vm'
                })
                .state('reviewOpinion', {//修改意见
                    url: '/reviewOpinion/:signid/:processInstanceId',
                    templateUrl: rootPath + "/maintainProject/html/reviewOpinion.html",
                    controller: 'reviewOpinionCtrl',
                    controllerAs: 'vm'
                })
                .state('maintainExpertScore', {//专家评分
                    url: '/maintainExpertScore/:signid',
                    templateUrl: rootPath + "/maintainProject/html/maintainExpertScore.html",
                    controller: 'maintainExpertScoreCtrl',
                    controllerAs: 'vm'
                })
                .state('maintainExpertPayment', {//评审费发放
                    url: '/maintainExpertPayment/:signid',
                    templateUrl: rootPath + "/maintainProject/html/maintainExpertPayment.html",
                    controller: 'maintainExpertPaymentCtrl',
                    controllerAs: 'vm'
                })
                .state('maintainExpertConfirm', {//修改确定的专家
                    url: '/maintainExpertConfirm/:signid',
                    templateUrl: rootPath + "/maintainProject/html/maintainExpertConfirm.html",
                    controller: 'maintainExpertConfirmCtrl',
                    controllerAs: 'vm'
                })
                // begin 党务管理
                .state('partyEdit', {//党员信息录入
                    url: '/partyEdit/:id',
                    templateUrl: rootPath + "/partyManager/html/partyEdit.html",
                    controller: 'partyEditCtrl',
                    controllerAs: 'vm'
                })
                .state('partyList', {//党员信息查询列
                    url: '/partyList',
                    templateUrl: rootPath + "/partyManager/html/partyList.html",
                    controller: 'partyListCtrl',
                    controllerAs: 'vm'
                })
                .state('partyMeetList', {//党员会议列表
                    url: '/partyMeetList',
                    templateUrl: rootPath + "/partyMeet/html/partyMeetList.html",
                    controller: 'partyMeetingCtrl',
                    controllerAs: 'vm'
                })
                .state('addPartyMeet', {//党员会议添加编辑页
                    url: '/addPartyMeet/:id',
                    templateUrl: rootPath + "/partyMeet/html/addPartyMeeting.html",
                    controller: 'partyMeetingCtrl',
                    controllerAs: 'vm'
                })
                .state('partyMeetDetail', {//党员会议添加编辑页
                    url: '/partyMeetDetail/:id',
                    templateUrl: rootPath + "/partyMeet/html/partyMeetDetail.html",
                    controller: 'partyMeetingCtrl',
                    controllerAs: 'vm'
                })
                // end 党务管理

                //begin 短信模块
                .state('msgEdit', {
                    url: '/msgEdit',
                    templateUrl: rootPath + "/message/html/edit.html",
                    controller: 'msgEditCtrl',
                    controllerAs: 'vm'
                })
                //end 短信编辑
                //begin 博士后基地模块列表
                .state('postdoctoralBaseList', {
                    url: '/postdoctoralBaseList',
                    templateUrl: rootPath + "/postdoctoralBase/html/postdoctoralBaseList.html",
                    controller: 'postdoctoralBaseCtrl',
                    controllerAs: 'vm'
                })
                .state('postdoctoralBaseAdd', {
                    url: '/postdoctoralBaseAdd/:id',
                    templateUrl: rootPath + "/postdoctoralBase/html/postdoctoralBaseAdd.html",
                    controller: 'postdoctoralBaseCtrl',
                    controllerAs: 'vm'
                })
                .state('postdoctoralBaseDetail', {
                    url: '/postdoctoralBaseDetail/:id',
                    templateUrl: rootPath + "/postdoctoralBase/html/postdoctoralBaseDetail.html",
                    controller: 'postdoctoralBaseCtrl',
                    controllerAs: 'vm'
                })
                .state('postdoctoralStaffList', {
                    url: '/postdoctoralStaffList',
                    templateUrl: rootPath + "/postdoctoralStaff/html/postdoctoralStaffList.html",
                    controller: 'postdoctoralStaffCtrl',
                    controllerAs: 'vm'
                })
                .state('postdoctoralStaffAdd', {
                    url: '/postdoctoralStaffAdd/:id',
                    templateUrl: rootPath + "/postdoctoralStaff/html/postdoctoralStaffAdd.html",
                    controller: 'postdoctoralStaffCtrl',
                    controllerAs: 'vm'
                })

                .state('postdoctoralStaffDetail', {
                    url: '/postdoctoralStaffDetail/:id',
                    templateUrl: rootPath + "/postdoctoralStaff/html/postdoctoralStaffDetail.html",
                    controller: 'postdoctoralStaffCtrl',
                    controllerAs: 'vm'
                })
                .state('postdoctoralPopStaffList', {
                    url: '/postdoctoralPopStaffList',
                    templateUrl: rootPath + "/postdoctoralStaff/html/postdoctoralPopStaffList.html",
                    controller: 'postdoctoralPopStaffCtrl',
                    controllerAs: 'vm'
                })
                .state('postdoctoralPopStaffAdd', {
                    url: '/postdoctoralPopStaffAdd/:id',
                    templateUrl: rootPath + "/postdoctoralStaff/html/postdoctoralPopStaffAdd.html",
                    controller: 'postdoctoralPopStaffCtrl',
                    controllerAs: 'vm'
                })
                .state('postdoctoralPopStaffDetail', {
                    url: '/postdoctoralPopStaffDetail/:id',
                    templateUrl: rootPath + "/postdoctoralStaff/html/postdoctoralPopStaffDetail.html",
                    controller: 'postdoctoralStaffCtrl',
                    controllerAs: 'vm'
                })
                .state('postdoctoralPopStaff', {
                    url: '/postdoctoralPopStaff/:id/:name',
                    templateUrl: rootPath + "/postdoctoralStaff/html/postdoctoralPopStaff.html",
                    controller: 'postdoctoralStaffCtrl',
                    controllerAs: 'vm'
                })
                //博士后基地课题
                .state('postdoctoralSubjectList', {
                    url: '/postdoctoralSubjectList',
                    templateUrl: rootPath + "/postdoctorSubject/html/subjectList.html",
                    controller: 'postdoctorSubjectCtrl',
                    controllerAs: 'vm'
                })
                .state('postdoctoralSubjectAdd', {
                    url: '/postdoctoralSubjectAdd/:id',
                    templateUrl: rootPath + "/postdoctorSubject/html/postdoctoralSubjectAdd.html",
                    controller: 'postdoctorSubjectEditCtrl',
                    controllerAs: 'vm'
                })
                .state('postdoctoralSubjectDetail', {
                    url: '/postdoctoralSubjectDetail/:id',
                    templateUrl: rootPath + "/postdoctorSubject/html/postdoctoralSubjectDetail.html",
                    controller: 'postdoctorSubjectEditCtrl',
                    controllerAs: 'vm'
                })

            //end 博士后基地结束
        }]).run(function ($rootScope, $http, $state, $stateParams, bsWin) {
        $rootScope.rootPath = rootPath;
        $rootScope.DICT = DICTOBJ;
        //kendo 语言
        kendo.culture("zh-CN");
        common.getTaskCount({$http: $http});

        //获取表头名称
        $rootScope.getTBHeadName = function (stageName, isAdvanced, type) {
            //项目建议书、可行性  提前介入称为评估论证
            if (isAdvanced && isAdvanced == '9' && (stageName == '项目建议书' || stageName == '可行性研究报告')) {
                return "评估论证" + type;
            } else {
                if (stageName) {
                    if (stageName == '项目概算') {
                        return "概算审核" + type;
                    }
                    return stageName + type;
                } else {
                    return type;
                }
            }
        }

        //实现返回的函数
        $rootScope.$on("$stateChangeSuccess", function (event, toState, toParams, fromState, fromParams) {
            $rootScope.previousState_name = fromState.name;
            $rootScope.previousState_params = fromParams;
            if (fromState.name == 'signFlowDeal' || fromState.name == 'flowDeal') {
                $rootScope.$flowUrl = fromState.name;
                $rootScope.$flowParams = fromParams;
            }
        });
        $rootScope.back = function () {
            if ($rootScope.previousState_name) {
                $state.go($rootScope.previousState_name, $rootScope.previousState_params);
            } else {
                $state.go('welcome');
            }
        };
        $rootScope.backtoflow = function () {
            if ($rootScope.$flowUrl) {
                $state.go($rootScope.$flowUrl, $rootScope.$flowParams);
            } else {
                $state.go('gtasks');
            }
        };

        $rootScope.topSelectChange = function (dictKey, dicts, type) {
            if (dicts != undefined) {
                for (var i = 0; i < dicts.length; i++) {
                    //根据code查询
                    if (type && type == "code") {
                        if (dicts[i].dictCode == dictKey) {
                            return dicts[i].dicts;
                        }
                        //默认根据name查询
                    } else {
                        if (dicts[i].dictName == dictKey) {
                            return dicts[i].dicts;
                        }
                    }
                }
            }
        }

        //S_初始化input框的值
        $rootScope.initInputValue = function ($event, defaultValue) {
            var checkbox = $event.target;
            var checked = checkbox.checked;
            if (checked && !defaultValue) {
                return 1;
            } else {
                return defaultValue;
            }
        }//E_initInputValue

        //用于循环数字用
        $rootScope.range = function (n) {
            if (n) {
                return new Array(n);
            }
        }

        /**
         * 控制textarea输入长度限制
         * @param key
         * @param maxnumber
         * @param msgId
         * @returns {*}
         */
        $rootScope.countCharacter = function (key, maxnumber, msgId) {
            var writeNum = key ? key.length : 0;
            var resultMsg = "<span style='font-size:12px;'>（最多允许输入" + maxnumber + "个字";
            if (writeNum > 0) {
                var lessNum = (maxnumber - writeNum) > 0 ? (maxnumber - writeNum) : 0;
                resultMsg += ",还能输入<font color='red'>" + lessNum + "</font>个字";
                if (lessNum == 0) {
                    key = key.substr(0, maxnumber);
                }
            }
            resultMsg += "</span>)";
            $("#" + msgId).html(resultMsg);
            return key;
        }

        //文件预览
        $rootScope.previewFile = function (sysFileId, fileType) {
            if (sysFileId) {
                var url, width, height;
                if ("pdf" == fileType) {
                    url = rootPath + "/contents/libs/pdfjs-dist/web/viewer.html?file=" + rootPath + "/file/preview/" + sysFileId + "&version=" + (new Date()).getTime() + "";
                } else if ("image" == fileType) {
                    url = rootPath + "/file/preview/" + sysFileId + "?version=" + (new Date()).getTime() + "";
                }
                if (url) {
                    var httpOptions = {
                        method: 'post',
                        url: rootPath + "/file/fileSysCheck",
                        params: {
                            sysFileId: sysFileId
                        }
                    }
                    var httpSuccess = function success(response) {
                        $("#iframePreview").attr("src", "");
                        if (response.data.flag || response.data.reCode == 'ok') {
                            $("#iframePreview").attr("src", url);
                            $("#previewModal").kendoWindow({
                                width: "1050px",
                                height: "730px",
                                title: "",
                                visible: false,
                                modal: true,
                                closable: true,
                                actions: ["Pin", "Minimize", "Maximize", "Close"]
                            }).data("kendoWindow").center().open();
                        } else {
                            bsWin.error(response.data.reMsg);
                        }
                    };
                    common.http({
                        $http: $http,
                        httpOptions: httpOptions,
                        success: httpSuccess
                    });
                } else {
                    bsWin.alert("该文件不支持在线预览和在线编辑");
                }
            } else {
                bsWin.alert("参数不正确，无法在线预览");
            }
        }

        //文件在线编辑
        $rootScope.editFile = function (sysFileId, fileType) {
            var url = rootPath + "/file/editFile?sysFileId=" + sysFileId + "&fileType=" + fileType + "&version=" + (new Date()).getTime();
            window.open(url, "_blank");
        }

        //打印预览，生成word模板直接预览
        $rootScope.printFile = function (businessId, businessType, stageType) {
            if (!businessId || !businessType || !stageType) {
                bsWin.alert("没有项目阶段，找不到对应的打印模板，打印预览失败！");
            } else {
                var url = rootPath + "/contents/libs/pdfjs-dist/web/viewer.html?version=" + (new Date()).getTime() + "&file=" + rootPath + "/file/printPreview/" + businessId + "/" + businessType + "/" + stageType;
                $("#iframePreview").attr("src", url);
                $("#previewModal").kendoWindow({
                    width: "80%",
                    height: "730px",
                    title: "",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            }
        }
        //评审费打印。判断开户行和银行账户信息完不完整
        $rootScope.isBankCard = function (signid, payData) {
            var flag = false;
            if (payData == undefined) {
                flag = true;
                bsWin.alert("评审费未发放，不能进行打印操作！");
            } else {
                var isCheck = $("input[name = 'selectExpert']:checked");
                if(!isCheck || isCheck.length == 0 ){
                    bsWin.alert("请选择数据！");
                }else{
                    var ids = [];
                    for (var i = 0; i < isCheck.length; i++) {
                        var expertSelectedDtoList = JSON.parse(isCheck[i].value)  ;
                        ids.push(expertSelectedDtoList.id);
                        //必须是确认参与的专家
                        if (expertSelectedDtoList.isConfrim == "9"
                            && expertSelectedDtoList.isJoin == "9") {


                            if (expertSelectedDtoList.expertDto.bankAccount == undefined
                                || expertSelectedDtoList.expertDto.openingBank == undefined) {

                                flag = true;
                                bsWin.alert("专家的开户行和银行账户信息不全，请填写完整！");
                                break;
                            }

                            if (expertSelectedDtoList.reviewTaxes == undefined) {
                                flag = true;
                                bsWin.alert("评审费未计纳税额，不能进行打印操作！");
                                break;
                            }
                        }
                    }
                    var idStr = ids.join(',');

                    if (!flag) {
                        $rootScope.printFile(idStr, 'SIGN_EXPERT', 'SIGN_EXPERT_PAY');
                    }
                }

            }

        }

        /**
         * 导出功能
         */
        $rootScope.exportInfo = function (businessId, businessType, stageType, fileName) {
            if (!businessId || !businessType || !stageType) {
                bsWin.alert("没有项目阶段，找不到对应的导出模板，导出失败！");
            } else {
                var httpOptions = {
                    method: 'post',
                    url: rootPath + "/file/exportInfo",
                    params: {
                        "businessId": businessId,
                        "businessType": businessType,
                        "stageType": stageType,
                        "fileName": fileName
                    }
                }
                var httpSuccess = function success(response) {
                    fileName = fileName + ".doc";
                    var fileType = "msword";
                    common.downloadReport(response.data, fileName, fileType);
                };
                common.http({
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
            }
        }

        /**
         * 返回时列表状态不改变。
         * @type {{}}
         */
        //状态
        $rootScope.view = {};
        //保存查询条件
        $rootScope.storeView = function (storeName, params) {
            $rootScope.view[storeName] = params;
        }
    });

})();

/**
 *定配置angular应用指令
 * Created by Administrator on 2017/9/7 0007.
 */
(function(){
    'use strict';
    var appModule = angular.module('app');
    //返回
    appModule.directive('goBack', function() {
        return {
            restrict : 'AE',
            template : '<a class="btn btn-sm btn-primary" href="javascript:void(0);" ng-click="back();"><span class="glyphicon glyphicon-chevron-left"></span>返回</a>'
        };
    });
    //返回项目签收流程
    appModule.directive('goBackFlow', function() {
        return {
            restrict : 'AE',
            template : '<button class="btn btn-sm btn-danger" ng-click="backtoflow();"><span class="glyphicon glyphicon-chevron-left"></span>返回流程</button>'
        };
    });
    //流程上传和查看附件按钮
    appModule.directive('flowFileButton', function() {
        return {
            restrict : 'AE',
            template : '<button class="btn btn-sm btn-primary" ng-click="vm.clickUploadBt();" id="upload_file_bt">上传附件</button> <button class="btn btn-sm btn-primary" ng-click="vm.clickDetailBt();" id="detail_file_bt">查看附件</button>'
        };
    });
})();

(function () {
    'use strict';

    angular.module('app').controller('achievementListCtrl', achievementList);

    achievementList.$inject = ['$location', 'achievementSvc','$state','$http','bsWin'];

    function achievementList($location, achievementSvc,$state,$http,bsWin) {
        var vm = this;
        vm.title = '业绩统计';
        vm.model={};
        vm.mainDoc = {};
        vm.assistDoc = {};
        vm.model.year = $state.params.year;
        vm.model.quarter = $state.params.quarter;
        vm.conMaxIndex = 0;        //条件号
        vm.conditions = [];        //条件列表
        activate(true);
        function activate(firstLoad) {
            achievementSvc.achievementSum(vm,function (data) {
                if(data){
                    var level = data.level;
                    if(level == 0){
                        //加载前，先初始化值
                        vm.conditions = [];
                        //普通用户
                        vm.orgAchievement =  data.userSum;
                        vm.userId = vm.orgAchievement.userId;
                        achievementSvc.findTopicDetail(vm,function(data){
                            if(data && data.length > 0){
                                vm.conditions = data;
                                for(var i=0;i<vm.conditions.length;i++){
                                    vm.conditions[i]["sort"]= (i+1);
                                }
                            }
                        });
                    }else if(level == 1 || level == 2){
                        //如果是主任或者副主任
                        vm.comprehensive = data.orgDeptCount["综合部"];
                        vm.evaluateOne = data.orgDeptCount["评估一部"];
                        vm.evaluateTwo = data.orgDeptCount["评估二部"];
                        vm.budgetaryOne = data.orgDeptCount["概算一部"];
                        vm.budgetaryTwo = data.orgDeptCount["概算二部"];
                        vm.evaluateOneGroup = data.orgDeptCount["评估一部信息化组"];

                        //部门员工业绩统计明细
                        vm.achievementDeptDetailList = data.orgDeptDetailList;
                    }else if(level == 3 || level == 4){
                        //部长或者组长
                        vm.orgAchievement =  data.orgDeptSum;
                    }

                    vm.level = data.level;
                    //分管的部门列表
                    if(firstLoad){
                        vm.orgDeptList = data.orgDeptList;
                        if(vm.orgDeptList ){
                            vm.model.deptNames = "";
                            vm.model.deptIds = "";
                            for(var i=0,l=vm.orgDeptList.length;i<l;i++){
                                if(i > 0){
                                    vm.model.deptNames += ",";
                                    vm.model.deptIds += ",";
                                }
                                vm.model.deptNames += vm.orgDeptList[i].name;
                                vm.model.deptIds += vm.orgDeptList[i].id;
                            }
                        }
                    }
                }
            })
        }

        /**
         * 主办人评审项目一览表
         */
        vm.showMainDocDetail = function () {
            $("#mainDocDetail").kendoWindow({
                width: "80%",
                height: "680px",
                title: "主办人评审项目一览表",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        /**
         * 协办人评审项目一览表
         */
        vm.showAssistDocDetail = function () {
            $("#assistDocDetail").kendoWindow({
                width: "80%",
                height: "680px",
                title: "协办人评审项目一览表",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        vm.countAchievementDetail = function () {
            if(vm.level !=0){
                //初始化部门工作业绩
                var orgCheck = $("input[name='orgDept']:checked");
                var ids = [];
                $.each(orgCheck, function (i, obj) {
                    ids.push(obj.value);
                });
                vm.model.deptIds = ids.join(",");
            }
            //直接调用查询
            activate(false);
        }

        /**
         * 课题业务
         */
        vm.showTopicDetail = function () {
            $("#topicDetail").kendoWindow({
                width: "80%",
                height: "680px",
                title: "课题研究及其他业务工作一览表",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        //添加课题业务信息
        vm.addTopic = function () {
            vm.condition = {};
            if(vm.conditions.length == 0){
                vm.condition.sort = vm.conMaxIndex+1;
                vm.condition.endTime = new Date();
            }else{
                vm.conMaxIndex = vm.conditions.length;
                vm.condition.sort = vm.conditions.length+1;
                vm.condition.endTime = new Date();
            }
            vm.conditions.push(vm.condition);
            vm.conMaxIndex++;
        }

        //保存课题业务信息
        vm.saveTopic = function () {
            if (buildCondition()) {
                achievementSvc.saveTopicDetailList(vm.conditions,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        vm.conditions = data.reObj;
                        for(var i=0;i<vm.conditions.length;i++){
                            vm.conditions[i]["sort"]= (i+1);
                        }
                        bsWin.success("保存成功！");
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            }
        }

        //删除课题业务信息
        vm.removeTopic = function () {
            var isCheck = $("#topicform input[name='topicInfo']:checked");
            if (isCheck.length > 0) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "删除数据不可恢复，确定删除么？",
                    onOk: function () {
                        $('.confirmDialog').modal('hide');
                        var ids = [];
                        for (var i = 0; i < isCheck.length; i++) {
                            for(var k = 0; k < vm.conditions.length; k++){
                                var con = vm.conditions[k];
                                if (isCheck[i].value == con.sort) {
                                    if (con.id) {
                                        ids.push(con.id);
                                    }else{
                                        vm.conditions.splice(k, 1);
                                        $("#conTr"+con.sort).remove();
                                        break;
                                    }
                                }
                            }
                        }
                        if(ids.length > 0){
                            achievementSvc.deleteTopicMaintainDel(ids.join(","),function(data){
                                if(data.flag || data.reCode == 'ok'){
                                    bsWin.success("操作成功！");
                                    for(var i = 0; i < ids.length; i++ ){
                                        for(var k = 0; k < vm.conditions.length; k++){
                                            var con = vm.conditions[k];
                                            if (ids[i] == con.id) {
                                                vm.conditions.splice(k, 1);
                                                $("#conTr"+con.sort).remove();
                                                break;
                                            }
                                        }
                                    }
                                }else{
                                    bsWin.error(data.reMsg);
                                }
                            });
                        }
                    },
                });
            }else{
                bsWin.alert("请选择要删除的合同信息！");
            }
        }

        function buildCondition() {
            common.initJqValidation($('#topicform'));
            var isValid = $('#topicform').valid();
            if (isValid) {
                if (vm.conditions.length > 0) {
                    var validateResult = true;
                    vm.conditions.forEach(function (p, number) {
                        p.businessType = $("#businessType" + p.sort).val();
                        p.topicName = $("#topicName" + p.sort).val();
                        p.endTime = $("#endTime" + p.sort).val();
                    });
                    return validateResult;
                } else {
                    bsWin.error("没有分录数据，无法保存！");
                    return false;
                }
            }else{
                bsWin.alert("页面未填报完整或者为正确，请检查！");
                return false;
            }
        }

        /**
         * 部门或者个人的业绩统计明细
         * @param userId
         */
        vm.showAchievementDetail = function (id,level,orgName,userName) {
            vm.achievementDetail = {};
            achievementSvc.findAchievementDetail(vm.model,id,level,function(data){
                vm.showDetailType = level;
                vm.showOrgName = orgName;
                vm.showUserName = userName;
                if(level==3){
                    vm.achievementDetail = data.orgDeptSum;
                    $("#achievementDetail").kendoWindow({
                        width: "75%",
                        height: "500px",
                        title: "评审中心员工工作业绩统计表",
                        visible: false,
                        modal: true,
                        closable: true,
                        actions: ["Pin", "Minimize", "Maximize", "Close"]
                    }).data("kendoWindow").center().open();

                }else if(level == 0){
                    vm.achievementDetail = data.userSum;
                    //个人业绩统计信息还包括课题信息
                    vm.userId = id;
                    achievementSvc.findTopicDetail(vm,function(data){
                        if(data != undefined){
                            vm.conditions = data;
                            for(var i=0;i<vm.conditions.length;i++){
                                vm.conditions[i]["sort"]= (i+1);
                            }
                            $("#achievementDetail").kendoWindow({
                                width: "75%",
                                height: "700px",
                                title: "评审中心员工工作业绩统计表",
                                visible: false,
                                modal: true,
                                closable: true,
                                actions: ["Pin", "Minimize", "Maximize", "Close"]
                            }).data("kendoWindow").center().open();
                        }
                    });
                }
            });


        }

        /**
         * 部门业绩明细
         */
        /*vm.showAchievementDetail = function () {
            //初始化部门工作业绩
            var orgCheck = $("input[name='orgDept']:checked");
            var ids = [];
            var deptNamesArr = [];
            $.each(orgCheck, function (i, obj) {
                ids.push(obj.value);
                var objR = $(obj);
                deptNamesArr.push(objR.attr("tit"));
            });
            vm.model.deptIds = ids.join(",");
            vm.model.deptNames = deptNamesArr.join(",");
            achievementSvc.achievementDeptDetail(vm,function (data) {
                if(data.flag || data.reCode == 'ok'){
                    vm.achievementDeptDetailList = data.reObj.achievementDeptDetailList;
                    $("#achievementDeptDetail").kendoWindow({
                        width: "80%",
                        height: "680px",
                        title: "部门工作业绩统计表",
                        visible: false,
                        modal: true,
                        closable: true,
                        actions: ["Pin", "Minimize", "Maximize", "Close"]
                    }).data("kendoWindow").center().open();
                }
            })
        }*/

        /***
         * 初始化业绩汇总
         */
        vm.initAchievementSum = function ($event) {
            //初始化部门工作业绩
            var orgCheck = $("input[name='orgDept']:checked");
            var orgIds = [];
            var deptNamesArr = [];
            $.each(orgCheck, function (i, obj) {
                orgIds.push(obj.value);
                var objR = $(obj);
                deptNamesArr.push(objR.attr("tit"));

            });
            if(orgIds.length == 0){
                var checkbox = $event.target;
                bsWin.alert("至少需要选择一个部门！");
                checkbox.checked = true;
                return;
            }
            vm.model.deptIds = orgIds.join(",");
            vm.model.deptNames = deptNamesArr.join(",");
            activate(false);
        }

        /**
         * 员工业绩汇总导出
         */
        vm.exportAchievementDetail = function () {
            achievementSvc.exportAchievementDetail(vm)
        }

        /**
         * 部门业绩汇总导出（主任、分管主任角色导出）
         */
        vm.exportDeptAchievementDetail = function () {
            achievementSvc.exportDeptAchievementDetail(vm);
        }

        /**
         * 课题维护导出(课题维护不用导出)
         */
       /* vm.exportTopicMaintainInfo = function () {
            achievementSvc.exportTopicMaintainInfo(vm);
        }*/

        /**
         * 主/协办项目一览表导出
         */
        vm.exportProReview = function (isMainPro) {
            achievementSvc.exportProReview(vm,isMainPro);
        }

        /**
         * 统计统计的部门是否包含校验的部门
         * @param deptNames
         * @param checkDeptName
         * @returns {boolean}
         */
        vm.checkIsHaveDept = function(deptNames,checkDeptName){
            var deptNameArr = deptNames.split(",");
            for(var i=0,l=deptNameArr.length;i<l;i++){
                if(deptNameArr[i] == checkDeptName){
                    return true;
                }
            }
            return false;
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('achievementSvc', achievement);

    achievement.$inject = ['$http'];

    function achievement($http) {
        var service = {
            achievementSum: achievementSum, //业绩汇总
            findAchievementDetail: findAchievementDetail, //部门业绩明细
            saveTopicDetailList: saveTopicDetailList,     // 保存课题明细
            deleteTopicMaintainDel: deleteTopicMaintainDel,//删除课题明细
            findTopicDetail: findTopicDetail,              //初始化课题明细
            exportAchievementDetail: exportAchievementDetail,  //员工业绩汇总导出
            exportDeptAchievementDetail: exportDeptAchievementDetail,  //部门业绩汇总导出（）
            exportTopicMaintainInfo: exportTopicMaintainInfo, //课题维护导出
            exportProReview: exportProReview //主办协办项目导出
        };
        return service;

        //S_业绩汇总
        function achievementSum(vm, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/getAchievementSum",
                data: vm.model
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_

        function findAchievementDetail(model, id, level, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/findAchievementDetail",
                params: {
                    yearName: model.year,
                    quarter: model.quarter,
                    id: id,
                    level: level
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_


        //S_保存课题业务
        function saveTopicDetailList(conditions, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/topicInfo/saveTopicDetailList",
                headers: {
                    "contentType": "application/json;charset=utf-8"  //设置请求头信息
                },
                traditional: true,
                dataType: "json",
                data: angular.toJson(conditions)//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        /**
         * 删除课题信息
         * @param delIds
         * @param isCommit
         * @param callBack
         */
        function deleteTopicMaintainDel(delIds, callBack) {
            var httpOptions = {
                method: 'delete',
                url: rootPath + "/topicInfo/topicMaintainDel",
                params: {
                    ids: delIds
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
            });
        }


        //S_初始化课题详情信息
        function findTopicDetail(vm, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/topicInfo/findTopicDetail",
                params: {
                    userId: vm.userId,
                    yearName:vm.model.year,
                    quarter:vm.model.quarter
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function () {
                }
            });
        }

        //员工业绩汇总导出
        function exportAchievementDetail(vm) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/exportUserAchievement",
                params: {
                    yearName:vm.model.year,
                    quarter:vm.model.quarter
                }
            }
            var httpSuccess = function success(response) {
                var fileName = "员工业绩统计表.doc";
                var fileType = "msword";
                common.downloadReport(response.data, fileName, fileType);
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //部门业绩汇总导出
        function exportDeptAchievementDetail(vm) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/exportDeptAchievementSum",
                data: vm.model
            }
            var httpSuccess = function success(response) {
                var fileName = "部门业绩统计表.doc";
                var fileType = "msword";
                common.downloadReport(response.data, fileName, fileType);
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //部门业绩汇总导出
        function exportDeptAchievementDetail(vm) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/exportDeptAchievementSum",
                data: vm.model
            }
            var httpSuccess = function success(response) {
                var fileName = "部门业绩统计表.doc";
                var fileType = "msword";
                common.downloadReport(response.data, fileName, fileType);
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //课题维护导出
        function exportTopicMaintainInfo(vm) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/exportTopicMaintainInfo",
                params: {userId: vm.userId}
            };
            var httpSuccess = function success(response) {
                var fileName = "课题研究一览表.doc";
                var fileType = "msword";
                common.downloadReport(response.data, fileName, fileType);
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //主/协办项目一览表
        function exportProReview(vm,isMain) {
            var fileName1 = "";
            if (isMain == '9') {
                fileName1 = "主办项目一览表.doc";
            } else {
                fileName1 = "协办项目一览表.doc";
            }
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/exportProReview",
                params: {
                    yearName:vm.model.year,
                    quarter:vm.model.quarter,
                    level:vm.level,
                    isMainUser:isMain
                }
            }
            var httpSuccess = function success(response) {
                var fileName = fileName1;
                var fileType = "msword";
                common.downloadReport(response.data, fileName, fileType);
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('addRegisterFileCtrl', addRegisterFile);

    addRegisterFile.$inject = ['bsWin', 'addRegisterFileSvc', '$state'];

    function addRegisterFile(bsWin, addRegisterFileSvc, $state) {
        var vm = this;
        vm.title = '登记补充资料';
        vm.sign = {};//收文对象
        vm.addRegisters = [];//登记补充材料集合
        vm.businessId = $state.params.businessId;

        //新建登记补充材料
        vm.addRegisterFile = function () {
            vm.addRegister = {};
            vm.addRegister.businessId = vm.businessId;
            vm.addRegister.id = common.uuid();
            vm.addRegisters.push(vm.addRegister);
        }

        //保存登记补充材料
        vm.saveRegisterFile = function () {
            addRegisterFileSvc.saveRegisterFile(vm.addRegisters,function(data){
                if(data.flag || data.reCode=='ok'){
                    bsWin.alert("操作成功");
                    vm.addRegisters = data.reObj;
                }else{
                    bsWin.alert(data.reMsg);
                }
            });
        }
        //删除登记补充资料
        vm.deleteRegisterFile = function () {
            var isCheked = $("#addRegistersTable input[name='addRegistersCheck']:checked")
            if (isCheked.length < 1) {
                bsWin.alert("请选择要删除的记录！");
            } else {
                var ids = [];
                for (var i = 0; i < isCheked.length; i++) {
                    vm.addRegisters.forEach(function (f, number) {
                        if (f.id && isCheked[i].value == f.id) {
                            ids.push(isCheked[i].value);
                            vm.addRegisters.splice(number, 1);
                        }
                    });
                }
                if(ids.length > 0){
                    addRegisterFileSvc.deleteByIds(ids.join(","), function (data) {
                        bsWin.alert("删除成功！");
                    });
                }
            }
        }

        //份数数字校验
        vm.inputIntegerValue = function (checkValue, idSort) {
            if (addRegisterFileSvc.isUnsignedInteger(checkValue)) {
                $("#errorsUnmber" + idSort).html("");
            } else {
                $("#errorsUnmber" + idSort).html("只能输入数字");
            }
        }

        activate();
        function activate() {
            if($state.params.businessId){
                addRegisterFileSvc.initAddRegisterFile($state.params.businessId,function(data){
                    if(data && data.length > 0){
                        vm.addRegisters = data;
                    }
                });
            }

        }

        /**
         * 重写打印预览
         */
        vm.printFile = function(businessId){

            var isCheck = $("input[name='addRegistersCheck']:checked");
            console.log(isCheck);
            if(isCheck.length == 0){
                bsWin.alert("请选择数据！");
            }else{
                var ids = [];
                for(var i = 0 ; i < isCheck.length ; i++){
                    ids.push(isCheck[i].value);
                }
                var ids = ids.join(",");

                var url = rootPath + "/contents/libs/pdfjs-dist/web/viewer.html?version=" + (new Date()).getTime() + "&file=" + rootPath + "/addRegisterFile/printAddRegisterFile/" + businessId + "/" + ids ;
                $("#iframePreview").attr("src", url);
                $("#previewModal").kendoWindow({
                    width: "80%",
                    height: "730px",
                    title: "",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            }



        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('addRegisterFileEditCtrl', addRegisterFile);

    addRegisterFile.$inject = ['$location', 'addRegisterFileSvc', '$state'];

    function addRegisterFile($location, addRegisterFileSvc, $state) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '添加登记补充资料';
        vm.isuserExist = false;
        vm.id = $state.params.id;
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '更新登记补充资料';
        }

        vm.create = function () {
            addRegisterFileSvc.createAddRegisterFile(vm);
        };
        vm.update = function () {
            addRegisterFileSvc.updateAddRegisterFile(vm);
        };

        activate();
        function activate() {
            if (vm.isUpdate) {
                addRegisterFileSvc.getAddRegisterFileById(vm);
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('addRegisterFileSvc', addRegisterFile);

    addRegisterFile.$inject = ['$http'];

    function addRegisterFile($http) {
        var url_addRegisterFile = rootPath + "/addRegisterFile", url_back = '#/addRegisterFileList';
        var service = {
            initAddRegisterFile: initAddRegisterFile,		//初始化登记补充资料
            saveRegisterFile: saveRegisterFile,				//保存登记补充材料
            isUnsignedInteger: isUnsignedInteger,			//数字校验
            initRegisterWinDow: initRegisterWinDow,			//初始化登记补充资料页面
            deleteByIds: deleteByIds,                      // 根据ID删除补充资料函
        };

        return service;

        function initRegisterWinDow(vm, opation) {
            $("#addRegister").kendoWindow({
                width: "70%",
                height: "660px",
                title: "意见选择",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "close"]
            }).data("kendoWindow").center().open();
        }

        //检查是否为正整数
        function isUnsignedInteger(value) {
            if ((/^(\+|-)?\d+$/.test(value)) && value > 0) {
                return true;
            } else {
                return false;
            }
        }

        //S 保存登记补充材料
        function saveRegisterFile(addRegisters, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addRegisterFile/save",
                headers: {
                    "contentType": "application/json;charset=utf-8"  //设置请求头信息
                },
                traditional: true,
                dataType: "json",
                data: angular.toJson(addRegisters),//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //E 保存登记补充材料

        //刷新页面
        function myrefresh() {
            window.location.reload();
        }

        //S 初始化登记补充资料
        function initAddRegisterFile(businessId, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addRegisterFile/findByBusinessId",
                params: {
                    businessId: businessId
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // E 初始化登记补充资料

        //S_根据ID删除补充资料函
        function deleteByIds(ids, callBack) {
            var httpOptions = {
                method: 'delete',
                url: url_addRegisterFile + "/deleteFile",
                params: {
                    ids: ids
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('addSuppLetterCtrl', addSuppLetter);
    addSuppLetter.$inject = ['$location', 'addSuppLetterSvc', 'sysfileSvc', '$state', 'bsWin', '$scope'];

    function addSuppLetter($location, addSuppLetterSvc, sysfileSvc, $state, bsWin, $scope) {
        var vm = this;
        vm.suppletter = {}; //补充资料对象$state
        vm.suppletter.businessId = $state.params.businessId;        //业务ID
        vm.suppletter.businessType = $state.params.businessType;    //业务类型
        vm.suppletter.id = $state.params.id;
        vm.isControl=$state.params.isControl;//按钮控制

        vm.title = '拟补充资料函';
        vm.businessFlag = {
            isInitFileOption: false,   //是否已经初始化附件上传控件
        }

        activate();
        function activate() {
            addSuppLetterSvc.initSuppLetter(vm.suppletter.businessId, vm.suppletter.businessType, function (data) {
                vm.suppletter = data;
                vm.initFileUpload();
            });
        }

        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.suppletter.id) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.suppletter.id", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }
            vm.sysFile = {
                businessId: vm.suppletter.id,
                mainId: vm.suppletter.businessId,           //补充资料函的业务ID就是对应的项目ID或者其他的ID
                mainType: sysfileSvc.mainTypeValue().SIGN,
                sysfileType: sysfileSvc.mainTypeValue().AADSUPP_FILE,
                sysBusiType: sysfileSvc.mainTypeValue().AADSUPP_FILE,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm
            });
        }
        //保存补充资料函
        vm.saveAddSuppletter = function () {
            common.initJqValidation($("#suppletter_form"));
            var isValid = $("#suppletter_form").valid();
            if (isValid) {
                vm.suppletter.fileType = "1";   //1表示拟补充资料函
                addSuppLetterSvc.saveSuppLetter(vm.suppletter,vm.isCommit,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        vm.suppletter = data.reObj;
                        bsWin.success("操作成功！");
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("表格填写不正确，请检查相应的必填项信息！");
            }
        }

        /**
         * 发起流程
         */
        vm.startSignSupperFlow = function(){
            common.initJqValidation($("#suppletter_form"));
            var isValid = $("#suppletter_form").valid();
            if (isValid) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "确认已经完成填写，并且发起流程么？",
                    onOk: function () {
                        addSuppLetterSvc.saveSuppLetter(vm.suppletter,vm.isCommit,function(data){
                            vm.isCommit = false;
                            if(data.flag || data.reCode == 'ok'){
                                vm.suppletter = data.reObj;
                                //保存成功，则发起流程
                                addSuppLetterSvc.startSignSupperFlow(vm.suppletter.id,function(data){
                                    if(data.flag || data.reCode == 'ok'){
                                        bsWin.success("操作成功！");

                                    }else{
                                        bsWin.error(data.reMsg);
                                    }
                                })
                            }else{
                                bsWin.error(data.reMsg);
                            }
                        });
                    }
               });
            } else {
                bsWin.alert("表格填写不正确，请检查相应的必填项信息！");
            }
        }

        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    addSuppLetterSvc.deleteAddSuppLetter(vm, id);
                }
            });
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('addSuppLetterEditCtrl', addSuppLetter);

    addSuppLetter.$inject = ['$location', 'addSuppLetterSvc','sysfileSvc', '$state','bsWin','$scope'];

    function addSuppLetter($location, addSuppLetterSvc,sysfileSvc, $state,bsWin,$scope) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '添加登记补充资料';
        vm.isuserExist = false;
        vm.id = $state.params.id;
        vm.suppletter = {}; //补充资料对象$state
        vm.suppletter.businessId = $state.params.businessId;        //业务ID
        vm.suppletter.businessType = $state.params.businessType;    //业务类型
        vm.suppletter.id = $state.params.id;

        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '更新登记补充资料';
        }
        vm.businessFlag ={
                isInitFileOption : false,   //是否已经初始化附件上传控件
        }

        //初始化附件上传控件
        vm.initFileUpload = function(){
            if (!vm.suppletter.id) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.suppletter.id", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }
            vm.sysFile = {
                businessId: vm.suppletter.id,
                mainId: vm.suppletter.businessId,
                mainType: sysfileSvc.mainTypeValue().SIGN,
                sysfileType: sysfileSvc.mainTypeValue().AADSUPP_FILE,
                sysBusiType: sysfileSvc.mainTypeValue().AADSUPP_FILE,
                detailBt: "detail_file_bt",
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm
            });
        }
        //保存拟补资料函
        vm.saveAddSuppletter = function () {
            common.initJqValidation($("#suppletter_form"));
            var isValid = $("#suppletter_form").valid();
            if (isValid) {
                addSuppLetterSvc.saveSuppLetter(vm.suppletter,vm.isCommit,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        vm.suppletter = data.reObj;
                        bsWin.success("操作成功！");
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("表格填写不正确，请检查相应的必填项信息！");
            };
        };
        
        //返回拟补资料涵列表页面
        vm.comeBack = function(){
        	$state.go('addSuppletterList',{businessId: vm.suppletter.businessId});
        }
        
        vm.update = function () {
            addSuppLetterSvc.updateAddSuppLetter(vm);
        };


        /**
         * 发起流程
         */
        vm.startSignSupperFlow = function(){
            common.initJqValidation($("#suppletter_form"));
            var isValid = $("#suppletter_form").valid();
            if (isValid) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "确认已经完成填写，并且发起流程么？",
                    onOk: function () {
                        addSuppLetterSvc.saveSuppLetter(vm.suppletter,vm.isCommit,function(data){
                            vm.isCommit = false;
                            if(data.flag || data.reCode == 'ok'){
                                vm.suppletter = data.reObj;
                                $state.go('addSuppletterList', {businessId:  vm.suppletter.businessId});
                                //保存成功，则发起流程
                                addSuppLetterSvc.startSignSupperFlow(vm.suppletter.id,function(data){
                                    if(data.flag || data.reCode == 'ok'){
                                        bsWin.success("操作成功！");
                                    }else{
                                        bsWin.error(data.reMsg);
                                    }
                                })
                            }else{
                                bsWin.error(data.reMsg);
                            }
                        });
                    }
                });
            } else {
                bsWin.alert("提交失败，有红色*号的内容都要按要求填写！");
            }
        }
        
        activate();
        function activate() {
        	//根根ID查询拟补资料函
            addSuppLetterSvc.getAddSuppLetterById(vm.suppletter.id,function (data) {
                vm.suppletter = data;
                //初始化附件上传
                vm.initFileUpload();
            });

        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('addSuppLetterSvc', addSuppLetter);

    addSuppLetter.$inject = ['$http', 'bsWin'];

    function addSuppLetter($http, bsWin) {
        var url_addSuppLetter = rootPath + "/addSuppLetter", url_back = '#/addSuppLetterList';
        var service = {
            initSuppLetter: initSuppLetter,             //初始化补充资料函
            saveSuppLetter: saveSuppLetter,             //保存补充资料函
            grid: grid,
            deleteAddSuppLetter: deleteAddSuppLetter,   //删除拟补充资料函
            getAddSuppLetterById: getAddSuppLetterById, //根据ID查看拟补充资料函
            createFilenum: createFilenum,               //生成文件字号
            initSuppListDate: initSuppListDate,         //初始化拟补充资料函列表
            initFlowDeal: initFlowDeal,                 //初始化流程数据
            startSignSupperFlow : startSignSupperFlow,  //发起拟补充资料函流程
        };

        return service;

        //S_发起拟补充资料函流程
        function startSignSupperFlow(id,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addSuppLetter/startSignSupperFlow",
                params: {
                    id: id
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_startSignSupperFlow

        //S_初始化流程数据
        function initFlowDeal(vm) {
            getAddSuppLetterById(vm.businessKey, function (data) {
                vm.suppletter = data;
            })
        }//E_initFlowDeal

        //E 根据主业务获取所有的附件信息
        //S 初始化拟补充资料函列表
        function initSuppListDate(businessId, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addSuppLetter/initSuppListDate",
                params: {
                    businessId: businessId,
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //E 初始化拟补充资料函列表
        //S 生成文件字号 
        function createFilenum(id, callBack) {
            var httpOptions = {
                method: 'post',
                url: url_addSuppLetter + "/createFileNum",
                params: {id: id}
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //E 生成文件字号


        //S 初始化补充资料函
        function initSuppLetter(businessId, businessType, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addSuppLetter/initSuppLetter",
                params: {
                    businessId: businessId,
                    businessType: businessType,
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        } //E 初始化补充资料函


        // begin#deleteAddSuppLetter
        function deleteAddSuppLetter(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_addSuppLetter,
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog: true,
                            fn: function () {
                                vm.isSubmit = false;
                                vm.gridOptions.dataSource.read();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //S_保存拟补充资料函
        function saveSuppLetter(suppletter, isCommit, callBack) {
            isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addSuppLetter/saveSupp",
                data: suppletter
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {
                    isCommit = false;
                }
            });
        }//E_saveSuppLetter

        // begin#getAddSuppLetterById
        function getAddSuppLetterById(id,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addSuppLetter/findById",
                params: {id: id}
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#grid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_addSuppLetter),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
                    field: "id",
                    title: "id",
                    width: 100,
                    filterable: true
                },
                {
                    field: "orgName",
                    title: "orgName",
                    width: 100,
                    filterable: true
                },
                {
                    field: "userName",
                    title: "userName",
                    width: 100,
                    filterable: true
                },
                {
                    field: "suppLetterTime",
                    title: "suppLetterTime",
                    width: 100,
                    filterable: true,
                    format: "{0: yyyy-MM-dd HH:mm:ss}"
                },
                {
                    field: "disapDate",
                    title: "disapDate",
                    width: 100,
                    filterable: true,
                    format: "{0: yyyy-MM-dd HH:mm:ss}"
                },
                {
                    field: "secretLevel",
                    title: "secretLevel",
                    width: 100,
                    filterable: true
                },
                {
                    field: "mergencyLevel",
                    title: "mergencyLevel",
                    width: 100,
                    filterable: true
                },
                {
                    field: "filenum",
                    title: "filenum",
                    width: 100,
                    filterable: true
                },
                {
                    field: "title",
                    title: "title",
                    width: 100,
                    filterable: true
                },
                {
                    field: "dispaRange",
                    title: "dispaRange",
                    width: 100,
                    filterable: true
                },
                {
                    field: "suppleterSuggest",
                    title: "suppleterSuggest",
                    width: 100,
                    filterable: true
                },
                {
                    field: "meetingSuggest",
                    title: "meetingSuggest",
                    width: 100,
                    filterable: true
                },
                {
                    field: "leaderSuggest",
                    title: "leaderSuggest",
                    width: 100,
                    filterable: true
                },
                {
                    field: "printnum",
                    title: "printnum",
                    width: 100,
                    filterable: true
                },
                {
                    field: "signid",
                    title: "signid",
                    width: 100,
                    filterable: true
                },
                {
                    field: "fileSeq",
                    title: "fileSeq",
                    width: 100,
                    filterable: true
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                            "vm.del('" + item.id + "')", item.id);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true
            };

        }// end fun grid

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('addSuppLetterListCtrl', addSuppLetter);
    addSuppLetter.$inject = ['$location', 'addSuppLetterSvc', '$state', 'bsWin'];

    function addSuppLetter($location, addSuppLetterSvc, $state, bsWin) {
        var vm = this;
        vm.suppletter = {}; //补充资料对象$state
        vm.suppletter.businessId = $state.params.businessId;        //业务ID
        vm.title = '登记补充资料';
        activate();
        function activate() {
            addSuppLetterSvc.initSuppListDate(vm.suppletter.businessId,function(data){
                vm.suppletterlist = data;
            });
        }
        //生成发文字号
        vm.getFilenum = function (id) {
            addSuppLetterSvc.createFilenum(id,function(data){
                if(data.flag || data.reCode == 'ok'){
                    bsWin.alert("操作成功！");
                    $.each(vm.suppletterlist,function (i,sl) {
                        if(sl.id == data.reObj.id){
                            sl.filenum = data.reObj.filenum;
                        }
                    })
                }else{
                    bsWin.alert(data.reMsg);
                }
            });
        }
        //跳转到编辑页面
        vm.findByIdAddSuppLetter = function (id) {
        	$state.go('addSuppLetterEdit', {id: id});
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('addSuppLetterQueryCtrl', addSuppLetterQuery);
    addSuppLetterQuery.$inject = ['$location', 'addSuppLetterQuerySvc', '$state', 'bsWin', 'orgSvc'];
    function addSuppLetterQuery($location, addSuppLetterQuerySvc, $state, bsWin, orgSvc) {
        var vm = this;
        vm.suppletter = {}; //补充资料对象$state
        vm.id = $state.params.id;//主键ID
        vm.isQuery = true;
        vm.model = {};

        activate();
        function activate() {
            //补充资料函查询列表
            addSuppLetterQuerySvc.addQueryGrid(vm);
            //根据部门视图查询部门列表
            orgSvc.queryOrgList(vm, function (data) {
                vm.model.org = data;
            })
        }

        /**
         * 查询
         */
        vm.quarySuppContent = function () {
            vm.queryGridOptions.dataSource._skip="";
            vm.queryGridOptions.dataSource.read();
        }

        /**
         * 重置
         */
        vm.resetSuppContent = function () {
            var tab = $("#supQueryForm").find('input,select').not(":submit, :reset, :image, :disabled,:hidden");
            $.each(tab, function (i, obj) {
                obj.value = "";
            });
        }

        /**
         * 查看拟补充资料函详情
         * @param item
         */
        vm.showSuppLetterDetail = function(id){
            vm.isDisplay=true;
            vm.id=id;
            addSuppLetterQuerySvc.getaddSuppLetterQueryById(vm,function (data) {
                vm.suppletter =data;
                $("#suppLetterDetailDiv").kendoWindow({
                    width: "1072px",
                    height: "800px",
                    title: "拟补充资料函详情",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            });
        }

        /**
         * 删除拟补充资料函
         * @param id
         */
        vm.deleteById = function(id){
            bsWin.confirm({
                title: "询问提示",
                message: "确定删除么？",
                onOk: function () {
                    addSuppLetterQuerySvc.deleteaddSuppLetterQuery(id,function(data){
                        if(data.flag || data.reCode == 'ok'){
                            bsWin.alert("删除成功！",function(){
                                vm.quarySuppContent();
                            });
                        }else {
                            bsWin.alert(data.reMsg);
                        }
                    });
                }
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('addSuppLetterQueryEditCtrl', addSuppLetterQuery);

    addSuppLetterQuery.$inject = ['$location', 'addSuppLetterQuerySvc', '$state','bsWin'];

    function addSuppLetterQuery($location, addSuppLetterQuerySvc, $state,bsWin) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '添加登记补充资料';
        vm.isuserExist = false;
        vm.id = $state.params.id;
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '更新登记补充资料';
        }
       
        //部长审批处理
        vm.saveSuppletterApprove = function () {
        	 /* common.initJqValidation();
              var isValid = $('suppletter_form').valid();
             if(isValid){
              }else{
              	bsWin.alert("请填写审批意见，再提交！");
              }*/
        	addSuppLetterQuerySvc.createaddSuppLetterQuery(vm);
            
        };
        vm.update = function () {
            addSuppLetterQuerySvc.updateaddSuppLetterQuery(vm);
        };
        activate();
        function activate() {
        	//查看补充资料详细信息
            addSuppLetterQuerySvc.getaddSuppLetterQueryById(vm,function (data) {
                vm.suppletter =data;
            });
            
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('addSuppLetterQuerySvc', addSuppLetterQuery);
    addSuppLetterQuery.$inject = ['$http', 'bsWin'];
    function addSuppLetterQuery($http, bsWin) {
        var url_addSuppLetterQuery = rootPath + "/addSuppLetter", url_back = '#/addSuppLetterQueryList';
        var service = {
        	approveGrid: approveGrid,//补充资料函审批列表
        	addQueryGrid:addQueryGrid,//补充资料函查询列表
        	createaddSuppLetterQuery: createaddSuppLetterQuery,   //部长审批处理
        	deleteaddSuppLetterQuery: deleteaddSuppLetterQuery,
            updateaddSuppLetterQuery: updateaddSuppLetterQuery,
            getaddSuppLetterQueryById: getaddSuppLetterQueryById, //根据ID查看拟补充资料函
            initSuppLetter: initSuppLetter,             //初始化补充资料函
            createFilenum: createFilenum,               //生成文件字号
            initSuppListDate: initSuppListDate,         //初始化拟补充资料函列表
            checkIsApprove:checkIsApprove,              //检查
        };

        return service;

      
        //S 初始化拟补充资料函列表
        function initSuppListDate(businessId,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addSuppLetterQuery/initSuppListDate",
                params: {
                    businessId: businessId,
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //E 初始化拟补充资料函列表
        //S 生成文件字号 
        function createFilenum(id,callBack) {
            var httpOptions = {
                method: 'post',
                url: url_addSuppLetterQuery + "/createFileNum",
                params: {id: id}
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //E 生成文件字号


        //S 初始化补充资料函
        function initSuppLetter(businessId,businessType,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addSuppLetterQuery/initSuppLetter",
                params: {
                    businessId: businessId,
                    businessType:businessType,
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //E 初始化补充资料函

        // begin#updateaddSuppLetterQuery
        function updateaddSuppLetterQuery(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;
                vm.model.id = vm.id;// id

                var httpOptions = {
                    method: 'put',
                    url: url_addSuppLetterQuery,
                    data: vm.model
                }

                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                }
                            })
                        }

                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } else {
                // common.alert({
                // vm:vm,
                // msg:"您填写的信息不正确,请核对后提交!"
                // })
            }
        }

        // begin#deleteaddSuppLetterQuery
        function deleteaddSuppLetterQuery(id,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addSuppLetter/deleteById",
                params: {id:id}
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#部长审批处理
        function createaddSuppLetterQuery(vm) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addSuppLetter/updateApprove",
                data: vm.suppletter
            };
            var httpSuccess = function success(response) {
            	 bsWin.success("操作成功！")
            };

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
            });


        }

        // begin#getaddSuppLetterQueryById
        function getaddSuppLetterQueryById(vm,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addSuppLetter/findById",
                params: {id: vm.id}
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

     // begin#补充资料函查询列表
        function addQueryGrid(vm){
        	// Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/addSuppLetter/addsuppListData" , $('#supQueryForm')),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource

            //S_序号
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号

            // Begin:column
            var columns = [
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "",
                    title: "文件标题",
                    filterable: false,
                    template: function (item) {
                        return "<a ng-click='vm.showSuppLetterDetail( " + '"' +(item.id) + '"'+ ")'>"+item.title+"</a>";
                    }
                },
                {
                    field: "orgName",
                    title: "拟稿部门",
                    width: 120,
                    filterable: false
                },
                {
                    field: "userName",
                    title: "拟稿人",
                    width: 90,
                    filterable: false
                },
                {
                    field: "suppLetterTime",
                    title: "拟稿时间",
                    width: 120,
                    filterable: false,
                    format: "{0: yyyy-MM-dd}"
                },
                {
                    field: "filenum",
                    title: "文件字号",
                    width: 120,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 80,
                    filterable: false,
                    template: function (item) {
                        //如果拟补充资料函还未发起流程（保存异常或者提交附件失败）
                        //则这里可以编辑
                        if(item.createdBy == curUserId && (!item.processInstanceId)){
                            return "<a class='btn btn-xs btn-primary' href='#addSuppLetterEdit/"+item.id+"'><span class='glyphicon glyphicon-pencil'></span>编辑</a><a class='btn btn-xs btn-danger' ng-click='vm.deleteById(\""+item.id+"\")'><span class='glyphicon glyphicon-remove'></span>删除</a>";
                        }else{
                            return "";
                        }
                    }
                }
            ];
            // End:column

            vm.queryGridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };

        }
        //end# 补充资料函查询列表
        
        
        // begin#补充资料函审批列表
        function approveGrid(vm) {

            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_addSuppLetterQuery+"/addSuppApproveList"),
                schema: {
                    data: "value",
                    total: function (data) {
                        if (data['count']) {
                            $("#ADDSUPPLETTER_COUNT").html(data['count']);
                        } else {
                            $("#ADDSUPPLETTER_COUNT").html(0);
                        }
                        return data['count'];
                    },
                    model: {
                        id: "id",
                        fields: {
                            createdDate: {
                                type: "date"
                            },
                            modifiedDate: {
                                type: "date"
                            }
                        }
                    }
                },
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
               
                {
                    field: "title",
                    title: "文件标题",
                    width: 100,
                    filterable: false
                },
                {
                    field: "orgName",
                    title: "拟稿部门",
                    width: 100,
                    filterable: false
                },
                {
                    field: "userName",
                    title: "拟稿人",
                    width: 100,
                    filterable: false
                },
                {
                    field: "suppLetterTime",
                    title: "拟稿时间",
                    width: 100,
                    filterable: false,
                    format: "{0: yyyy-MM-dd HH:mm:ss}"
                },
              
                {
                    field: "filenum",
                    title: "文件字号",
                    width: 100,
                    filterable: false
                },
              
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),item.id);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true
            };
        }// end fun grid

        //begin 检查是否有未完成审批的拟补充资料函
        function checkIsApprove(signId,fileType,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addSuppLetter/checkIsApprove",
                params: {signId: signId,fileType:fileType}
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//end 检查是否有未完成审批的拟补充资料函
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('suppLetterViewCtrl', suppLetterView);

    suppLetterView.$inject = ['$location', 'addSuppLetterSvc','sysfileSvc', '$state','bsWin','$scope'];

    function suppLetterView($location, addSuppLetterSvc,sysfileSvc, $state,bsWin,$scope) {
        /* jshint validthis:true */
        var vm = this;
        vm.isuserExist = false;
        vm.id = $state.params.id;
        vm.suppletter = {}; //补充资料对象$state
        vm.suppletter.id = $state.params.id;

        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '查看登记补充资料';
        }
        vm.businessFlag ={
                isInitFileOption : false,   //是否已经初始化附件上传控件
        }

        //初始化附件上传控件
        vm.initFileUpload = function(){

            if (!vm.suppletter.id) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.suppletter.id", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }
            vm.sysFile = {
                businessId: vm.suppletter.id,
                mainId: vm.suppletter.id,
                mainType: sysfileSvc.mainTypeValue().SIGN,
                sysfileType: sysfileSvc.mainTypeValue().AADSUPP_FILE,
                sysBusiType: sysfileSvc.mainTypeValue().AADSUPP_FILE,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm,
                uploadSuccess: function () {
                    sysfileSvc.findByBusinessId(vm.suppletter.id, function (data) {
                        vm.sysFilelists = data;
                    });
                }
            });
        }
        //拟补充资料函查看附件
        vm.addSuppContent = function () {
        	if(vm.suppletter.id){
            vm.showsupp = true;
            var ideaEditWindow = $("#addsuppletter");
            ideaEditWindow.kendoWindow({
                width: "60%",
                height: "90%",
                title: "拟补资料函正文",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "close"]
            }).data("kendoWindow").center().open();
                sysfileSvc.findByBusinessId(vm.suppletter.id , function(data){
                    vm.sysFilelists = data;
                });


        	}else{
        		bsWin.alert("请先保存业务数据");
        	}
        }
        //保存拟补资料函
        vm.saveAddSuppletter = function () {
            common.initJqValidation($("#suppletter_form"));
            var isValid = $("#suppletter_form").valid();
            if (isValid) {
                addSuppLetterSvc.saveSuppLetter(vm.suppletter,vm.isCommit,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        vm.suppletter = data.reObj;
                        bsWin.success("操作成功！");
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("表格填写不正确，请检查相应的必填项信息！");
            };
        };
        
        //返回拟补资料涵列表页面
        vm.comeBack = function(){
        	$state.go('addSuppletterList',{businessId: vm.suppletter.businessId});
        }
        activate();
        function activate() {
        	//根根ID查询拟补资料函
            addSuppLetterSvc.getAddSuppLetterById(vm.suppletter.id,function (data) {
                vm.suppletter = data;
                //初始化附件上传
                vm.initFileUpload();
            });

        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('adminAgendaCtrl', adminAgenda);

    adminAgenda.$inject = ['bsWin','adminSvc','flowSvc'];

    function adminAgenda(bsWin, adminSvc,flowSvc) {
        var vm = this;
        vm.title = '待办任务';
        activate();
        function activate() {
            adminSvc.agendaTaskGrid(vm);
            adminSvc.workName(vm);
        }

        /**
         * 通过流程类别查找
         */
        vm.query = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        /**
         * 删除流程，
         * @param processInstanId
         */
        vm.deleteTask = function(processInstanId){
            if(processInstanId){
                bsWin.confirm("是否删除任务，删除数据不可恢复，操作请慎重！", function () {
                    flowSvc.deleteFlow(processInstanId,"删除任务",function(data){
                        if(data.flag || data.reCode == 'ok'){
                            bsWin.alert("操作成功！",function(){
                                vm.gridOptions.dataSource.read();
                            });
                        }else{
                            bsWin.alert(data.reMsg);
                        }
                    });
                })
            }else{
                bsWin.alert("该流程已删除！",function(){
                    activate();
                });
            }
        }
    }
})();


(function () {
    'use strict';

    angular.module('app')
    .filter('date', function(){
        return function(val){
            if(val){
                return (new Date(val.CompatibleDate())).Format("yyyy-MM-dd");
            }else{
                return "";
            }
        }
    }).controller('adminCtrl', admin);

    admin.$inject = ['$location','adminSvc','$state','$rootScope'];

    function admin($location, adminSvc,$state,$rootScope) {
        var vm = this;
        vm.title = '待办项目';
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        vm.model = {};

        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }
        activate();
        function activate() {
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                adminSvc.gtasksGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                adminSvc.gtasksGrid(vm);
            }
        }

        /**
         * 查询(因为不是后端分页，所以前端过滤就可以了)
         */
        vm.querySign = function(){
            var filters = [];
            if(vm.model.projectName){
                filters.push({field:'projectName',operator:'contains',value:vm.model.projectName});
            }
            if(vm.model.reviewStage){
                filters.push({field:'reviewStage',operator:'contains',value:vm.model.reviewStage});
            }
            if(vm.model.nodeNameValue){
                filters.push({field:'nodeNameValue',operator:'contains',value:vm.model.nodeNameValue});
            }
            if(vm.model.dfilenum){
                filters.push({field:'dfilenum',operator:'contains',value:vm.model.dfilenum});
            }
            vm.gridOptions.dataSource.filter(filters);
        }

        /**
         * 重置
         */
        vm.resetForm = function(){
            var tab = $("#searchform").find('input,select');
            $.each(tab, function(i, obj) {
                obj.value = "";
            });
        }

        vm.countWorkday=function(){
        	adminSvc.countWorakday(vm);
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('adminDoingCtrl', admin);

    admin.$inject = ['$location', 'adminSvc', 'flowSvc','pauseProjectSvc','bsWin','signSvc','$state','$rootScope' , 'addSuppLetterQuerySvc'];

    function admin($location, adminSvc, flowSvc,pauseProjectSvc,bsWin,signSvc,$state,$rootScope , addSuppLetterQuerySvc) {
        var vm = this;
        vm.title = '在办项目';
        vm.model = {};
        vm.page = 0;
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }
        activate();
        function activate() {
            //默认不显示发文
            vm.showwin = false;
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                console.log(preView);
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                adminSvc.dtasksGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
                /*$scope.$apply()*/
            }else {
                adminSvc.dtasksGrid(vm);
            }

        }

        /**
         * 项目暂停弹窗
         */
        vm.pauseProject = function (signid) {
            pauseProjectSvc.findPausingProject(vm,signid,"");
            // pauseProjectSvc.pauseProjectWindow(vm,signid,"");
        }

        vm.Checked=function(){
            if($("#fileNo").is(":checked")){
                $("#file1").prop("checked",false);
                $("#file2").prop("checked",false);
            }
        }
        vm.Checked2=function(){
            $("#fileNo").prop("checked",false);
        }


        /**
         * 保存项目暂停
         */
        vm.commitProjectStop = function () {
            pauseProjectSvc.pauseProject(vm);
        }
        /**
         * 取消项目暂停窗口
         */
        vm.closewin = function () {
            window.parent.$("#spwindow").data("kendoWindow").close()
        }

        /**
         * 查询
         */
        vm.querySign = function(){
            vm.gridOptions.dataSource._skip="";
            vm.gridOptions.dataSource.read();
        }

        // 业务判断
        vm.filterRuTask = function ($event) {
            var checkbox = $event.target;
            var checked = checkbox.checked;
            if (checked) {
                $("#query_signprocessState").val(9);
            } else {
                $("#query_signprocessState").val(6);
            }
            vm.querySign();
        }
        /**
         * 重置查询条件
         */
        vm.formReset = function(){
            vm.model = {};
        }
        /**
         * 流程激活
         * @param signid
         */
        vm.startProject = function (signid) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认激活吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    flowSvc.activeFlow(vm, signid);
                }
            })
        }
        /**
         * 删除项目（作废项目）
         * @param signid
         */
        vm.deletProject= function (signid) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认删除该条项目吗？",
                onOk: function () {
                    $('.confirmDialog').modal('hide');
                    signSvc.deleteSign(signid,function(data){
                        if(data.flag || data.reCode == 'ok'){
                            bsWin.alert("删除成功！",function(){
                                vm.gridOptions.dataSource.read();
                            })
                        }else{
                            bsWin.alert(data.reMsg);
                        }
                    });
                }
            });
        }


        //S_链接到拟补充资料函
        vm.addSuppLetter = function (signId) {
            vm.signid = signId;
            addSuppLetterQuerySvc.checkIsApprove(vm.signid,"1",function(data){
                if(data.flag || data.reCode == 'ok'){
                    $state.go('addSupp', {businessId: vm.signid, businessType: "SIGN"});
                }else{
                    bsWin.confirm({
                        title: "询问提示",
                        message: "该项目还有拟补充资料函未审批完成，确定要新增拟补充资料函么？如果要修改拟补充资料函，请到“查询统计”->“拟补充资料函查询”菜单进行修改即可！",
                        onOk: function () {
                            $state.go('addSupp', {businessId: vm.signid, businessType: "SIGN"});
                        }
                    });
                }
            });


        }// E_跳转到 拟补充资料函 编辑页面
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('adminDoTaskCtrl', allDoTask);

    allDoTask.$inject = ['adminSvc','$state','$rootScope','bsWin','flowSvc'];

    function allDoTask(adminSvc,$state,$rootScope,bsWin,flowSvc) {
        var vm = this;
        vm.title = '在办任务';
        vm.isSuperUser = isSuperUser;
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});
        }
           //查询
        vm.query=function () {
            vm.gridOptions.dataSource._skip="";
            vm.gridOptions.dataSource.read();
        }

        activate();
        function activate() {
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                vm.project = preView.data.project;
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }
                adminSvc.doingTaskGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                adminSvc.doingTaskGrid(vm);
            }

            adminSvc.workName(vm);
        }

        /**
         * 删除流程，
         * @param processInstanId
         */
        vm.deleteTask = function(processInstanId){
            if(processInstanId){
                bsWin.confirm("是否删除任务，删除数据不可恢复，操作请慎重！", function () {
                    flowSvc.deleteFlow(processInstanId,"删除任务",function(data){
                        if(data.flag || data.reCode == 'ok'){
                            bsWin.alert("操作成功！",function(){
                                vm.gridOptions.dataSource.read();
                            });
                        }else{
                            bsWin.alert(data.reMsg);
                        }
                    });
                })
            }else{
                bsWin.alert("该流程已删除！",function(){
                    activate();
                });
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('adminEndCtrl', admin);

    admin.$inject = ['$location','adminSvc']; 

    function admin($location, adminSvc) {
        var vm = this;
        vm.title = '办结项目';
             
        activate();
        function activate() {
        	adminSvc.etasksGrid(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('adminEndTaskCtrl', endTask);

    endTask.$inject = ['adminSvc', '$state', '$rootScope'];

    function endTask(adminSvc, $state, $rootScope) {
        var vm = this;
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function () {
            $rootScope.storeView(vm.stateName, {
                gridParams: vm.gridOptions.dataSource.transport.options.read.data(),
                queryParams: vm.queryParams,
                data: vm
            });
        }
        //查询
        vm.query = function () {
            vm.gridOptions.dataSource._skip = "";
            vm.gridOptions.dataSource.read();
        }

        activate();
        function activate() {
            adminSvc.workName(vm);

            if ($rootScope.view[vm.stateName]) {
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if (preView.gridParams) {
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if (preView.data) {
                    vm.model = preView.data.model;
                }
                //恢复数据
                vm.project = preView.data.project;
                //恢复页数页码
                if (preView.queryParams) {
                    vm.queryParams = preView.queryParams;
                }
                adminSvc.endTaskGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            } else {
                adminSvc.endTaskGrid(vm);
            }

        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('adminPersonAssistCtrl', personAssist);

    personAssist.$inject = ['$location', 'adminSvc', 'flowSvc','pauseProjectSvc','$state','$rootScope'];

    function personAssist($location, adminSvc, flowSvc,pauseProjectSvc,$state,$rootScope) {
        var vm = this;
        vm.title = '个人经办项目';
        vm.model = {};
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }
        activate();
        function activate() {
            vm.showwin = false;
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                adminSvc.personMainTasksGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                adminSvc.personMainTasksGrid(vm);
            }

        }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('adminPersonDoingCtrl', adminPersonDoing);

    adminPersonDoing.$inject = ['$location', 'adminSvc', 'flowSvc','pauseProjectSvc','$state','$rootScope'];

    function adminPersonDoing($location, adminSvc, flowSvc,pauseProjectSvc,$state,$rootScope) {
        var vm = this;
        vm.title = '个人经办项目';
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }

        activate();
        function activate() {
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                adminSvc.personMainTasksGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                adminSvc.personMainTasksGrid(vm);
            }

        }

        /**
         * 查询
         */
        vm.querySign = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        /**
         * 重置
         */
        vm.resetForm = function(){
            vm.model = {};
        }

        /**
         * 项目暂停
         * @param signid
         */
        vm.pauseProject = function (signid) {
            pauseProjectSvc.findPausingProject(vm,signid);
        }

        /**
         * 流程激活
         * @param signid
         */
        vm.startProject = function (signid) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认激活吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    flowSvc.activeFlow(vm, signid);
                }
            })
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('adminSignListCtrl', admin);

    admin.$inject = ['signSvc', 'adminSvc', 'bsWin', '$state', 'headerSvc', 'pauseProjectSvc', '$rootScope', '$scope','roomCountSvc'];

    function admin(signSvc, adminSvc, bsWin, $state, headerSvc, pauseProjectSvc, $rootScope, $scope,roomCountSvc) {
        var vm = this;
        vm.title = '项目查询统计';
        vm.currentAssociateSign = {};
        vm.signList = {};
        vm.headerList = {};
        vm.header = "";
        vm.project = {};
        vm.headerType = "项目类型";
        vm.fileName = "项目统计报表";//报表标题，初始化
        vm.formatErrorCount = 0; //统计日期不规范个数
        // vm.filters ={};
        vm.signList = [];
        vm.page = 0;
        vm.template = '1';//模板参数
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function () {
            $rootScope.storeView(vm.stateName, {
                gridParams: vm.signListOptions.dataSource.transport.options.read.data(),
                queryParams: vm.queryParams,
                data: vm
            });
        }
        activate();
        function activate() {
            if ($rootScope.view[vm.stateName]) {
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if (preView.gridParams) {
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if (preView.data) {
                    vm.project = preView.data.project;
                }
                //恢复页数页码
                if (preView.queryParams) {
                    vm.queryParams = preView.queryParams;
                }
                adminSvc.getSignList(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            } else {
                adminSvc.getSignList(vm);
            }
            //初始化查询参数
            adminSvc.initSignList(function (data) {
                if (data.flag || data.reCode == 'ok') {
                    vm.orgDeptList = data.reObj;
                }
            });

            //用户
            /*roomCountSvc.findAllUsers(vm,function (data) {
                vm.userlist = {};
                vm.userlist = data;
            });*/
        }

        //重置
        vm.formReset = function () {
            /* var tab = $("#searchform").find('input,select');
             $.each(tab, function (i, obj) {
             $('input:checkbox').attr('checked', false);
             // obj.value = "";
             });*/
            vm.project = {};
        }

        /**
         * 查询统计
         */
        vm.searchSignList = function () {
            vm.signListOptions.dataSource._skip = 0;
            vm.signListOptions.dataSource.read();

            //对项目负责人查询统计进行处理
            var mUserName = $("input[name='mUserName']").val();
            var aUserName = $("input[name='aUserName']").val();
            var allPriUser = $("input[name='allPriUser']").val();
            if(mUserName){
                vm.project.mUserName = mUserName;
            }else if(aUserName){
                vm.project.aUserName = aUserName;
            }else if(allPriUser){
                vm.project.allPriUser = allPriUser;
            }

            vm.filters = vm.project;
            if (vm.filters && vm.filters != undefined) {
                var queryData = JSON.stringify(vm.filters);
                vm.filters = queryData.substring(1, queryData.length - 1);
            }
            vm.signList = [];
            vm.page = 0;
        }

        /**
         * 统计表
         */
        /*vm.statistical = function(){
         var num = 1;
         vm.columns = [
         {
         field: "",
         title: "序号",
         width: 50,
         filterable: false,
         template : function(){
         return num ++ ;
         }
         }
         ];
         headerSvc.findHeaderListSelected(vm , function(data){
         vm.selectedHeaderList = data;
         for(var i = 0 ; i<vm.selectedHeaderList.length ; i++){
         var item = vm.selectedHeaderList[i];
         vm.columns.push(
         {
         field: item.headerKey,
         title: item.headerName,
         width: 140,
         filterable: false
         }
         )
         }
         $("#statisticalGrid").kendoGrid({
         dataSource: vm.dataSource,
         filterable: common.kendoGridConfig().filterable,
         sortable: true,
         selectable: "row",
         columns:vm.columns
         });
         $("#reportWindow").kendoWindow({
         width: "70%",
         height: "70%",
         title: "项目查询统计",
         visible: false,
         modal: true,
         closable: true,
         actions: ["Pin", "Minimize", "Maximize", "close"]
         }).data("kendoWindow").center().open();
         });

         }*/

        vm.statistical = function () {

        }

        /**
         * 统计表导出
         */
        vm.excelExport = function () {
            var ids = [];
            for (var i = 0; i < vm.signList.length; i++) {
                ids.push(vm.signList[i].signid);
            }
            var idStr = ids.join(',');
            if(vm.template == '1'){
                signSvc.excelExport2(idStr);
            }else if(vm.template == '2'){
                signSvc.excelExport(idStr);
            }
        }

        /**
         * 自定义导出
         */
        vm.excelDefineExport = function () {
            var ids = [];
            for (var i = 0; i < vm.signList.length; i++) {
                ids.push(vm.signList[i].signid);
            }
            var idStr = ids.join(',');
            signSvc.excelExport(idStr);

        }

        /**
         * 查看项目暂停信息
         */
        vm.ProjectStopInfo = function (signId) {
            $state.go('projectStopInfo', {signId: signId});
        }

        vm.statistics = function () {
            adminSvc.QueryStatistics(vm, function (data) {
                if (data != undefined) {
                    data.forEach(function (obj, x) {
                        vm.signList.push(obj);
                        if(obj.receivedate == undefined){
                            vm.formatErrorCount ++;
                        }
                    });
                }
                if (vm.isContinue) {
                    if (data != undefined && data.length != 0) {
                        vm.page++;
                        vm.statistics();
                    } else {

                    }
                }
                vm.countProject = vm.signList.length ; // 列表项目总数
            });

        }


        //以下是项目查询统计（最新版-2017-12-28）
        vm.QueryStatistics = function () {
            //重置值
            vm.formatErrorCount = 0 ;
            vm.countReviewDay = 0 ;
            vm.notSelectedProject = 0;
            vm.selectedProject = 0 ;
            vm.totalReviewDas = 0;
            vm.averageDay = 0;
            vm.avgWorkDay = 0;

            vm.countProject = 0;
            vm.selectProject = 0;
            vm.averageDay = 0;

            vm.isopens = false;
            vm.isContinue = true;
            //判断条件是否为空
            if (!vm.filters || vm.filters == undefined) {
                vm.filters = "";
            }
            vm.statistics();
            $("#queryStatisticsWindow").kendoWindow({
                width: "80%",
                height: "700px",
                title: "项目查询统计",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "close"],
                open: function () {
                    //统计平均天数
                    vm.countDay = function () {
                        vm.countReviewDay = 0;//总共评审天数
                        vm.stopDay = 0 ;//暂停天数
                        var isCheck = $("#countSignDayTable input[name='sumSignDay']:checked");
                        vm.selectedProject = isCheck.length; //统计个数
                        vm.notSelectedProject = vm.countProject - vm.selectedProject; //未统计个数
                        vm.averageDay = 0;
                        if (isCheck.length == 0) {
                            bsWin.alert("请选择要统计的数据");
                        } else {
                            var signIds = [];
                            var totalLength = isCheck.length;
                            for (var i = 0; i < totalLength; i++) {
                                signIds.push(isCheck[i].id);
                            }
                            /* signSvc.sumExistDays(signIds.join(","),function (data) {
                             console.log(data);
                             if(data.flag || data.reCode == 'ok'){
                             vm.averageDay = (Number(data.reObj)/ totalLength).toFixed(2);
                             vm.isopens = true;
                             vm.isDay = true;
                             }else{
                             bsWin.alert(data.reMsg);
                             }
                             });*/

                            signSvc.findAVGDayById(signIds , function(data){
                                vm.isopens = true;
                                vm.isDay = true;
                                vm.totalReviewDas = data.reObj[0];
                                vm.averageDay = data.reObj[1];
                                vm.avgWorkDay = data.reObj[2];

                            })

                        }
                    }
                    //统计工作日
                    vm.countWork = function () {
                        var isCheck = $("#countSignDayTable input[name='sumSignDay']:checked");
                        vm.selectProject = isCheck.length;
                        vm.averageDay = 0;
                        if (isCheck.length == 0) {
                            bsWin.alert("请选择要统计的数据");
                        } else {
                            var totalDays = 0, daysCount = isCheck.length;
                            for (var i = 0; i < daysCount; i++) {
                                totalDays += Number(isCheck[i].value);
                            }
                            vm.averageDay = (totalDays / daysCount).toFixed(2);
                            vm.isopens = true;
                            vm.isDay = false;
                        }
                    }
                },
                close: function () {
                    vm.isContinue = false;
                    vm.signList = [];
                    vm.page = 0;
                }
            }).data("kendoWindow").center().open();
        }

        /**
         * 自定义报表
         */
        vm.selectHeader = function () {
            headerSvc.selectHeaderWindow(vm, vm.headerType);
        }
        /**
         * 对秘密项目查看执行权限限制
         * @param signid
         * @param processInstanceId
         */
        vm.signDetails = function (signid, processInstanceId) {
            vm.saveView();
            adminSvc.signDetails(signid, function (data) {
                if (data.flag) {
                    $state.go("signDetails", {signid:signid,processInstanceId:processInstanceId});
                } else {
                    bsWin.alert(data.reMsg);
                }
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('adminSvc', admin);

    admin.$inject = ['$http', 'bsWin'];

    function admin($http, bsWin) {

        var service = {
            gtasksGrid: gtasksGrid,		                //个人待办项目
            etasksGrid: etasksGrid,		                //办结项目
            dtasksGrid: dtasksGrid,                     //在办项目
            doingTaskGrid: doingTaskGrid,               //在办任务
            endTaskGrid : endTaskGrid,                  //办结任务
            personMainTasksGrid: personMainTasksGrid,   //个人经办项目
            countWorakday: countWorakday,	            //计算工作日
            agendaTaskGrid: agendaTaskGrid,             //个人待办任务（除项目流程外）
            initFile: initFile,	        //初始化附件
            upload: upload,	            //	下载附件
            getSignList: getSignList,   //项目查询统计
            initSignList: initSignList, //初始化項目查詢統計
            // <!-- 以下是首页方法-->
            getHomeInfo: getHomeInfo,                   //初始化首页待办任务和通知公告方法
            getHomeProjInfo:getHomeProjInfo,            //获取首页统计信息
            getHomeMeetInfo:getHomeMeetInfo,            //获取首页会议和调研时间统计信息
            excelExport: excelExport,                   //项目统计导出
            statisticalGrid: statisticalGrid,           //(停用)
            workName: workName,                         //获取流程列表
            QueryStatistics: QueryStatistics,           //通过条件，对项目进行查询统计
            signDetails: signDetails,                   //获取项目查看权限
        }
        return service;

        function signDetails(signId, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/findSecretProPermission",
                params: {signId: signId}
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof  callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //begin excelExport
        function excelExport(vm, fileName, project) {
            var fileName = escape(encodeURIComponent(fileName));
            window.open(rootPath + "/signView/excelExport?filterData=" + project + "&fileName=" + fileName);
            /* var httpOptions ={
             method : 'post',
             url : rootPath + "/signView/excelExport",
             headers : {
             "contentType" : "application/json;charset=utf-8"
             },
             traditional : true,
             dataType : "json",
             responseType: 'arraybuffer',
             data : angular.toJson(exportData),
             params:{
             fileName :fileName
             }

             }
             var httpSuccess = function success(response){
             fileName =fileName + ".xls";
             var fileType ="vnd.ms-excel";
             common.downloadReport(response.data , fileName , fileType);
             }
             common.http({
             vm : vm,
             $http : $http ,
             httpOptions : httpOptions,
             success : httpSuccess
             });*/
        }

        //end excelExport

        //S_初始化首页方法
        function getHomeInfo(callBack) {
            var httpOptions = {
                method: "post",
                url: rootPath + "/admin/getHomeInfo"
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_getHomeInfo

        //S_首页项目统计信息
        function getHomeProjInfo(callBack) {
            var httpOptions = {
                method: "post",
                url: rootPath + "/admin/getHomeProjInfo"
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_getHomeProjInfo

        //S_首页会议和调研时间统计
        function getHomeMeetInfo(callBack) {
            var httpOptions = {
                method: "post",
                url: rootPath + "/admin/getHomeMeetInfo"
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_getHomeProjInfo

        //begin countWorakday
        function countWorakday(vm) {
            var httpOptions = {
                method: "get",
                url: rootPath + "/workday/countWorkday"
            }

            var httpSuccess = function success(response) {
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }//end countWorakday

        //begin initFile
        function initFile(vm) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/file/findByBusinessId",
                params: {businessId: vm.anId}
            }

            var httpSuccess = function success(response) {
                vm.file = response.data;
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//end initFile

        //begin upload
        function upload(vm, sysFileId) {
            window.open(rootPath + "/file/fileDownload?sysfileId=" + sysFileId);
        }//end upload

        //S_gtasksGrid
        function gtasksGrid(vm) {
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/flow/html/tasks", $("#searchform"), vm.gridParams),
                schema: {
                    data: "value",
                    total: function (data) {
                        if (data['count']) {
                            $('#DO_SIGN_COUNT').html(data['count']);
                        } else {
                            $('#DO_SIGN_COUNT').html(0);
                        }
                        return data['count'];
                    },
                    model: {
                        id: "id",
                        fields: {
                            createdDate: {
                                type: "date"
                            }
                        }
                    }
                },
                serverPaging: false,
                serverSorting: false,
                serverFiltering: false,
                pageSize: vm.queryParams.pageSize || 10,
                page: vm.queryParams.page || 1,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            var columns = [
                {
                    field: "",
                    title: "",
                    width: 30,
                    template: function (item) {
                        switch (item.lightState) {
                            case "4":          //暂停
                                return $('#span1').html();
                                break;
                            case "5":          //少于3个工作日
                                return $('#span2').html();
                                break;
                            case "6":          	//发文超期
                                return $('#span3').html();
                                break;
                            case "7":           //超过25个工作日未存档
                                return $('#span4').html();
                                break;
                            case "8":         	//存档超期
                                return $('#span5').html();
                                break;
                            case "1":          //在办
                                return "";
                                break;
                            case "2":           //已发文
                                return "";
                                break;
                            case "3":           //已发送存档
                                return "";
                                break;
                            default:
                                return "";
                                ;
                        }
                    }
                },
                {
                    field: "",
                    title: "序号",
                    width: 50,
                    attributes: {
                        "class": "table-cell",
                        style: "text-align: center"
                    },
                    template: "<span class='row-number'></span>",
                },
                {
                    field: "",
                    title: "项目名称",
                    filterable: false,
                    width: 200,
                    template: function (item) {
                        if (checkCanEdit(item)) {
                            if(item.isAgent == 9){
                                return '<span class="label label-primary">代办</span><a ng-click="vm.saveView()" href="#/signFlowDetail/' + item.businessKey + '/' + item.taskId + '/' + item.processInstanceId + '" >' + item.projectName + '</a>';
                            }else{
                                return '<a ng-click="vm.saveView()" href="#/signFlowDetail/' + item.businessKey + '/' + item.taskId + '/' + item.processInstanceId + '" >' + item.projectName + '</a>';
                            }
                        } else {
                            if(item.isAgent == 9){
                                return '<span class="label label-primary">代办</span><a ng-click="vm.saveView()" href="#/signFlowDeal/' + item.businessKey + '/' + item.taskId + '/' + item.processInstanceId + '" >' + item.projectName + '</a>';
                            }else{
                                return '<a ng-click="vm.saveView()" href="#/signFlowDeal/' + item.businessKey + '/' + item.taskId + '/' + item.processInstanceId + '" >' + item.projectName + '</a>';
                            }
                        }
                    }
                },
                {
                    field: "reviewStage",
                    title: "项目阶段",
                    filterable: false,
                    width: 100
                },
                {
                    field: "filecode",
                    title: "委内收文编号",
                    filterable: false,
                    width: 120
                },
                {
                    field: "nodeNameValue",
                    title: "当前环节",
                    width: 120,
                    filterable: false
                },
                {
                    field: "preSignDate",
                    title: "预签收时间",
                    width: 100,
                    filterable: false,
                    format: "{0: yyyy-MM-dd}"
                },
                {
                    field: "signDate",
                    title: "签收时间",
                    width: 100,
                    filterable: false,
                    format: "{0: yyyy-MM-dd}"
                },
                {
                    field: "",
                    title: "签收状态",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        if (!item.signDate) {
                            if(item.preSignDate){
                                return "<span style='color:#ff0000;'>预签收</span>";
                            }else{
                                return "";
                            }
                        } else {
                            return "<span style='color: #2b9d00;'>正式签收</span>";
                        }
                    }
                },
                {
                    field: "allPriUser",
                    title: "项目负责人",
                    width: 140,
                    filterable: false,
                },
                {
                    field: "",
                    title: "剩余工作日",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        if (item.surplusDays != undefined) {
                            return item.surplusDays;
                        } else {
                            return "";
                        }
                    }
                },
                {
                    field: "displayName",
                    title: "处理人",
                    width: 120,
                    filterable: false
                },
                {
                    field: "",
                    title: "状态",
                    width: 80,
                    filterable: false,
                    template: function (item) {
                        if (item.processState && item.processState == 2) {
                            return '<span style="color:orange;">已暂停</span>';
                        } else {
                            return '<span style="color:green;">进行中</span>';
                        }
                    }
                },
                {
                    field: "",
                    title: "合并评审",
                    width: 120,
                    filterable: false,
                    template: function (item) {
                        if (item.reviewType) {
                            if (item.reviewType == 9 || item.reviewType == '9') {
                                return "合并评审[主项目]";
                            } else {
                                return "合并评审[次项目]";
                            }
                        } else {
                            return "否";
                        }
                    }
                },
                {
                    field: "",
                    title: "合并项目",
                    width: 180,
                    filterable: false,
                    template: function (item) {
                        if (item.reviewSignDtoList) {
                            var projectName = '';
                            angular.forEach(item.reviewSignDtoList, function (data, index, array) {
                                if (index > 0) {
                                    projectName += ",";
                                }
                                projectName += '<a href="#/signDetails/' + data.signid + '/' + data.processInstanceId + '" >' + data.projectname + '</a>';
                            });
                            return projectName;
                        } else {
                            return "";
                        }
                    }
                },
                {
                    field: "",
                    title: "操作",
                    width: 80,
                    template: function (item) {
                        if (checkCanEdit(item)) {
                            return common.format($('#detailBtns').html(), "signFlowDetail", item.businessKey, item.taskId, item.processInstanceId);
                        } else {
                            return common.format($('#columnBtns').html(), "signFlowDeal", item.businessKey, item.taskId, item.processInstanceId);
                        }
                    }
                }
            ];// End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                pageable: common.kendoGridConfig(vm.queryParams).pageable,
                dataBound: common.kendoGridConfig(vm.queryParams).dataBound
            };
        }//E_gtasksGrid

        //判断是否显示处理按钮（主要针对合并评审项目,部长审核和分管领导审核两个环节）
        function checkCanEdit(item) {
            var isDetailBt = (item.processState == 2) ? true : false;
            var reviewNode = ["SIGN_BMLD_SPW1","SIGN_FGLD_SPW1"];
            var mergeDisNode = ["SIGN_QRFW","SIGN_BMLD_QRFW","SIGN_FGLD_QRFW","SIGN_ZR_QRFW"];
            //合并评审
            if (!isDetailBt) {
                if (item.reviewType && (item.reviewType == 0 || item.reviewType == '0') && ($.inArray(item.nodeDefineKey, reviewNode) >= 0)) {
                    isDetailBt = true;
                }
            }
            //合并发文
            if (!isDetailBt) {
                if (item.mergeDis && item.mergeDis == 2 && item.mergeDisMain == 0 && ($.inArray(item.nodeDefineKey, mergeDisNode) >= 0) ) {
                    isDetailBt = true;
                }
            }
            return isDetailBt;
        }

        //S_etasksGrid
        function etasksGrid(vm) {
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/flow/html/endTasks"),
                schema: {
                    data: "value",
                    total: function (data) {
                        return data['count'];
                    },
                    model: {
                        id: "id",
                        fields: {
                            createdDate: {
                                type: "date"
                            }
                        }
                    }
                },
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            var columns = [
                {
                    field: "",
                    title: "序号",
                    template: "<span class='row-number'></span>",
                    width: 50
                },
                {
                    field: "projectname",
                    title: "项目名称",
                    filterable: false,
                    width: 180
                },
                {
                    field: "builtcompanyname",
                    title: "建设单位",
                    width: 150,
                    filterable: false,
                },
                {
                    field: "reviewstage",
                    title: "评审阶段",
                    width: 80,
                    filterable: false,

                },
                {
                    field: "signdate",
                    title: "签收日期",
                    width: 100,
                    filterable: false,
                    format: "{0: yyyy-MM-dd}"
                },
                {
                    field: "reviewdays",
                    title: "评审天数",
                    width: 150,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 100,
                    template: function (item) {
                        /*       if (item.flowKey == flowcommon.getFlowDefinedKey().FINAL_SIGN_FLOW) {
                         return common.format($('#columnBtns').html(), "endSignDetail", item.businessKey, item.processInstanceId);
                         } else if (item.flowKey) {
                         return common.format($('#columnBtns').html(), "flowEnd/" + item.businessKey, item.flowKey, item.processInstanceId);
                         } else {
                         return "";
                         }*/
                        return common.format($('#columnBtns').html(), item.isAppraising, item.signid, "endSignDetail", item.signid, item.processInstanceId, item.mUserName);
                    }
                }
            ];
            // End:column
            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                dataBound: function () {
                    var rows = this.items();
                    var page = this.pager.page() - 1;
                    var pagesize = this.pager.pageSize();
                    $(rows).each(function () {
                        var index = $(this).index() + 1 + page * pagesize;
                        var rowLabel = $(this).find(".row-number");
                        $(rowLabel).html(index);
                    });
                }
            };
        }//E_etasksGrid

        //S_在办项目(改成页面分页)
        function dtasksGrid(vm) {
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/flow/html/doingtasks", $("#searchform"), vm.gridParams),
                schema: common.kendoGridConfig().schema({
                    id: "id"
                }),
                serverPaging: false,
                serverSorting: false,
                serverFiltering: false,
                pageSize: vm.queryParams.pageSize || 10,
                page: vm.queryParams.page || 1,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            var columns = [
                {
                    field: "",
                    title: "",
                    width: 30,
                    template: function (item) {
                        switch (item.lightState) {
                            case "4":          //暂停
                                return $('#span1').html();
                                break;
                            case "5":          //少于3个工作日
                                return $('#span2').html();
                                break;
                            case "6":          	//发文超期
                                return $('#span3').html();
                                break;
                            case "7":           //超过25个工作日未存档
                                return $('#span4').html();
                                break;
                            case "8":         	//存档超期
                                return $('#span5').html();
                                break;
                            case "1":          //在办
                                return "";
                                break;
                            case "2":           //已发文
                                return "";
                                break;
                            case "3":           //已发送存档
                                return "";
                                break;
                            default:
                                return "";
                                ;
                        }
                    }
                },
                {
                    field: "",
                    title: "序号",
                    width: 50,
                    attributes: {
                        style: "text-align: center;",
                    },
                    template: function (item) {
                        if (item.signprocessState) {
                            if (item.signprocessState == 6) {
                                return "<span class='row-number label-info' style='width: 100%;display: inline-block;'></span>";
                            }
                            else if (item.signprocessState == 7) {
                                return "<span class='row-number label-primary' style='width: 100%;display: inline-block;'></span>";
                            }
                            else if (item.signprocessState == 8) {
                                return "<span class='row-number label-success' style='width: 100%;display: inline-block;'></span>";
                            } else {
                                return "<span class='row-number'></span>";
                            }
                        }
                        return "<span class='row-number'></span>";
                    }
                },
                {
                    field: "",
                    title: "项目名称",
                    filterable: false,
                    width: 260,
                    template: function (item) {
                        return '<a ng-click="vm.saveView()" href="#/signFlowDetail/' + item.businessKey + '/' + item.taskId + '/' + item.processInstanceId + '" >' + item.projectName + '</a>';
                    }
                },
                {
                    field: "reviewStage",
                    title: "项目阶段",
                    filterable: false,
                    width: 120
                },
                {
                    field: "filecode",
                    title: "委内收文编号",
                    filterable: false,
                    width: 120
                },
                {
                    field: "nodeNameValue",
                    title: "办理环节",
                    filterable: false,
                    width: 120
                },
                {
                    field: "signDate",
                    title: "签收时间",
                    width: 100,
                    filterable: false,
                    format: "{0: yyyy-MM-dd}"
                },
                {
                    field: "",
                    title: "签收状态",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        if (!item.signDate) {
                            if(item.preSignDate){
                                return "<span style='color:#ff0000;'>预签收</span>";
                            }else{
                                return "";
                            }
                        } else {
                            return "<span style='color: #2b9d00;'>正式签收</span>";
                        }
                    }
                },
                {
                    field: "expectdispatchdate",
                    title: "预发文时间",
                    width: 100,
                    filterable: false,
                    format: "{0: yyyy-MM-dd}"
                },
                {
                    field: "",
                    title: "剩余工作日",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        if (item.surplusDays != undefined) {
                            return item.surplusDays;
                        } else {
                            return "";
                        }
                    }
                },
                {
                    field: "",
                    title: "评审部门",
                    width: 160,
                    filterable: false,
                    template: function (item) {
                        if(item.mOrgName){
                            if (item.aOrgName) {
                                return item.mOrgName+","+item.aOrgName;
                            } else {
                                return item.mOrgName;
                            }
                        }else{
                            return "";
                        }
                    }
                },
                {
                    field: "allPriUser",
                    title: "项目负责人",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "",
                    title: "项目状态",
                    width: 90,
                    filterable: false,
                    template: function (item) {
                        if (item.processState && item.processState == 2) {
                            return '<span style="color:orange;">已暂停</span>';
                        } else {
                            return '<span style="color:green;">进行中</span>';
                        }
                    }
                },
                {
                    field: "preSignDate",
                    title: "预签收时间",
                    width: 100,
                    filterable: false,
                    format: "{0: yyyy-MM-dd}"
                },
                {
                    field: "",
                    title: "操作",
                    width: 130,
                    template: function (item) {
                        return common.format($('#columnBtns').html(), "signFlowDetail", item.businessKey, item.taskId, item.processInstanceId);
                    }
                }
            ];
            // End:column
            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig(vm.queryParams).pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                dataBound: common.kendoGridConfig(vm.queryParams).dataBound
            };
        }//E_dtasksGrid

        //begin_getSignList
        function getSignList(vm) {
            var dataSource = common.kendoGridDataSource(rootPath + "/signView/getSignList", $("#searchform"), vm.queryParams.page, vm.queryParams.pageSize, vm.gridParams);
            // Begin:column
            var columns = [
                {
                    field: "",
                    title: "",
                    width: 30,
                    template: function (item) {
                        switch (item.lightState) {
                            case "4":          //暂停
                                return $('#span1').html();
                                break;
                            case "5":          //少于3个工作日
                                return $('#span2').html();
                                break;
                            case "6":          	//发文超期
                                return $('#span3').html();
                                break;
                            case "7":           //超过25个工作日未存档
                                return $('#span4').html();
                                break;
                            case "8":         	//存档超期
                                return $('#span5').html();
                                break;
                            case "1":          //在办
                                return "";
                                break;
                            case "2":           //已发文
                                return "";
                                break;
                            case "3":           //已发送存档
                                return "";
                                break;
                            default:
                                return "";
                                ;
                        }
                    }
                },
                {
                    field: "",
                    title: "序号",
                    width: 50,
                    attributes: {
                        style: "text-align: center;",
                    },
                    template: function (item) {
                        if (item.processState) {
                            if (item.processState == 6) {
                                return "<span class='row-number label-info' style='width: 100%;display: inline-block;'></span>";
                            }
                            else if (item.processState == 7) {
                                return "<span class='row-number label-primary' style='width: 100%;display: inline-block;'></span>";
                            }
                            else if (item.processState == 8) {
                                return "<span class='row-number label-success' style='width: 100%;display: inline-block;'></span>";
                            }else if(item.processState == 9){

                                return "<span class='row-number label-default' style='width: 100%;display: inline-block;'></span>";
                            } else {
                                return "<span class='row-number'></span>";
                            }
                        }
                        return "<span class='row-number'></span>";
                    }
                },
                {
                    field: "",
                    title: "项目名称",
                    width: 280,
                    filterable: false,
                    template: function (item) {
                        //秘密项目和未发文的项目，都只有经办人能看
                        if (item.secrectlevel == "秘密" || item.processState < 6) {
                            if (item.processInstanceId) {
                                return '<a ng-click="vm.signDetails(' + "'" + item.signid + "'," + "'" + item.processInstanceId + "'" + ')" >' + item.projectname + '</a>';
                            } else {
                                return '<a ng-click="vm.signDetails(' + "'" + item.signid + "'," + "'" + "'" + ')" >' + item.projectname + '</a>';
                            }
                        } else {
                            if (item.processInstanceId) {
                                return '<a ng-click="vm.saveView()" href="#/signDetails/' + item.signid + '/' + item.processInstanceId + '" >' + item.projectname + '</a>';
                            } else {
                                return '<a ng-click="vm.saveView()" href="#/signDetails/' + item.signid + '/" >' + item.projectname + '</a>';
                            }
                        }


                    }
                },
                {
                    field: "reviewstage",
                    title: "评审阶段",
                    width: 110,
                    filterable: false,
                },
                {
                    field: "filecode",
                    title: "委内收文编号",
                    filterable: false,
                    width: 120
                },
                {
                    field: "signdate",
                    title: "签收日期",
                    width: 100,
                    filterable: false,
                    format: "{0:yyyy-MM-dd}"
                },
                {
                    field: "dispatchDate",
                    title: "发文日期",
                    width: 100,
                    filterable: false,
                    format: "{0:yyyy-MM-dd}"
                },
                {
                    field: "reviewdays",
                    title: "评审天数",
                    width: 90,
                    filterable: false
                },
                {
                    field: "",
                    title: "剩余工作日",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        if (item.surplusdays != undefined) {
                            return item.surplusdays;
                        } else {
                            return "";
                        }
                    }
                },
                {
                    field: "",
                    title: "评审部门",
                    width: 140,
                    filterable: false,
                    template : function(item){
                        if(!item.aOrgName){
                            return item.mOrgName ? item.mOrgName : "";
                        }else{
                            return item.mOrgName + "," + item.aOrgName;
                        }
                    }
                },
                {
                    field: "allPriUser",
                    title: "项目负责人",
                    width: 110,
                    filterable: false
                },
                {
                    field: "ffilenum",
                    title: "归档编号",
                    width: 125,
                    filterable: false
                },
                {
                    field: "dfilenum",
                    title: "文件字号",
                    width: 130,
                    filterable: false
                },
                {
                    field: "appalyInvestment",
                    title: "申报投资",
                    width: 100,
                    filterable: false
                },
                {
                    field: "authorizeValue",
                    title: "审定投资",
                    width: 100,
                    filterable: false
                },
                {
                    field: "extraValue",
                    title: "核减（增）",
                    width: 100,
                    filterable: false
                },
                {
                    field: "extraRate",
                    title: "核减率",
                    width: 100,
                    filterable: false
                },
                {
                    field: "approveValue",
                    title: "批复金额",
                    width: 140,
                    filterable: false
                },
                {
                    field: "dispatchType",
                    title: "发文类型",
                    width: 100,
                    filterable: false
                },
                {
                    field: "fileDate",
                    title: "归档日期",
                    width: 100,
                    filterable: false,
                    format: "{0:yyyy-MM-dd}"
                },
                {
                    field: "builtcompanyname",
                    title: "建设单位",
                    width: 260,
                    filterable: false
                },
                {
                    field: "isassistproc",
                    title: "是否协审",
                    width: 80,
                    filterable: false,
                    template: function (item) {
                        if (item.isassistproc == 9) {
                            return "是";
                        } else {
                            return "否";
                        }
                    }
                },
                {
                    field: "daysafterdispatch",
                    title: "发文后工作日",
                    width: 120,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 90,
                    filterable: false,
                    template: function (item) {
                        if (item.signState == '2') {
                            return common.format($('#columnBtns').html(),
                                "vm.ProjectStopInfo('" + item.signid + "')");
                        } else {
                            return "";
                        }

                    }
                }
            ];

            // End:column
            vm.signListOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                /*  pageable: common.kendoGridConfig().pageable,*/
                /*pageable: common.kendoGridConfig(vm.queryParams).pageable,*/
                pageable: {
                    pageSize: 10,
                    previousNext: true,
                    buttonCount: 5,
                    refresh: true,
                    pageSizes: [10, 20, 30,50],
                    change: function () {
                        if (vm.queryParams && vm.queryParams.page) {
                            vm.queryParams.page = this.dataSource.page();
                        }
                    }
                },
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                dataBound: common.kendoGridConfig(vm.queryParams).dataBound
                 /* dataBound: function () {
                    var rows = this.items();
                    var page = this.pager.page() - 1;
                    var pagesize = this.pager.pageSize();
                    $(rows).each(function () {
                        var index = $(this).index() + 1 + page * pagesize;
                        var rowLabel = $(this).find(".row-number");
                        $(rowLabel).html(index);
                    });
                }*/
            };
        }//end_getSignList

        //begin_initSignList
        function initSignList(callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/sign/initSignList"
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        } //end_initSignList

        //begin persontasksGrid
        function personMainTasksGrid(vm) {
            /*            var dataSource = new kendo.data.DataSource({
                            type: 'odata',
                            transport: common.kendoGridConfig().transport(rootPath + "/signView/html/personMainTasks", $("#searchform")),
                            schema: {
                                data: "value",
                                total: function (data) {
                                    return data['count'];
                                },
                                model: {
                                    id: "id"
                                }
                            },
                            serverPaging: true,
                            serverSorting: true,
                            serverFiltering: true,
                            pageSize: 10,
                            sort: {
                                field: "signdate",
                                dir: "desc"
                            }
                        });*/
            var dataSource = common.kendoGridDataSource(rootPath + "/signView/html/personMainTasks?$orderby=signdate desc", $("#searchform"), vm.queryParams.page, vm.queryParams.pageSize, vm.gridParams);
            var columns = [
                {
                    field: "",
                    title: "",
                    width: 30,
                    template: function (item) {
                        switch (item.lightState) {
                            case "4":          //暂停
                                return $('#span1').html();
                                break;
                            case "5":          //少于3个工作日
                                return $('#span2').html();
                                break;
                            case "6":          	//发文超期
                                return $('#span3').html();
                                break;
                            case "7":           //超过25个工作日未存档
                                return $('#span4').html();
                                break;
                            case "8":         	//存档超期
                                return $('#span5').html();
                                break;
                            case "1":          //在办
                                return "";
                                break;
                            case "2":           //已发文
                                return "";
                                break;
                            case "3":           //已发送存档
                                return "";
                                break;
                            default:
                                return "";
                                ;
                        }
                    }
                },
                {
                    field: "",
                    title: "序号",
                    width: 50,
                    attributes: {
                        style: "text-align: center;",
                    },
                    template: function (item) {
                        if (item.processState) {
                            if (item.processState == 6) {
                                return "<span class='row-number label-info' style='width: 100%;display: inline-block;'></span>";
                            }
                            else if (item.processState == 7) {
                                return "<span class='row-number label-primary' style='width: 100%;display: inline-block;'></span>";
                            }
                            else if (item.processState == 8) {
                                return "<span class='row-number label-success' style='width: 100%;display: inline-block;'></span>";
                            } else {
                                return "<span class='row-number'></span>";
                            }
                        }
                        return "<span class='row-number'></span>";
                    }
                },
                {
                    field: "",
                    title: "项目名称",
                    width: 320,
                    filterable: false,
                    template: function (item) {
                        if (item.processInstanceId) {
                            return '<a ng-click="vm.saveView()" href="#/signDetails/' + item.signid + '/' + item.processInstanceId + '" >' + item.projectname + '</a>';
                        } else {
                            return '<a ng-click="vm.saveView()" href="#/signDetails/' + item.signid + '/" >' + item.projectname + '</a>';
                        }
                    }
                },
                {
                    field: "reviewstage",
                    title: "评审阶段",
                    width: 100,
                    filterable: false
                },
                {
                    field: "",
                    title: "项目状态",
                    width: 80,
                    filterable: false,
                    template: function (item) {
                        var returnStr = "";
                        switch (item.signState) {
                            case "1":
                                returnStr = "进行中";
                                break;
                            case "2":
                                returnStr = "暂停";
                                break;
                            case "8":
                                returnStr = "强制结束";
                                break;
                            case "9":
                                returnStr = "已完成";
                                break;
                            default:
                                ;
                        }
                        return returnStr;
                    }
                },
                {
                    field: "",
                    title: "签收时间",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        if (item.signdate) {
                            return (new Date((item.signdate).CompatibleDate())).Format("yyyy-MM-dd");
                        } else {
                            return "";
                        }
                    },
                },
                {
                    field: "",
                    title: "发文日期",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        if (item.dispatchDate) {
                            return (new Date((item.dispatchDate).CompatibleDate())).Format("yyyy-MM-dd");
                        } else {
                            return "";
                        }
                    },
                },
                {
                    field: "",
                    title: "剩余工作日",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        if (item.surplusdays != undefined) {
                            return item.surplusdays;
                            // return (item.surplusdays > 0) ? item.surplusdays : 0;
                        } else {
                            return "";
                        }
                    }
                },
                /*{
                 field: "receivedate",
                 title: "送来时间",
                 width: 100,
                 filterable: false
                 },*/
                {
                    field: "builtcompanyname",
                    title: "建设单位",
                    width: 250,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 100,
                    template: function (item) {
                        var isstart = false, applyArrrais = true, isStop = false;
                        if (item.signState == "2") {
                            isstart = true;//显示已暂停，提示启动
                        } else {
                            if (item.signState == "1")
                                isStop = true;//显示暂停
                        }

                        //已经完成并且还未申请的，可以申请优秀评审报告
                        if (item.signState == 9 && angular.isUndefined(item.isAppraising)) {
                            applyArrrais = false;
                        }

                        return common.format($('#columnBtns').html(), "signDetails", item.signid, item.processInstanceId,
                            "vm.pauseProject('" + item.signid + "')", isStop, "vm.startProject('" + item.signid + "')", isstart, item.signid, applyArrrais);
                    }
                }
            ];

            // End:column
            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                pageable: common.kendoGridConfig(vm.queryParams).pageable,
                dataBound: common.kendoGridConfig(vm.queryParams).dataBound,
            };

            // End:column
        }

        //end persontasksGrid

        //S_个人待办任务
        function agendaTaskGrid(vm) {
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/flow/queryMyAgendaTask", $('#agendaTaskForm')),
                schema: {
                    data: "value",
                    total: function (data) {
                        if (data['count']) {
                            $('#DO_TASK_COUNT').html(data['count']);
                        } else {
                            $('#DO_TASK_COUNT').html(0);
                        }
                        return data['count'];
                    },
                    model: {
                        id: "taskId"
                    }
                },
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createTime",
                    dir: "desc"
                }
            });
            var columns = [
                {
                    field: "",
                    title: "序号",
                    template: "<span class='row-number'></span>",
                    width: 50
                },
                {
                    field: "",
                    title: "任务名称",
                    filterable: false,
                    width: "25%",
                    template: function (item) {
                        return '<a href="#/flowDeal/' + item.businessKey + '/' + item.processKey + '/' + item.taskId + '/' + item.instanceId + '" >' + item.instanceName + '</a>';
                    }
                },
                {
                    field: "nodeNameValue",
                    title: "当前环节",
                    width: "15%",
                    filterable: false
                },
                {
                    field: "displayName",
                    title: "处理人",
                    width: "15%",
                    filterable: false,
                },
                {
                    field: "processName",
                    title: "流程类别",
                    width: "15%",
                    filterable: false,
                },
                {
                    field: "",
                    title: "流程状态",
                    width: "10%",
                    filterable: false,
                    template: function (item) {
                        if (item.processState && item.processState == 2) {
                            return '<span style="color:orange;">已暂停</span>';
                        } else {
                            return '<span style="color:green;">进行中</span>';
                        }
                    }
                },
                {
                    field: "",
                    title: "操作",
                    width: "15%",
                    template: function (item) {
                        return common.format($('#columnBtns').html(), item.businessKey, item.processKey, item.taskId, item.instanceId,"vm.deleteTask('"+item.instanceId+"')");
                    }
                }
            ];
            // End:column
            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                dataBound: function () {
                    var rows = this.items();
                    var page = this.pager.page() - 1;
                    var pagesize = this.pager.pageSize();
                    $(rows).each(function () {
                        var index = $(this).index() + 1 + page * pagesize;
                        var rowLabel = $(this).find(".row-number");
                        $(rowLabel).html(index);
                    });
                }

            };
        }//E_agendaTaskGrid

        //S_个人经办办结任务
        function endTaskGrid(vm){
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/flow/queryEndTask",$("#endTaskForm"),vm.gridParams,false),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize : vm.queryParams.pageSize||10,
                page:vm.queryParams.page||1,
                sort: {
                    field: "endDate",
                    dir: "desc"
                }
            });
            var columns = [
                {
                    field: "",
                    title: "序号",
                    template: "<span class='row-number'></span>",
                    width: 50,
                },
                {
                    field: "",
                    title: "任务名称",
                    filterable: false,
                    width: "30%",
                    template: function (item) {
                        return '<a ng-click="vm.saveView()" href="#/flowEnd/' + item.businessKey + '/' + item.flowKey + '/' + item.processInstanceId + '" >' + item.flowName + '</a>';
                    }
                },
                {
                    field: "createDate",
                    title: "流程开始时间",
                    width: "20%",
                    filterable: false
                },
                {
                    field: "endDate",
                    title: "流程结束时间",
                    width: "15%",
                    filterable: false,
                },
                {
                    field: "durationTime",
                    title: "总处理时长",
                    width: "25%",
                    filterable: false,
                },
                {
                    field: "",
                    title: "流程类别",
                    width: "25%",
                    filterable: false,
                    template:function(item){
                        var flowKeyNmae = "";
                        if(vm.workName){
                            vm.workName.forEach(function (flow, index) {
                                if(flow.KEY_ == item.flowKey){
                                    flowKeyNmae = flow.NAME_;
                                }
                            });
                        }
                        return flowKeyNmae;
                    }
                },

                {
                    field: "",
                    title: "操作",
                    width: "10%",
                    template: function (item) {
                        return common.format($('#columnBtns').html(), item.businessKey, item.flowKey, item.processInstanceId);
                    }
                }
            ];
            // End:column
            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                pageable: common.kendoGridConfig(vm.queryParams).pageable,
                dataBound: common.kendoGridConfig(vm.queryParams).dataBound,
            };
        }

        //S_所有在办任务
        function doingTaskGrid(vm) {
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/flow/queryAgendaTask",$("#doingTaskForm"),vm.gridParams,false),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: false,
                serverSorting: false,
                serverFiltering: false,
                pageSize : vm.queryParams.pageSize||10,
                page:vm.queryParams.page||1,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            //var dataSource = common.kendoGridDataSource(rootPath + "/flow/queryAgendaTask", $("#doingTaskForm"), vm.queryParams.page, vm.queryParams.pageSize, vm.gridParams);
            var columns = [
                {
                    field: "",
                    title: "序号",
                    template: "<span class='row-number'></span>",
                    width: 50,
                },
                {
                    field: "",
                    title: "任务名称",
                    filterable: false,
                    width: "30%",
                    template: function (item) {
                        return '<a ng-click="vm.saveView()" href="#/flowDetail/' + item.businessKey + '/' + item.processKey + '/' + item.taskId + '/' + item.instanceId + '" >' + item.instanceName + '</a>';
                    }
                },
                {
                    field: "nodeNameValue",
                    title: "当前环节",
                    width: "20%",
                    filterable: false
                },
                {
                    field: "displayName",
                    title: "处理人",
                    width: "15%",
                    filterable: false,
                },
                {
                    field: "processName",
                    title: "流程类别",
                    width: "25%",
                    filterable: false,
                },
                {
                    field: "",
                    title: "流程状态",
                    width: "10%",
                    filterable: false,
                    template: function (item) {
                        if (item.processState && item.processState == 2) {
                            return '<span style="color:orange;">已暂停</span>';
                        } else {
                            return '<span style="color:green;">进行中</span>';
                        }
                    }
                },
                {
                    field: "",
                    title: "操作",
                    width: "10%",
                    template: function (item) {
                        return common.format($('#columnBtns').html(), item.businessKey, item.processKey, item.taskId, item.instanceId,"vm.deleteTask('"+item.instanceId+"')");
                    }
                }
            ];
            // End:column
            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                pageable: common.kendoGridConfig(vm.queryParams).pageable,
                dataBound: common.kendoGridConfig(vm.queryParams).dataBound,
            };
        }//S_doingTaskGrid

        /**
         * 统计
         * @param vm
         */
        //begin statisticalGrid
        function statisticalGrid(vm) {
            vm.dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/signView/getSignList", $("#searchform")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: false,
                serverSorting: true,
                serverFiltering: true,
                // pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
        }

        //begin countWorakday
        function workName(vm) {
            var httpOptions = {
                method: "get",
                url: rootPath + "/flow/proc"
            }
            var httpSuccess = function success(response) {
                vm.workName = response.data;
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }//end countWorakday

        /**
         * 通过条件对项目进行查询统计分析
         * @param vm
         */
        function QueryStatistics(vm, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/QueryStatistics",
                // data : vm.project,
                params: {queryData: vm.filters, page: vm.page}
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof  callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('adminWelComeCtrl', adminWelCome);

    adminWelCome.$inject = ['bsWin', 'adminSvc', '$state'];

    function adminWelCome(bsWin, adminSvc, $state) {
        var vm = this;
        vm.title = '主页';
        //默认用户是普通员工
        vm.isdisplays = false;
        vm.timeHeadArr = [];//会议调研时间头
        vm.timeArr = [];//会议调研时间
        /**
         * 初始化柱状图数据
         */
        vm.initHistogram = function () {
            var myChart = echarts.init(document.getElementById('histogram')); //只能用javaScript获取节点，如用jquery方式则找不到节点
            var option = {
                title: {
                    text: "在办项目数量统计情况",
                    subtext: '',
                    x: 'center'
                },
                tooltip: {//提示框设置
                    trigger: 'item',
                    formatter: function(params){
                        var keyName = params.name;
                        var result = "";
                        if(vm.histogram){
                            $.each(vm.histogram , function(key , value){
                                if(key == keyName){
                                    for(var i=0,l=value.TASK_LIST.length;i<l;i++){
                                        var projObj = value.TASK_LIST[i];
                                        if(i>0){
                                            result += "<br>";
                                        }
                                        result += projObj.projectName;
                                    }
                                }
                            })
                        }
                        return result;
                    }
                },
                legend: { //头部显示说明，注意：data值要与series中的name一致，顺序可以不一致
                    orient: 'vertical',
                    left: 'left',
                    data: vm.capital
                },

                //设置坐标
                grid: {
                    // 这些是设置坐标边距
                    left: '13%',
                    right: '10%',
                    bottom: '10%',
                    containLabel: true,
                    //设置xy轴宽度
                    // y : 70,
                    // x : 60
                },
                xAxis: {
                    type: 'category',
                    name: '人员/部门',
                    data: vm.review,
                    axisTick: {
                        alignWithLabel: true
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: 30,//倾斜度 -90 至 90 之间，默认为0
                        margin: 2,
                        textStyle: {
                            fontWeight: 'bolder',
                            color: '#295645'
                        }
                    }
                },
                yAxis: {
                    type: 'value',
                    name: '数量',
                    min: 0,
                    // max: 1000,
                    // interval: 100, //刻度值
                },
                series: [
                    {
                        name: '数量',
                        type: 'bar',
                        barWidth : 30,//柱图宽度，
                        data: vm.signNumber
                    }
                ],
                itemStyle: {
                    emphasis: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0,0,0,0.5)'
                    }
                }
            };

            myChart.setOption(option);
        }//end initHistogram

        /**
         * 初始化折线图
         */
        vm.initLineChart = function () {
            //当页面两个id相同时会发生冲突不显示。所以用两个id来分别显示部长以上和普通员工的显示
            var myChart = echarts.init(document.getElementById('lineChart'));
            var option = {
                title: {
                    text: '项目办理情况',
                    subtext: '',
                    x: 'center'
                },
                tooltip: {
                    trigger: 'axis',
                    formatter: function (param) {
                        //option.series[param[0].seriesIndex].rawdate[param[0].dataIndex]是rawdate传的值
                        //先进行切割，获取到项目名称
                        var ssArray = option.series[param[0].seriesIndex].rawdate[param[0].dataIndex].split(",");
                        var res = '项目名称：' + param[0].name + '<br/>' + '剩余工作日:' + ssArray[0];
                        return res;
                    }
                },

                //设置坐标
                grid: {
                    left: '13%',
                    right: '10%',
                    bottom: '10%',
                    containLabel: true,
                },
                /*   legend: {
                 orient: 'vertical',
                 left: 'left',
                 data: vm.projectType
                 },*/
                xAxis: {
                    show: false,
                    type: 'category',
                    boundaryGap: false,
                    name: '项目名称',
                    axisLine: {onZero: false},
                    data: vm.reviewdate,
                },
                yAxis: {
                    type: 'value',
                    name: '剩余工作日',
                    min: -3,
                    max: 15,
                },
                series: [
                    {
                        name: '剩余工作日',
                        type: 'line',
                        showAllSymbol: true, //标注所有的数据点
                        markPoint: {
                            data: [
                                {type: 'max', name: '最大值'},
                                {type: 'min', name: '最小值'}
                            ]
                        },
                        markLine: {
                            data: [
                                {type: 'average', name: '平均值'}
                            ]
                        },
                        data: vm.linedatas,
                        rawdate: vm.name//自定义参数
                    }
                ],
                lineStyle: {
                    emphasis: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0,0,0,0.5)'
                    }
                }
            };
            myChart.setOption(option);
            myChart.on('click', function (param) {
                //进行分割。获取到signid
                var ssArray = option.series[param.seriesIndex].rawdate[param.dataIndex].split(",");
                $state.go('signDetails', {signid: ssArray[1], processInstanceId: ssArray[2]});
            });
        }//end initLineChart
        activate();

        function activate() {
            initProMeetDate();
            //获取首页待办任务和通知公告方法
            adminSvc.getHomeInfo(function (data) {
                if (data.annountmentList) {
                    vm.annountmentList = data.annountmentList;
                }
                if (data.comTaskList) {
                    vm.agendaTaskList = data.comTaskList;
                }
            });

            //获取首页项目统计信息
            adminSvc.getHomeProjInfo(function (data) {
                vm.hidePreTable = true;
                vm.isdisplays = true;
                if (data) {
                    if (data.proTaskList) {
                        vm.tasksList = data.proTaskList;
                    }
                    if (data.endTaskList) {
                        vm.endTasksList = data.endTaskList;
                    }
                    if(data.DOINGNUM){
                        vm.doingNum = data.DOINGNUM;
                    }
                    if(data.DISPATHOVERNUM){
                        vm.dispathNum = data.DISPATHOVERNUM;
                    }
                    if(data.STOPNUM){
                        vm.stopNum = data.STOPNUM;
                    }
                    if(data.WEEKNUM){
                        vm.weekNum = data.WEEKNUM;
                    }
                    //是否显示图表
                    vm.isdisplays = data.isdisplay;
                    if(!data.isdisplay){
                        //线性图数据
                        vm.linedatas = [];//纵轴(剩余工作日)
                        vm.reviewdate = [];//横轴(项目名称)
                        vm.name = [];
                        if(data.lineSign){
                            var lineList = data.lineSign;
                            for (var i = 0,l=lineList.length; i < l; i++) {
                                //赋值给横轴需要的数据
                                var day = lineList[i].surplusDays;

                                if (day < -3) {
                                    day = -3;
                                }
                                if (day > 15) {
                                    day = 15;
                                }
                                if(day==undefined){
                                    day = 0;
                                }
                                vm.linedatas.push(day);
                                vm.reviewdate.push(lineList[i].projectName);
                                //自定义传参，先进行拼接需要的数据。后再拆分
                                vm.name.push(lineList[i].surplusDays + "," + lineList[i].businessKey + "," + lineList[i].processInstanceId);

                            }
                        }
                        vm.initLineChart();//初始化折线图

                        //柱状图
                        //固定x轴的值，通过x轴的值作为map的key去获取value，如果value不为undefined，则说明该map存在这个key，保存key与value
                        var x = ["综合部" , "评估一部" , "评估二部"  , "评估一部信息化组" , "概算一部"  , "概算二部" , "未分办"];
                        var histogram_x = [];
                        var histogram_y = [];
                        vm.histogram = data.histogram;
                        if(vm.histogram){
                            $.each(vm.histogram , function(key , value){
                                var ruTaskMap = value;
                                histogram_x.push(key);
                                histogram_y.push(ruTaskMap.COUNT);
                            })
                        }
                        vm.review = histogram_x;  //横轴(人员名称/部门)
                        vm.signNumber = histogram_y;//纵轴(数量)
                        vm.initHistogram();//初始化柱状图

                        //预签收项目
                        if(data.preHistogram){
                            vm.preHistogram =  data.preHistogram;
                            if(vm.preHistogram){
                                vm.hidePreTable = false;
                            }
                        }else{
                            vm.hidePreTable = true;
                        }
                    }
                    //显示柱状图信息
                }
            });

            //获取首页会议和调研信息
            adminSvc.getHomeMeetInfo(function (data) {
                if(data.proMeetInfo.proAmMeetDtoList){
                    vm.proAmMeetDtoList = data.proMeetInfo.proAmMeetDtoList;
                }
                if(data.proMeetInfo.proPmMeetDtoList){
                    vm.proPmMeetDtoList = data.proMeetInfo.proPmMeetDtoList;
                }
            });
        }

        /**
         * 初始化调研和会议统计信息日期时间
         */
        function initProMeetDate() {
           //当前日期
           var now = new Date();
            for(var i=0; i < 5;i++ ){
                vm.timeArr.push(getNewDay(now,i));
            }

            for(var i=0; i < vm.timeArr.length; i++){
                vm.timeHeadArr.push(getNewDayStr(vm.timeArr[i]) +"("+getWeek(vm.timeArr[i])+")");

            }
        }

        function getNewDay(dateTemp, days) {
            // 先获取当前时间
            var curDate = dateTemp.getTime();
            // 将一天的时间单位换算成毫秒
            var days = days*24 * 3600 * 1000;
            var pastResult = curDate + days;

            // 日期函数，定义起点为一个月
            var pastDate = new Date(pastResult),
                pastYear = pastDate.getFullYear(),
                pastMonth = pastDate.getMonth() + 1,
                pastDay = pastDate.getDate();
            return pastYear + '-' + pastMonth + '-' + pastDay ;
        }

        function getNewDayStr(dateTemp) {
            var dateTemp = dateTemp.split("-");
            return ( dateTemp[1].replace(/\b(0+)/gi,"") + "月" + dateTemp[2]);
        }

        //格式化日期：yyyy-MM-dd
        function formatDate(date) {
            var myyear = date.getFullYear();
            var mymonth = date.getMonth() + 1;
            var myweekday = date.getDate();
            if (mymonth < 10) {
                mymonth = "0" + mymonth;
            }
            if (myweekday < 10) {
                myweekday = "0" + myweekday;
            }
            return (myyear.toString() + "-" + mymonth.toString() + "-" + myweekday.toString());
        }

        /**
         * 根据日期字符串获取星期几
         *
         */
        function getWeek(dateString){
            var date;
            if(isNull(dateString)){
                date = new Date;
            }else{
                var dateArray = dateString.split("-");
                date = new Date(dateArray[0], parseInt(dateArray[1]-1), dateArray[2]);
            }
            var dayIndex = date.getDay();
            return "星期" + "日一二三四五六".charAt(dayIndex);
        }

        function isNull(object){
            if(object == null || typeof object == "undefined"){
                return true;
            }
            return false;
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('annountmentCtrl', annountment);

    annountment.$inject = ['$location', '$state', 'bsWin', 'annountmentSvc', 'sysfileSvc','$rootScope'];

    function annountment($location, $state, bsWin, annountmentSvc, sysfileSvc,$rootScope) {
        var vm = this;
        vm.title = "通知公告管理";
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }
        active();
        function active() {
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                annountmentSvc.grid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                annountmentSvc.grid(vm);
            }

        }

        //批量发布
        vm.bathIssue = function () {
            annountmentSvc.updateIssueState(vm, "9");
        }

        //取消发布
        vm.bathUnissue = function () {
            annountmentSvc.updateIssueState(vm, "0");
        }

        vm.del = function (id) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认删除数据吗?",
                onOk: function () {
                    annountmentSvc.deleteAnnountment(id, function (data) {
                        if (data.flag || data.reCode == 'ok') {
                            vm.gridOptions.dataSource.read();
                            bsWin.alert("操作成功！");
                        } else {
                            bsWin.alert(data.reMsg);
                        }
                    });
                }
            });
        }

        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                bsWin.alert("请选择要删除的记录");
            } else {
                bsWin.confirm({
                    title: "询问提示",
                    message: "确认删除数据吗?",
                    onOk: function () {
                        var ids = [];
                        for (var i = 0; i < selectIds.length; i++) {
                            ids.push(selectIds[i].value);
                        }
                        var idStr = ids.join(',');
                        annountmentSvc.deleteAnnountment(idStr, function (data) {
                            if (data.flag || data.reCode == 'ok') {
                                bsWin.alert("操作成功！",function(){
                                    vm.gridOptions.dataSource.read();
                                });
                            } else {
                                bsWin.alert(data.reMsg);
                            }
                        });
                    }
                });
            }
        }

        //查看详情
        vm.detail = function (id) {
            if (id) {
                vm.saveView();
                $state.go('annountmentDetail', {id: id});
            }
        }

        //查询
        vm.queryAnnountment = function () {
            vm.gridOptions.dataSource._skip="";
            vm.gridOptions.dataSource.read();
        }

        //重置
        vm.resetAnnountment = function () {
            var tab = $("#annountmentform").find('input,select');
            $.each(tab, function (i, obj) {
                obj.value = "";
            });
        }
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('annountmentDetailCtrl',annountmentDetail);

    annountmentDetail.$inject = ['sysfileSvc','$state','annountmentSvc'];

    function annountmentDetail(sysfileSvc, $state,annountmentSvc) {
        var vm = this;
        vm.title = '通知公告详情页';
        vm.annountment = {};    //通知公告对象
        vm.annountment.anId = $state.params.id;
        activate();
        function activate() {
            annountmentSvc.findDetailById(vm,vm.annountment.anId);
        }
        
        vm.post=function(id){
            annountmentSvc.findDetailById(vm,id);
        }
        
        vm.next=function(id){
            annountmentSvc.findDetailById(vm,id);
        }

        //附件下载
        vm.downloadSysFile = function(sysId){
            sysfileSvc.downloadFile(sysId);
        }


        vm.alertwd=function(){
            $("section").addClass("cont-alert");
        }
        vm.closed=function(){
            $("section").removeClass("cont-alert");
        }
        //打印
        vm.printNotice = function(){
            var LODOP = getLodop();
            var strStylePath = rootPath +"/contents/shared/annountmentPrint.css";
            var strStyleCSS="<link href="+strStylePath+" type='text/css' rel='stylesheet'>";
            var strFormHtml="<head>"+strStyleCSS+"</head><body>"+$("#annountment-body").html()+"</body>";
            LODOP.PRINT_INIT("");
            LODOP.ADD_PRINT_HTML(10,20,"100%","100%",strFormHtml);
            LODOP.PREVIEW();
        }

    }

})();


(function () {
    'use strict';

    angular.module('app').controller('annountmentEditCtrl', annountmentEdit);

    annountmentEdit.$inject = ['$state', 'annountmentSvc', 'sysfileSvc', '$scope', 'bsWin'];

    function annountmentEdit($state, annountmentSvc, sysfileSvc, $scope, bsWin) {
        var vm = this;
        vm.title = "通知公告编辑";
        vm.annountment = {};        //通知公告对象
        vm.annountment.anId = $state.params.id;
        vm.editor = undefined;
        vm.businessFlag = {
            isInitFileOption: false,   //是否已经初始化附件上传控件
        }
        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.annountment.anId) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.annountment.anId", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }

            //创建附件对象
            vm.sysFile = {
                businessId: vm.annountment.anId,
                mainId: vm.annountment.anId,
                mainType: "通知公告",
                sysBusiType: "",
                showBusiType: false,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm,
                uploadSuccess: function () {
                    sysfileSvc.findByBusinessId(vm.annountment.anId, function (data) {
                        vm.sysFilelists = data;
                    });
                }
            });
        }
        active();
        function active() {
            vm.isNeed = "1";//是否需要审批，默认不需要
            //渲染百度Ueditor的编辑器
            vm.editor = new UE.ui.Editor();
            vm.editor.render('editor');
            if (vm.annountment.anId) {
                vm.isUpdate = true;
                annountmentSvc.findAnnountmentById(vm, function (data) {
                    vm.annountment = data;
                    vm.initFileUpload();
                    vm.editor.ready(function () {//在初始化后，填充编辑器的值
                        if (vm.annountment.anContent != undefined) {
                            vm.editor.setContent(vm.annountment.anContent);
                        }
                    })
                });
                sysfileSvc.findByBusinessId(vm.annountment.anId, function (data) {
                    vm.sysFilelists = data;
                });
            } else {
                vm.initFileUpload();
            }
        }


        //新增通知公告
        vm.create = function () {
            annountmentSvc.createAnnountment(vm, function (data) {
                if(data.flag || data.reCode == 'ok'){
                    //保存成功重新跳转，要不然路径不对
                    bsWin.alert("保存成功！",function(){
                        $state.go("annountmentEdit", { id: data.reObj.anId},{reload:true});
                    });
                }else{
                    bsWin.alert(data.reMsg);
                }
            });
        }

        //编辑通知公告
        vm.update = function () {
            annountmentSvc.updateAnnountment(vm, function (data) {
                vm.isSubmit = false;
                bsWin.alert("操作成功！");
            });
        }

        //************************** S 以下是新流程处理js **************************//
        vm.startNewFlow = function () {
            bsWin.confirm({
                title: "询问提示",
                message: "确认已经完成填写，并且发起流程么？",
                onOk: function () {
                    //当是更新提交时，先更新在提交
                    if (vm.annountment.anId) {
                        annountmentSvc.updateAnnountment(vm, function (data) {//提交时先更新在提交
                            annountmentSvc.startFlow(vm.annountment.anId, function (data) {//更新的提交
                                if (data.flag || data.reCode == 'ok') {
                                    bsWin.success("操作成功！", function () {
                                        $state.go('annountment');
                                    });
                                } else {
                                    bsWin.error(data.reMsg);
                                }
                            });
                        });
                    } else {
                        //当是保存时提交就先保存
                        annountmentSvc.createAnnountment(vm, function (data) {
                            vm.id = data.reObj.anId;                            //保存后取得id,流程发起需要
                            annountmentSvc.startFlow(vm.id, function (data) {//更新的提交
                                if (data.flag || data.reCode == 'ok') {
                                    bsWin.success("操作成功！", function () {
                                        $state.go('annountment');
                                    });
                                } else {
                                    bsWin.error(data.reMsg);
                                }
                            });
                        });
                    }
                }
            });
        }

    }
})();
(function () {
    'use strict';

    angular.module('app').factory('annountmentSvc', annountment);

    annountment.$inject = ['$http', 'bsWin', 'sysfileSvc'];

    function annountment($http, bsWin, sysfileSvc) {

        var url_annountment = rootPath + "/annountment";
        var url_back = "#/annountment";
        var service = {
            grid: grid,		                            //初始化列表
            createAnnountment: createAnnountment,	    //新增通知公告
            initAnOrg: initAnOrg,		                //初始化发布单位
            findAnnountmentById: findAnnountmentById,	//获取通知公告信息
            updateIssueState: updateIssueState,         //更改通知公告的发布状态
            updateAnnountment: updateAnnountment,	    //更新通知公告
            deleteAnnountment: deleteAnnountment,	    //删除通知公告
            findDetailById: findDetailById,	            //通过id获取通过公告
            postArticle: postArticle,	                //访问上一篇文章
            nextArticle: nextArticle,	                //访问下一篇文章
            startFlow: startFlow,                           //启动流程
            initFlowDeal: initFlowDeal                      //初始化流程数据
        };

        return service;

        //begin initAnOrg
        function initAnOrg(vm) {
            var httpOptions = {
                method: "get",
                url: url_annountment + "/initAnOrg"
            }

            var httpSuccess = function success(response) {
                vm.annountment.anOrg = "";
                vm.annountment.anOrg = response.data.substring(1, response.data.length - 1);
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        //end initAnOrg

        //begin findAnnountmentById
        function findAnnountmentById(vm, callBack) {
            var httpOptions = {
                method: "post",
                url: url_annountment + "/findAnnountmentById",
                params: {
                    anId: vm.annountment.anId
                }
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//end findAnnountmentById

        //begin createAnnountment
        function createAnnountment(vm, callBack) {
            vm.annountment.anContent = vm.editor.getContent();
            ;
            common.initJqValidation();
            var isValid = $('#form').valid();
            if (isValid) {
                vm.isSubmit = true;
                var httpOptions = {
                    method: "post",
                    url: rootPath + "/annountment",
                    data: vm.annountment
                }
                var httpSuccess = function success(response) {
                    vm.isSubmit = false;
                    if (callBack != undefined && typeof callBack == 'function') {
                        callBack(response.data);
                    }
                }
                common.http({
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess,
                    onError: function () {
                        vm.isSubmit = false;
                    }
                });
            }
        }//end createAnnountment

        //begin updateAnnountment
        function updateAnnountment(vm, callBack) {
            vm.isSubmit = true;
            vm.annountment.anContent = vm.editor.getContent();
            var httpOptions = {
                method: "put",
                url: url_annountment,
                data: vm.annountment
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    vm.isSubmit = false;
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function () {
                    vm.isSubmit = false;
                }
            });

        }//end updateAnnountment


        //begin deleteAnnountment
        function deleteAnnountment(anId, callBack) {
            var httpOptions = {
                method: "delete",
                url: url_annountment,
                params: {
                    anId: anId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        //end deleteAnnountment

        // begin#grid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = common.kendoGridDataSource(rootPath + "/annountment/fingByCurUser", $("#annountmentform"), vm.queryParams.page, vm.queryParams.pageSize, vm.gridParams);
            // End:dataSource
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.anId)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
                    field: "unitSort",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "",
                    title: "标题",
                    width: 300,
                    filterable: false,
                    template: function (item) {
                        //如果是审批流程，则可以查看审批流程的详情信息
                        if (item.processInstanceId) {
                            return '<a href="#/flowDetail/' + item.anId + '/ANNOUNT_MENT_FLOW//' + item.processInstanceId+'" >' + item.anTitle + '</a>';
                        } else {
                            return item.anTitle;
                        }
                    }
                },
                {
                    field: "",
                    title: "是否置顶",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        if (item.isStick && item.isStick == 9) {
                            return "是";
                        } else {
                            return "否";
                        }
                    }
                },
                {
                    field: "",
                    title: "是否审批",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        if (item.processInstanceId) {
                            return "是";
                        } else {
                            return "否";
                        }
                    }
                },
                {
                    field: "",
                    title: "审批结果",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        if (item.appoveStatus) {
                            if (item.appoveStatus != '9') {
                                return "审批中";
                            } else if (item.appoveStatus == '9' && item.issue == '9') {
                                return "<span style='color: green'>审批通过</span>";
                            } else if (item.appoveStatus == '9' && item.issue != '9') {
                                return "<span style='color: red'>审批不通过</span>";
                            }
                        } else {
                            return "";
                        }
                    }
                },
                {
                    field: "",
                    title: "发布状态",
                    width: 100,
                    template: function (item) {
                        if (item.issue && item.issue == '9') {
                            return "已发布";
                        } else {
                            return "未发布";
                        }
                    }
                },
                {
                    field: "issueDate",
                    title: "发布时间",
                    format: "{0:yyyy-MM-dd hh24:mm:ss}",
                    width: 160,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 150,
                    template: function (item) {
                        var isCanDel = true;
                        var isCanEdit = true;
                        //已发布或者走流程的不能删除
                        if (item.issue == '9' || item.processInstanceId) {
                            isCanDel = false;
                        }
                        //已经正式发布的不能编辑
                        if (item.issue == '9' || item.issue == 9) {
                            isCanEdit = false;
                        }
                        return common.format(
                            $('#columnBtns').html(),
                            "vm.detail('" + item.anId + "')",
                            item.anId,
                            isCanEdit,
                            "vm.del('" + item.anId + "')",
                            isCanDel);

                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                pageable: common.kendoGridConfig(vm.queryParams).pageable,
                dataBound: common.kendoGridConfig(vm.queryParams).dataBound,
                columns: columns,
                resizable: true
            };
        }// end fun grid

        //S_updateIssueState
        function updateIssueState(vm, state) {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                bsWin.alert("请选择要修改的数据");
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var httpOptions = {
                    method: 'post',
                    url: rootPath + "/annountment/updateIssueState",
                    params: {
                        ids: ids.join(','),
                        issueState: state
                    }
                }
                var httpSuccess = function success(response) {
                    vm.isSubmit = false;
                    if (response.data.flag || response.data.reCode == 'ok') {
                        bsWin.alert("操作成功！", function () {
                            vm.gridOptions.dataSource.read();
                        });
                    } else {
                        bsWin.alert(response.data.reMsg);
                    }
                }
                common.http({
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
            }
        }//E_updateIssueState

        function findDetailById(vm, id) {
            var httpOptions = {
                method: "post",
                url: url_annountment + "/findAnnountmentById",
                params: {
                    anId: id
                }
            }
            var httpSuccess = function success(response) {
                vm.annountment = response.data;
                sysfileSvc.findByBusinessId(id, function (data) {
                    vm.sysFilelists = data;
                });
                postArticle(vm, id);
                nextArticle(vm, id);
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//end findAnnountmentById

        //begin postArticle
        function postArticle(vm, id) {
            var httpOptions = {
                method: "get",
                url: rootPath + "/annountment/postArticle",
                params: {
                    anId: id
                }
            }

            var httpSuccess = function success(response) {
                vm.annountmentPost = response.data;
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//end postArticle


        //begin nextArticle
        function nextArticle(vm, id) {
            var httpOptions = {
                method: "get",
                url: rootPath + "/annountment/nextArticle",
                params: {
                    anId: id
                }
            }
            var httpSuccess = function success(response) {
                vm.annountmentNext = response.data;
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//end nextArticle


        //S_startFlow
        function startFlow(id, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/annountment/startFlow",
                params: {
                    id: id
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_startFlow

        //S_初始化流程数据
        function initFlowDeal(vm) {
            vm.annountment = {};
            vm.annountment.anId = vm.businessKey;
            findAnnountmentById(vm, function (data) {
                vm.annountment = data;
            })
        }//E_initFlowDeal


    }
})();
(function () {
    'use strict';

    angular.module('app').controller('annountmentYetCtrl', annountmentYet);

    annountmentYet.$inject = ['$location', '$state', '$http', 'annountmentYetSvc','$rootScope'];

    function annountmentYet($location, $state, $http, annountmentYetSvc,$rootScope) {
        var vm = this;
        vm.title = "通知公告列表";
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }
        active();
        function active() {
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }
                annountmentYetSvc.grid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                annountmentYetSvc.grid(vm);
            }
        }

        //查看详情
        vm.detail = function(id){
            if(id){
                vm.saveView();
                $state.go('annountmentDetail', {id: id});
            }
        }

        //查询
        vm.findAnnountment = function(){
            vm.gridOptions.dataSource._skip=0;
        	vm.gridOptions.dataSource.read();
        }

        
         //重置
        vm.resetAnnountment=function(){
        	var tab=$("#annountmentYetform").find('input,select');
        	$.each(tab,function(i,obj){
        		obj.value="";
        	});
        }
    }
})();
(function () {
    'use strict';

    angular.module('app').factory('annountmentYetSvc', annountmentYet);

    annountmentYet.$inject = ['$http'];

    function annountmentYet($http) {
    	
    	var service={
    		grid : grid
    	};
    	
    	return service;
    	
    	 // begin#grid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = common.kendoGridDataSource(rootPath + "/annountment/findByIssue",$("#annountmentYetform"),vm.queryParams.page,vm.queryParams.pageSize,vm.gridParams);
            // End:dataSource

            // Begin:column
            var columns = [
                /*{
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.anId)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },*/
                {
                    field: "unitSort",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "",
                    title: "标题",
                    width: 300,
                    filterable: false,
                    template:function(item){
                        if(item.isStick == 9){
                            return '<span class="label label-primary">置顶</span>'+item.anTitle;
                        }else{
                            return item.anTitle;
                        }
                    }
                },
                {
                    field: "issueDate",
                    title: "发布时间",
                    format: "{0:yyyy-MM-dd hh24:mm:ss}",
                    width: 160,
                    filterable: false
                },
                {
                    field: "issueUser",
                    title: "发布人",
                    width: 100,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 150,
                    template: function (item) {
                    	
                        return common.format($('#columnBtns').html(),"vm.detail('" + item.anId + "')");
                    	
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                pageable : common.kendoGridConfig(vm.queryParams).pageable,
                dataBound:common.kendoGridConfig(vm.queryParams).dataBound,
                columns: columns,
                resizable: true
            };

        }// end fun grid
    	
    	
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('archivesLibraryCtrl', archivesLibrary);

    archivesLibrary.$inject = ['archivesLibrarySvc', 'bsWin', '$state'];

    function archivesLibrary(archivesLibrarySvc, bsWin, $state) {
        var vm = this;
        vm.model = {};
        vm.title = '项目档案借阅管理';
        vm.id = $state.params.id;

        activate();
        function activate() {
            if ($state.params.id) {
                archivesLibrarySvc.initArchivesLibrary($state.params.id, function (data) {
                    vm.model = data;
                });
            }
        }

        //保存中心档案借阅
        vm.createLibrary = function () {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                archivesLibrarySvc.createArchivesLibrary(vm.model, function (data) {
                    if (data.flag || data.reCode == "ok") {
                        vm.model = data.reObj;
                        bsWin.alert("操作成功！");
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            }
        };

        vm.startFlow = function () {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                archivesLibrarySvc.createArchivesLibrary(vm.model, function (data) {
                    if (data.flag || data.reCode == "ok") {
                        vm.model = data.reObj;
                        archivesLibrarySvc.startFlow(vm.model.id, function (data) {
                            if (data.flag || data.reCode == "ok") {
                                bsWin.alert("操作成功！", function () {
                                    $state.go("archivesLibraryList");
                                });
                            } else {
                                bsWin.error(data.reMsg);
                            }
                        })
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            }
        }

        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    archivesLibrarySvc.deleteArchivesLibrary(vm, id);
                }
            });
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('archivesLibraryListCtrl', archivesLibrary);

    archivesLibrary.$inject = ['$location', 'archivesLibrarySvc', '$state','bsWin'];

    function archivesLibrary($location, archivesLibrarySvc, $state,bsWin) {
        var vm = this;
        vm.title = '档案借阅管理';

        activate();
        function activate() {
            archivesLibrarySvc.grid(vm);
        }

        //查询
        vm.search = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        //重置
        vm.formReset = function(){
            $("#searchform")[0].reset();
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').factory('archivesLibrarySvc', archivesLibrary);

    archivesLibrary.$inject = ['$http', 'bsWin'];

    function archivesLibrary($http, bsWin) {
        var url_archivesLibrary = rootPath + "/archivesLibrary", url_back = '#/archivesLibraryList';
        var service = {
            initArchivesLibrary: initArchivesLibrary,   //初始化档案借阅信息
            startFlow : startFlow,                      //发起流程
            initFlowDeal : initFlowDeal,                //初始化流程信息
            grid: grid,									 //项目借阅审批列表
            createArchivesLibrary: createArchivesLibrary,//保存中心档案借阅
            createCityLibrary: createCityLibrary, 		 //保存市档案借阅
            getArchivesUserName: getArchivesUserName,	 //获取归档员
            deleteArchivesLibrary: deleteArchivesLibrary,
        };

        return service;

        //S_初始化档案借阅信息
        function initArchivesLibrary(id, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/archivesLibrary/findById",
                params:{
                    id : id
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_initArchivesLibrary

        //S_发起流程
        function startFlow(id,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/archivesLibrary/startFlow",
                params:{
                    id : id
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_startFlow

        //S_初始化流程信息
        function initFlowDeal(vm){
            initArchivesLibrary(vm.businessKey,function(data){
                vm.model = data;
            });
        }//E_initFlowDeal

        //S 获取归档员
        function getArchivesUserName(vm) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/archivesLibrary/findByArchivesUser",
            };
            var httpSuccess = function success(response) {
                vm.userlist = response.data;
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }// E 获取归档员
        // begin#保存市档案借阅
        function createCityLibrary(model, callBack) {
            var httpOptions = {
                method: 'post',
                url: url_archivesLibrary + "/saveCity",
                data: model
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#deleteArchivesLibrary
        function deleteArchivesLibrary(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_archivesLibrary,
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog: true,
                            fn: function () {
                                vm.isSubmit = false;
                                vm.gridOptions.dataSource.read();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#保存中心档案借阅
        function createArchivesLibrary(model, callBack) {
            var httpOptions = {
                method: 'post',
                url: url_archivesLibrary + "/savaLibrary",
                data: model
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#grid
        function grid(vm) {
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/archivesLibrary/findByOData",$("#searchform")),
                schema: {
                    data: "value",
                    total: function (data) {
                        return data['count'];
                    },
                    model: {
                        id: "id",
                        fields: {
                            createdDate: {
                                type: "date"
                            },
                            modifiedDate: {
                                type: "date"
                            }
                        }
                    }
                },
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
                    field: "",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>",
                },

                {
                    field: "readCompany",
                    title: "项目单位",
                    width: 140,
                    filterable: false
                },

                {
                    field: "readProjectName",
                    title: "查阅项目",
                    width: 140,
                    filterable: false
                },
                {
                    field: "readUsername",
                    title: "借阅人",
                    width: 100,
                    filterable: false
                },
                {
                    field: "readArchivesCode",
                    title: "归档编号",
                    width: 100,
                    filterable: false
                },
                {
                    field: "readDate",
                    title: "借阅时间",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "",
                    title: "操作",
                    width: 100,
                    template: function (item) {
                            return common.format($('#columnBtns').html(),"archivesLibraryView/"+item.id);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: function () {
                    var rows = this.items();
                    var page = this.pager.page() - 1;
                    var pagesize = this.pager.pageSize();
                    $(rows).each(function () {
                        var index = $(this).index() + 1 + page * pagesize;
                        var rowLabel = $(this).find(".row-number");
                        $(rowLabel).html(index);
                    });
                },
                resizable: true
            };

        }// end fun grid


    }
})();
(function () {
    'use strict';

    angular.module('app').controller('archivesLibraryViewCtrl', archivesLibraryView);

    archivesLibraryView.$inject = ['archivesLibrarySvc', 'bsWin', '$state'];

    function archivesLibraryView(archivesLibrarySvc, bsWin, $state) {

        var vm = this;
        vm.model = {};
        vm.title = '项目档案借阅查看详情';
        vm.id = $state.params.id;

        activate();
        function activate() {
            if (vm.id) {
                archivesLibrarySvc.initArchivesLibrary(vm.id, function (data) {
                    vm.model = data;
                });
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('assistPlanCtrl', assistPlan);

    assistPlan.$inject = ['$location', '$state', 'assistSvc', '$interval', 'bsWin', 'ideaSvc'];

    function assistPlan($location, $state, assistSvc, $interval, bsWin, ideaSvc) {
        var vm = this;
        vm.model = {};							//创建一个form对象
        vm.filterModel = {};                    //filter对象
        vm.filterLow = {};
        vm.title = '协审计划管理';        		//标题
        vm.splitNumArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
        vm.plan = {};                           //添加的协审对象
        vm.plan.assistType = "独立项目";        //默认的协审类型
        vm.planList = [];                       //在办协审计划列表
        vm.assistSign = [];                     //待选项目列表
        vm.pickSign = [];                       //协审计划已选的项目列表
        vm.pickMainSign = [];                    //主项目对象
        vm.lowerSign = [];                      //次项目对象
        vm.showPlanId = "";                     //显示的协审计划ID

        vm.assistPlan = {};                      //弹窗协审计划对象
        var weekArray = ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"];

        /**
         * 刷新页面数据
         * @param isOnlySign
         */
        vm.refleshPageInfo = function (isOnlySign) {
            vm.assistSign = [];
            assistSvc.initPlanPage(isOnlySign, function (data) {
                vm.assistSign = data.signList;
                //刷新协审计划信息
                vm.refleshPlanInfo(vm.plan.id);
            });
        }

        /**
         * 刷新协审计划信息
         */
        vm.refleshPlanInfo = function (planId) {
            //查询对应的协审项目信息
            assistSvc.findPlanSign(planId, false, vm.isCommit, function (data) {
                vm.pickMainSign = [];                   //主项目对象全部清空
                vm.lowerSign = [];                      //次项目对象
                vm.plan = data.planDto;
                //合并评审，还要挑选出主项目和次项目
                if (vm.plan.assistType == '合并项目') {
                    angular.forEach(vm.plan.assistPlanSignDtoList, function (obj, i) {
                        if (obj.isMain == '9' || obj.isMain == 9) {
                            angular.forEach(data.signList, function (sObj, index) {
                                if (obj.signId == sObj.signid) {
                                    vm.pickMainSign.push(sObj);
                                } else {
                                    vm.lowerSign.push(sObj);
                                }
                            })
                        }
                    })
                } else {
                    vm.pickMainSign = data.signList;
                }
            });
        }

        active();
        function active() {
            assistSvc.initPlanPage(false, function (data) {
                if (data.signList && data.signList.length > 0) {
                    vm.assistSign = data.signList;
                }
                if (data.planList && data.planList.length > 0) {
                    vm.planList = data.planList;
                }
            });
            assistSvc.initPlanGrid(vm);
            $('#planInfo li').click(function (e) {
                var aObj = $("a", this);
                e.preventDefault();
                aObj.tab('show');
                var showDiv = aObj.attr("for-div");
                $(".tab-pane").removeClass("active").removeClass("in");
                $("#" + showDiv).addClass("active").addClass("in").show(500);
            })
        }

        //待选择过来器
        vm.filterSign = function (item) {
            var isMatch = true;
            if (!angular.isUndefined(item)) {
                if (!angular.isUndefined(vm.filterModel.filterFilecode)) {
                    if(!item.projectcode){
                        isMatch = false;
                    }else if((item.filecode).indexOf(vm.filterModel.filterFilecode) == -1) {
                        isMatch = false;
                    }
                }
                if (isMatch) {
                    if (!angular.isUndefined(vm.filterModel.filterProjectCode)) {
                        if(!item.projectcode){
                            isMatch = false;
                        }else if( (item.projectcode).indexOf(vm.filterModel.filterProjectCode) == -1) {
                            isMatch = false;
                        }
                    }
                }
                if (isMatch) {
                    if (!angular.isUndefined(vm.filterModel.filterProjectName)) {
                        if(!item.projectname){
                            isMatch = false;
                        }else if( (item.projectname).indexOf(vm.filterModel.filterProjectName) == -1) {
                            isMatch = false;
                        }
                    }
                }
                if (isMatch) {
                    if (!angular.isUndefined(vm.filterModel.filterBuiltName)) {
                        if (angular.isUndefined(item.builtcompanyName)) {
                            isMatch = false;
                        }
                        if (isMatch && (item.builtcompanyName).indexOf(vm.filterModel.filterBuiltName) == -1) {
                            isMatch = false;
                        }
                    }
                }
                if (isMatch) {
                    return item;
                }
            }
        }

        //次项目待选择器
        vm.filterLowSign = function (item) {
            var isMatch = true;
            if (!angular.isUndefined(item)) {
                if (!angular.isUndefined(vm.filterLow.filterFilecode)) {
                    if(!item.filecode){
                        isMatch = false;
                    }else if ((item.filecode).indexOf(vm.filterLow.filterFilecode) == -1) {
                        isMatch = false;
                    }
                }
                if (isMatch) {
                    if (!angular.isUndefined(vm.filterLow.filterProjectCode)) {
                        if(!item.projectcode){
                            isMatch = false;
                        }else if ((item.projectcode).indexOf(vm.filterLow.filterProjectCode) == -1) {
                            isMatch = false;
                        }
                    }
                }
                if (isMatch) {
                    if (!angular.isUndefined(vm.filterLow.filterProjectName)) {
                        if(!item.projectname){
                            isMatch = false;
                        }else if ((item.projectname).indexOf(vm.filterLow.filterProjectName) == -1) {
                            isMatch = false;
                        }
                    }
                }
                if (isMatch) {
                    if (!angular.isUndefined(vm.filterLow.filterBuiltName)) {
                        if (angular.isUndefined(item.builtcompanyName)) {
                            isMatch = false;
                        }
                        if (isMatch && (item.builtcompanyName).indexOf(vm.filterLow.filterBuiltName) == -1) {
                            isMatch = false;
                        }
                    }
                }
                if (isMatch) {
                    return item;
                }
            }
        }


        //重置拆分值
        vm.initSplit = function (typeName) {
            if (vm.plan.assistType == typeName) {
                if (!angular.isUndefined(vm.plan.spliNum)) {
                    vm.plan.spliNum = 0;
                }
            }
        }

        //挑选项目
        vm.affirmSign = function () {
            var isCheckSign = $("input[name='selASTSign']:checked");
            if (isCheckSign.length < 1) {
                bsWin.alert("请选择要挑选的项目");
            } else {
                if (isCheckSign.length > 1) {
                    if (vm.plan.assistType == '合并项目') {
                        bsWin.alert("合并项目要先挑选一个主项目，再挑选次项目！");
                    } else {
                        bsWin.alert("独立项目，每次只能选择一个！");
                    }
                } else {
                    var saveSignId = isCheckSign[0].value;
                    vm.plan.signId = saveSignId;
                    /**
                     * 保存协审计划信息
                     */
                    assistSvc.saveAssistPlan(vm.plan, vm.isCommit, function (data) {
                        vm.isCommit = false;
                        if (data.flag || date.reCode == 'ok') {
                            //如果是新增，则重新刷新列表
                            if (!vm.plan.id) {
                                vm.gridOptions.dataSource.read();
                            }
                            vm.plan = data.reObj;
                            assistSvc.initPlanPage(true, function (data) {
                                if (data.signList && data.signList.length > 0) {
                                    vm.assistSign = data.signList;
                                }
                            });
                            vm.planList.push(vm.plan);
                            vm.showPickLowSign(vm.plan.id);
                        } else {
                            bsWin.alert(data.reMsg);
                        }
                    });
                }
            }
        }

        //取消
        vm.cancelSign = function () {
            var isCheckSign = $("input[name='checkASTSign']:checked");
            if (isCheckSign.length < 1) {
                bsWin.alert("请选择取消的项目");
            } else {
                bsWin.confirm({
                    title: "询问提示",
                    message: "确认取消挑选项目吗?",
                    onOk: function () {
                        var ids = [];
                        for (var i = 0; i < isCheckSign.length; i++) {
                            ids.push(isCheckSign[i].value);
                        }
                        assistSvc.cancelPlanSign(vm, ids.join(','), function (data) {
                            vm.isCommit = false;
                            vm.refleshPageInfo(true);
                            bsWin.alert("操作成功！");
                        });
                    }
                });
            }
        }

        //初始化选择的协审计划信息
        vm.initSelPlan = function () {
            vm.pickMainSign = [];                   //主项目对象全部清空
            vm.lowerSign = [];                      //次项目对象
            if (vm.showPlanId) {
                //查询对应的协审项目信息
                assistSvc.findPlanSign(vm.showPlanId, false, vm.isCommit, function (data) {
                    vm.plan = data.planDto;
                    vm.refleshPlanInfo(vm.showPlanId);
                });
            } else {
                vm.plan = {};
            }
        }
        //删除操作
        vm.doDelete = function () {
            if (vm.plan.id) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "确认删除吗？删除数据不可恢复，请慎重！",
                    onOk: function () {
                        assistSvc.deletePlan(vm.plan.id, vm.isCommit, function (data) {
                            vm.planList = [];
                            assistSvc.initPlanPage(false, function (data) {
                                if (data.signList && data.signList.length > 0) {
                                    vm.assistSign = data.signList;
                                }
                                if (data.planList && data.planList.length > 0) {
                                    vm.planList = data.planList;
                                }
                            });

                            vm.isCommit = false;
                            vm.pickMainSign = [];                   //主项目对象全部清空
                            vm.lowerSign = [];                      //次项目对象
                            vm.plan = {};
                            //刷新列表信息
                            vm.gridOptions.dataSource.read();
                            bsWin.alert("操作成功！");
                        });
                    }
                });
            } else {
                bsWin.alert("请选择要删除的协审计划包");
            }
        }

        vm.showPickLowSign = function (planId) {
            //查询对应的协审项目信息
            assistSvc.findPlanSign(planId, false, vm.isCommit, function (data) {
                vm.pickMainSign = [];                   //主项目对象全部清空
                vm.lowerSign = [];                      //次项目对象
                vm.plan = data.planDto;
                //合并评审，还要挑选出主项目和次项目
                if (vm.plan.assistType == '合并项目') {
                    angular.forEach(vm.plan.assistPlanSignDtoList, function (obj, i) {
                        if (obj.isMain == '9' || obj.isMain == 9) {
                            angular.forEach(data.signList, function (sObj, index) {
                                if (obj.signId == sObj.signid) {
                                    vm.pickMainSign.push(sObj);
                                } else {
                                    vm.lowerSign.push(sObj);
                                }
                            })
                        }
                    })
                    //显示次项目窗口
                    $("#lowerSignWin").kendoWindow({
                        width: "1024px",
                        height: "600px",
                        title: "次项目信息",
                        visible: false,
                        modal: true,
                        closable: true,
                        actions: ["Pin", "Minimize", "Maximize", "Close"]
                    }).data("kendoWindow").center().open();
                } else {
                    vm.pickMainSign = data.signList;
                }
            });
        }

        //挑选次项目
        vm.affirmLowerSign = function () {
            var checkSign = $("input[name='selLowSign']:checked");
            if (checkSign.length < 1) {
                bsWin.alert("请选择要挑选的次项目!");
            } else {
                var ids = [];
                for (var i = 0; i < checkSign.length; i++) {
                    ids.push(checkSign[i].value);
                }
                assistSvc.saveLowPlanSign(vm, ids, function (data) {
                    vm.isCommit = false;
                    bsWin.alert("操作成功！");
                    vm.refleshPageInfo(true);
                });
            }
        }

        //取消次项目
        vm.cancelLowerSign = function () {
            var checkSign = $("input[name='checkLowSign']:checked");
            if (checkSign.length < 1) {
                bsWin.alert("请选择要挑选的次项目");
            } else {
                var ids = [];
                for (var i = 0; i < checkSign.length; i++) {
                    ids.push(checkSign[i].value);
                }
                assistSvc.cancelLowPlanSign(vm, ids.join(","), function () {
                    vm.isCommit = false;
                    bsWin.alert("操作成功！");
                    vm.refleshPageInfo(true);
                });
            }
        }

        //查询协审计划信息
        vm.queryPlan = function () {
            assistSvc.queryPlan(vm);
        }

        //查看协审计划的详情信息
        vm.showPlanDetail = function (planId) {
            //初始化协审计划
            vm.assistPlan = {};
            vm.unitList = [];
            vm.assistPlanSign = [];

            assistSvc.initPlanByPlanId(planId, function (data) {
                vm.assistPlan = data;
                assistSvc.findPlanSign(planId, true, vm.isCommit, function (data) {
                    if (data.signList && data.signList.length > 0) {
                        angular.forEach(vm.assistPlan.assistPlanSignDtoList, function (ps, index) {
                            angular.forEach(data.signList, function (s, i) {
                                if (s.signid == ps.signId) {
                                    ps.projectName = s.projectname;
                                    ps.estimateCost = s.declaration;
                                }
                            })
                        })
                    }
                    $("#planInfo").kendoWindow({
                        width: "80%",
                        height: "600px",
                        title: "协审项目清单",
                        visible: false,
                        modal: true,
                        open: function () {
                            vm.drawTimeDay = "";
                            vm.drawTimeStart = "";
                            vm.drawTimeEnd = "";
                        },
                        closable: true,
                        actions: ["Minimize", "Maximize", "Close"]
                    }).data("kendoWindow").center().open();
                });
            });
        }

        vm.ministerOpinionEdit = function (options) {	//部长意见
            if (!angular.isObject(options)) {
                options = {};
            }
            ideaSvc.initIdeaData(vm, options);
        }

        vm.viceDirectorOpinionEdit = function (options) {	//副主任意见
            if (!angular.isObject(options)) {
                options = {};
            }
            ideaSvc.initIdeaData(vm, options);
        }

        vm.directorOpinionEdit = function (options) {	//主任意见
            if (!angular.isObject(options)) {
                options = {};
            }
            ideaSvc.initIdeaData(vm, options);
        }

        /**
         * 保存协审费用信息
         */
        vm.savePlanSign = function () {
            vm.assistPlan.ministerOpinion = $("#ministerOpinion").val();
            vm.assistPlan.viceDirectorOpinion = $("#viceDirectorOpinion").val();
            vm.assistPlan.directorOpinion = $("#directorOpinion").val();

            var assistPlanModel = angular.copy(vm.assistPlan);
            assistSvc.savePlan(assistPlanModel, function (data) {
                if (data.flag || data.reCode == 'ok') {
                    bsWin.alert("操作成功！");
                } else {
                    bsWin.alert(data.reMsg);
                }
            });
        }

        /**
         * 抽取协审单位
         */
        vm.chooseAssistUnit = function () {
            vm.number = vm.assistPlan.assistPlanSignDtoList == undefined ? 0 : vm.assistPlan.assistPlanSignDtoList.length;
            if (vm.assistPlan.drawType == '1') {
                vm.number = vm.number + 1;
            }
            //抽取协审单位
            assistSvc.chooseAssistUnit(vm.assistPlan.id, vm.number, vm.assistPlan.drawType, function (data) {
                console.log(data);
                if (data.flag || data.reCode == 'ok') {
                    vm.assistPlan.assistUnitDtoList = data.reObj;
                } else {
                    bsWin.alert(data.reMsg);
                }
            });
        }

        /**
         * 手动选择抽签单位
         */
        vm.againChooleAssistUnit = function () {
            //不用每次都去后台加载
            if(!vm.allUnitList || vm.allUnitList.length == 0){
                assistSvc.getAllUnit(function(data){
                    vm.allUnitList = data;
                    $("#againChooleAssistUnit").kendoWindow({
                        title: "选择参加协审单位",
                        width: "820px",
                        height: "560px",
                        visible: false,
                        modal: true,
                        closable: true,
                        actions: ["Minimize", "Maximize", "Close"]
                    }).data("kendoWindow").center().open();
                });
            }else{
                $("#againChooleAssistUnit").kendoWindow({
                    title: "选择参加协审单位",
                    width: "820px",
                    height: "560px",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            }
        }

        /**
         * 手动添加协审单位
         * @param unitObject
         */
        vm.saveAddChooleUnit = function (unitObject) {
            var needNum = vm.assistPlan.assistPlanSignDtoList.length;
            if(vm.assistPlan.drawType == '1'){      //轮空一家单位
                needNum = needNum + 1;
            }
            if (vm.assistPlan.assistUnitDtoList.length < needNum) {
                assistSvc.saveAddChooleUnit(vm, unitObject,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        vm.assistPlan.assistUnitDtoList.push(data.reObj);
                        bsWin.alert("操作成功！");
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("当前只能" +needNum + "家单位参与抽签");
            }
        }

        /**
         * 协审项目抽签
         */
        vm.drawAssistUnit = function () {
            var assistSignListLength = 0;
            if (vm.assistPlan.assistPlanSignDtoList && vm.assistPlan.assistPlanSignDtoList.length > 0) {
                assistSignListLength = vm.assistPlan.assistPlanSignDtoList.length;
                angular.forEach(vm.assistPlan.assistPlanSignDtoList, function (t, n) {
                    t.assistUnit = null;
                })
                if(!vm.assistPlan.assistUnitDtoList ||  vm.assistPlan.assistUnitDtoList.length == 0){
                    bsWin.alert("还没有设置协审单位，无法进行抽签！");
                }else{
                    var drawAssistUnitLength = vm.assistPlan.assistUnitDtoList.length;
                    vm.drawAssistUnits = angular.copy(vm.assistPlan.assistUnitDtoList);

                    //判断协审单位个数是否不少于协审计划个数，若少则先手动选择参与的协审单位，不少则可以直接抽签 drawType
                    if ((vm.assistPlan.drawType == "1") ? (drawAssistUnitLength > assistSignListLength) : (drawAssistUnitLength >= assistSignListLength)) {
                        var drawPlanSignIndex = 0;
                        //记录被抽取的协审单位下标
                        var signIndex = -1;
                        //先让上次轮空的协审单位进行抽取项目
                        //遍历协审单位，判断是否为空，9表示为空，如果为空，则进行抽签协审计划，分配协审单位
                        for (var i = 0; i < drawAssistUnitLength; i++) {
                            if (vm.assistPlan.assistUnitDtoList[i].isLastUnSelected == '9') {
                                //产生随机数
                                var selscope = Math.floor(Math.random() * (drawAssistUnitLength));
                                signIndex = selscope;
                                //将协审单位分配给协审计划
                                vm.assistPlan.assistPlanSignDtoList[selscope].assistUnit = vm.drawAssistUnits[i];
                                vm.drawPlanSign = vm.assistPlan.assistPlanSignDtoList[selscope];
                                //将上轮轮空的协审单位移除
                                vm.drawAssistUnits.splice(i, 1);
                            }
                        }

                        //当前抽取第一个项目的协审单位
                        var timeCount = 0;
                        vm.isStartDraw = true;
                        vm.isDrawDone = false;
                        vm.t = $interval(function () {
                            vm.drawPlanSign = vm.assistPlan.assistPlanSignDtoList[drawPlanSignIndex];
                            var selscope = Math.floor(Math.random() * (drawAssistUnitLength));
                            var selAssistUnit = vm.drawAssistUnits[selscope];
                            vm.showAssitUnitName = selAssistUnit.unitName;
                            timeCount++;
                            //一秒后，选中协审单位
                            if (timeCount % 5 == 0) {
                                //选中协审单位
                                if (drawPlanSignIndex != signIndex) {
                                    vm.assistPlan.assistPlanSignDtoList[drawPlanSignIndex].assistUnit = selAssistUnit;
                                } else {
                                    if (drawPlanSignIndex != (assistSignListLength-1)) {
                                        vm.assistPlan.assistPlanSignDtoList[++drawPlanSignIndex].assistUnit = selAssistUnit;
                                    }
                                }
                                drawPlanSignIndex++;
                                //判断轮空抽签的是不是最后一个，并且协审计划轮抽到最后一个时，停止抽签
                                if (drawPlanSignIndex == signIndex && signIndex == (assistSignListLength-1)) {
                                    $interval.cancel(vm.t);
                                    vm.isDrawDone = true;
                                }
                                if (drawPlanSignIndex == assistSignListLength) {
                                    //抽签完毕
                                    $interval.cancel(vm.t);
                                    vm.isDrawDone = true;
                                }

                                vm.drawAssistUnits.forEach(function (t, n) {
                                    if (t.id == selAssistUnit.id) {
                                        vm.drawAssistUnits.splice(n, 1);
                                    }
                                });
                            }
                        }, 200);
                    } else {
                        bsWin.alert("当前协审单位少于协审项目数，不能抽签！请先到项目计划表中选择参加的协审单位后再进行抽签！");
                    }
                }
            } else {
                bsWin.alert("没有协审项目，不能进行抽签！");
            }
        }


        /**
         * 保存抽签结果
         */
        vm.saveDrawAssistUnit = function () {
            assistSvc.saveDrawAssistUnit(vm,function(data){
                if(data.flag || data.reCode == 'ok'){
                    bsWin.alert("操作成功");
                }else{
                    bsWin.alert(data.reMsg);
                }
            });
        }

        /**
         * 生成抽签日期
         */
        vm.buildDrawTime = function () {
            var isHaveBegin = false;
            var isAM = false;
            var drawTime = new Date(vm.drawTimeDay);
            var weekIndex = drawTime.getDay();
            var drawDay = drawTime.Format("yyyy年MM月dd日") + "(" + weekArray[weekIndex] + ")";
            if (vm.drawTimeStart) {
                isHaveBegin = true;
                var beginTime = vm.drawTimeStart.split(":")[0];
                if (beginTime > 12) {
                    drawDay += "下午"
                } else {
                    isAM = true;
                    drawDay += "上午"
                }
                drawDay += vm.drawTimeStart;
            }
            if (vm.drawTimeEnd) {
                var beginTime = vm.drawTimeEnd.split(":")[0];
                if (isHaveBegin) {
                    drawDay += "至"
                }
                if (beginTime > 12) {
                    if (isAM || !isHaveBegin) {
                        drawDay += "下午"
                    }
                } else {
                    if (!isAM || !isHaveBegin) {
                        drawDay += "上午"
                    }
                }
                drawDay += vm.drawTimeEnd;
            }
            vm.assistPlan.drawTime = drawDay;
        }

        /**
         * 拼接报批时间
         */
        vm.buildApprovalTime = function () {
            var isHaveBegin = false;
            var isAM = false;
            var approvalTime = new Date(vm.approvalTimeDay);
            var weekIndex = approvalTime.getDay();
            var drawDay = approvalTime.Format("yyyy年MM月dd日") + "(" + weekArray[weekIndex] + ")";
            if (vm.approvalStart) {
                isHaveBegin = true;
                var beginTime = vm.approvalStart.split(":")[0];
                if (beginTime > 12) {
                    drawDay += "下午"
                } else {
                    isAM = true;
                    drawDay += "上午"
                }
                drawDay += vm.approvalStart;
            }
            if (vm.approvalTimeEnd) {
                var beginTime = vm.approvalTimeEnd.split(":")[0];
                if (isHaveBegin) {
                    drawDay += "至"
                }
                if (beginTime > 12) {
                    if (isAM || !isHaveBegin) {
                        drawDay += "下午"
                    }
                } else {
                    if (!isAM || !isHaveBegin) {
                        drawDay += "上午"
                    }
                }
                drawDay += vm.approvalTimeEnd;
            }
            vm.assistPlan.approvalTime = drawDay;
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('assistUnitCtrl', assistUnit);

    assistUnit.$inject = ['$location', 'assistUnitSvc','$state','$rootScope'];

    function assistUnit($location, assistUnitSvc,$state,$rootScope) {
        var vm = this;
        vm.title = '协审单位';
        vm.model={};
        vm.resource = {};
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }
        activate();
        function activate() {
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                assistUnitSvc.grid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                assistUnitSvc.grid(vm);
            }

        }

        vm.del = function (id) {
            vm.id = id;
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认要删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    vm.resource = {};
                    assistUnitSvc.deleteAssistUnit(vm, id);
                }
            });
        }

        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: "请选择数据"
                });
            } else {
                common.confirm({
                    vm: vm,
                    title: "",
                    msg: "确认要删除数据吗？",
                    fn: function () {
                        $('.confirmDialog').modal('hide');
                        var ids = [];
                        for (var i = 0; i < selectIds.length; i++) {
                            ids.push(selectIds[i].value);
                        }
                        var idStr = ids.join(",");
                        assistUnitSvc.deleteAssistUnit(vm, idStr);
                    }
                });
            }
        }

        vm.queryAssistUnit = function () {
            assistUnitSvc.queryAssistUnit(vm);
        }


    }
})();

(function () {
    'use strict';

    angular.module('app').factory('assistUnitSvc', assistUnit);

    assistUnit.$inject = ['$http','$state','bsWin'];

    function assistUnit($http,$state,bsWin) {
        var url_assistUnit = rootPath + "/assistUnit";
        var url_back = '#/assistUnit';
        var service = {
            grid: grid,
            deleteAssistUnit : deleteAssistUnit,			//删除协审单位
            createAssistUnit : createAssistUnit,		//新增协审单位
            updateAssistUnit : updateAssistUnit,		//更新协审单位
            getAssistUnitById : getAssistUnitById,		//通过id查询协审单位
            queryAssistUnit : queryAssistUnit			//模糊查询
            
        };

        return service;
        
        function createAssistUnit(vm){
         	common.initJqValidation();
            var isValid = $('form').valid();
            if(isValid  && vm.isUnitExist==false){
        	var httpOptions={
        		method:"post",
        		url:url_assistUnit,
        		data:vm.assistUnit
        	}
        	var httpSuccess=function success(response){
        		common.requestSuccess({
        			vm:vm,
        			response:response,
        			fn:function(){
        				common.alert({
	        				vm:vm,
	        				msg:"操作成功",
	        				fn:function(){
	        					vm.isSubmit=false;
	        					$('.alertDialog').modal('hide');
	        					$('.modal-backdrop').remove();
	        					location.href=url_back;
	        					
	        				}
        				})
        			}
        		});
        	}
        	
        	common.http({
        		vm:vm,
        		$http:$http,
        		httpOptions:httpOptions,
        		success:httpSuccess
        	});
        
            }
        }
        
        function deleteAssistUnit(vm,id){
        	 vm.isSubmint=true;
        	var httpOptions={
        		method: 'delete',
        		url: url_assistUnit,
        		data: id
        	};
        	
        	var httpSuccess=function success(response){
        		common.requestSuccess({
        			vm:vm,
        			response:response,
        			fn:function(){
                        bsWin.alert("操作成功",function(){$state.go("assistUnit");})
        			}
        		});
        	
        	};
        	
        	common.http({
        		vm:vm,
        		$http:$http,
        		httpOptions:httpOptions,
        		success:httpSuccess
        	
        	});
        
        }//end create
        
        function updateAssistUnit(vm){
        	 common.initJqValidation();
            var isValid = $('form').valid();
            if(isValid && vm.isUnitExist==false){
        	var httpOptions={
        		method:"put",
        		url:url_assistUnit,
        		headers:{
                 "contentType":"application/json;charset=utf-8"  //设置请求头信息
              },
			  dataType : "json",
			  data:angular.toJson(vm.assistUnit)
//        		data:vm.assistUnit
        	}
        	
        	var httpSuccess=function success(response){
        		common.requestSuccess({
        			vm:vm,
        			response:response,
        			fn:function(){
                        bsWin.alert("操作成功",function(){$state.go("assistUnit");})
        			}
        		});
        	}
        	common.http({
        		vm:vm,
        		$http:$http,
        		httpOptions:httpOptions,
        		success:httpSuccess
        	});
            }
        }//end 
        
        function getAssistUnitById(vm){
        	
        	var httpOptions={
        		method:'get',
        		url: url_assistUnit+'/getAssistUnitById',
        		params:{id:vm.id}
        	}
        	
        	var httpSuccess=function success(response){
        		vm.assistUnit=response.data;
        	}
        	
        	common.http({
        		vm:vm,
        		$http:$http,
        		httpOptions:httpOptions,
        		success:httpSuccess
        	});
        }//end
        
        function queryAssistUnit(vm){
             vm.gridOptions.dataSource._skip="";
        	 vm.gridOptions.dataSource.read();
        }

     
        // begin#grid
        function grid(vm) {

            // Begin:dataSource
  /*          var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_assistUnit+"/fingByOData",$("#assistUnitform")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        },
                        modifiedDate: {
                        	type: "date"
                        },
                        isUse:{
                        },
                        unitSort:{
                        }
                        
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: [
                 {
	                    field: "unitSort",
	                    dir: "asc"
	                }
                ]
	               
            });*/
            var dataSource = common.kendoGridDataSource(url_assistUnit+"/fingByOData?$orderby=unitSort",$("#assistUnitform"),vm.queryParams.page,vm.queryParams.pageSize,vm.gridParams);
            // End:dataSource

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
                    field: "unitSort",
                    title: "序号",
                    width: 50,
                    filterable: false
                },
                {
                    field: "unitName",
                    title: "单位名称",
                    width: "20%",
                    filterable: false
                },
                {
                    field: "unitShortName",
                    title: "简称",
                    width: "8%",
                    filterable: false
                },
                {
                    field: "principalName",
                    title: "负责人",
                    width: "8%",
                    filterable: false
                },
                {
                    field: "principalPhone",
                    title: "负责人电话",
                    width: "10%",
                    filterable: false
                },
                {
                    field: "contactName",
                    title: "联系人",
                    width: "8%",
                    filterable: false
                },
                {
                    field: "contactTell",
                    title: "联系人电话",
                    width: "10%",
                    filterable: false
                },
                {
                    field: "address",
                    title: "企业地址",
                    width: "20%",
                    filterable: true
                },
                {
                    field: "isUse",
                    title: "状态",
                    width: "5%",
                    filterable: false,
                    template:function(item){
                    	if(item.isUse){
                    		if(item.isUse=="0"){
                    			return "已停用";
                    		}
                    		if(item.isUse=="1"){
                    			return "在用";
                    		}
                    	}else{
                    		return "";
                    	}
                    }
                },
                {
                    field: "",
                    title: "操作",
                    width: "8%",
                    template: function (item) {
                        return common.format($('#columnBtns').html(),"vm.del('" + item.id + "')", item.id,item.isUse);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                pageable : common.kendoGridConfig(vm.queryParams).pageable,
                resizable: true
            };

        }// end fun grid

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('assistUnitEditCtrl', assistUnitEdit);

    assistUnitEdit.$inject = ['$location', 'assistUnitSvc','$state'];

    function assistUnitEdit($location, assistUnitSvc,$state) {
        var vm = this;
        vm.title = '新增协审单位';
        vm.id=$state.params.id;
        vm.isUnitExist=false;
        if(vm.id){
        	vm.isUpdate=true;
        	vm.title='更新协审单位';
        }
        
        vm.create=function(){
          assistUnitSvc.createAssistUnit(vm);
        }
        
        vm.update=function(){
        	assistUnitSvc.updateAssistUnit(vm);
        }
        

        activate();
        function activate() {
        	if(vm.isUpdate){
        		assistUnitSvc.getAssistUnitById(vm);
        	}
        	
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('assistSvc', assist);

    assist.$inject = ['$http', 'bsWin'];

    function assist($http, bsWin) {
        var service = {
            initPlanPage: initPlanPage,						    //初始化计划方案表
            initPlanGrid: initPlanGrid,                         //舒适化表格
            saveAssistPlan: saveAssistPlan,                     //保存协审计划
            deletePlan: deletePlan,                             //删除协审计划包
            findPlanSign: findPlanSign,                         //根据计划ID查找收文选择的收文信息
            cancelPlanSign: cancelPlanSign,                     //取消挑选项目
            saveLowPlanSign: saveLowPlanSign,                   //保存挑选的次项目
            cancelLowPlanSign: cancelLowPlanSign,               //取消次项目
            queryPlan: queryPlan,                               //查询协审计划信息
            getPlanSignByPlanId: getPlanSignByPlanId,			//通过协审计划id或取协审项目信息
            savePlanSign: savePlanSign,						    //保存协审项目信息(停用)
            savePlan: savePlan,								    //保存协审计划
            initPlanByPlanId: initPlanByPlanId,				    //初始化协审计划
            chooseAssistUnit: chooseAssistUnit,				    //选择协审单位
            saveDrawAssistUnit: saveDrawAssistUnit,              //保存协审计划抽签
            getUnitUser: getUnitUser,
            getAllUnit: getAllUnit,			                    //获取所有的协审单位
            saveAddChooleUnit: saveAddChooleUnit,		        //保存手动选择的协审单位
            initAssistUnitByPlanId: initAssistUnitByPlanId,	    //初始化计划项目的协审单位
            findAssistPlanSignById : findAssistPlanSignById,    //根据收文Id获取协审单位和协审费用——主要用于发文阶段编辑和详情页

        };
        return service;
        //begin findAssistPlanSignById
        function findAssistPlanSignById(signId , callBack){

            var httpOptions = {
                method : 'post',
                url : rootPath + '/assistPlanSign/findAssistPlanSignById',
                params : {signId : signId}
            }
            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == "function"){
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });

        }
        //end findAssistPlanSignById

        function getPlanColumns() {
            var columns = [
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    template: "<span class='row-number'></span>",
                    filterable: false
                },
                {
                    field: "planName",
                    title: "协审计划名称",
                    width: "15%",
                    filterable: false
                },
                {
                    field: "reportTime",
                    title: "报审时间",
                    width: "15%",
                    filterable: false,
                    format: "{0: yyyy-MM-dd}"
                },
                {
                    field: "drawTime",
                    title: "抽签时间",
                    width: "25%",
                    filterable: false
                },
                {
                    field: "createdBy",
                    title: "创建人员",
                    width: "15%",
                    filterable: false
                },
                {
                    field: "createdDate",
                    title: "记录生成时间",
                    width: "15%",
                    filterable: false,
                    format: "{0: yyyy-MM-dd HH:mm:ss}"
                },
                {
                    field: "",
                    title: "操作",
                    width: "10%",
                    filterable: false,
                    template: function (item) {
                        return '<button class="btn btn-xs btn-primary"  ng-click="vm.showPlanDetail(\'' + item.id + '\')"><span class="glyphicon glyphicon-edit"></span>详情</button>';
                    }
                }
            ];
            return columns;
        }

        //S_initPlanGrid
        function initPlanGrid(vm) {
            //2、初始化grid
            var dataSource = common.kendoGridDataSource(rootPath + "/assistPlan/findByOData", $("#searchform"));
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }

            // End:column
            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: getPlanColumns(),
                dataBound: dataBound,
                resizable: true
            };

        }//E_initPlanGrid

        //S_initPlanPage
        function initPlanPage(isOnlySign,callBack) {
            //1、查找正在办理的项目概算流程
            var httpOptions = {
                method: 'post',
                url: rootPath + "/assistPlan/initPlanManager",
                params:{
                    isOnlySign : (isOnlySign==true)?"9":"0",
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_initPlanPage

        //S_saveAssistPlan
        function saveAssistPlan(planModel, isCommit, callBack) {
            isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/assistPlan",
                data: planModel
            }
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function () {
                    isCommit = false;
                }
            });
        }//E_saveAssistPlan

        //S_deletePlan
        function deletePlan(id, isCommit, callBack) {
            isCommit = true;
            var httpOptions = {
                method: 'delete',
                url: rootPath + "/assistPlan",
                params:{
                    id: id,
                }
            }
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function () {
                    isCommit = false;
                }
            });
        }//E_deletePlan

        //S_findPlanSign
        function findPlanSign(planId,isOnlySign,isCommit,callBack) {
            isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/sign/findByPlanId",
                params: {
                    planId: planId,
                    isOnlySign : (isOnlySign == true)?"9":"0",
                },
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function () {
                    isCommit = false;
                }
            });
        }//E_findPlanSign

        //S_cancelPlanSign
        function cancelPlanSign(vm, signIds,callBack) {
            var httpOptions = {
                method: 'delete',
                url: rootPath + "/assistPlan/cancelPlanSign",
                params: {
                    planId: vm.plan.id,
                    signIds: signIds
                },
            }
            var httpSuccess = function success(response) {
                vm.isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function () {
                    vm.isCommit = false;
                }
            });
        }//E_cancelPlanSign

        //S_saveLowPlanSign
        function saveLowPlanSign(vm, signIdArr,callBack) {
            var saveLowSignArr = new Array();
            vm.assistSign.forEach(function (asts, index) {
                for (var i = 0, l = signIdArr.length; i < l; i++) {
                    if (asts.signid == signIdArr[i]) {
                        var LowSign = {};
                        LowSign.signId = asts.signid;
                        LowSign.projectName = asts.projectname;
                        LowSign.assistType = '合并项目';
                        LowSign.isMain = '0';
                        saveLowSignArr.push(LowSign);
                    }
                }
            });

            vm.plan.assistPlanSignDtoList = saveLowSignArr;
            vm.isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/assistPlan/saveLowPlanSign",
                data: vm.plan,
            }
            var httpSuccess = function success(response) {
                vm.isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function () {
                    vm.isCommit = false;
                }
            });
        }//E_saveLowPlanSign

        //S_cancelLowPlanSign
        function cancelLowPlanSign(vm, signIds,callBack) {
            vm.isCommit = true;
            var httpOptions = {
                method: 'delete',
                url: rootPath + "/assistPlan/cancelLowPlanSign",
                params: {
                    planId: vm.plan.id,
                    signIds: signIds
                }
            }
            var httpSuccess = function success(response) {
                vm.isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function () {
                    vm.isCommit = false;
                }
            });
        }//E_cancelLowPlanSign

        //S_queryPlan
        function queryPlan(vm) {
            vm.gridOptions.dataSource._skip="";
            vm.gridOptions.dataSource.read();
        }//E_queryPlan

        //begin getPlanSignByPlan
        function getPlanSignByPlanId(planId, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + '/assistPlanSign/getPlanSignByPlanId',
                params: {planId: planId}
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }//end 

        //begin 保存协审项目信息（停用）
        function savePlanSign(assistPlanSign,callBack) {
            var httpOptions = {
                method: "put",
                url: rootPath + "/assistPlanSign/savePlanSign",
                headers: {
                    "contentType": "application/json;charset=utf-8"  //设置请求头信息
                },
                dataType: "json",
                data: angular.toJson(assistPlanSign)
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //end savePlanSign

        //begin 保存计划信息和协审信息
        function savePlan(assistPlan,callBack) {
            var httpOptions = {
                method: "post",
                url: rootPath + "/assistPlan/savePlanAndSign",
                data: assistPlan
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        //end savePlan

        //begin initPlanByPlanId
        function initPlanByPlanId(planId, callBack) {
            var httpOptions = {
                method: "post",
                url: rootPath + '/assistPlan/findById',
                params: {id: planId}
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }//end initPlanByPlanId

        //begin chooseAssistUnit
        function chooseAssistUnit(planId,number,drawType,callBack) {
            var httpOptions = {
                method: "post",
                url: rootPath + '/assistUnit/chooseAssistUnit',
                params: {
                    planId: planId,
                    number: number,
                    drawType: drawType
                }
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//end chooseAssistUnit


        // begin  getUnitUser
        function getUnitUser(vm) {
            var httpOptions = {
                method: "post",
                url: rootPath + '/assistUnitUser/findByOData'
            }

            var httpSuccess = function success(response) {
                vm.unitUserList = response.data.value;

            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        //end getUnitUser

        //begin getAllUnit
        function getAllUnit(callBack) {
            var httpOptions = {
                method: "post",
                url: rootPath + '/assistUnit/fingByOData'
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //end  getAllUnit

        //begin 保存抽签结果
        function saveDrawAssistUnit(vm,callBack) {
            var ids = '';
            vm.assistPlan.assistPlanSignDtoList.forEach(function (t, n) {
                if (n > 0) {
                    ids += ',';
                }
                //格式,AssistPlanSign.id|AssistUnit.id,,,
                ids += (t.id + '|' + t.assistUnit.id);
            });

            var unSelectedIds = '';
            if (vm.drawAssistUnits.length > 0) {
                vm.drawAssistUnits.forEach(function (t, n) {
                    if (n  > 0) {
                        unSelectedIds += ',';
                    }
                    //格式,AssistPlanSign.id|AssistUnit.id,,,
                    unSelectedIds += t.id;
                });
            }

            vm.isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/assistPlan/saveDrawAssistUnit",
                params: {
                    planId: vm.assistPlan.id,
                    drawAssitUnitIds: ids,
                    unSelectedIds: unSelectedIds
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {
                    vm.isCommit = false;
                }
            });
        }

        //end saveDrawAssistUnit

        //begin saveAddChooleUnit
        function saveAddChooleUnit(vm, unitObject,callBack) {
            var isNeed = true;
            angular.forEach(vm.assistPlan.assistUnitDtoList,function(x,index){
                if (unitObject.id == x.id) {
                    isNeed = false
                    bsWin.alert("该协审单位已被选中！");
                    return;
                }
            })
            if(isNeed){
                var httpOptions = {
                    method: "post",
                    url: rootPath + "/assistPlan/saveChooleUnit",
                    params: {
                        planId: vm.assistPlan.id,
                        unitId: unitObject.id
                    }
                }
                var httpSuccess = function success(response) {
                    if (callBack != undefined && typeof callBack == 'function') {
                        callBack(response.data);
                    }
                }

                common.http({
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
            }
        }
        //end saveAddChooleUnit

        //begin initAssistUnitByPlanId
        function initAssistUnitByPlanId(planId, callBack) {
            var httpOptions = {
                method: "post",
                url: rootPath + "/assistPlan/initAssistUnit",
                params: {planId: planId}
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //end  initAssistUnitByPlanId

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('bookBorrowCtrl', bookBorrow);

    bookBorrow.$inject = ['$location', 'bookBuySvc','bsWin'];

    function bookBorrow($location, bookBuySvc,bsWin) {
        var vm = this;
        vm.title = '借书列表';
        vm.model = {};
        vm.searchModel = {};
        activate();
        function activate() {
            bookBuySvc.bookBorrowGrid(vm,function(data){
                vm.bookBorrowDetailList = data.reObj.bookBorrowDetailList;
                vm.bookBorrowSumDtoList = data.reObj.bookBorrowSumDtoList;
            });
        }
        //表单查询
        vm.searchForm = function(){
           bookBuySvc.bookBorrowGrid(vm,function(data){
             vm.bookBorrowDetailList = data.reObj.bookBorrowDetailList;
             vm.bookBorrowSumDtoList = data.reObj.bookBorrowSumDtoList;

             });
        }
        //重置查询表单
        vm.formReset = function(){
            vm.searchModel = {};
        }

        //还书
        vm.returnBook = function(id,bookNo,booksName,bookBorrower,borrowNum,returnDate){
            vm.model.id = id;
            vm.model.bookNo = bookNo;
            vm.model.booksName = booksName;
            vm.model.borrowNum=borrowNum;
            vm.model.bookBorrower = bookBorrower;
           //当没有日期时。格式化会有Na-Na-Na的报错
            if(returnDate!=undefined){
                vm.model.returnDate = new Date(returnDate).Format("yyyy-MM-dd");
            }else{
                vm.model.returnDate="";
            }
            vm.model.returnBorrower = $("#curName").val();
            $("#returnBookWindow").kendoWindow({
                width: "38%",
                height: "300px",
                title: "图书借还",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        /**
         * 保存还书信息
         */
        vm.saveReturnBookDetail = function() {
            bookBuySvc.saveReturnBookDetail(vm,function(data){
                if(data.flag || data.reCode == 'ok'){
                    //保存成功重新跳转，要不然路径不对
                    bsWin.alert("保存成功！",function(){
                        window.parent.$("#returnBookWindow").data("kendoWindow").close();
                        $state.go("bookBorrowList");
                    });
                }else{
                    bsWin.alert(data.reMsg);
                }
            });
        }

        /**
         * 返回还书信息列表
         */
        vm.returnBookList = function () {
            window.parent.$("#returnBookWindow").data("kendoWindow").close();
            $state.go('bookBorrowList');
        }
        /**
         *限制还书的数量
         */
        vm.comparisonStill=function () {
            if (vm.model.returnNum>  vm.model.borrowNum) {
                vm.model.returnNum =  vm.model.borrowNum;
            }
            if(vm.model.returnNum<0){
                vm.model.returnNum=0;
            }

        }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('bookBuyCtrl', bookBuy);

    bookBuy.$inject = ['$location', 'bookBuySvc','$state','bsWin'];

    function bookBuy($location, bookBuySvc,$state,bsWin) {
        var vm = this;
        vm.title = '图书查询';
        vm.model = {};
        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    bookBuySvc.deleteBookBuy(vm, id);
                }
            });
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };

        activate();
        function activate() {
            bookBuySvc.grid(vm);
        }

        //表单查询
        vm.searchForm = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        //重置查询表单
        vm.formReset = function(){
            vm.searchModel = {};
        }

        /**
         * 借书
         */
        vm.borrowBook = function(id) {
           /* var grid = $("#bookListGrid").data("kendoGrid");
            // 获取行对象
            var data = grid.dataItem(grid.select());
            vm.model = data;
            vm.model.borrowNum = "";
            vm.model.borrowDate = "";
            vm.model.returnDate = "";*/
            // vm.model = {};

            // // vm.model.bookBorrower = {}
            bookBuySvc.queryBookBuyById(id,function(data){
                vm.model = data;
                vm.model.bookBorrower =$("#curName").val();
            })
            console.log(vm.model.bookBorrower);

            $("#borrowBookWindow").kendoWindow({
                width: "860px",
                height: "300px",
                title: "图书借阅",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        /**
         * 保存借书信息
         */
        vm.saveBooksDetail = function() {
            console.log(vm.model);
            if(!vm.model.borrowNum || vm.model.borrowNum == 0){
                bsWin.alert("请填写借书数量！");
            }else if(!vm.model.borrowDate){
                bsWin.alert("请填写借书日期！");
            }else if(!vm.model.returnDate){
                bsWin.alert("请填写还书日期！");
            }else {
                bookBuySvc.saveBorrowBookDetail(vm, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        //保存成功重新跳转，要不然路径不对
                        bsWin.alert("保存成功！", function () {
                            window.parent.$("#borrowBookWindow").data("kendoWindow").close();
                            vm.searchForm();
                        });
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            }
        }

        /**
         * 返回图书信息列表
         */
        vm.returnBookList = function () {
            window.parent.$("#borrowBookWindow").data("kendoWindow").close();
             vm.searchForm();
           // $state.go("bookDetailList");
        }
        /**
         *限制借书的数量
         */
        vm.comparisonSize=function () {
            if (vm.model.borrowNum> vm.model.storeConfirm) {
                vm.model.borrowNum = vm.model.storeConfirm;
            }
            if(vm.model.borrowNum<0){
                vm.model.borrowNum=0;
            }

        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('bookBuyEditCtrl', bookBuy);

    bookBuy.$inject = ['$location', 'bookBuySvc', '$state'];

    function bookBuy($location, bookBuySvc, $state) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '添加图书管理信息';
        vm.isuserExist = false;
        vm.id = $state.params.id;
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '更新图书管理信息';
        }

        vm.create = function () {
            bookBuySvc.createBookBuy(vm);
        };
        vm.update = function () {
            bookBuySvc.updateBookBuy(vm);
        };

        activate();
        function activate() {
            if (vm.isUpdate) {
                bookBuySvc.getBookBuyById(vm);
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('bookBuySvc', bookBuy);

    bookBuy.$inject = ['$http'];

    function bookBuy($http) {
        var url_bookBuy = rootPath + "/bookBuy", url_back = '#/bookBuyList';
        var service = {
            grid: grid,  //图书查询列表
            bookBorrowGrid: bookBorrowGrid, //借书列表
            getBookBuyById: getBookBuyById,
            queryBookBuyById:queryBookBuyById,      //根据ID查询
            createBookBuy: createBookBuy,
            deleteBookBuy: deleteBookBuy,
            updateBookBuy: updateBookBuy,
            saveBorrowBookDetail: saveBorrowBookDetail,  //保存借书信息
            saveReturnBookDetail: saveReturnBookDetail  //保存还书信息
        };

        return service;

        //保存借书详细信息
        function saveBorrowBookDetail(vm,callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/bookBuy/saveBorrowDetail",
                data : vm.model
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }

        //保存还书详细信息
        function saveReturnBookDetail(vm,callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/bookBuy/saveReturnDetail",
                data : vm.model
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }

        // begin#updateBookBuy
        function updateBookBuy(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;
                vm.model.id = vm.id;// id

                var httpOptions = {
                    method: 'put',
                    url: url_bookBuy,
                    data: vm.model
                }

                var httpSuccess = function success(response) {

                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {

                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                }
                            })
                        }

                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } else {
                // common.alert({
                // vm:vm,
                // msg:"您填写的信息不正确,请核对后提交!"
                // })
            }

        }

        // begin#deleteBookBuy
        function deleteBookBuy(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_bookBuy,
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                    	common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog :true,
                            fn: function () {
                            	vm.isSubmit = false;
                                vm.gridOptions.dataSource.read();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#createBookBuy
        function createBookBuy(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;

                var httpOptions = {
                    method: 'post',
                    url: url_bookBuy,
                    data: vm.model
                };

                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                closeDialog :true,
                                fn: function () {
                                    vm.isSubmit = false;
                                    location.href = url_back;
                                }
                            });
                        }
                    });
                };

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            }
        }

        // begin#getBookBuyById
        function getBookBuyById(vm) {
        	var httpOptions = {
                method: 'get',
                url: rootPath + "/bookBuy/html/findById",
                params:{id:vm.id}
            };
            var httpSuccess = function success(response) {
                vm.model = response.data;
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });                       
        }

        function  queryBookBuyById(id,callBack){
            var httpOptions = {
                method: 'get',
                url: rootPath + "/bookBuy/html/findById",
                params:{id:id}
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        /**
         * 借书列表
         */
        function bookBorrowGrid(vm,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/bookBorrow/expertCostDetailTotal",
                data: vm.searchModel
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#grid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/bookBuy/findByOData", $("#bookForm")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

            //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }

            // Begin:column
            var columns = [
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable : false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "bookNo",
                    title: "图书号",
                    width: 100,
                    filterable: false
                },
                {
                    field: "booksName",
                    title: "图书名称",
                    width: 100,
                    filterable: false
                },
                {
                    field: "booksType",
                    title: "图书分类",
                    width: 100,
                    filterable: false
                },
                /*{
                    field: "professionalType",
                    title: "专业类别",
                    width: 100,
                    filterable: false
                },*/
                {
                    field: "booksPrice",
                    title: "价格",
                    width: 100,
                    filterable: false
                },
                {
                    field: "bookNumber",
                    title: "数量",
                    width: 100,
                    filterable: false
                },
                {
                    field: "",
                    title: "库存",
                    width: 100,
                    attributes: {style: "color:red"},
                    filterable: false,
                    template : function(item){
                        if(item.storeConfirm){
                            return item.storeConfirm;
                        }else{
                            return 0;
                        }
                    }
                },
                {
                    field: "storeTime",
                    title: "入库时间",
                    width: 100,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        if(item.storeConfirm && item.storeConfirm > 0){

                            return common.format($('#columnBtns').html(), item.id);
                        }else{
                            return "";
                        }
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                dataBound:dataBound,
            };
        }// end fun grid
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('bookBuyBusinessCtrl', bookBuyBusiness);

    bookBuyBusiness.$inject = ['$location', 'bookBuyBusinessSvc'];

    function bookBuyBusiness($location, bookBuyBusinessSvc) {
        var vm = this;
        vm.title = '图书采购流程查询';

        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    bookBuyBusinessSvc.deleteBookBuyBusiness(vm, id);
                }
            });
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };

        activate();
        function activate() {
            bookBuyBusinessSvc.grid(vm);
        }

        //表单查询
        vm.searchForm = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        //重置查询表单
        vm.formReset = function(){
            vm.searchModel = {};
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('bookBuyBusinessDetailCtrl', bookBuyBusinessDetail);

    bookBuyBusinessDetail.$inject = ['bookBuyBusinessSvc', 'bsWin', '$state'];

    function bookBuyBusinessDetail(bookBuyBusinessSvc, bsWin, $state) {

        var vm = this;
        vm.model = {};
        vm.businessId = $state.params.businessId;
        vm.viewDetail = $state.params.viewDetail;
        vm.showGoBack = true;
        activate();
        function activate() {
            bookBuyBusinessSvc.getBookBuyBusinessById(vm,function(data){
                vm.model = data;
                if(vm.model.bookBuyList){
                    for(var i=0;i<vm.model.bookBuyList.length;i++){
                        vm.model.bookBuyList[i]["totalPrice"] = parseFloat(vm.model.bookBuyList[i].booksPrice)*(vm.model.bookBuyList[i].bookNumber);
                    }
                }

            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('bookBuyBusinessEditCtrl', bookBuyBusiness);

    bookBuyBusiness.$inject = ['$location', 'bookBuyBusinessSvc', '$state','bsWin'];

    function bookBuyBusiness($location, bookBuyBusinessSvc, $state,bsWin) {
        /* jshint validthis:true */
        var vm = this;
        vm.model = {};
        vm.conMaxIndex = 0;                   //条件号
        vm.conditions = new Array();         //条件列表
        vm.title = '图书信息录入';
        vm.isuserExist = false;
        vm.businessId = $state.params.businessId;
        vm.viewDetail = $state.params.viewDetail;
        vm.showFlag={
            addBooksDeatail:true,
            modBooksDetail:true,
            bookBuyApplyTr:false,
            bookBuyBzTr:true,
            bookBuyFgzrTr:true,
            bookBuyZrTr:true,
            bookBuyYsrk:true,
            buyChannel:false,
            isCommit:false
        }
        if (vm.businessId) {
            vm.isUpdate = true;
            vm.showFlag.modBooksDetail=true;
            vm.showFlag.addBooksDeatail=false;
            $("#businessId").val(vm.businessId);
        }else{
            vm.showFlag.modBooksDetail=false;
            vm.showFlag.addBooksDeatail=true;
        }
        if(vm.viewDetail=='1'){
            vm.showFlag.bookBuyYsrk = true;
            vm.showFlag.addBooksDeatail = true;
            vm.showFlag.modBooksDetail = true;
            vm.showFlag.bookBuyZrTr = true;
            vm.showFlag.bookBuyFgzrTr = true;
            vm.showFlag.bookBuyBzTr = true;
            vm.showFlag.bookBuyApplyTr = true;
            vm.showFlag.buyChannel = true;
            vm.showFlag.isCommit = true;
        }
        vm.create = function () {
            bookBuyBusinessSvc.createBookBuyBusiness(vm);
        };
        vm.update = function () {
            bookBuyBusinessSvc.updateBookBuyBusiness(vm);
        };
        //添加图书详细信息
        vm.addCondition = function () {
            vm.condition = {};
            if(vm.showFlag.addBooksDeatail){
                vm.condition.sort = vm.conMaxIndex+1;
            }else{
                vm.conMaxIndex = vm.conditions.length;
                vm.condition.sort = vm.conditions.length+1;
            }
            vm.conditions.push(vm.condition);
            vm.conMaxIndex++;
        }
        //删除图书详细信息
        vm.removeCondition = function () {
            var isCheck = $("#conditionTable input[name='bookInfos']:checked");
            if (isCheck.length > 0) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "删除数据不可恢复，确定删除么？",
                    onOk: function () {
                        $('.confirmDialog').modal('hide');
                        var ids = [];
                        for (var i = 0; i < isCheck.length; i++) {
                            for(var k = 0; k < vm.conditions.length; k++){
                                var con = vm.conditions[k];
                                if (isCheck[i].value == con.sort) {
                                    if (con.id) {
                                        ids.push(con.id);
                                    }else{
                                        vm.conditions.splice(k, 1);
                                        $("#conTr"+con.sort).remove();
                                        break;
                                    }
                                }
                            }
                        }
                        if(ids.length > 0){
                            bookBuyBusinessSvc.deleteBooksConditions(ids.join(","),function(data){
                                if(data.flag || data.reCode == 'ok'){
                                    bsWin.success("操作成功！");
                                    for(var i = 0; i < ids.length; i++ ){
                                        for(var k = 0; k < vm.conditions.length; k++){
                                            var con = vm.conditions[k];
                                            if (ids[i] == con.sort) {
                                                vm.conditions.splice(k, 1);
                                                $("#conTr"+con.sort).remove();
                                                break;
                                            }
                                        }
                                    }
                              /*      $.each(ids,function(i,id){
                                        $.each(vm.conditions,function(c,con){
                                            if (id == con.sort) {
                                                vm.conditions.splice(c, 1);
                                                $("#conTr"+con.sort).remove();

                                            }
                                        })
                                    })*/
                                }else{
                                    bsWin.error(data.reMsg);
                                }
                            });
                        }
                    },
                });
            }else{
                bsWin.alert("请选择要删除的图书信息！");
            }

        }

        vm.saveCondition = function () {
            if (buildCondition()) {
                bookBuyBusinessSvc.saveBookBuyBusinessDetail(vm.conditions,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        $("#businessId").val(data.reObj.businessId);
                        bsWin.success("保存成功！");
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            }
        }

        function buildCondition() {
            var buyChannel = $("#buyChannel").val();
            if(buyChannel=="" || buyChannel==="undefined"){
                bsWin.error("购买渠道没有填写，请选择后再进行保存！");
                return false;
            }
            common.initJqValidation($('#bookForm'));
            var isValid = $('#bookForm').valid();
            if (isValid) {
                if (vm.conditions.length > 0) {
                    var validateResult = true;
                    vm.conditions.forEach(function (p, number) {
                        p.booksName = $("#booksName" + p.sort).val();
                        p.booksType = $("#booksType" + p.sort).val();
                        p.publishingCompany = $("#publishingCompany" + p.sort).val();
                        p.bookNo = $("#bookNo" + p.sort).val();
                        if(p.bookNo=="" || p.bookNo==="undefined"){
                            bsWin.error("图书号不能为空请核查！");
                            validateResult = false;
                        }
                        p.author = $("#author" + p.sort).val();
                        p.bookNumber = $("#bookNumber" + p.sort).val();
                        if(p.bookNumber=="" || p.bookNumber==="undefined"){
                            bsWin.error("图书数量不能为空请核查！");
                            validateResult = false;
                        }
                        if(!isUnsignedInteger(p.bookNumber)){
                            bsWin.error("图书数量只能输入正整数请核查！");
                            validateResult = false;
                        }
                        p.storeConfirm = $("#storeConfirm" + p.sort).val();
                        p.booksPrice = $("#booksPrice" + p.sort).val();
                        var pc = /^(-)?(([1-9]{1}\d*)|([0]{1}))(\.(\d){1,4})?$/;

                        if(!pc.test(p.booksPrice)){
                            bsWin.error("价格只能输入数字请核查！");
                            validateResult = false;
                        }
                        p.applyDept= vm.model.applyDept;
                        p.operator= vm.model.operator;
                        p.buyChannel= vm.model.buyChannel;
                        p.businessId= $("#businessId").val();
                        p.businessName = vm.model.businessName;
                        p.applyReason = vm.model.applyReason;
                    });
                    return validateResult;
                } else {
                    bsWin.error("没有分录数据，无法保存！");
                    return false;
                }
            }else{
                bsWin.alert("操作失败，有红色*号的选项为必填项，请按要求填写！");
            }
        }
        //发起流程
        vm.startFlow = function(){
                bsWin.confirm({
                    title: "询问提示",
                    message: "发起流程后，当前页面数据将不能再修改！确认发起流程么？",
                    onOk: function () {
                        if (buildCondition()) {
                            bookBuyBusinessSvc.startFlow(vm.conditions,vm.showFlag.isCommit,function(data){
                                if(data.flag || data.reCode == 'ok'){
                                    bsWin.alert("保存成功！",function(){
                                        $state.go('myBookBuyBusiness');
                                    });
                                }else{
                                    bsWin.alert(data.reMsg);
                                }
                            });
                        }else{
                            bsWin.error("没有分录数据，无法发起流程！");
                        }
                    }
                });
        }

        //校验图书数量
        vm.checkBookNum = function (sort){
            var bookNumber = "bookNumber"+sort;
            if(!isUnsignedInteger($("#"+bookNumber).val())){
                $("span[data-valmsg-for='"+bookNumber+"']").html("图书数量只能输入正整数！");
                return ;
            }
            $("span[data-valmsg-for='"+bookNumber+"']").html("");
        }

        //校验价格
        vm.checkPrice = function(sort){
            var pc = /^(-)?(([1-9]{1}\d*)|([0]{1}))(\.(\d){1,4})?$/;    //保留4个小数点
            var priceId = "booksPrice"+sort;
            var bookNumberId = "bookNumber"+sort;
            if(!pc.test( $("#"+priceId).val())){
                $("#"+priceId).val("");
                $("span[data-valmsg-for='"+priceId+"']").html("价格只能输入数字！");
                return ;
            }
            $("span[data-valmsg-for='"+priceId+"']").html("");
            var price = $("#"+priceId).val();
            var num = $("#"+bookNumberId).val();
            $("#total"+sort).val(parseFloat(price)*num);
        }

        //检查是否为正整数
        function isUnsignedInteger(value) {
            if ((/^(\+|-)?\d+$/.test(value)) && value > 0) {
                return true;
            } else {
                return false;
            }
        }
        activate();
        function activate() {
            if (vm.isUpdate) {
                bookBuyBusinessSvc.getBookBuyBusinessById(vm,function(data){
                    vm.model = data;
                    vm.conditions = vm.model.bookBuyList;
                    for(var i=0;i<vm.conditions.length;i++){
                        vm.conditions[i]["sort"]= (i+1);
                        vm.conditions[i]["total"] = parseFloat(vm.conditions[i].booksPrice)*(vm.conditions[i].bookNumber);
                    }
                });
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('bookBuyBusinessSvc', bookBuyBusiness);
    ;
    bookBuyBusiness.$inject = ['$http']

    function bookBuyBusiness($http) {
        var url_bookBuyBusiness = rootPath + "/bookBuyBusiness", url_back = '#/bookBuyBusinessList';
        var service = {
            grid: grid,
            getBookBuyBusinessById: getBookBuyBusinessById,
            createBookBuyBusiness: createBookBuyBusiness,
            deleteBookBuyBusiness: deleteBookBuyBusiness,
            updateBookBuyBusiness: updateBookBuyBusiness,
            saveBookBuyBusinessDetail:saveBookBuyBusinessDetail,
            startFlow:startFlow,
            initFlowDeal : initFlowDeal,                //初始化图书采购流程信息
            deleteBooksConditions : deleteBooksConditions //删除图书信息
        };

        return service;

        /**
         * 删除图书信息
         * @param delIds
         * @param isCommit
         * @param callBack
         */
        function deleteBooksConditions(delIds,callBack){
            var httpOptions = {
                method : 'delete',
                url : url_bookBuyBusiness + "/bookDel",
                params:{
                    ids : delIds
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess,
            });
        }

        // begin#updateBookBuyBusiness
        function updateBookBuyBusiness(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;
                vm.model.id = vm.id;// id

                var httpOptions = {
                    method: 'put',
                    url: url_bookBuyBusiness,
                    data: vm.model
                }

                var httpSuccess = function success(response) {

                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {

                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                }
                            })
                        }

                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } else {
                // common.alert({
                // vm:vm,
                // msg:"您填写的信息不正确,请核对后提交!"
                // })
            }

        }

        // begin#deleteBookBuyBusiness
        function deleteBookBuyBusiness(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_bookBuyBusiness,
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                    	common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog :true,
                            fn: function () {
                            	vm.isSubmit = false;
                                vm.gridOptions.dataSource.read();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#createBookBuyBusiness
        function createBookBuyBusiness(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            var isValid = true;
            if (isValid) {
                vm.isSubmit = true;
                var httpOptions = {
                    method: 'post',
                    url: url_bookBuyBusiness,
                    data: vm.model
                };

                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                closeDialog :true,
                                fn: function () {
                                    vm.isSubmit = false;
                                    location.href = url_back;
                                }
                            });
                        }
                    });
                };

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            }
        }

        function saveBookBuyBusinessDetail(conditions,callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/bookBuyBusiness/saveBooksDetailList",
                headers:{
                    "contentType":"application/json;charset=utf-8"  //设置请求头信息
                },
                traditional: true,
                dataType : "json",
                data : angular.toJson(conditions)//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }

        //S_启动流程
        function startFlow(conditions,isCommit,callBack){
            isCommit = true;
            var httpOptions = {
                method : 'post',
                url : rootPath + "/bookBuyBusiness/startFlow",
                headers:{
                    "contentType":"application/json;charset=utf-8"  //设置请求头信息
                },
                traditional: true,
                dataType : "json",
                data : angular.toJson(conditions)//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
            }
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){isCommit = false;}
            });
        }//E_startFlow

        //S_初始化图书采购流程信息
        function initFlowDeal(vm){
            //vm.businessKey,vm.taskId,vm.instanceId
            var httpOptions = {
                method: 'get',
                url: rootPath + "/bookBuyBusiness/html/findById",
                params : {
                    id:vm.businessKey
                }
            };
            var httpSuccess = function success(response) {
                vm.model = response.data;
                for(var i=0;i<vm.model.bookBuyList.length;i++){
                    vm.model.bookBuyList[i]["totalPrice"] = parseFloat(vm.model.bookBuyList[i].booksPrice)*(vm.model.bookBuyList[i].bookNumber);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){}
            });
        }//E_initFlowDeal


        // begin#getBookBuyBusinessById
        function getBookBuyBusinessById(vm,callBack) {
        	var httpOptions = {
                method: 'get',
                url: rootPath + "/bookBuyBusiness/html/findById",
                params:{id:vm.businessId}
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });                       
        }

        // begin#grid
        function grid(vm) {

            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/bookBuyBusiness/findByOData", $("#bookBuyForm"),{filter: "createdBy eq ${CURRENT_USER.id}"}),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

            //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"

                },
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable : false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "applyDept",
                    title: "申请部门",
                    width: "20%",
                    filterable: false
                },
                {
                    field: "operator",
                    title: "申请人",
                    width: "10%",
                    filterable: false
                },
                {
                    field: "buyChannel",
                    title: "购买渠道",
                    width: "15%",
                    filterable: false
                },
                {
                    field: "applyDate",
                    title: "申请日期",
                    width: "15%",
                    filterable: false,
                },
                {
                    field: "",
                    title: "状态",
                    width: "15%",
                    filterable: false,
                    template: function (item) {
                        if(item.processInstanceId && item.filer){
                            return "已办理";
                        }else if(item.processInstanceId){
                            return "正在办理";
                        }else{
                            return "未确定申购";
                        }
                    }
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        var isStartFlow = item.processInstanceId?true:false;
                        return common.format($('#columnBtns').html(), item.businessId, isStartFlow);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound:dataBound,
                resizable: true
            };

        }// end fun grid

    }
})();
/**
 * 自定义弹窗窗口（在对应的方法中注入bsWin对象）
 * 提示窗口使用方法：
 *  bsWin.alert("消息提示", "操作成功！", function () { console.log("This's close!"); } );
 * 或者
 *  bsWin.alert({
 *      title: "消息提示",
 *      message: "操作成功！",
 *      onClose: function () { console.log("This's close!"); }
 *  });
 * 询问窗口使用方法：
 *  bsWin.confirm("询问提示", "是否进行该操作！", function () { console.log("This's ok!"); }, function () { console.log("This's close!"); },function(){console.log("This's onCancel!");} );
 * 或者
 *  bsWin.confirm({
 *      title: "询问提示",
 *      message: "是否进行该操作！",
 *      onOk: function () { console.log("This's ok!"); },
 *      onClose: function () { console.log("This's close!"); },
 *      onCancel:function(){console.log("This's onCancel!");}
 *  });
 */
(function () {
    'use strict';

    var app = angular.module('app');
    angular.module('app').factory('bsWin', bsWinFactory);

    function bsWinFactory(){
        return {
            success: function (message, onClose) {
                return this.alert({
                    message: message,
                    type: "success",
                    onClose: onClose,
                    icon: 1,
                });
            },
            warning:  function (message, onClose) {
                return this.alert({
                    message: message,
                    type: "warning",
                    onClose: onClose,
                    icon: 5,
                });
            },
            error: function (message, onClose) {
                return this.alert({
                    message: message,
                    type: "error",
                    onClose: onClose,
                    icon: 2,
                });
            },
            alert: function (options, message, onClose) {
                if (!angular.isObject(options)) {
                    var title;
                    if (!message || angular.isFunction(message)) {
                        onClose = message;
                        message = options;
                    } else {
                        title = options;
                    }
                    options = {
                        message: message,
                        onClose: onClose || function () {
                        }
                    };
                    if (title) {
                        options.title = title;
                    }
                }
                options.onClose = options.onClose || function(){};
                layer.alert(
                    options.message,
                    {
                        title:(options.title)?options.title:"系统消息",
                        icon: (!options.icon) ? 6 : options.icon,
                        skin: 'layui-layer-lan',
                    },
                    function(index){
                        layer.close(index);
                        options.onClose();
                    }
                );
            },
            confirm: function (options, message, onOk, onClose,onCancel) {
                if (!angular.isObject(options)) {
                    var title;
                    if (!message || angular.isFunction(message)) {
                        onCancel = onClose || function(){
                            };
                        onClose = onOk || function () {
                            };
                        onOk = message || function () {
                            };
                        message = options;
                    } else {
                        title = options;
                    }

                    options = {
                        message: message,
                        onOk: onOk,
                        onClose: onClose,
                        onCancel: onCancel
                    };
                    if (title) {
                        options.title = title;
                    }
                }
                options.onClose = options.onClose || function(){};
                //询问框
                layer.confirm(
                    options.message,
                    {
                        title:(options.title)?options.title:"询问提示",
                        icon: 3,
                        skin: 'layui-layer-lan',
                        btn: ['确认','取消'],
                        end : options.onClose
                    },
                    function(index){
                        layer.close(index);
                        if ((options.onOk) != undefined && typeof (options.onOk) == 'function') {
                            options.onOk();
                        }
                    },
                    function(index){
                        layer.close(index);
                        if ((options.onCancel) != undefined && typeof (options.onCancel) == 'function') {
                            options.onCancel();
                        }
                    }
                );
            }

        };
    }

})();
(function () {
    'use strict';

    var service = {
        initJqValidation: initJqValidation,         // 重置form验证
        requestSuccess: requestSuccess,             // 请求成功时执行
        format: format,                             // string格式化
        blockNonNumber: blockNonNumber,             // 只允许输入数字
        floatNumberInput: floatNumberInput,
        adminContentHeight: adminContentHeight,     // 当前Content高度
        alert: alertDialog,                         // 显示alert窗口
        confirm: confirmDialog,                     // 显示Confirm窗口
        getQuerystring: getQuerystring,             // 取得Url参数
        kendoGridConfig: kendoGridConfig,           // kendo grid配置
        getKendoCheckId: getKendoCheckId,           // 获得kendo grid的第一列checkId
        cookie: cookie,                             // cookie操作
        getToken: getToken,                         // 获得令牌
        http: http,                                 // http请求
        gridDataSource: gridDataSource,             // gridDataSource
        buildOdataFilter: buildOdataFilter,         // 创建多条件查询的filter
        kendoGridDataSource: kendoGridDataSource,   // 获取gridDataSource
        getTaskCount: getTaskCount,                 // 用户待办总数
        uuid: uuid,                                 // js
        downloadReport: downloadReport,             //报表下载
        htmlEscape: htmlEscape,                     //实现html转码
        htmlDecode: htmlDecode,                     //实现html解码
    };
    window.common = service;

    function htmlDecode(str) {
        if (str.length == 0) return "";
        var s = str.toString();
        s = s.replace(/&amp;/g, "&");
        s = s.replace(/&lt;/g, "<");
        s = s.replace(/&gt;/g, ">");
        s = s.replace(/&nbsp;/g, " ");
        s = s.replace(/&#39;/g, "\'");
        s = s.replace(/&quot;/g, "\"");
        return s;
    }

    /**
     * 字符串转义，防止dom xss攻击
     * @param str
     */
    function htmlEscape(str) {
        if (str.length == 0) return "";
        var s = str.toString();
        s = s.replace(/&/g, "&amp;");
        s = s.replace(/</g, "&lt;");
        s = s.replace(/>/g, "&gt;");
        s = s.replace(/ /g, "&nbsp;");
        s = s.replace(/'/g, "&#39;");
        s = s.replace(/"/g, "&quot;");
        return s;
    }

    /**
     *
     * @param data 数据
     * @param fileName 文件名
     * @param fileType 文件类型
     * 使用{type: "application/vnd.ms-excel"}的写法，可以保存为xls格式的excel文件
     * 而使用“application/vnd.openxmlformats-officedocument.spreadsheetml.sheet”则会保存为xlsx
     */
    function downloadReport(data, fileName, fileType) {
        var blob = new Blob([data], {type: "application/" + fileType});
        var objectUrl = URL.createObjectURL(blob);
        var aForExcel = $("<a><span class='forExcel'>下载</span></a>").attr("href", objectUrl).attr("download", fileName);
        $("body").append(aForExcel);
        $(".forExcel").click();
        aForExcel.remove();
    }

    function initJqValidation(formObj) {
        if (formObj) {
            formObj.removeData("validator");
            formObj.removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(formObj);
        } else {
            $("form").removeData("validator");
            $("form").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("form");
        }
    }//end

    function requestSuccess(options) {
        var showError = function (msg) {
            service.alert({
                vm: options.vm,
                msg: msg,
                fn: function () {
                    options.vm.isSubmit = false;
                    $('.alertDialog').modal('hide');
                }
            });
        };
        if (options.response.status > 400) {
            showError("发生错误！");
        } else {
            var data = options.response.data;
            if (data && data.reCode == 555) {
                showError(data.message);
            } else if (options.fn) {
                options.fn(data);
            }
        }
    }//end

    function format() {
        var theString = arguments[0];
        for (var i = 1; i < arguments.length; i++) {
            var regEx = new RegExp("\\{" + (i - 1) + "\\}", "gm");
            theString = theString.replace(regEx, arguments[i]);
        }
        return theString;
    }//end

    function blockNonNumber(val) {
        var str = val.toString().replace(/[^0-9]/g, '');
        return parseInt(str, 10);
    }//end

    function floatNumberInput(val) {
        return isNaN(parseFloat(val, 10)) ? 0 : parseFloat(val, 10);
    }//end

    function adminContentHeight() {
        return $(window).height() - 180;
    }//end

    function alertDialog(options) {
        options.vm.alertDialogMessage = options.msg;
        options.vm.alertDialogFn = function () {
            if (options.closeDialog && options.closeDialog == true) {
                $('.alertDialog').modal('hide');
                $('.modal-backdrop').remove();
            }
            if (options.fn) {
                options.fn();
            } else {
                $('.alertDialog').modal('hide');
            }
        };
        $('.alertDialog').modal({
            backdrop: 'static',
            keyboard: false
        });
    }//end

    function confirmDialog(options) {
        options.vm.dialogConfirmTitle = options.title;
        options.vm.dialogConfirmMessage = options.msg;
        $('.confirmDialog').modal({
            backdrop: 'static'
        });
        options.vm.dialogConfirmSubmit = options.fn;
        if (options.cancel) {
            options.vm.dialogConfirmCancel = options.cancel;
        } else {
            options.vm.dialogConfirmCancel = function () {
                $('.confirmDialog').modal('hide');
            }
        }
    }//end

    function getQuerystring(key, default_) {
        if (default_ == null)
            default_ = "";
        key = key.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regex = new RegExp("[\\?&]" + key + "=([^&#]*)");
        var qs = regex.exec(window.location.href);
        if (qs == null)
            return default_;
        else
            return qs[1];
    }//end

    function kendoGridDataSource(url, searchForm, page, pageSize, queryParams, isKeepParams) {
        var dataSource = new kendo.data.DataSource({
            type: 'odata',
            transport: kendoGridConfig().transport(url, searchForm, queryParams, isKeepParams),
            schema: kendoGridConfig().schema({
                id: "id",
                fields: {
                    createdDate: {
                        type: "date"
                    }
                }
            }),
            serverPaging: true,
            serverSorting: true,
            serverFiltering: true,
            pageSize: pageSize || 10,
            page: page || 1,
            sort: {
                field: "createdDate",
                dir: "desc"
            }
        });
        return dataSource;
    }//end

    function kendoGridConfig(scope) {
        return {
            filterable: {
                extra: false,
                operators: {
                    string: {
                        "contains": "包含",
                        "eq": "等于"
                    },
                    number: {
                        "eq": "等于",
                        "neq": "不等于",
                        gt: "大于",
                        lt: "小于"
                    },
                    date: {
                        gt: "大于",
                        lt: "小于"
                    }
                }
            },
            pageable: {
                pageSize: 10,
                previousNext: true,
                buttonCount: 5,
                refresh: true,
                pageSizes: true,
                change: function () {
                    if (scope && scope.page) {
                        scope.page = this.dataSource.page();
                    }
                }
            },
            dataBound: function (e) {
                // this.dataSource.page(2);
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
                scope.pageSize = e.sender.dataSource.pageSize();
                scope.page = e.sender.dataSource.page();
            },
            schema: function (model) {
                return {
                    data: "value",
                    total: function (data) {
                        return data['count'];
                    },
                    model: model
                };
            },
            transport: function (url, form, paramObj, isKeepParams) {
                return {
                    read: {
                        url: url,
                        dataType: "json",
                        type: "post",
                        cache: false,
                        beforeSend: function (req) {
                            req.setRequestHeader('Token', service.getToken());
                        },
                        data: function () {
                            if (form) {
                                var filterParam = common.buildOdataFilter(form,paramObj);
                                if (filterParam) {
                                    if (paramObj && paramObj.$filter) {
                                        var extendFilter = paramObj.$filter;
                                        if (!isKeepParams) {
                                            paramObj = undefined;
                                        }
                                        return {"$filter": filterParam + " and " + extendFilter};
                                    } else {
                                        return {
                                            "$filter": filterParam
                                        };
                                    }
                                } else {
                                    if (paramObj && paramObj.$filter) {
                                        return {
                                            "$filter": paramObj.$filter
                                        };
                                    } else {
                                        return {};
                                    }
                                }
                            } else {
                                return paramObj || {};
                            }
                        }
                    }
                }
            },
            noRecordMessage: {
                template: '暂时没有数据.'
            }
        }
    }//end

    function getKendoCheckId($id) {
        var checkbox = $($id).find('tr td:nth-child(1)').find('input:checked')
        var data = [];
        checkbox.each(function () {
            var id = $(this).attr('relId');
            data.push({
                name: 'id',
                value: id
            });
        });
        return data;
    }//end

    function http(options) {
        options.headers = {
            Token: service.getToken()
        };
        options.$http(options.httpOptions).then(options.success,
            function (response) {
                if (options.onError) {
                    options.onError(response);
                }
            });
    }//end

    // begin:cookie
    function cookie() {
        var cookieUtil = {
            get: function (name, subName) {
                var subCookies = this.getAll(name);
                if (subCookies) {
                    return subCookies[subName];
                } else {
                    return null;
                }
            },
            getAll: function (name) {
                var cookieName = encodeURIComponent(name) + "=", cookieStart = document.cookie
                    .indexOf(cookieName), cookieValue = null, result = {};
                if (cookieStart > -1) {
                    var cookieEnd = document.cookie.indexOf(";", cookieStart)
                    if (cookieEnd == -1) {
                        cookieEnd = document.cookie.length;
                    }
                    cookieValue = document.cookie.substring(cookieStart
                        + cookieName.length, cookieEnd);
                    if (cookieValue.length > 0) {
                        var subCookies = cookieValue.split("&");
                        for (var i = 0, len = subCookies.length; i < len; i++) {
                            var parts = subCookies[i].split("=");
                            result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
                        }
                        return result;
                    }
                }
                return null;
            },
            set: function (name, subName, value, expires, path, domain, secure) {
                var subcookies = this.getAll(name) || {};
                subcookies[subName] = value;
                this.setAll(name, subcookies, expires, path, domain, secure);
            },
            setAll: function (name, subcookies, expires, path, domain, secure) {
                var cookieText = encodeURIComponent(name) + "=";
                var subcookieParts = new Array();
                for (var subName in subcookies) {
                    if (subName.length > 0
                        && subcookies.hasOwnProperty(subName)) {
                        subcookieParts.push(encodeURIComponent(subName) + "="
                            + encodeURIComponent(subcookies[subName]));
                    }
                }
                if (subcookieParts.length > 0) {
                    cookieText += subcookieParts.join("&");
                    if (expires instanceof Date) {

                        cookieText += ";expires=" + expires.toGMTString();
                    }
                    if (path) {
                        cookieText += ";path=" + path;
                    }
                    if (domain) {
                        cookieText += ";domain=" + domain;
                    }
                    if (secure) {
                        cookieText += ";secure";
                    }
                } else {

                    cookieText += ";expires=" + (new Date(0)).toGMTString();
                }
                document.cookie = cookieText;
            },
            unset: function (name, subName, path, domain, secure) {
                var subcookies = this.getAll(name);
                if (subcookies) {
                    delete subcookies[subName];
                    this.setAll(name, subcookies, null, path, domain, secure);
                }
            },
            unsetAll: function (name, path, domain, secure) {
                this.setAll(name, null, new Date(0), path, domain, secure);
            }
        };
        return cookieUtil;
    }

    // end:cookie

    function getToken() {
        var data = cookie().getAll("data");
        return data != null ? data.token : "";
    }//end

    function gridDataSource(dataSource) {
        dataSource.error = function (e) {
            if (e.status == 401) {
                location.href = window.rootPath + '/home/login';
            } else {

            }
        };
        return dataSource;
    }//end

    // S_封装filer的参数
    function buildOdataFilter(from,initParams) {
        var manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
            rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
            rsubmittable = /^(?:input|select|textarea|keygen)/i;
        //原有的过滤条件
        var oldFilter;
        if(initParams){
            oldFilter = initParams.$filter;
        }
        return $(from).map(function () {
            var elements = jQuery.prop(this, "elements");
            return elements ? jQuery.makeArray(elements) : this;
        }).filter(
            function () {
                var type = this.type;
                return this.value
                    && this.name
                    && !$(this).is(":disabled")
                    && rsubmittable.test(this.nodeName)
                    && !rsubmitterTypes.test(type)
                    && (this.checked || !manipulation_rcheckableType
                        .test(type));
            }).map(function (i, elem) {
                var $me = $(this), val = $me.val();
                if (!val) {
                    return false;
                }
                var dataType = $me.attr("data-type") || "String";
                if (dataType == "array") {
                    val = "(" + val + ")";
                } else {
                    val = "'" + val + "'";
                    if ("String" != dataType) {
                        val = dataType + val;
                    }
                }

                var operator = $me.attr("operator") || "eq",
                    dataRole = $me.attr("data-role") || "";
                if (dataRole == "datepicker") {
                    val = "date" + val;
                } else if (dataRole == "datetimepicker") {
                    val = "datetime" + val;
                }
                if(oldFilter){
                    var linkValue = elem.name + " " + operator + " " + val;
                    //如果有重复的查询条件，则不用添加
                    if(oldFilter.indexOf(linkValue) > -1 ){
                        return null;
                    }
                }
                return operator == "like" ? ("substringof(" + val + ", " + elem.name + ")") : (elem.name + " " + operator + " " + val);
            }).get().join(" and ");
    }// E_封装filer的参数

    // S_获取项目待办总数
    function getTaskCount(options) {
        options.$http({
            method: 'get',
            url: rootPath + '/admin/myCountInfo'
        }).then(function (response) {
            if (response.data.DO_SIGN_COUNT) {
                $('#DO_SIGN_COUNT').html(htmlEscape(response.data.DO_SIGN_COUNT));
            }
            if (response.data.DO_TASK_COUNT) {
                $('#DO_TASK_COUNT').html(htmlEscape(response.data.DO_TASK_COUNT));
            }
            if (response.data.GET_SIGN_COUNT) {
                $('#GET_SIGN_COUNT').html(htmlEscape(response.data.GET_SIGN_COUNT));
            }
            if (response.data.GET_RESERVESIGN_COUNT) {
                $('#GET_RESERVESIGN_COUNT').html(htmlEscape(response.data.GET_RESERVESIGN_COUNT));
            }
        });
    }// E_获取待办总数

    function uuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0,
                v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16)
        }).toUpperCase()
    }

    //init
    init();
    function init() {
        //begin#grid 处理
        //全选
        $(document).on('click', '#checkboxAll', function () {
            var isSelected = $(this).is(':checked');
            $('.grid').find('tr td:nth-child(1)').find('input:checkbox[ng-disabled!="true"]').prop('checked', isSelected);
        });
    }

})();
/**
 * 全局angular $http拦截器
 */
(function () {
    'use strict';
    var app = angular.module('app');
    app.factory("commonHttpInterceptor", ["$injector", "bsWin", commonHttpInterceptor]);

    function commonHttpInterceptor($q, bsWin) {  //  anguler $http全局请求拦截器
        return {
            request: function (config) {
                config.headers["Token"] = common.getToken();
                config.headers["X-Requested-With"] = "XMLHttpRequest";  // 用于后台ajax请求的判断
                return config;
            },
            responseError: function (response) {
                if (!response.config.headers.commonHttp) { // 过滤掉用common.http发起的请求
                    errorHandle(bsWin, response.status, response.data);
                }
                return $q.reject(response);
            }
        };

    }

    /**
     * 统一错误状态处理
     * @param bsWin     提示窗口对象
     * @param status    响应状态码
     * @param data      响应数据
     */
    function errorHandle(bsWin, status, data) {
        switch (status) {
            case 500:
                bsWin.error("系统内部错误!");
                break;
            case 401:
                bsWin.warning("登录信息失效或您没有权限,请重新登录!",function(){
                    window.location.href = rootPath+"/";
                });
                break;
            case 403:
                bsWin.warning("您无权限执行此操作！");
                break;
            case 404:
                bsWin.error("未找到相应的操作！");
                break;
            case 408:
                bsWin.warning("请求超时");
                break;
            case 412:
                bsWin.warning(data.reMsg || "操作失败");
                break;
            case 499:
                bsWin.warning(data.reMsg || "您的账号已在别的地方登录，请确认密码是否被修改！");
                break;
            default:
                //bsWin.error("发生错误,系统已记录,我们会尽快处理！");
        }
    }

    app.config(['$httpProvider', function ($httpProvider) { // 添加拦截器
        $httpProvider.interceptors.push(commonHttpInterceptor);

        //ie下angular的缓存问题
            // Initialize get if not there
           if (!$httpProvider.defaults.headers.get) {
                   $httpProvider.defaults.headers.get = {};
             }

          // Enables Request.IsAjaxRequest() in ASP.NET MVC
           $httpProvider.defaults.headers.common["X-Requested-With"] = 'XMLHttpRequest';

           //禁用IE对ajax的缓存
           $httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';
           $httpProvider.defaults.headers.get['Pragma'] = 'no-cache';
    }]);

    if (jQuery) {  // 设置jQuery的ajax全局默认配置
        jQuery(document).ajaxSend(function (event, request, settings) {
            request.setRequestHeader('Token', common.getToken());
        }).ajaxError(function (event, jqXHR, settings, thrownError) {

            var _body = angular.element("body"),
                scope = _body.scope(),
                bsWin = _body.injector().get("bsWin"),
                data = angular.isString(jqXHR.responseText) ? JSON.parse(jqXHR.responseText || "{}") : jqXHR.responseText;

            scope.$apply(function () {
                errorHandle(bsWin, jqXHR.status, data || {});
            });
        });
    }
})();
/**
 * Created by ldm on 2017/8/22.
 */
(function () {
    'use strict';
    angular.module('app').factory('ideaSvc', idea);

    idea.$inject = ['$http','bsWin'];

    function idea($http, bsWin) {
        var service = {
            initIdeaData: initIdeaData,                 // 初始化选择意见窗口数据
            initIdea : initIdea //初始化个人常用意见
        };
        return service;

        // 初始化常用意见
        function initIdeaData(vm,options) {
            vm.ideaContent = '';// 初始化当前意见
            $("#ideaWindow").kendoWindow({
                width: "70%",
                height: "660px",
                title: "意见选择",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "close"]
            }).data("kendoWindow").center().open();

            //如果没有加载，则加载个人意见信息
            if(!vm.ideas){
                $http({
                    method: 'post',
                    url: rootPath + "/idea/findMyIdea"
                }).then(function (response) {
                    vm.ideas = response.data;
                });
            }

            //删除常用意见
            vm.deleteCommonIdea = function () {
                var isCheck = $("#commonIdeaTable input[type='checkbox']:checked");
                if (isCheck.length < 1) {
                    bsWin.alert("请选择要删除的意见！");
                } else {
                    var ids = [];
                    for (var i = 0; i < isCheck.length; i++) {
                        if(isCheck[i].value){
                            ids.push(isCheck[i].value);
                        }
                        $.each(vm.ideas,function(c,ideaObj){
                            if(c == isCheck[i].name ){
                                vm.ideas.splice(c, 1);
                            }
                        })
                    }
                    if(ids.length > 0){
                        var idsStr = ids.join(",");
                        $http({
                            method: 'delete',
                            url: rootPath + '/idea',
                            params: {
                                ideas: idsStr
                            }
                        }).then(function (response) {
                            bsWin.alert("删除成功！",function () {
                                $http({
                                    method: 'post',
                                    url: rootPath + "/idea/findMyIdea"
                                }).then(function (response) {
                                    vm.ideas = response.data;
                                });
                            });
                        });
                    }
                }
            };

            //拼接评审意见
            vm.addCorrentIdea = function (content) {
                vm.ideaContent += content;
            };

            vm.addCommonIdea = function () {// 添加常用意见
                if(!vm.ideas){
                    vm.ideas = [];
                }
                vm.newIdea = {};
                vm.newIdea.ideaType = "1";     //1、表示个人常用意见
                vm.ideas.push(vm.newIdea);
            }

            vm.saveCommonIdea = function () {// 保存常用意见
                if(vm.ideas.length == 0){
                    bsWin.alert("请编辑你要保存的意见信息！");
                    return ;
                }
                $http({
                    method: 'post',
                    url: rootPath + "/idea",
                    headers: {
                        "contentType": "application/json;charset=utf-8" // 设置请求头信息
                    },
                    dataType: "json",
                    data: angular.toJson(vm.ideas)
                }).then(function (response) {
                    if(response.data.flag || response.data.reCode == "ok"){
                        vm.ideas = response.data.reObj;
                        bsWin.alert("添加成功！");
                    }else{
                        bsWin.alert(response.data.reMsg);
                    }
                });
            }

            vm.saveCurrentIdea = function () {
                var targetObj = $("#" + options.targetId);
                targetObj.val(targetObj.val() + vm.ideaContent);
                window.parent.$("#ideaWindow").data("kendoWindow").close();
                targetObj.focus();
            }
        }//end

        //初始化个人常用意见
        function initIdea(vm){
            var httpOptions={
                method: 'post',
                url: rootPath + "/idea/findMyIdea"
            }

            var httpSuccess=function success(response){
                vm.ideas = response.data;
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .controller('companyCtrl', company);

    company.$inject = ['$location','companySvc']; 

    function company($location, companySvc) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '单位列表';
       
        vm.del = function (id) {        	
        	
             common.confirm({
            	 vm:vm,
            	 title:"",
            	 msg:"确认删除数据吗？",
            	 fn:function () {
                  	$('.confirmDialog').modal('hide');             	
                    companySvc.deletecompany(vm,id);
                 }
             })
        }
        vm.dels = function () {     
        	var selectIds = common.getKendoCheckId('.grid');
        	//alert(selectIds.length);
            if (selectIds.length == 0) {
            	common.alert({
                	vm:vm,
                	msg:'请选择数据'
                	
                });
            } else {
            	var ids=[];
                for (var i = 0; i < selectIds.length; i++) {
                	ids.push(selectIds[i].value);
				}  
                var idStr=ids.join(',');
                vm.del(idStr);
            }   
       }
        vm.queryConpany =function(){
        	companySvc.queryConpany(vm)
        }
        activate();
        function activate() {
            companySvc.grid(vm);
        }
    }
})();

(function () {
    'use strict';

    angular
        .module('app')
        .controller('companyEditCtrl', company);

    company.$inject = ['$location','companySvc','$state']; 

    function company($location, companySvc,$state) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '新增单位';
        vm.iscompanyExist=false;
        vm.id = $state.params.id;
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '更新单位';
        }
        
        vm.create = function () {
        	companySvc.createcompany(vm);
        };
        vm.update = function () {
        	companySvc.updatecompany(vm);
        };

        activate();
        function activate() {
        	if (vm.isUpdate) {
        		companySvc.getcompanyById(vm);
            } 
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('companySvc', company);

    company.$inject = ['$http', '$compile'];
    function company($http, $compile) {
        var url_company = rootPath + "/company";
        var url_back = '#/company';
        var url_user = rootPath + '/user';

        var service = {
            grid: grid,
            createcompany: createcompany,
            getcompanyById: getcompanyById,
            updatecompany: updatecompany,
            deletecompany: deletecompany,
            queryConpany: queryConpany,	//模糊查询
            saveUnit: saveUnit				//保存单位评分
        };
        return service;

        function grid(vm) {

            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_company + "/fingByOData", $("#form")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

            //S_序号
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo
                            .format(
                                "<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                                item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"

                },
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                }
                ,
                {
                    field: "coName",
                    title: "单位名称",
                    width: 220,
                    filterable: false
                },
                {
                    field: "coPhone",
                    title: "单位电话",
                    width: 100,
                    filterable: false
                },
                {
                    field: "coPC",
                    title: "邮编",
                    width: 100,
                    filterable: false
                },
                {
                    field: "coAddress",
                    title: "地址",
                    width: 160,
                    filterable: false
                },
                {
                    field: "coType",
                    title: "单位类型",
                    width: 160,
                    filterable: false
                },

                {
                    field: "",
                    title: "操作",
                    width: 200,
                    template: function (item) {
                        return common.format($('#columnBtns').html(), "vm.del('" + item.id + "')", item.id);

                    }


                }

            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };

        }// end fun grid

        //Start 模糊查询
        function queryConpany(vm) {
            vm.gridOptions.dataSource._skip = 0;
            vm.gridOptions.dataSource.read();
        }

        // end 模糊查询

        function createcompany(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid && vm.iscompanyExist == false) {
                vm.isSubmit = true;
                var httpOptions = {
                    method: 'post',
                    url: url_company,
                    data: vm.model
                }

                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {

                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                    $('.modal-backdrop').remove();
                                    location.href = url_back;
                                }
                            })
                        }

                    });

                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } else {
//				common.alert({
//					vm:vm,
//					msg:"您填写的信息不正确,请核对后提交!"
//				})
            }
        }// end fun createcompany

        //start  getcompanyById
        function getcompanyById(vm) {
            var httpOptions = {
                method: 'get',
                url: url_company + "/html/findByIdCompany",
                params: {id: vm.id}
            }
            var httpSuccess = function success(response) {
                vm.model = response.data;
                console.log(vm.model);
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }// end  getcompanyById

        function updatecompany(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid && vm.iscompanyExist == false) {
                vm.isSubmit = true;
                vm.model.id = vm.id;// id
                var httpOptions = {
                    method: 'put',
                    url: url_company,
                    data: vm.model
                }

                var httpSuccess = function success(response) {

                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {

                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                }
                            })
                        }

                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } else {
//				common.alert({
//				vm:vm,
//				msg:"您填写的信息不正确,请核对后提交!"
//			})
            }
        }// end fun updatecompany

        function deletecompany(vm, id) {

            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_company,
                data: id

            }
            var httpSuccess = function success(response) {

                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        vm.isSubmit = false;
                        vm.gridOptions.dataSource.read();
                    }

                });

            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }// end fun deletecompany

        // S_保存单位评分
        function saveUnit(unitScore, callBack) {
            var httpOptions = {
                method: 'put',
                url: url_company + "/saveUnitScore",
                data: unitScore,
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }// E_saveMark


    }


})();
(function () {
    'use strict';

    angular.module('app').controller('deptCtrl', dept);

    dept.$inject = ['$location', 'deptSvc'];

    function dept($location, deptSvc) {
        var vm = this;
        vm.title = '处室管理';

        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    deptSvc.deleteDept(vm, id);
                }
            });
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };
        
        vm.queryDept = function(){
        	deptSvc.queryDept(vm);
        }
        activate();
        function activate() {
            deptSvc.grid(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('deptEditCtrl', dept);

    dept.$inject = ['$location', 'deptSvc', '$state'];

    function dept($location, deptSvc, $state) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '编辑处室';
        vm.isuserExist = false;
        vm.deptId = $state.params.deptId;
        if (vm.deptId) {
            vm.isUpdate = true;
            vm.title = '更新处室';
        }

        vm.create = function () {
            deptSvc.createDept(vm);
        };
        vm.update = function () {
            deptSvc.updateDept(vm);
        };

        activate();
        function activate() {
            if (vm.isUpdate) {
                deptSvc.getDeptById(vm);
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('deptSvc', dept);

    dept.$inject = ['$http'];

    function dept($http) {
        var url_dept = rootPath + "/dept", url_back = '#/listDept';
        var service = {
            grid: grid,
            getDeptById: getDeptById,
            createDept: createDept,
            deleteDept: deleteDept,
            updateDept: updateDept,
            queryDept:queryDept,
        };

        return service;
        function queryDept(vm){
            vm.gridOptions.dataSource._skip="";
        	vm.gridOptions.dataSource.read();	
        }
        // begin#updateDept
        function updateDept(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;
                var httpOptions = {
                    method: 'put',
                    url: url_dept,
                    data: vm.model
                }

                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                closeDialog :true,
                                fn: function () {
                                    vm.isSubmit = false;
                                }
                            })
                        }

                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } 
        }

        // begin#deleteDept
        function deleteDept(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_dept,
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                    	common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog :true,
                            fn: function () {
                            	vm.isSubmit = false;
                                vm.gridOptions.dataSource.read();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#createDept
        function createDept(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;

                var httpOptions = {
                    method: 'post',
                    url: url_dept,
                    data: vm.model
                };

                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                closeDialog :true,
                                fn: function () {
                                    vm.isSubmit = false;
                                    location.href = url_back;
                                }
                            });
                        }
                    });
                };

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            }
        }

        // begin#getDeptById
        function getDeptById(vm) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/dept/html/findById",
                params:{deptId:vm.deptId}
            };
            var httpSuccess = function success(response) {
                if(response.data.offices){
                	vm.offices ={};
                	vm.offiecs = response.data.offices;
                }
                vm.model = response.data;
               // console.log(vm.model);
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        
        
        // begin#grid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_dept+"/fingByOData",$("#formDept")),
                schema: common.kendoGridConfig().schema({
                    id: "deptId",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            
            //S_序号
            var  dataBound=function () {  
                var rows = this.items();  
                var page = this.pager.page() - 1;  
                var pagesize = this.pager.pageSize();  
                $(rows).each(function () {  
                    var index = $(this).index() + 1 + page * pagesize;  
                    var rowLabel = $(this).find(".row-number");  
                    $(rowLabel).html(index);  
                });  
            } 
            //S_序号
            
            // Begin:column
            var columns = [
            	
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.deptId)
                    },
                    filterable: false,
                    width: 20,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {  
 				    field: "rowNumber",  
 				    title: "序号",  
 				    width: 30,
 				    filterable : false,
 				    template: "<span class='row-number'></span>"  
 				 }
 				,
                {
                    field: "deptName",
                    title: "处室名称",
                    width: 100,
                    filterable: false
                },
                {
                    field: "deptUserName",
                    title: "负责人",
                    width: 100,
                    filterable: false
                },
                {
                    field: "address",
                    title: "地址",
                    width: 100,
                    filterable: false
                },
                {
                    field: "deptType",
                    title: "类型",
                    width: 100,
                    filterable: false
                },
                {
                    field: "",
                    title: "状态",
                    width: 100,
                    filterable: false,
                    template : function(item) {
						if(item.status){
							if(item.status == 5){
								return "正常"
							}else if(item.status == 7){
								return "已删除"
							}
						}else{
							return " "
						}
					}
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                            "vm.del('" + item.deptId + "')", item.deptId,item.deptId);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
            	dataBound :dataBound,
                resizable: true
            };

        }// end fun grid

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('deptOfficeUserCtrl', deptOfficeUser);

    deptOfficeUser.$inject = ['$location','$state','deptSvc','deptOfficeUserSvc'];

    function deptOfficeUser($location,$state,deptSvc, deptOfficeUserSvc) {
        var vm = this;
        vm.title = '办事处人员列表';
        vm.id=$state.params.deptId;
        vm.showAddUserDialog = function (){
        	$('.addUser').modal({
                backdrop: 'static',
                keyboard:false
            });
        	 vm.deptOfficeGrid.dataSource.read();
        }
        vm.closeAddUserDialog=function(){
        	$('.addUser').modal('hide');		
        	
        }
        vm.addOfficeUser = function(officeId){
        	deptOfficeUserSvc.addOfficeUser(vm,officeId);
        }
        
        vm.remove = function (officeId) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    deptOfficeUserSvc.deletedeptOfficeUser(vm, officeId);
                }
            });
        }
        vm.removes = function () {
            var selectIds = common.getKendoCheckId('.deptOfficeGrid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.remove(idStr);
            }
        };
        
      
        activate();
        function activate() {
            deptOfficeUserSvc.grid(vm);
            deptOfficeUserSvc.deptOfficeGrid(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('deptOfficeUserSvc', dept);

    dept.$inject = ['$http'];

    function dept($http) {
        var url_dept = rootPath + "/dept", url_back = '#/deptList';
        var url_deptOfficeUsers =rootPath+"/dept/getDeptOfficeUsers";		//在办事处成员
        var url_deptNotInOfficeUser =rootPath+"/dept/NotInoDeptfficeUsers";	//不在办事处成员
        var service = {
            grid: grid,									//办事处列表
            getdeptById: getdeptById,
            createdept: createdept,
            deletedeptOfficeUser: deletedeptOfficeUser,  //移除成员
            updatedept: updatedept,
            getDepts:getDepts,						     //获取所有办事处
            deptOfficeGrid :deptOfficeGrid,              //办事处人员列表
            addOfficeUser:addOfficeUser,					     //添加成员
        };

        return service;
        //start# 继续添加成员
        function addOfficeUser(vm,officeId){
        	 var httpOptions = {
                     method: 'post',
                     url:rootPath+"/dept/addOfficeUser",
                     params:{
                     	deptId:vm.id,
                     	officeId: officeId
                     }                
                 }
                 
                 var httpSuccess = function success(response) {              
                     common.requestSuccess({
     					vm:vm,
     					response:response,
     					fn:function () {
     						vm.deptOfficeGrid.dataSource.read();
     	                    vm.gridOptions.dataSource.read();	                   
     	                }					
     				});
                 }
                 common.http({
     				vm:vm,
     				$http:$http,
     				httpOptions:httpOptions,
     				success:httpSuccess
     			});
        }
        //end# 添加成员
        
        //start 获取所有办事处
        function getDepts(vm){
        	var httpOptions = {
                    method: 'get',
                    url: common.format(url_dept + "/getDepts")
                }
                var httpSuccess = function success(response) {
                    vm.depts = {};
                    vm.depts = response.data;
//                    console.log(vm.depts);
                }
                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
        	
        }
        //end 获取所有办事处
        
        // begin#updatedept
        function updatedept(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;
                vm.model.id = vm.id;// id

                var httpOptions = {
                    method: 'put',
                    url: url_dept,
                    data: vm.model
                }

                var httpSuccess = function success(response) {

                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {

                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                }
                            })
                        }

                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } else {
                // common.alert({
                // vm:vm,
                // msg:"您填写的信息不正确,请核对后提交!"
                // })
            }

        }

        // begin#deletedeptOfficeUser
        function deletedeptOfficeUser(vm, officeId) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url:rootPath+"/dept/deleteOfficeUsers",
               params:{
            	   deptId:vm.id,
            	   officeId:officeId
            
               }
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                    	common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog :true,
                            fn: function () {
                            	vm.isSubmit = false;
                                vm.gridOptions.dataSource.read();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#createdept
        function createdept(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;

                var httpOptions = {
                    method: 'post',
                    url: url_dept,
                    data: vm.model
                };

                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                closeDialog :true,
                                fn: function () {
                                    vm.isSubmit = false;
                                    location.href = url_back;
                                }
                            });
                        }
                    });
                };

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            }
        }

        // begin#getdeptById
        function getdeptById(vm) {
        	var httpOptions = {
                method: 'get',
                url: rootPath + "/dept/html/findById",
                params:{officeID:vm.officeID}
            };
            var httpSuccess = function success(response) {
            	if(response.data.dept){
					vm.depts = {}
					//vm.depts = response.data.depts;
					//console.log(vm.depts);
					
				}
                vm.model = response.data;
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });                       
        }

        // begin#查看人员列表
        function deptOfficeGrid(vm) {
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_deptNotInOfficeUser+"?deptId="+vm.id),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.officeID)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                
                {
                    field: "officeUserName",
                    title: "负责人",
                    width: 100,
                    filterable: false
                },
                {
                    field: "officePhone",
                    title: "电话",
                    width: 100,
                    filterable: false
                },
               
                {
                    field: "officeDesc",
                    title: "描述",
                    width: 100,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        return common.format($('#allUserGridBtns').html(),
                            "vm.addOfficeUser('" + item.officeID + "')", item.officeID);
                    }
                }
            ];
            // End:column

            vm.deptOfficeGrid = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true
            };

        }// end fun 查看人员列表
        
        //start 办事处列表
        function grid(vm) {
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_deptOfficeUsers+"?deptId="+vm.id),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.officeID)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
               
                {
                    field: "officeUserName",
                    title: "负责人",
                    width: 100,
                    filterable: false
                },
                {
                    field: "officePhone",
                    title: "电话",
                    width: 100,
                    filterable: false
                },
               
                {
                    field: "officeDesc",
                    title: "描述",
                    width: 100,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                            "vm.remove('" + item.officeID + "')", item.officeID);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true
            };

        }// end 办事处列表

    }
})();
(function () {
    'use strict';
    angular.module('app').controller('dictCtrl', dict);

    dict.$inject = ['dictSvc','bsWin','$state'];

    function dict(dictSvc,bsWin,$state) {
    	  /* jshint validthis:true */
    	var vm = this;
        vm.title = '字典';
        vm.model = {};

        activate();
        function activate() {
            dictSvc.initDictTree(function(data){
                var zTreeObj;
                var setting = {
                    callback: {
                        onClick: zTreeOnClick
                    },
                    data: {
                        simpleData: {
                            enable: true,
                            idKey: "id",
                            pIdKey: "pId"
                        }
                    }
                };
                function zTreeOnClick(event, treeId, treeNode) {
                    $state.go('dict.edit', { id: treeNode.id});
                };
                function zTreeOnCheck(event, treeId, treeNode) {
                    var selId = treeNode.id;
                    if(!vm.model.dels){
                        vm.model.dels = [];
                    }
                    var delIds = vm.model.dels;
                    if(treeNode.checked){
                        delIds.push(selId);
                    }else{
                        for(var i =0;i<delIds.length;i++){
                            if(delIds[i] == selId){
                                delIds.splice(i);
                                break;
                            }
                        }
                    }

                };
                var zNodes = $linq(data.value).select(
                    function(x) {
                        var isParent = false;
                        var pId = null;
                        if(x.parentId){
                            pId = x.parentId;
                        }
                        return {
                            id : x.dictId,
                            name : x.dictName,
                            pId:pId
                        };

                    }).toArray();
                zTreeObj = $.fn.zTree.init($("#zTree"), setting,zNodes);
                vm.dictsTree = zTreeObj;
            });
        }

        //执行删除操作
        vm.del = function (id) {
            bsWin.confirm({
                title: "询问提示",
                message: "删除字典将会连下级字典一起删除，确认删除数据吗？",
                onOk: function () {
                    dictSvc.deleteDict(id,vm.isSubmit ,function(data){
                        vm.isSubmit = false;
                        if (data.flag || data.reCode == "ok") {
                            bsWin.alert("消息提示","操作成功！",function(){
                                $('.alertDialog').modal('hide');
                                $('.modal-backdrop').remove();
                                $state.go('dict',{},{reload:true});
                            });
                        }else{
                            bsWin.alert(data.reMsg);
                        }
                    });
                }
            });
        }

        vm.dels = function () {
            var nodes = vm.dictsTree.getSelectedNodes();
            if (nodes&&nodes.length >0) {
            	 vm.del(nodes[0].id)
            } else {
                bsWin.alert("请选择要删除的数据！");
            }   
       }
    }

})();

(function () {
    'use strict';

    angular.module('app').controller('dictEditCtrl', dict);

    dict.$inject = ['$scope','bsWin','dictSvc','$state'];
    function dict($scope,bsWin, dictSvc,$state) {

    	var vm = this;
        vm.title = '增加字典';
        vm.model = {};
      
        vm.id = $state.params.id;
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '编辑字典';
        }
        vm.model.dictSort=0;//默认排序序号为0

        activate();
        function activate() {
            if (vm.isUpdate) {
                dictSvc.getDictById(vm.id,function (data) {
                    if (data.flag || data.reCode == "ok"){
                        vm.model = data.reObj;
                        dictSvc.getTreeData(function (data) {
                            vm.treeData = {};
                            vm.treeData = data.value;
                            if(vm.isUpdate&&vm.treeData&&vm.model.parentId){
                                for(var i = 0;i<vm.treeData.length;i++){
                                    if(vm.treeData[i].dictId == vm.model.parentId){
                                        vm.model.parentDictName = vm.treeData[i].dictName;
                                        break;
                                    }
                                }
                            }
                        });
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                })
            } else {
                vm.model.dictCode = '';
                dictSvc.initpZtreeClient(function (data) {
                    var setting = {
                        check: {enable: true,chkStyle: "radio",radioType: "all"},
                        callback: {
                            //onCheck: zTreeOnCheck,
                            //onClick: zTreeOnClick
                        },
                        data: {
                            simpleData: {
                                enable: true,
                                idKey: "id",
                                pIdKey: "pId"
                            }
                        }
                    };
                    function zTreeOnCheck(event, treeId, treeNode) {
                    };

                    function zTreeOnClick(event, treeId, treeNode,clickFlag) {
                    };
                    var zNodes = $linq(data.value).select(
                        function(x) {
                            var pId;
                            if(x.parentId){
                                pId = x.parentId;
                            }
                            return {
                                id : x.dictId,
                                name : x.dictName,
                                pId:pId
                            };
                        }).toArray();
                    vm.zpTree = $.fn.zTree.init($("#pzTree"), setting,zNodes);
                });
            }
        }

        //新增字典
        vm.createDict = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if(isValid){
                var nodes = vm.zpTree.getCheckedNodes(true);
                if(nodes&&nodes.length>0){
                    vm.model.parentId = nodes[0].id;
                }
                dictSvc.createDict(vm.model,vm.isSubmit,function(data){
                    vm.isSubmit = false;
                    if (data.flag || data.reCode == "ok"){
                        $('.alertDialog').modal('hide');
                        $('.modal-backdrop').remove();
                        bsWin.alert("系统提示","操作成功！",function () {
                            $state.go('dict',{},{reload:true});
                        });
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("数据填写正确，请检查修改后再提交");
            }
        };

        //修改字典
        vm.updateDict = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if(isValid){
                dictSvc.updateDict(vm.model,vm.isSubmit,function(data){
                    vm.isSubmit = false;
                    if (data.flag || data.reCode == "ok"){
                        $('.alertDialog').modal('hide');
                        $('.modal-backdrop').remove();
                        bsWin.alert("系统提示","操作成功！",function () {
                            $state.go('dict.edit', { id: vm.model.dictId},{reload:true});
                        });
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("数据填写正确，请检查修改后再提交");
            }
        }

    	vm.dictTypeChange = function(){
    		if(vm.model.dictType){
    			vm.model.dictKey = '';
    		}
    	};
    	
    	vm.apply = function(){
    		$scope.$apply();
    	}

    }
    
})();

(function() {
	'use strict';

	angular.module('app').factory('dictSvc', dict);

	dict.$inject = [ '$http' ,'$state','$location'];

	function dict($http,$state,$location) {
		var url_back = '#/dict';
		var url_dictgroup = rootPath + "/dict";
		var url_dictitems = rootPath + "/dict/dictNameData";
		var service = {
			initDictTree:initDictTree,			//初始化数字字典
			createDict:createDict,              //创建字典信息
			getDictById:getDictById,            //根据ID查询字典信息
			updateDict:updateDict,              //更改字典信息
			deleteDict:deleteDict,              //删除数字字典，包含子类
			initpZtreeClient:initpZtreeClient,
			getTreeData:getTreeData,
			getdictItems:getdictItems
		};

		return service;

		function getdictItems(vm){
			var dictCode = 'DICT_SEX';
			
			
			var httpOptions = {
					method : 'get',
					url : common.format(url_dictitems + "?dictCode={0}", dictCode)
			};
			
			var httpSuccess = function success(response) {
			
				
			}

			common.http({
				vm : vm,
				$http : $http,
				httpOptions : httpOptions,
				success : httpSuccess
			});
			
		}
		
		function getTreeData(callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/dict/fingByOdata?$orderby=dictSort"
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
			common.http({
				$http : $http,
				httpOptions : httpOptions,
				success : httpSuccess
			});
			
		}
		

		//beginDeleteGroup
		function deleteDict(id,isSubmit,callBack){
            isSubmit = true;
			var httpOptions = {
				method : 'delete',
				url : rootPath + "/dict",
				data : id
			}
            var httpSuccess = function success(response) {
                isSubmit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
			common.http({
				$http : $http,
				httpOptions : httpOptions,
				success : httpSuccess,
                onError:function(){
                    isSubmit = false;
                }
			});
		}

		//begin#createDict
		function createDict(dictModel,isCommit,callBack){
            isCommit = true;
            var httpOptions = {
                method : 'post',
                url : rootPath + "/dict",
                data : dictModel
            }
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess,
                onError:function(){
                    isCommit = false;
                }
            });
		}
		
		//updateDict
		function updateDict(dictModel,isCommit,callBack){
            isCommit = true;
            var httpOptions = {
                method : 'put',
                url : rootPath + "/dict",
                data : dictModel
            }
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess,
                onError:function(){
                    isCommit = false;
                }
            });
		}
		
		// begin#initZtreeClient
		function initDictTree(callBack) {
			var httpOptions = {
				method : 'post',
				url : rootPath + "/dict/fingByOdata?$orderby=dictSort"
			}
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
			common.http({
				$http : $http,
				httpOptions : httpOptions,
				success : httpSuccess
			});
		}

		// begin#initpZtreeClient
		function initpZtreeClient(callBack) {
			var httpOptions = {
				method : 'post',
				url : rootPath + "/dict/fingByOdata?$orderby=dictSort"
			}
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
			common.http({
				$http : $http,
				httpOptions : httpOptions,
				success : httpSuccess
			});
		}

		
		
		//begin#getDictGroupByCode
		function getDictById(dictId,callBack){
			var httpOptions = {
                method : 'post',
                url : rootPath + "/dict/fingById",
                params:{
                    id : dictId
                }
			};
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
			common.http({
				$http : $http,
				httpOptions : httpOptions,
				success : httpSuccess
			});
		}
		
	
	}
})();
(function () {
    'dispatch strict';

    angular.module('app').controller('dispatchEditCtrl', dispatch);

    dispatch.$inject = ['dispatchSvc', 'sysfileSvc', '$state', 'bsWin', '$scope', 'signSvc', 'templatePrintSvc'];

    function dispatch(dispatchSvc, sysfileSvc, $state, bsWin, $scope, signSvc, templatePrintSvc) {
        var vm = this;
        vm.title = '项目发文编辑';
        vm.sign = {};
        vm.searchSign = {};        //发文查询对象
        vm.dispatchDoc = {};       //发文对象
        vm.disData = {};            //从数据库查询的对象
        vm.dispatchDoc.signId = $state.params.signid;
        vm.isControl = $state.params.isControl;//按钮控制
        vm.dispatchDoc.id = "";

        vm.showFlag = {
            buttSysFile: false,        //显示附件按钮
            isReveiwDS: false,         //是否合并发文次项目
        }
        vm.busiFlag = {
            isMerge: false,            //是否合并发文
            isMain: false,             //是否合并发文主项目
        }

        activate();
        function activate() {
            dispatchSvc.initDispatchData(vm);
        }

        //监听是否关联按钮
        vm.watchIsRelated = function () {
            //监听是否关联事件
            $scope.$watch("vm.dispatchDoc.isRelated", function (newValue, oldValue) {
                //由关联改成未关联
                if ((newValue == 0 || newValue == '0') && (oldValue == 9 || oldValue == '9') && (vm.sign.isAssociate == 1)) {
                    bsWin.confirm({
                        title: "询问提示",
                        message: "该项目已经进行了关联，您要解除关联么？",
                        onOk: function () {
                            vm.isdik = true;//控制勾选框的勾选
                            $('.confirmDialog').modal('hide');
                            signSvc.saveAssociateSign($state.params.signid, null, function () {
                                bsWin.alert("项目解除关联成功");
                                /*window.location.reload();*/
                            });
                        },
                        onCancel: function () {
                            $scope.$apply(function () {//因为在窗口页面来改数据。数据不会作用到页面。所以需要重新加载
                                vm.dispatchDoc.isRelated = 9;
                            });
                        },
                        onClose: function () {
                            if (vm.isdik) {//窗口关闭事件。判断。如果是点确定的关闭那状态就要改变
                                $scope.$apply(function () {
                                    vm.dispatchDoc.isRelated = 0;
                                });
                            } else {
                                $scope.$apply(function () {//因为在窗口页面来改数据。数据不会作用到页面。所以需要重新加载
                                    vm.dispatchDoc.isRelated = 9;
                                });
                            }
                        }
                    });
                } else if ((oldValue == 0 || oldValue == '0') && (newValue == 9 || newValue == '9') && (!vm.sign.isAssociate || vm.sign.isAssociate == 0)) {
                    //其它、设备、进口阶段不能进行关联
                    if (signcommon.getReviewStage().OTHERS == vm.dispatchDoc.dispatchStage
                        || signcommon.getReviewStage().DEVICE_BILL_HOMELAND == vm.dispatchDoc.dispatchStage
                        || signcommon.getReviewStage().DEVICE_BILL_IMPORT == vm.dispatchDoc.dispatchStage
                        || signcommon.getReviewStage().IMPORT_DEVICE == vm.dispatchDoc.dispatchStage) {
                        bsWin.alert("该阶段不能进行关联！");
                        vm.dispatchDoc.isRelated = 0;
                    } else {
                        bsWin.confirm({
                            title: "询问提示",
                            message: "您要进行项目关联么？",
                            onOk: function () {
                                if (!vm.ss) {
                                    vm.page = lgx.page.init({
                                        id: "demo5", get: function (o) {
                                            //根据项目名称，查询要关联阶段的项目
                                            if (!vm.price) {
                                                vm.price = {
                                                    signid: vm.sign.signid,
                                                    projectname: vm.sign.projectname,
                                                };
                                            }
                                            vm.price.reviewstage = vm.sign.reviewstage; //设置评审阶段
                                            var skip;
                                            //oracle的分页不一样。
                                            if (o.skip != 0) {
                                                skip = o.skip + 1
                                            } else {
                                                skip = o.skip
                                            }
                                            vm.price.skip = skip;//页码
                                            vm.price.size = o.size + o.skip;//页数
                                            signSvc.getAssociateSignGrid(vm, function (data) {
                                                vm.associateSignList = [];
                                                if (data) {
                                                    vm.associateSignList = data.value;
                                                    vm.page.callback(data.count);//请求回调时传入总记录数
                                                }
                                                vm.ss = true;
                                            });

                                            //alert("当前页："+o.number+"，从数据库的位置1"+o.skip+"起，查"+o.size+"条数据");
                                            //需在这里发起ajax请求查询数据，请求成功后需调用callback方法重新计算分页

                                        }
                                    });

                                } else {
                                    vm.page.selPage(1);
                                }
                                //选中要关联的项目
                                $("#associateWindow").kendoWindow({
                                    width: "75%",
                                    height: "750px",
                                    title: "项目关联",
                                    visible: false,
                                    modal: true,
                                    closable: true,
                                    actions: ["Pin", "Minimize", "Maximize", "close"],
                                }).data("kendoWindow").center().open();

                            },
                            onCancel: function () {
                                console.log(1);
                                $scope.$apply(function () {
                                    vm.dispatchDoc.isRelated = 0;
                                });


                            },
                            onClose: function () {
                                if (vm.ss) {
                                    $scope.$apply(function () {
                                        vm.dispatchDoc.isRelated = 9;
                                    });
                                } else {
                                    $scope.$apply(function () {//因为在窗口页面来改数据。数据不会作用到页面。所以需要重新加载
                                        vm.dispatchDoc.isRelated = 0;
                                    });
                                }

                            }
                        });
                    }


                }
            });
        }
        //关联项目条件查询
        vm.associateQuerySign = function () {
            signSvc.getAssociateSignGrid(vm, function (data) {
                vm.associateSignList = [];
                if (data) {
                    vm.associateSignList = data.value;
                    vm.page.callback(data.count);//请求回调时传入总记录数
                }

            });
        }

        //start 保存项目关联
        vm.saveAssociateSign = function (associateSignId) {
            if (vm.sign.signid == associateSignId) {
                bsWin.alert("不能关联自身项目");
                return;
            }
            //保存成功之后，返回关联的项目信息
            signSvc.saveAssociateSign(vm.sign.signid, associateSignId, function (data) {
                if (data.flag || data.reCode == 'ok') {
                    if (associateSignId) {
                        vm.sign.isAssociate = 1;
                        vm.associateDispatchs = data.reObj;
                    } else {
                        vm.associateDispatchs = []; //解除关联也要重新设置值
                    }
                    bsWin.alert(associateSignId != undefined ? "项目关联成功" : "项目解除关联成功", function () {
                        window.parent.$("#associateWindow").data("kendoWindow").close();
                    });
                } else {
                    bsWin.alert(data.reMsg);
                }

            });
        }

        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.dispatchDoc.id) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.dispatchDoc.id", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }
            vm.sysFile = {
                businessId: vm.dispatchDoc.id,
                mainId: vm.dispatchDoc.signId,
                mainType: sysfileSvc.mainTypeValue().SIGN,
                sysfileType: sysfileSvc.mainTypeValue().DISPATCH,
                sysBusiType: sysfileSvc.mainTypeValue().DISPATCH,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm
            });
        }

        //发文方式改变事件
        vm.sigleProject = function () {
            //1、由合并发文主项目改为单个发文
            if (vm.dispatchDoc.dispatchWay == "1") {
                if (vm.busiFlag.isMerge && vm.busiFlag.isMain) {
                    bsWin.confirm({
                        title: "询问提示",
                        message: "该项目已经设为合并发文，并且已经有关联项目，如果现在要取消合并发文，以前的关联信息将被删除，您确定要取消合并发文么?",
                        onOk: function () {
                            dispatchSvc.deleteAllMerge(vm.dispatchDoc.signId, function (data) {
                                if (data.flag || data.reCode == "ok") {
                                    vm.dispatchDoc.isMainProject = "0";
                                    vm.busiFlag.isMerge = false;
                                    vm.busiFlag.isMain = false;
                                }
                                bsWin.alert(data.reMsg);
                            });
                        },
                        onClose: function () {
                        },
                        onCancel: function () {
                            vm.dispatchDoc.dispatchWay = "2";
                            $('.confirmDialog').modal('hide');
                        }
                    });
                }
                //2、由单个发文改为合并发文
            } else if (vm.dispatchDoc.dispatchWay == "2") {
                if (!vm.busiFlag.isMerge) {
                    vm.busiFlag.isMerge = true;
                    vm.busiFlag.isMain = (vm.dispatchDoc.isMainProject == "9") ? true : false;//判断是否为主项目
                }
            }
        }

        // 创建发文
        vm.create = function () {
            common.initJqValidation($('#dispatch_form'));
            var isValid = $('#dispatch_form').valid();
            if (isValid) {
                dispatchSvc.saveDispatch(vm, function (data) {
                    vm.isCommit = false;
                    if (data.flag || data.reCode == "ok") {
                        if (vm.dispatchDoc.dispatchWay && vm.dispatchDoc.dispatchWay == 2) {
                            vm.busiFlag.isMerge = true;     //合并发文
                        }
                        if (vm.dispatchDoc.isMainProject && vm.dispatchDoc.isMainProject == 9) {
                            vm.busiFlag.isMain = true;     //主项目
                        }

                        if (!vm.dispatchDoc.id) {
                            vm.dispatchDoc.id = data.reObj.id;
                        }
                    }
                    bsWin.alert(data.reMsg);
                });
            } else {
                bsWin.alert("提交失败，带红色*的项是必填项，请确认是否已经填写！");
            }
        }

        // 核减（增）/核减率（增）计算
        vm.count = function () {
            var isDeclare = false, isAuthorize = false;
            var pt = /^(-)?(([1-9]{1}\d*)|([0]{1}))(\.(\d){1,4})?$/;    //保留4个小数点
            if (vm.dispatchDoc.declareValue) {
                if (pt.test(vm.dispatchDoc.declareValue)) {
                    isDeclare = true;
                } else {
                    vm.dispatchDoc.declareValue = null;
                    $("span[data-valmsg-for='declareValue']").html("金额只能输入数字！");
                    return;
                }
            }
            if (vm.dispatchDoc.authorizeValue) {
                if (pt.test(vm.dispatchDoc.authorizeValue)) {
                    isAuthorize = true;
                } else {
                    vm.dispatchDoc.authorizeValue = null;
                    $("span[data-valmsg-for='authorizeValue']").html("金额只能输入数字！");
                }
            }
            //批复金额
            if (vm.dispatchDoc.approveValue && !pt.test(vm.dispatchDoc.approveValue)) {
                vm.dispatchDoc.approveValue = null;
                $("span[data-valmsg-for='approveValue']").html("金额只能输入数字！");
                return;
            }
            var dvalue = "", extraRate = "";
            if (isDeclare && isAuthorize) {
                $("span[data-valmsg-for='declareValue']").html("");
                $("span[data-valmsg-for='authorizeValue']").html("");
                //审定金额大于报审金额为核增，小于为核减
                if (parseFloat(vm.dispatchDoc.authorizeValue) > parseFloat(vm.dispatchDoc.declareValue)) {
                    dvalue = (parseFloat(vm.dispatchDoc.authorizeValue) - parseFloat(vm.dispatchDoc.declareValue)).toFixed(2);
                } else {
                    dvalue = (parseFloat(vm.dispatchDoc.declareValue) - parseFloat(vm.dispatchDoc.authorizeValue)).toFixed(2);
                }
                if (vm.dispatchDoc.declareValue > 0) {
                    extraRate = parseFloat((dvalue / vm.dispatchDoc.declareValue * 10000) / 100.00).toFixed(2);
                }
            }
            vm.dispatchDoc.extraRate = extraRate;
            vm.dispatchDoc.extraValue = dvalue;
        }

        // 打开合并页面
        vm.gotoMergePage = function () {
            if(vm.dispatchDoc.id){
                vm.disData = {};
                //先从数据库查询原始数据判断
                dispatchSvc.findDocById(vm.dispatchDoc.id,function (data) {
                    vm.disData = data;
                    //发文方式不一样，先保存
                    if(vm.disData.dispatchWay != vm.dispatchDoc.dispatchWay
                       || vm.disData.isMainProject != vm.dispatchDoc.isMainProject){
                        bsWin.alert("请先保存！");
                        return ;
                    }else{
                        //初始化合并评审信息
                        dispatchSvc.initMergeInfo(vm, vm.dispatchDoc.signId);
                        $("#mergeSign").kendoWindow({
                            width: "75%",
                            height: "700px",
                            title: "合并发文",
                            visible: false,
                            modal: true,
                            closable: true,
                            actions: ["Pin", "Minimize", "Maximize", "Close"]
                        }).data("kendoWindow").center().open();
                    }
                })
            }else{
                bsWin.alert("请先保存！");
            }
        }

        // 选择合并发文项目
        vm.chooseSign = function () {
            var selIds = $("input[name='mergeSign']:checked");
            if (selIds.length == 0) {
                bsWin.alert("请选择要合并发文的项目！");
            } else {
                var signIdArr = [];
                $.each(selIds, function (i, obj) {
                    signIdArr.push(obj.value);
                });
                dispatchSvc.chooseProject(vm.dispatchDoc.signId, signIdArr.join(","), function (data) {
                    if (data.flag || data.reCode == "ok") {
                        dispatchSvc.initMergeInfo(vm, vm.dispatchDoc.signId);
                    }
                    bsWin.alert(data.reMsg);
                });
            }
        }

        // 取消选择
        vm.cancelSign = function () {
            var linkSignId = $("input[name='cancelMergeSignid']:checked");
            if (linkSignId.length < 1) {
                bsWin.alert("请选择要取消合并发文的项目！");
            } else {
                var ids = [];
                $.each(linkSignId, function (i, obj) {
                    ids.push(obj.value);
                });
                dispatchSvc.cancelProject(vm.dispatchDoc.signId, ids.join(","), function (data) {
                    if (data.flag || data.reCode == "ok") {
                        dispatchSvc.initMergeInfo(vm, vm.dispatchDoc.signId);
                    }
                    bsWin.alert(data.reMsg);
                });
            }

        }

        // 关闭窗口
        vm.onClose = function () {
            window.parent.$("#mwindow").data("kendoWindow").close();
        }

        //合并发文待选过滤器
        vm.filterSign = function (item) {
            var isMatch = true;
            if (vm.searchSign.projectname && (item.projectname).indexOf(vm.searchSign.projectname) == -1) {
                isMatch = false;
            }
            if (vm.searchSign.reviewstage && (item.reviewstage != vm.searchSign.reviewstage)) {
                isMatch = false;
            }
            if (isMatch) {
                return item;
            }
        }

        //重置合并发文
        vm.formReset = function () {
            vm.searchSign = {};
        }

        vm.updateDisCode = function () {
            $("#disCodeWin").kendoWindow({
                width: "660px",
                height: "400px",
                title: "发文文号编辑",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Close"]
            }).data("kendoWindow").center().open();
        }

        /**
         * 打印功能 -分页
         * @param id
         */
        vm.templatePage = function (id) {
            templatePrintSvc.templatePage(id);
        }

    }
})();

(function () {
    'dispatch strict';

    angular.module('app').factory('dispatchSvc', dispatch);

    dispatch.$inject = ['sysfileSvc', '$http','$state','bsWin'];

    function dispatch(sysfileSvc,$http,$state,bsWin) {
        var service = {
            initDispatchData: initDispatchData, // 初始化流程数据
            saveDispatch: saveDispatch,         // 保存
            initMergeInfo: initMergeInfo,       // 打开合并发文页面
            unMergeDISSign: unMergeDISSign,     // 显示待选项目
            getMergeDISSign: getMergeDISSign,   // 已选合并发文项目
            chooseProject: chooseProject,       // 选择合并发文项目
            cancelProject: cancelProject,       // 取消选择
            deleteAllMerge : deleteAllMerge,    // 取消所有的合并项目
            findDocById : findDocById,          //根据ID查询发文信息
            findMergeDis : findMergeDis,        //根据主项目ID，查询合并发文次项目信息
        };
        return service;

        function findMergeDis(mainSignId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/dispatch/findMergeDisInfo",
                params: {
                    mainSignId: mainSignId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError:function () {

                }
            });
        }

        function findDocById(dictId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/dispatch/findById",
                params: {
                    dictId: dictId
                }
            }
            var httpSuccess = function success(response) {
                //关闭项目关联窗口
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError:function () {
                    vm.isCommit = false;
                }
            });
        }

        // begin#gotoWPage
        function initMergeInfo(vm,signId) {
            unMergeDISSign(signId,function (data) {
                vm.unMergeSign = [];
                vm.unMergeSign = data;
            });//待选
            getMergeDISSign(signId,function (data) {
                vm.mergeSign = [];
                vm.mergeSign = data;
            });//初始化已选项目
        }

        // end#gotoWPage

        // S_初始化
        function initDispatchData(vm) {
            vm.busiFlag.signleToMerge = false;
            var httpOptions = {
                method: 'get',
                url: rootPath + "/dispatch/initData",
                params: {
                    signid: vm.dispatchDoc.signId
                }
            }

            var httpSuccess = function success(response) {
                var data = response.data;
                vm.sign = data.sign;
                vm.dispatchDoc = data.dispatch;     //可编辑的发文对象

                //如果没有审定金额，则默认为0
                if(vm.dispatchDoc.authorizeValue == undefined){
                    vm.dispatchDoc.authorizeValue =0;
                }

                vm.dispatchDoc.signId = $state.params.signid;
                if(vm.dispatchDoc.dispatchWay && vm.dispatchDoc.dispatchWay == 2){
                    vm.busiFlag.isMerge = true;     //合并发文
                }
                if(vm.dispatchDoc.isMainProject && vm.dispatchDoc.isMainProject == 9){
                    vm.busiFlag.isMain = true;     //主项目
                }
                vm.associateDispatchs = data.associateDispatchs;
                vm.proofread = data.mainUserList;   //校对人

                //合并发文次项目
                if(vm.dispatchDoc.dispatchWay == 2 && vm.dispatchDoc.isMainProject==0){
                    vm.showFlag.isReveiwDS = true;
                }

                //初始化附件上传
                vm.initFileUpload();

                //监听是否关联选项
                vm.watchIsRelated();
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }// E_初始化

        // S_保存
        function saveDispatch(vm,callBack) {
            vm.isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/dispatch",
                data: vm.dispatchDoc
            }
            var httpSuccess = function success(response) {
                //关闭项目关联窗口
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError:function () {
                    vm.isCommit = false;
                }
            });
        }// E_保存

        // begin##chooseProject
        function chooseProject(signId,mergeIds,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/mergeSign",
                params: {
                    signId:signId ,
                    mergeIds: mergeIds,
                    mergeType:"2"
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // end##chooseProject

        // begin##chooseProject
        function cancelProject(signId,cancelIds,callBack) {
            var paramObj = {
                signId: signId,
                mergeType:"2"
            }
            if(cancelIds){
                paramObj.cancelIds = cancelIds;
            }
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/cancelMergeSign",
                params: paramObj
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        // end##chooseProject

        //S_删除所有合并评审工作方案
        function deleteAllMerge(signId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/deleteAllMerge",
                params: {
                    signId: signId,
                    mergeType:"2"
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_deleteAllMerge

        // begin##getSeleSignBysId
        function getMergeDISSign(signId,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/getMergeDISSign",
                params: {
                    signId: signId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        // end##getSeleSignBysId

        // begin##getSignForMerge
        function unMergeDISSign(signId,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/unMergeDISSign",
                params: {
                    signId: signId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
            });
        }// end##getSignForMerge

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('expertAuditCtrl', expert);

    expert.$inject = ['$scope', 'expertSvc','templatePrintSvc'];

    function expert($scope, expertSvc,templatePrintSvc) {
    	var vm = this;
        vm.title = "专家审核";

        activate();
        function activate() {
            expertSvc.auditGrid(vm);
        }

    	vm.searchAudit = function(){
    		expertSvc.searchAudit(vm);
    	}

    	//审核状态去到各状态
        vm.auditToOfficial = function() {
     	  expertSvc.auditTo(vm,2);
	    };
	    
	    vm.auditToAlternative=function() {
	      	expertSvc.auditTo(vm,3);
	    };
	    
	    vm.auditToStop=function() {
	      	expertSvc.auditTo(vm,4);
	    };
	    
	    vm.auditToRemove=function(){
	      	expertSvc.auditTo(vm,0);
	    };
	    
	    //各状态回到审核状态
	    vm.officialToAudit=function(){
	      	expertSvc.toAudit(vm,2);
	    };
	    
	    vm.alternativeToAudit=function(){
	      	expertSvc.toAudit(vm,3);
	    };
	    
	    vm.stopToAudit=function(){
	      	expertSvc.toAudit(vm,4);
	    };
	    
	    vm.temoveToAudit=function(){
	      	expertSvc.toAudit(vm,5);
	    };

        //S 查看专家详细
        vm.findExportDetail = function (id) {
            vm.model = {};
            vm.reviewProjectList = [];
            expertSvc.getExpertById(id, function (data) {
                vm.model = data;
                $("#auditExportDetail").kendoWindow({
                    width: "80%",
                    height: "620px",
                    title: "专家详细信息",
                    visible: false,
                    modal: true,
                    open:function(){
                        $("#expertPhotoSrc").attr("src", rootPath + "/expert/transportImg?expertId=" + vm.model.expertID + "&t=" + Math.random());
                       //tab标签
                        $('#myTab li').click(function (e) {
                            var aObj = $("a", this);
                            e.preventDefault();
                            aObj.tab('show');
                            var showDiv = aObj.attr("for-div");
                            $(".tab-pane").removeClass("active").removeClass("in");
                            $("#" + showDiv).addClass("active").addClass("in").show(500);
                        })
                        vm.reviewProjectList = [];
                        //评审过项目
                        expertSvc.reviewProjectGrid(vm.model.expertID,function(data){
                            vm.isLoading = false;
                            if(data && data.length > 0){
                                vm.reviewProjectList = data;
                                vm.noData = false;
                            }else{
                                vm.noData = true;
                            }
                        });
                    },
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            });
        }
        //S 查看专家详细

    }
})();

(function () {
    'expert strict';

    angular.module('app').controller('expertCtrl', expert);

    expert.$inject = ['$rootScope', 'expertSvc', '$state','templatePrintSvc', 'headerSvc'];

    function expert($rootScope, expertSvc, $state,templatePrintSvc , headerSvc) {
        var vm = this;
        vm.data = {};
        vm.title = '专家列表';
        vm.expertId = "";
        vm.headerType = "专家类型";
        vm.fileName = "专家信息";
        vm.expert = {};
        vm.expertList = new Array(10); // 控制空白行
        vm.searchmodel = {};

        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});
        }

        activate();
        function activate() {
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复查询条件
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.searchmodel = preView.data.searchmodel;
                }
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }
                expertSvc.grid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                expertSvc.grid(vm);
            }

        }

        vm.search = function () {
            vm.saveView();
            expertSvc.searchMuti(vm);
        };

        vm.searchAudit = function () {
            expertSvc.searchMAudit(vm);
        };

        vm.formReset = function () {
            //expertSvc.formReset(vm);
            vm.searchmodel = {};
        }

        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    expertSvc.deleteExpert(vm, id , function(data){
                        vm.isSubmit = false;
                        vm.gridOptions.dataSource.read();
                    });
                }
            })
        };

        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'

                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };

        //S 查看专家详细
        vm.findExportDetail = function (id) {
            expertSvc.getExpertById(id, function (data) {
                vm.model = data;
                $("#queryExportDetail").kendoWindow({
                    width: "80%",
                    height: "620px",
                    title: "专家详细信息",
                    visible: false,
                    modal: true,
                    open:function(){
                        $("#expertPhotoSrc").attr("src", rootPath + "/expert/transportImg?expertId=" + vm.model.expertID + "&t=" + Math.random());
                        //tab标签
                        $('#myTab li').click(function (e) {
                            var aObj = $("a", this);
                            e.preventDefault();
                            aObj.tab('show');
                            var showDiv = aObj.attr("for-div");
                            $(".tab-pane").removeClass("active").removeClass("in");
                            $("#" + showDiv).addClass("active").addClass("in").show(500);
                        })
                        //项目签收编辑模板打印
                        vm.editPrint = function () {
                            templatePrintSvc.templatePrint("expertApply_templ");
                        }
                        //评审过项目
                        vm.reviewProjectList = [];
                        expertSvc.reviewProjectGrid(vm.model.expertID,function(data){
                            vm.isLoading = false;
                            if(data && data.length > 0){
                                vm.reviewProjectList = data;
                                vm.noData = false;
                            }else{
                                vm.noData = true;
                            }

                        });

                    },
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            });
        }
        //S 查看专家详细


        /**
         * 导出execl功能
         */
        vm.exportToExcel = function () {
            expertSvc.exportToExcel(vm);
        }

        /**
         * 自定义报表
         */
        vm.selectHeader = function(){
            headerSvc.selectHeaderWindow(vm,vm.headerType);
        }
    }
})();

(function () {
    'expert strict';

    angular.module('app').controller('expertEditCtrl', expert);

    expert.$inject = ['bsWin', 'projectExpeSvc', 'workExpeSvc', 'expertSvc', 'expertOfferSvc', 'expertTypeSvc', '$state','$rootScope'];

    function expert(bsWin, projectExpeSvc, workExpeSvc, expertSvc, expertOfferSvc, expertTypeSvc, $state,rootScope) {
        var vm = this;
        vm.model = {};
        vm.data = {};
        vm.title = '专家信息编辑';
        vm.isuserExist = false;
        vm.expertID = $state.params.id;
        //一些参数
        vm.showSS = true;
        vm.showSC = false;
        vm.showWS = true;
        vm.showWC = false;
        vm.MW = false;
        vm.MS = false;
        vm.expertList = new Array(10); // 控制空白行

        activice();
        function activice() {
            //初始化专家信息
            if (vm.expertID) {
                expertSvc.getExpertById(vm.expertID, function (data) {
                    vm.model = data;
                    vm.showSS = false;
                    vm.showSC = true;
                    vm.showWS = false;
                    vm.showWC = true;
                    initUpload(vm);
                    $("#expertPhotoSrc").attr("src", rootPath + "/expert/transportImg?expertId=" + vm.model.expertID + "&t=" + Math.random());
                });
            }
        }

        /**
         * 查看专家评审过的项目列表
         * @param expertId
         */
        vm.selReviewProject = function () {
            if(vm.model.expertID){
                $("#reviewProject").kendoWindow({
                    width: "75%",
                    height: "600px",
                    title: "评审项目列表",
                    visible: false,
                    open:function(){
                        vm.isLoading = true;
                        vm.reviewProjectList = [];
                        expertSvc.reviewProjectGrid(vm.model.expertID,function(data){
                            vm.isLoading = false;
                            if(data && data.length > 0){
                                vm.reviewProjectList = data;
                                vm.noData = false;
                            }else{
                                vm.noData = true;
                            }

                        });
                    },
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "close"]
                }).data("kendoWindow").center().open();
            }
        }

        //查看流程详细
        vm.queryDetail = function(signId , processInstanceId){
            $("#reviewProject").data("kendoWindow").close();
            $state.go('signDetails' ,{signid : signId , processInstanceId :  processInstanceId} );

        }

        //S_initUpload
        function initUpload(vm) {
            var projectfileoptions = {
                language: 'zh',
                allowedPreviewTypes: ['image'],
                allowedFileExtensions: ['jpg', 'png', 'gif'],
                maxFileSize: 2000,
                showRemove: false,
                uploadUrl: rootPath + "/expert/uploadPhoto",
                uploadExtraData: {expertId: vm.model.expertID}
            };
            $("#expertphotofile").fileinput(projectfileoptions).on("filebatchselected", function (event, files) {

            }).on("fileuploaded", function (event, data) {
                $("#expertPhotoSrc").removeAttr("src");
                $("#expertPhotoSrc").attr("src", rootPath + "/expert/transportImg?expertId=" + vm.model.expertID + "&t=" + Math.random());
            });
        }//E_initUpload

        vm.showUploadWin = function () {
            if (vm.model.expertID) {
                $("#uploadWin").kendoWindow({
                    width: "660px",
                    height: "360px",
                    title: "上传头像",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            } else {
                common.alert({
                    vm: vm,
                    msg: "先保存数据在执行操作！"
                })
            }
        }

        /**
         * 保存专家信息
         */
        vm.saveEP = function () {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;
                vm.model.birthDay = $('#birthDay').val();
                vm.model.graduateDate = $('#graduateDate').val();
                expertSvc.saveExpert(vm.model, vm.isSubmit, function (data) {
                    vm.isSubmit = false;
                    if (data.flag || data.reCode == 'ok') {
                        vm.model.expertID = data.reObj.expertID;
                        vm.model.expertNo = data.reObj.expertNo;
                        bsWin.success("保存成功！")
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("专家信息没有填写完整");
            }
        }

        vm.gotoWPage = function () {
            if (vm.model.expertID) {
                $("#wrwindow").kendoWindow({
                    width : "680px",
                    height : "420px",
                    title : "工作简历",
                    visible : false,
                    modal : true,
                    closable : true,
                    actions : [ "Pin", "Minimize", "Maximize", "Close" ]
                }).data("kendoWindow").center().open();
            } else {
                bsWin.alert("请先保存专家信息！");
            }

        }

        /**
         * 保存工作简历信息
         */
        vm.saveWorks = function () {
            common.initJqValidation($('#workForm'));
            var isValid = $('#workForm').valid();
            if (isValid) {
                if (!vm.work.expertID) {
                    vm.work.expertID = vm.model.expertID;
                }
                workExpeSvc.saveWork(vm.work, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        if(!vm.work.weID){
                            if (!vm.model.workDtoList) {
                                vm.model.workDtoList = [];
                            }
                            vm.model.workDtoList.push(data.reObj);
                        }else{
                            $.each(vm.model.workDtoList,function (index,tl) {
                                if(tl.weID == vm.work.weID){
                                    tl = data.reObj;
                                }
                            })
                        }
                        bsWin.success(data.reMsg, function () {
                            vm.work = {};
                            vm.onWClose();
                        });
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            }
        }

        /**
         * 更新工作简历
         */
        vm.updateWork = function(){
            var isCheck = $("input[name='checkwr']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择要更改的项目经历信息！");
            } else if (isCheck.length > 1) {
                bsWin.alert("每次只能更改一条记录！");
            } else {
                var editId = isCheck.val();
                $.each(vm.model.workDtoList,function (index,tl) {
                    if(tl.weID == editId){
                        vm.work = tl;
                    }
                })
                vm.gotoWPage();
            }
        }

        /**
         * 删除专家工作简历
         */
        vm.deleteWork = function () {
            var isCheck = $("input[name='checkwr']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择要删除的工作简历");
            } else {
                var ids = [];
                $.each(isCheck, function (i, obj) {
                    ids.push(obj.value);
                });
                workExpeSvc.deleteWork(ids.join(","),function(){
                    $.each(ids,function (i,id) {
                        $.each(vm.model.workDtoList,function (index,tl) {
                            if(tl && tl.weID == id){
                                vm.model.workDtoList.splice(index,1);
                            }
                        })
                    })
                    bsWin.alert("操作成功！");
                })
            }
        }

        vm.onWClose = function () {
            window.parent.$("#wrwindow").data("kendoWindow").close();
        }

        /**
         * 跳转到项目经历页面
         */
        vm.gotoJPage = function () {
            if (vm.model.expertID) {
                $("#pjwindow").kendoWindow({
                    width: "690px",
                    height: "330px",
                    title: "添加项目经验",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin","Minimize","Maximize","Close"]
                }).data("kendoWindow").center().open();
            }else{
                bsWin.alert("请先保存专家信息！");
            }
        }

        /**
         * 新增项目经历
         */
        vm.saveProject = function () {
            common.initJqValidation($('#ProjectForm'));
            var isValid = $('#ProjectForm').valid();
            if (isValid) {
                if (!vm.project.expertID) {
                    vm.project.expertID = vm.model.expertID;
                }
                vm.project.projectbeginTime = $('#projectbeginTime').val();
                vm.project.projectendTime = $('#projectendTime').val();
                projectExpeSvc.saveProject(vm.project,function(data){
                    if (data.flag || data.reCode == 'ok') {
                        if(!vm.project.peID){
                            if (!vm.model.projectDtoList) {
                                vm.model.projectDtoList = [];
                            }
                            vm.model.projectDtoList.push(data.reObj);
                        }else{
                            $.each(vm.model.projectDtoList,function (index,tl) {
                                if(tl.peID == vm.project.peID){
                                    tl = data.reObj;
                                }
                            })
                        }
                        bsWin.success(data.reMsg, function () {
                            vm.project = {};
                            vm.onPClose();
                        });
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            }
        }

        /**
         * 更改项目经历
         */
        vm.updateProjectPage = function(){
            var isCheck = $("input[name='checkpj']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择要更改的项目经历信息！");
            } else if (isCheck.length > 1) {
                bsWin.alert("每次只能更改一条记录！");
            } else {
                var editId = isCheck.val();
                $.each(vm.model.projectDtoList,function (index,tl) {
                    if(tl.peID == editId){
                        vm.project = tl;
                    }
                })
                vm.gotoJPage();
            }
        }

        /**
         * 删除项目经历
         */
        vm.delertProject = function () {
            common.initJqValidation();
            var isCheck = $("input[name='checkpj']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择要删除的操作对象!");
            } else {
                var ids = [];
                $.each(isCheck, function (i, obj) {
                    ids.push(obj.value);
                });
                projectExpeSvc.delertProject(ids.join(","),function(){
                    $.each(ids,function (i,id) {
                        $.each(vm.model.projectDtoList,function (index,tl) {
                            if(tl && tl.peID == id){
                                vm.model.projectDtoList.splice(index,1);
                            }
                        })
                    })
                    bsWin.alert("操作成功！");
                });
            }
        }

        vm.onPClose = function () {
            window.parent.$("#pjwindow").data("kendoWindow").close();
        }

        /**
         * 新增专家专业类别
         */
        vm.gotoExpertType = function () {
            if (vm.model.expertID) {
                $("#addExpertType").kendoWindow({
                    width: "680px",
                    height: "400px",
                    title: "专家类型",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            } else {
                bsWin.alert("请先保存专家信息！");
            }
        }

        /**
         * 关闭专家类别弹窗
         */
        vm.onETlose = function () {
            expertTypeSvc.cleanValue();
            window.parent.$("#addExpertType").data("kendoWindow").close();
        }

        /**
         * 保存专家类别信息
         */
        vm.saveExpertType = function () {
            common.initJqValidation($('#expertTypeForm'));
            var isValid = $('#expertTypeForm').valid();
            if (isValid) {
                if (!vm.expertType.expertID) {
                    vm.expertType.expertID = vm.model.expertID;
                }
                expertTypeSvc.saveExpertType(vm.expertType, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        if(!vm.expertType.id){
                            if (!vm.model.expertTypeDtoList) {
                                vm.model.expertTypeDtoList = [];
                            }
                            vm.model.expertTypeDtoList.push(data.reObj);
                        }else{
                            $.each(vm.model.expertTypeDtoList,function (index,tl) {
                                if(tl.id == vm.expertType.id){
                                    tl = data.reObj;
                                }
                            })
                        }
                        bsWin.success(data.reMsg, function () {
                            vm.expertType = {};
                            vm.onETlose();
                        });
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            }
        }

        /**
         * 更新专业类型
         */
        vm.updateProjectType = function () {
            var isCheck = $("input[name='checkEType']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择要更改的专业信息！");
            } else if (isCheck.length > 1) {
                bsWin.alert("每次只能更改一条记录！");
            } else {
                var editId = isCheck.val();
                $.each(vm.model.expertTypeDtoList,function (index,tl) {
                    if(tl.id == editId){
                        vm.expertType = tl;
                    }
                })
                vm.expertType.majobSmallDicts = rootScope.topSelectChange(vm.expertType.maJorBig,rootScope.DICT.MAJOR.dicts);
                vm.gotoExpertType();
            }
        }

        /**
         * 删除转接类别信息
         */
        vm.delertProjectType = function () {
            var isCheck=$("input[name='checkEType']:checked");
            if(isCheck.length<1){
                bsWin.alert("请选择删除的专家类别信息！");
            }else {
                var ids = [];
                $.each(isCheck, function (i, obj) {
                    ids.push(obj.value);
                });
                expertTypeSvc.deleteExpertType(ids.join(","),function () {
                    $.each(ids,function (i,id) {
                        $.each(vm.model.expertTypeDtoList,function (index,tl) {
                            if(tl && tl.id == id){
                                vm.model.expertTypeDtoList.splice(index,1);
                            }
                        })
                    })
                    bsWin.alert("操作成功！");
                });
            }
        }

        //专家聘书弹窗
        vm.gotoOfferPage = function () {
            if (vm.model.expertID) {
                $("#ep_offer_div").kendoWindow({
                    width: "820px",
                    height: "600px",
                    title: "专家聘书",
                    visible: false,
                    modal: true,
                    closable: true,
                    close:function () {
                        vm.showProjectOffer=false;
                    },
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            } else {
                bsWin.alert("先保存专家信息！");
            }
        }

        //保存聘书信息
        vm.saveOffer = function () {
            common.initJqValidation($("#expert_offer_form"));
            var isValid = $('#expert_offer_form').valid();
            if (isValid) {
                vm.expertOffer.expertId = vm.model.expertID
                expertOfferSvc.saveOffer(vm.expertOffer, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        if(!vm.expertOffer.id){
                            if (!vm.model.expertOfferDtoList) {
                                vm.model.expertOfferDtoList = [];
                            }
                            vm.model.expertOfferDtoList.push(data.reObj);
                        }else{
                            $.each(vm.model.expertOfferDtoList,function (index,tl) {
                                if(tl.id == vm.expertOffer.id){
                                    tl = data.reObj;
                                }
                            })
                        }
                        bsWin.success(data.reMsg, function () {
                            vm.expertOffer = {};
                            vm.onETlose();
                        });
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            }
        }
        //关闭窗口信息
        vm.closeOffer = function () {
            vm.showProjectOffer=false;
            window.parent.$("#ep_offer_div").data("kendoWindow").close();
        }
        //查看专家聘书
        vm.showOffer = function () {
            var isCheck=$("input[name='checkps']:checked");
            if(isCheck.length<1){
                bsWin.alert("请选择要查看的聘书信息！");
            }else if(isCheck.length>1){
                bsWin.alert("每次只能查看一条记录！");
            }
            else {
                var id = isCheck.val();
                $.each(vm.model.expertOfferDtoList,function(index ,o){
                    if (o.id == id) {
                        vm.expertOffer = o;
                        return;
                    }
                });
                vm.showProjectOffer = true;
                vm.gotoOfferPage();
            }
        }

        vm.chooseMW = function () {
            vm.MW = true;
            vm.showWS = true;
            vm.showWC = false;
        }
        vm.cancelMW = function () {
            vm.showWS = false;
            vm.showWC = true;
        }
        vm.sureMW = function () {
            if (!vm.majorWork) {
                common.alert({
                    vm: vm,
                    msg: "您未选择专业，请选择！",
                    fn: function () {
                        $('.alertDialog').modal('hide');
                        $('.modal-backdrop').remove();
                    }
                })
            } else {
                vm.model.majorWork = vm.majorWork;
                vm.showWS = false;
                vm.showWC = true;
            }
        }
        vm.chooseMS = function () {
            vm.MS = true;
            vm.showSS = true;
            vm.showSC = false;
        }
        vm.cancelMS = function () {
            vm.showSS = false;
            vm.showSC = true;
        }
        vm.sureMS = function () {
            if (!vm.majorStudy) {
                common.alert({
                    vm: vm,
                    msg: "您未选择专业，请选择！",
                    fn: function () {
                        $('.alertDialog').modal('hide');
                        $('.modal-backdrop').remove();
                    }
                })
            } else {
                vm.model.majorStudy = vm.majorStudy;
                vm.showSS = false;
                vm.showSC = true;
            }
        }

        vm.queryDetail = function(signId , processInstanceId){
            $("#reviewProject").data("kendoWindow").close();
            $state.go('signDetails' ,{signid : signId , processInstanceId :  processInstanceId} );

        }


        //项目签收编辑模板打印
        vm.editPrint = function () {
           expertSvc.expertPrint(vm);
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('expertRepeatCtrl', expert);

    expert.$inject = ['$location', 'expertSvc' , 'bsWin'];

    function expert($location, expertSvc , bsWin) {
    	var vm = this;
    	
        activate();
        function activate() {
        	expertSvc.repeatGrid(vm);
        }

        //S 查看专家详细
        vm.findExportDetail = function (id) {
            expertSvc.getExpertById(id, function (data) {
                vm.model = data;
                $("#reExportDetail").kendoWindow({
                    width: "80%",
                    height: "auto",
                    title: "专家详细信息",
                    visible: false,
                    modal: true,
                    open:function(){
                        $("#expertPhotoSrc").attr("src", rootPath + "/expert/transportImg?expertId=" + vm.model.expertID + "&t=" + Math.random());
                    },
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            });
        }
        //S 查看专家详细

        /**
         * 删除专家
         * @param expertId
         */
        vm.del = function(expertId){
            bsWin.confirm("删除数据不可恢复，确认删除数据吗？" , function(){
                expertSvc.deleteExpertData(vm, expertId , function(data){
                    bsWin.alert("操作成功", function(){
                        vm.repeatGridOptions.dataSource.read();
                    });
                });
            })
        }


        /**
         * 批量删除
         */
        vm.dels = function(){
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                bsWin.alert("请选择数据");
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        }
    }
})();

(function () {
    'expert strict';

    angular.module('app').controller('expertScoreCtrl', expertScore);

    expertScore.$inject = ['$location','expertSvc'];

    function expertScore($location, expertSvc) {
    	var vm = this;
    	vm.data={};
    	vm.title = '专家评分统计';

        vm.selectHis = {};      //专家抽取条件对象
        vm.selectHis.beginTime = (new Date()).yearAgo(1);
        vm.selectHis.endTime = (new Date()).Format("yyyy-MM-dd");

        vm.expScoreList = [];

        activate();
        function activate() {
            vm.isSubmit = true;
            vm.noData = false;
            expertSvc.expertScoreHis(vm.selectHis,function(data){
                vm.isSubmit = false;
                vm.expScoreList = data;
                if(!vm.expScoreList || vm.expScoreList.length == 0){
                    vm.noData = true;
                }
            });
        }
        /**
         * 查询
         */
        vm.search = function(){
            //把两个数放到一个变量中，因为url是传实体类的。到service在拆分
            if(vm.selectHis.scoreBegin){
                if(vm.selectHis.scoreEnd){
                    vm.selectHis.score=vm.selectHis.scoreBegin+vm.selectHis.scoreEnd;
                }else{
                    vm.selectHis.score=vm.selectHis.scoreBegin+5;//如果最大的选项没有写时。就到最大
                }
            }else{
                vm.selectHis.score=1+vm.selectHis.scoreEnd;//如歌最小的选项没有写时，就到最小
            }

            activate();
        }

        /**
         * 重置查询条件
         */
        vm.formReset = function(){
            vm.selectHis = {};
        }

    }
})();

(function () {
    'expert strict';

    angular.module('app').controller('expertSelectHisCtrl', expertSelectHis);

    expertSelectHis.$inject = ['$location','expertSvc'];
    
    function expertSelectHis($location, expertSvc) {
    	var vm = this;
    	vm.title = '专家抽取统计';
    	vm.selectHis = {};      //专家抽取条件对象
        vm.selectHis.beginTime = (new Date()).yearAgo(1);
        vm.selectHis.endTime = (new Date()).Format("yyyy-MM-dd");

        vm.expSelectList = [];

        activate();
        function activate() {
            vm.isSubmit = true;
            vm.noData = false;
            expertSvc.expertSelectHis(vm.selectHis,function(data){
                vm.isSubmit = false;
                vm.expSelectList = data;
                if(!data || data.length ==0){
                    vm.noData = true;
                }
            });
        }

        /**
         * 查询
         */
        vm.search = function(){
            activate();
        }
        /**
         * 重置查询条件
         */
        vm.formReset = function(){
            vm.selectHis = {};
        }
    }
})();

(function() {
	'expert strict';

	angular.module('app').factory('expertSvc', expert);

	expert.$inject = [ '$http','FileSaver', 'Blob','templatePrintSvc'];
	
	function expert($http,FileSaver,Blob,templatePrintSvc) {
		var url_expert = rootPath + "/expert";
		var service = {
			grid : grid,						//初始化综合查询grid
			auditGrid : auditGrid,				//初始化审核页面的所有grid
			getExpertById : getExpertById,		//通过ID查询专家信息详情
			saveExpert : saveExpert,            //保存专家信息
			deleteExpert : deleteExpert,        //删除专家信息(逻辑删除)
            deleteExpertData:deleteExpertData,	//删除专家信息(物理删除)
			searchMuti : searchMuti,		    //综合查询
			searchAudit : searchAudit,		    //审核查询
			repeatGrid : repeatGrid,		    //重复专家查询
			updateAudit : updateAudit,		    //专家评审
			toAudit : toAudit,				    //由个状态回到审核状态
			auditTo : auditTo,				    //由审核状态去到各个状态
            formReset : formReset,				//重置页面
            exportToExcel : exportToExcel,      //导出excel功能
            expertSelectHis : expertSelectHis,	//专家抽取统计
            expertScoreHis : expertScoreHis,	//专家评分统计
			reviewProjectGrid : reviewProjectGrid,  //专家评审项目列表
            expertPrint : expertPrint,  //专家评审模板打印
            queryExpertDetail : queryExpertDetail , //查看专家详情弹框
		};
		return service;


        //编辑模板打印
        function expertPrint(){
            templatePrintSvc.templatePrint("expertApply_templ");
    }
		//begin formReset
		function formReset(vm){
			$("#searchform")[0].reset();
			//vm.gridOptions.dataSource.read();
		}
		//end formReset
		
		// begin#deleteUser
		function deleteExpert(vm, id , callBack) {
			vm.isSubmit = true;
			var httpOptions = {
				method : 'delete',
				url : url_expert,
                params:{
                    id : id
                }
			}
			var httpSuccess = function success(response) {
                vm.isSubmit = false;
				if(callBack != undefined && typeof  callBack == 'function'){
					callBack(response.data);
				}
			}
			common.http({
				vm : vm,
				$http : $http,
				httpOptions : httpOptions,
				success : httpSuccess
			});
		}
		// end#deleteUser

		//begin_deleteExpertData
		function deleteExpertData(vm, id , callBack){
            vm.isSubmit = true;
            var httpOptions = {
                method : 'delete',
                url : rootPath + "/expert/deleteExpertData",
                params:{
                    id : id
                }

            }
            var httpSuccess = function success(response) {
                vm.isSubmit = false;
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }
            common.http({
                vm : vm,
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess
            });
		}//end_deleteExpertData
		
		// begin#search
		function searchMuti(vm) {
            vm.gridOptions.dataSource._skip=0;
			vm.gridOptions.dataSource.read();	
		}
		// end#searchMuti									
				
		// S_保存专家信息
		function saveExpert(expert,isSubmit,callBack) {
            isSubmit = true;
            var httpOptions = {
                method : 'post',
                url : rootPath + "/expert",
                data : expert
            }
            var httpSuccess = function success(response) {
                isSubmit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess,
				onError:function () {
                    isSubmit = false;
                }
            })

		}
		// end#saveExpert

        // begin#getExpertById
		function getExpertById(expertID,callBack) {
			var httpOptions = {
				method : 'post',
				url : url_expert+"/findById",
				params:{
					id:expertID
				}
			}
			var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
			} 
			common.http({
				$http : $http,
				httpOptions : httpOptions,
				success : httpSuccess
			});
		}//end#getExpertById								
		
		// begin#grid
		function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath+"/expert/findByOData",$("#searchform"),vm.gridParams),
                schema: common.kendoGridConfig().schema({
                    id: "expertID",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: vm.queryParams.pageSize || 10,
                page: vm.queryParams.page || 1,
                sort: {
                    field: "applyDate",
                    dir: "desc"
                }
            });
            // End:dataSource

			/*var  dataBound = function () {
                var rows = this.items();  
                var page = this.pager.page() - 1;  
                var pagesize = this.pager.pageSize();  
                $(rows).each(function () {  
                    var index = $(this).index() + 1 + page * pagesize;  
                    var rowLabel = $(this).find(".row-number");  
                    $(rowLabel).html(index);  
                });  
            } */
						
			// End:column
			vm.gridOptions = {
				dataSource : common.gridDataSource(dataSource),
				filterable : common.kendoGridConfig().filterable,
				noRecords : common.kendoGridConfig().noRecordMessage,
				columns : getExpertColumns(vm),
                pageable: common.kendoGridConfig(vm.queryParams).pageable,
                dataBound: common.kendoGridConfig(vm.queryParams).dataBound,
				resizable : true
			};
		}// end fun grid
		
		function getExpertColumns(vm){
			var columns = [
				/*{
					template : function(item) {
						if(item.state != '5'){
                            return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",item.expertID)
						}else{
                            return kendo.format("<input type='checkbox' disabled='disabled'  relId='{0}' name='checkbox' class='checkbox' />",item.expertID)
						}

					},
					filterable : false,
					width : 40,
					title : "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
				},*/
				{  
				    field: "rowNumber",  
				    title: "序号",  
				    width: 50,
                    attributes: {
                        "class": "table-cell",
                        style: "text-align: center"
                    },
				    template: "<span class='row-number'></span>",
                    filterable : false,
			    },
				{
					field : "name",
					title : "姓名",
					width : 80,
					filterable : false,
                    template: function (item) {
                        return '<a  ng-click="vm.findExportDetail(\''+item.expertID+'\')">'+item.name+'</a>'
                    }
				},
                {
                    field : "comPany",
                    title : "工作单位",
                    width : 300,
                    filterable : false
                },
                {
                    field : "phone",
                    title : "办公电话",
                    width : 120,
                    filterable : false
                },
				{
					field : "userPhone",
					title : "手机号码",
					width : 120,
					filterable : false
				},
                {
                    field : "job",
                    title : "职位",
                    width : 150,
                    filterable : false
                },
                {
                    field : "post",
                    title : "职称",
                    width : 120,
                    filterable : false
                },
                {
                    field : "expertSort",
                    title : "专家类型",
                    width : 150,
                    filterable : false
                },
                {
                    field : "compositeScore",
                    title : "评分",
                    width : 60,
                    filterable : false
                },
				{
					field : "",
					title : "操作",
					width : 80,
					template : function(item) {
						var showDel = true;
                        if(item.state != '5'){
                            showDel = true;
						}else{
                            showDel = false;
						}
                       return common.format($('#columnBtns').html(),  "vm.del('" + item.expertID + "')", item.expertID  , showDel);
					}
				}
			];			
			return columns;
		}
		
		function getMinColumns(){
			var columns = [
				{
					template : function(item) {
						return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",item.expertID)
					},
					filterable : false,
					width : 25,
					title : "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
				},
				{
					field : "name",
					title : "姓名",
					width : 60,
					filterable : false,
                    template: function (item) {
                        return '<a  ng-click="vm.findExportDetail(\''+item.expertID+'\')">'+item.name+'</a>'
                    }
				},
				{
					field : "degRee",
					title : "学位",
					width : 50,
					filterable : false
				},
                {
                    field : "post",
                    title : "职称",
                    width : 70,
                    filterable : false
                },
                {
                    field : "applyDate",
                    title : "录入时间",
                    width : 70,
                    filterable : false,
                    format: "{0: yyyy-MM-dd}"
                },
                {
                    field : "compositeScore",
                    title : "专家星级",
                    width : 70,
                    filterable : false
                },
				{
					field : "comPany",
					title : "工作单位",
					width : 120,
					filterable : false
				}
			];
			return columns;
		}
				
		//S_auditGrid
		function auditGrid(vm){
			var dataSource1 = new kendo.data.DataSource({
				type : 'odata',
				transport : common.kendoGridConfig().transport(rootPath+"/expert/findByOData",$("#auditform"),{$filter:"state eq '1'"},true),
				schema : common.kendoGridConfig().schema({
					id : "id",
					fields : {
						createdDate : {
							type : "date"
						}
					}
				}),
				serverPaging : true,
				serverSorting : true,
				serverFiltering : true,
				pageSize : 25,
				sort : {
					field : "createdDate",
					dir : "desc"
				}
			});
			
			var dataSource2 = new kendo.data.DataSource({
				type : 'odata',
				transport : common.kendoGridConfig().transport(rootPath+"/expert/findByOData",$("#auditform"),{$filter:"state eq '2'"},true),
				schema : common.kendoGridConfig().schema({
					id : "id",
					fields : {
						createdDate : {
							type : "date"
						}
					}
				}),
				serverPaging : true,
				serverSorting : true,
				serverFiltering : true,
				pageSize : 5,
				sort : {
					field : "createdDate",
					dir : "desc"
				}
			});						
			
			var dataSource3 = new kendo.data.DataSource({
				type : 'odata',
				transport : common.kendoGridConfig().transport(rootPath+"/expert/findByOData",$("#auditform"),{$filter:"state eq '3'"},true),
				schema : common.kendoGridConfig().schema({
					id : "id",
					fields : {
						createdDate : {
							type : "date"
						}
					}
				}),
				serverPaging : true,
				serverSorting : true,
				serverFiltering : true,
				pageSize : 5,
				sort : {
					field : "createdDate",
					dir : "desc"
				}
			});
			
			var dataSource4 = new kendo.data.DataSource({
				type : 'odata',
				transport : common.kendoGridConfig().transport(rootPath+"/expert/findByOData",$("#auditform"),{$filter:"state eq '4'"},true),
				schema : common.kendoGridConfig().schema({
					id : "id",
					fields : {
						createdDate : {
							type : "date"
						}
					}
				}),
				serverPaging : true,
				serverSorting : true,
				serverFiltering : true,
				pageSize : 5,
				sort : {
					field : "createdDate",
					dir : "desc"
				}
			});
			
			var dataSource5 = new kendo.data.DataSource({
				type : 'odata',
				transport : common.kendoGridConfig().transport(rootPath+"/expert/findByOData",$("#auditform"),{$filter:"state eq '0'"},true),
				schema : common.kendoGridConfig().schema({
					id : "id",
					fields : {
						createdDate : {
							type : "date"
						}
					}
				}),
				serverPaging : true,
				serverSorting : true,
				serverFiltering : true,
				pageSize : 5,
				sort : {
					field : "createdDate",
					dir : "desc"
				}
			});
			
			var  dataBound = function () {  
                var rows = this.items();  
                var page = this.pager.page() - 1;  
                var pagesize = this.pager.pageSize();  
                $(rows).each(function () {  
                    var index = $(this).index() + 1 + page * pagesize;  
                    var rowLabel = $(this).find(".row-number");  
                    $(rowLabel).html(index);  
                });  
            } 
			
			vm.gridOptions1 = {
				dataSource : common.gridDataSource(dataSource1),
				filterable : common.kendoGridConfig().filterable,
				pageable : common.kendoGridConfig().pageable,
				noRecords : common.kendoGridConfig().noRecordMessage,
				columns : getMinColumns(),
				dataBound:dataBound,
				resizable : true
			};
			
			vm.gridOptions2 = {
				dataSource : common.gridDataSource(dataSource2),
				filterable : common.kendoGridConfig().filterable,
				pageable : common.kendoGridConfig().pageable,
				noRecords : common.kendoGridConfig().noRecordMessage,
				columns : getMinColumns(),
				dataBound:dataBound,
				resizable : true
			};
			
			vm.gridOptions3 = {
				dataSource : common.gridDataSource(dataSource3),
				filterable : common.kendoGridConfig().filterable,
				pageable : common.kendoGridConfig().pageable,
				noRecords : common.kendoGridConfig().noRecordMessage,
				columns : getMinColumns(),
				dataBound:dataBound,
				resizable : true
			};
			
			vm.gridOptions4 = {
					dataSource : common.gridDataSource(dataSource4),
					filterable : common.kendoGridConfig().filterable,
					pageable : common.kendoGridConfig().pageable,
					noRecords : common.kendoGridConfig().noRecordMessage,
					columns : getMinColumns(),
					dataBound:dataBound,
					resizable : true
				};
			
			vm.gridOptions5 = {
				dataSource : common.gridDataSource(dataSource5),
				filterable : common.kendoGridConfig().filterable,
				pageable : common.kendoGridConfig().pageable,
				noRecords : common.kendoGridConfig().noRecordMessage,
				columns : getMinColumns(),
				dataBound:dataBound,
				resizable : true
			};
		}//E_auditGrid				
		
		//S_searchAudit
		function searchAudit(vm){
            vm.gridOptions1.dataSource._skip=0;
            vm.gridOptions2.dataSource._skip=0;
            vm.gridOptions3.dataSource._skip=0;
            vm.gridOptions4.dataSource._skip=0;
            vm.gridOptions5.dataSource._skip=0;

			vm.gridOptions1.dataSource.read();
			vm.gridOptions2.dataSource.read();
			vm.gridOptions3.dataSource.read();
			vm.gridOptions4.dataSource.read();
			vm.gridOptions5.dataSource.read();
		}//S_endAudit
		
		//S_repeatGrid
		function repeatGrid(vm){
			var dataSource = new kendo.data.DataSource({
				type : 'odata',
				transport : common.kendoGridConfig().transport(rootPath+"/expert/findRepeatByOData"),
				schema : common.kendoGridConfig().schema({
					id : "id"
				}),
				rowNumber: true,  
	            headerCenter: true
			});
			
			var  dataBound = function () {  
                var rows = this.items();   
                $(rows).each(function (i) {                    	
                     $(this).find(".row-number").html(i+1);                   
                });  
            } 
						
			// End:column
			vm.repeatGridOptions = {
				dataSource : common.gridDataSource(dataSource),
				filterable : common.kendoGridConfig().filterable,
				noRecords : common.kendoGridConfig().noRecordMessage,
				columns : getExpertColumns(vm),
				dataBound:dataBound,
				resizable : true
			};
		}//E_repeatGrid
		
		//S_toAudit
		function toAudit(vm,flag){
        	var selectIds = common.getKendoCheckId('#grid'+flag);
        	if (selectIds.length == 0) {
        		common.alert({
        			vm:vm,
        			msg:'请选择数据'
        		});
        	}else{
        		var ids=[];
        		for (var i = 0; i < selectIds.length; i++) {
        			ids.push(selectIds[i].value);
        		}  
        		var idStr=ids.join(',');
        		updateAudit(vm,idStr,1);
        	}
        }//E_toAudit
		 
		//S_auditTo
		function auditTo(vm,flag){
			var selectIds = common.getKendoCheckId('#grid1');
	       if (selectIds.length == 0) {
	       	common.alert({
	           	vm:vm,
	           	msg:'请选择数据'
	           });
	       }else{
	       	var ids=[];
	           for (var i = 0; i < selectIds.length; i++) {
	           	ids.push(selectIds[i].value);
				}  
	           var idStr=ids.join(',');
	           updateAudit(vm,idStr,flag);
	       }
	   }//E_auditTo
		
		//begin updateAudit
		function updateAudit(vm,ids,flag){
			vm.isSubmit = true;
			var httpOptions = {
				method : 'post',
				url : url_expert+"/updateAudit",
				params:{
					ids:ids,
					flag:flag
				}		
			}
			var httpSuccess = function success(response) {
				common.requestSuccess({
					vm : vm,
					response : response,
					fn : function() {
						vm.isSubmit = false;
						vm.gridOptions1.dataSource.read();
						vm.gridOptions2.dataSource.read();
						vm.gridOptions3.dataSource.read();
						vm.gridOptions4.dataSource.read();
						vm.gridOptions5.dataSource.read();
						common.alert({
							vm : vm,
							msg : "操作成功"
						})	
					}
				});
			}
			common.http({
				vm : vm,
				$http : $http,
				httpOptions : httpOptions,
				success : httpSuccess
			});
		}//end updateAudit

        //S_导出综合查询的excel功能
        function exportToExcel(vm){
            var httpOptions ={
                method : 'post',
                url : rootPath+"/expert/exportToExcel",
                responseType: 'arraybuffer',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'},
                data: {$filter:common.buildOdataFilter($("#searchform")) },
                transformRequest: function(obj) {
                    var str = [];
                    for(var p in obj){
                        str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                    }
                    return str.join("&");
                }
            }
            var httpSuccess = function success(response){
                var blob = new Blob([response.data] , {type : "application/vnd.ms-excel"});
                FileSaver.saveAs(blob, "专家信息.xls");
            }
            common.http({
                $http : $http ,
                httpOptions : httpOptions,
                success : httpSuccess
            });

        }//E_exportToExcel

        //S_专家抽取统计
        function expertSelectHis(epSelHis,callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/expert/expertSelectHis",
                data : epSelHis
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess,
            });
        }//E_expertSelectHis

        //S_专家评分统计
        function expertScoreHis(epSelHis,callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/expert/expertScoreHis",
                data : epSelHis
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess,
            });
        }//E_expertScoreHis

		//begin reviewProjectGrid
		function reviewProjectGrid(expertId,callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/expert/reviewProject",
                params : {
                    expertId :expertId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess,
            });

            /*// Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/expert/reviewProject?expertId=" + vm.expertId),
                schema: common.kendoGridConfig().schema({
                    id: "signid",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable : false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "projectname",
                    title: "项目名称",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "builtcompanyname",
                    title: "建设单位",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "reviewstage",
                    title: "项目阶段",
                    width: 80,
                    filterable: false,
                },
                {
                    field: "signdate",
                    title: "签收日期",
                    width: 100,
                    filterable: false,
                    format: "{0:yyyy/MM/dd}"
                },{
					field : "",
					title :"操作",
					width : 100 ,
                    filterable: false,
					template : function(item){
                        return common.format($('#columnBtns2').html(),"vm.queryDetail('" + item.signid + "','"+ item.processInstanceId+"')");
					}
				}
            ];
            // End:column

            vm.reviewProjectOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound:dataBound,
                resizable: true
            };*/
		}
		//end reviewProjectGrid

		//begin queryExpertDetail
		function queryExpertDetail(vm , expertId){
            vm.expert = [];
			vm.id = expertId;
            getExpertById(vm.id, function (data) {
                vm.expert = data;
                $("#queryExportDetailsS").kendoWindow({
                    width: "80%",
                    height: "620px",
                    title: "专家详细信息",
                    visible: false,
                    modal: true,
                    open:function(){
                        $("#expertPhotoSrc").attr("src", rootPath + "/expert/transportImg?expertId=" + vm.expert.expertID + "&t=" + Math.random());
                        //tab标签
                        $("#busi_baseinfoS").addClass("active").addClass("in").show(500);

                        $('#myTabExpertS li').click(function (e) {
                            $("#busi_baseinfoS").removeClass("active").removeClass("in");
                            $("#busi_workplanS").removeClass("active").removeClass("in");
                            var aObj = $("a", this);
                            e.preventDefault();
                            aObj.tab('show');
                            var showDiv = aObj.attr("for-div");
                            // $("#" + showDiv).removeClass("active").removeClass("in");
                            $("#" + showDiv).addClass("active").addClass("in").show(500);
                        })
                        //评审过项目
                        vm.reviewProjectList2 = [];
                        reviewProjectGrid(vm.id,function(data){
                            vm.isLoading = false;
                            if(data && data.length > 0){
                                vm.reviewProjectList2 = data;
                                vm.noData = false;
                            }else{
                                vm.noData = true;
                            }

                        });
                    },
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            });
		}
		//end queryExpertDetail
	}

})();
(function () {
    'expertType strict';

    angular.module('app').factory('expertTypeSvc', expertType);

    expertType.$inject = ['$http', 'expertSvc', '$rootScope', 'bsWin'];

    function expertType($http, expertSvc, $rootScope, bsWin) {
        var service = {
            cleanValue: cleanValue,
            getExpertType: getExpertType,	        //通过专家id获取专家类型
            getExpertTypeById: getExpertTypeById,	//	通过专家类型ID获取专家类型
            saveUpdate: saveUpdate,	            //保存更新数据
            deleteExpertType: deleteExpertType,	//删除专家类型
            saveExpertType: saveExpertType,	    //添加专家类型
        };

        return service;

        // 清空页面数据
        // begin#cleanValue
        function cleanValue() {
            var tab = $("#addExpertType").find('input');
            $.each(tab, function (i, obj) {
                obj.value = "";
            });
        }

        //begin getExpertTypeByExpertId
        function getExpertType(vm) {
            var httpOptions = {
                method: 'GET',
                url: rootPath + "/expertType/getExpertType?$filter=expert.expertID eq '" + vm.model.expertID + "'"
            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        vm.expertTypeList = response.data;
                    }
                });
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }


        //begin getExpertTypeById
        function getExpertTypeById(vm) {
            var httpOptions = {
                method: "get",
                url: rootPath + "/expertType/getExpertTypeById",
                params: {expertTypeId: vm.expertTypeId}
            }

            var httpSuccess = function success(response) {
                vm.expertType = response.data;
                vm.expertType.majobSmallDicts = $rootScope.topSelectChange(vm.expertType.maJorBig, $rootScope.DICT.MAJOR.dicts)
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        //end getExpertTypeById

        //S_保存专家类别信息
        function saveExpertType(expertType, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertType",
                data: expertType
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//end createExpertType

        //begin
        function saveUpdate(vm) {
            common.initJqValidation($('#expertTypeForm'));
            var isValid = $('#expertTypeForm').valid();
            if (isValid) {
//			vm.model.id=vm.id;
                vm.expertType.expertID = vm.expertID;
                var httpOptions = {
                    method: "put",
                    url: rootPath + "/expertType",
                    data: vm.expertType
                }
                var httpSuccess = function success(response) {

                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            window.parent.$("#addExpertType").data("kendoWindow").close();
//						getExpertType(vm);
                            expertSvc.getExpertById(vm);
                            cleanValue();
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                }
                            })
                        }

                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
            }
        }//end

        function deleteExpertType(ids,callBack) {
            var httpOptions = {
                method: "delete",
                url: rootPath + "/expertType",
                params:{
                    ids : ids
                }
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
    }

})();
(function () {
    'projectExpe strict';

    angular.module('app').factory('projectExpeSvc', projectExpe);

    projectExpe.$inject = ['$http'];

    function projectExpe($http) {
        var service = {
            getProject: getProject,
            saveProject: saveProject,
            updateProject: updateProject,
            updateProjectPage: updateProjectPage,
            getProjectById: getProjectById,
            delertProject: delertProject,
            initProjectType: initProjectType
        };
        return service;

        //begin  initProjectType
        function initProjectType(vm) {
            var code = "PROJECTTYPE";
            var httpOptions = {
                method: "get",
                url: rootPath + "/dict/getAllDictByCode",
                params: {dictCode: code}
            }
            var httpSuccess = function success(response) {
                vm.projectTypes = response.data;
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//end initProjectType

        //begin#delertProject
        function delertProject(ids,callBack) {
            var httpOptions = {
                method: 'delete',
                url: rootPath + "/projectExpe/deleteProject",
                params:{
                    ids : ids
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        ////end#delertProject


        //begin#getProjectById
        function getProjectById(vm) {
            var httpOptions = {
                method: 'get',
                url: common.format(rootPath + "/projectExpe/getProject?$filter=peID eq '{0}'", vm.peID)
            }
            var httpSuccess = function success(response) {
                //vm.model = response.data[0];
                vm.project = {};
                vm.project.projectName = response.data[0].projectName;
                vm.project.projectType = response.data[0].projectType;
                vm.project.projectbeginTime = response.data[0].projectbeginTime;
                vm.project.projectendTime = response.data[0].projectendTime;

                //$('#projectbeginTime').val(response.data[0].projectbeginTime);
                //$('#projectendTime').val(response.data[0].projectendTime);
                if (vm.isUpdate) {
                    //initZtreeClient(vm);
                }
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });


        }


        //begin#updateProject
        function updateProject(vm) {
            common.initJqValidation($('#ProjectForm'));
            var isValid = $('#ProjectForm').valid();
            if (isValid) {
                vm.isSubmit = true;
                vm.project.peID = vm.peID;
                vm.project.expertID = vm.expertID;
                vm.project.projectbeginTime = $('#projectbeginTime').val();
                vm.project.projectendTime = $('#projectendTime').val();
                //alert(vm.model.projectendTime);
                var httpOptions = {
                    method: 'put',
                    url: rootPath + "/projectExpe/updateProject",
                    data: vm.project
                }

                var httpSuccess = function success(response) {

                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            window.parent.$("#pjwindow").data("kendoWindow").close();
                            getProject(vm);
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                }
                            })
                        }

                    })
                }
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

            //} else {
            // common.alert({
            // vm:vm,
            // msg:"您填写的信息不正确,请核对后提交!"
            // })
            //}

        }


        //begin#getProject
        function getProject(vm) {
            var httpOptions = {
                method: 'GET',
                url: rootPath + "/projectExpe/getProject?$filter=expert.expertID eq '" + vm.model.expertID + "'"
            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        vm.projectList = response.data;
                    }

                });
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        //begin#updateProject
        function updateProjectPage(vm) {
            var isCheck = $("input[name='checkpj']:checked");
            if (isCheck.length < 1) {
                common.alert({
                    vm: vm,
                    msg: "请选择操作对象",
                    fn: function () {
                        $('.alertDialog').modal('hide');
                        $('.modal-backdrop').remove();
                        return;
                    }
                })
            } else if (isCheck.length > 1) {
                common.alert({
                    vm: vm,
                    msg: "无法同时操作多条数据",
                    fn: function () {
                        $('.alertDialog').modal('hide');
                        $('.modal-backdrop').remove();
                        return;
                    }
                })
            } else {
                vm.peID = isCheck.val();
                getProjectById(vm);
                vm.expertID = vm.model.expertID;
                gotoJPage(vm);
            }
        }

        // begin#保存专家项目经历
        function saveProject(project,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/projectExpe/saveExpe",
                data: project
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
    }
})();
(function() {
	'workExpe strict';

	angular.module('app').factory('workExpeSvc', workExpe);

	workExpe.$inject = [ '$http','expertSvc' ];

	function workExpe($http,expertSvc) {
		var service = {
            saveWork : saveWork,
			updateWork : updateWork,
			deleteWork : deleteWork,
			updateWorkPage : updateWorkPage,
			getWorkById : getWorkById,
			getWork : getWork,
		};

		return service;
		// begin#getWork
		function getWork(vm) {
			var httpOptions = {
				method : 'GET',
				url : rootPath + "/workExpe/getWork?$filter=expert.expertID eq '" + vm.model.expertID + "'"
			}
			var httpSuccess = function success(response) {
				common.requestSuccess({
					vm : vm,
					response : response,
					fn : function() {
						vm.workList = response.data;
//						console.log(vm.work);
					}
				});
			}
			common.http({
				vm : vm,
				$http : $http,
				httpOptions : httpOptions,
				success : httpSuccess
			});
		}

		// begin#根据ID删除工作简历信息
		function deleteWork(ids,callBack) {
            var httpOptions = {
                method : 'delete',
                url : rootPath + "/workExpe/deleteWork",
                params : {
                    ids : ids,
				}
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess
            });
		}
		// end#delertWork

		// begin#updateWork
		function updateWorkPage(vm) {
			var isCheck = $("input[name='checkwr']:checked");
			if (isCheck.length < 1) {
				common.alert({
					vm : vm,
					msg : "请选择操作对象",
					fn : function() {
						$('.alertDialog').modal('hide');
						$('.modal-backdrop').remove();
						return;
					}
				})
			} else if (isCheck.length > 1) {
				common.alert({
					vm : vm,
					msg : "无法同时操作多条数据",
					fn : function() {
						$('.alertDialog').modal('hide');
						$('.modal-backdrop').remove();
						return;
					}
				})
			} else {				
				vm.weID = isCheck.val();
				getWorkById(vm);
				gotoWPage(vm);
				vm.expertID = vm.model.expertID;

			}
		}

		// begin#getWorkById
		function getWorkById(vm) {
			var httpOptions = {
				method : 'get',
				url : common.format(rootPath + "/workExpe/getWork?$filter=weID eq '{0}'", vm.weID)
			}
			var httpSuccess = function success(response) {
				vm.work={};
				vm.work.companyName = response.data[0].companyName;
				vm.work.workJob = response.data[0].workJob;
				vm.work.beginTime = response.data[0].beginTime;
				vm.work.endTime = response.data[0].endTime;
			}
			common.http({
				vm : vm,
				$http : $http,
				httpOptions : httpOptions,
				success : httpSuccess
			});
		}

		// begin#保存专家工作经历
		function saveWork(work,callBack) {
            var httpOptions = {
                method : 'post',
                url : rootPath + "/workExpe/saveWorkExpe",
                data : work
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess
            });
		}

		// begin#updateWork
		function updateWork(vm) {
			common.initJqValidation();
			var isValid = $('form').valid();
			if (isValid) {
				vm.work.weID = vm.weID;
				vm.work.expertID = vm.expertID;
				vm.work.beginTime = $('#beginTime').val();
				vm.work.endTime = $('#endTime').val();

				var httpOptions = {
					method : 'put',
					url : rootPath + "/workExpe/updateWork",
					data : vm.work
				}

				var httpSuccess = function success(response) {
					common.requestSuccess({
						vm : vm,
						response : response,
						fn : function() {
							window.parent.$("#wrwindow").data("kendoWindow").close();
							getWork(vm);
							cleanValue();
							common.alert({
								vm : vm,
								msg : "操作成功",
								fn : function() {
									vm.showWorkHistory = true;
									$('.alertDialog').modal('hide');
								}
							})
						}

					})
				}

				common.http({
					vm : vm,
					$http : $http,
					httpOptions : httpOptions,
					success : httpSuccess
				});
			}
		}
	}

})();
(function () {
    'use strict';

    angular.module('app').factory('expertOfferSvc', expertOffer);

    expertOffer.$inject = ['$http','expertSvc'];

    function expertOffer($http,expertSvc) {
        var service = {
            saveOffer: saveOffer,	            //保存专家聘书
            updateOffer  : updateOffer      //更新专家聘书

        };
        return service;

        //S_saveOffer
        function saveOffer(expertOffer,callBack) {
            var httpOptions = {
                method : 'post',
                url : rootPath + "/expertOffer",
                data : expertOffer
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }//E_saveOffer

        //begin updateOffer
        function updateOffer(vm){
            common.initJqValidation($("#expert_offer_form"));
            var isValid = $('#expert_offer_form').valid();
            if (isValid) {
                vm.expertOffer.expertId = vm.model.expertID
                var httpOptions = {
                    method : 'put',
                    url : rootPath + "/expertOffer",
                    data : vm.expertOffer
                }
                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm : vm,
                        response : response,
                        fn : function() {
                            expertSvc.getExpertById(vm);
                            common.alert({
                                vm : vm,
                                msg : "操作成功"
                            })
                        }

                    });
                }
                common.http({
                    vm : vm,
                    $http : $http,
                    httpOptions : httpOptions,
                    success : httpSuccess
                });
            }
        }
        //end updateOffer

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('expertReviewCtrl', expertReview);

    expertReview.$inject = ['$location', 'expertReviewSvc'];

    function expertReview($location, expertReviewSvc) {
        var vm = this;
        vm.title = '专家列表';

        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    expertReviewSvc.deleteExpertReview(vm, id);
                }
            });
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };

        activate();
        function activate() {
            expertReviewSvc.initExpertGrid(vm);
            expertReviewSvc.getReviewList(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('expertReviewEditCtrl', expertReview);

    expertReview.$inject = ['$location', 'expertReviewSvc', '$state'];

    function expertReview($location, expertReviewSvc, $state) {
        var vm = this;
        vm.title = '添加附件';
        vm.isuserExist = false;
        vm.id = $state.params.id;
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '更新附件';
        }

        vm.create = function () {
            expertReviewSvc.createExpertReview(vm);
        };
        vm.update = function () {
            expertReviewSvc.updateExpertReview(vm);
        };

        activate();
        function activate() {
            if (vm.isUpdate) {
                expertReviewSvc.getExpertReviewById(vm);
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('expertSelectCtrl', expertReview);

    expertReview.$inject = ['expertReviewSvc', 'expertConditionSvc', 'expertSvc', '$state', 'bsWin', '$scope','workprogramSvc'];

    function expertReview(expertReviewSvc, expertConditionSvc, expertSvc, $state, bsWin, $scope,workprogramSvc) {
        var vm = this;
        vm.title = '选择专家';
        vm.conMaxIndex = 0;                             //条件号
        vm.customCondition = new Array();               //专家抽取条件
        vm.expertReview = {};                           //评审方案对象
        vm.confirmEPList = [];                          //拟聘请专家列表（已经经过确认的专家）
        vm.confirmEPListReplace = [];                   //已经调整过的聘请专家列表（已经经过确认的专家）
        vm.matchEPMap = {};                             //保存符合条件的专家信息
        vm.selectIds = [],                              //已经抽取的专家信息ID（用于排除查询）
        vm.businessId = $state.params.businessId;       //专家评审方案业务ID
        vm.minBusinessId = $state.params.minBusinessId; //专家抽取方案业务ID
        vm.businessType = $state.params.businessType;   //专家业务类型
        vm.taskId = $state.params.taskId;               //任务ID
        var expertID = $state.params.expertID;          //专家ID
        vm.isback = $state.params.isback;               //用来判断返回的是否是维护页面的工作方案
        vm.processInstanceId = $state.params.processInstanceId; //流程实例ID
        vm.reviewType = $state.params.reviewType;       //评审方式
        vm.isSuperUser = isSuperUser;
        vm.saveNewExpertFlag = 0;                       //保存新专家标志
        vm.isAutoDraf = false;                         //是否已经进行专家抽取（如果选择的专家有抽取类型，则表示已经进行抽取操作 ）
        vm.showLastDraf = true;                        //是否显示上次抽取的信息
        vm.sorces = [0 ,1 , 2 , 3, 4 , 5];
        //显示上次抽取的专家
        //S 查看专家详细
        vm.findExportDetail = function (id) {
            expertSvc.getExpertById(id, function (data) {
                vm.model = data;
                $("#selectExportDetail").kendoWindow({
                    width: "80%",
                    height: "auto",
                    title: "专家详细信息",
                    visible: false,
                    modal: true,
                    open: function () {
                        $("#expertPhotoSrc").attr("src", rootPath + "/expert/transportImg?expertId=" + vm.model.expertID + "&t=" + Math.random());
                    },
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            });
        }
        //S 查看专家详细

        //刷新已经选择的专家信息
        vm.reFleshSelEPInfo = function (explist) {
            $.each(explist, function (i, obj) {
                vm.confirmEPList.push(obj);
                if (vm.confirmEPListReplace.length > 0) {
                    vm.confirmEPListReplace.push(obj);
                }
                //保存拟聘专家
                if ("专家函评" == vm.reviewType && obj.isLetterRw != "9") {//是专家函评时就勾选完
                    obj.isLetterRw = 9;
                } else if ("专家评审会" == vm.reviewType && obj.isLetterRw != "0") {
                    obj.isLetterRw = 0;
                }
                vm.selectIds.push(obj.expertDto.expertID);
            })
            vm.excludeIds = vm.selectIds.join(',');
        }

        //删除后刷新
        vm.reFleshAfterRemove = function (ids) {
            $.each(ids, function (i, obj) {
                //1、删除已确认的专家
                $.each(vm.confirmEPList, function (index, epObj) {
                    if (epObj && obj == epObj.id) {
                        vm.confirmEPList.splice(index, 1);
                    }
                })
                if (vm.confirmEPListReplace.length > 0) {
                    $.each(vm.confirmEPListReplace, function (index, epObj) {
                        if (epObj && obj == epObj.id) {
                            vm.confirmEPListReplace.splice(index, 1);
                        }
                    })
                }
            })
            // expertReviewSvc.initExpertGrid(vm);
        }

        //更新参加未参加状态
        vm.reFleshJoinState = function (ids, state) {
            $.each(ids, function (i, obj) {
                //1、删除已确认的专家
                $.each(vm.confirmEPList, function (index, epObj) {
                    if (obj == epObj.id) {
                        epObj.isJoin = state;
                    }
                })
                if (vm.confirmEPListReplace.length > 0) {
                    $.each(vm.confirmEPListReplace, function (index, epObj) {
                        if (epObj && obj == epObj.id) {
                            epObj.isJoin = state;
                        }
                    })
                }
            })
        }

        //更新是否确认状态
        vm.reFleshConfirmState = function (ids, state) {
            $.each(ids, function (i, obj) {
                //1、删除已确认的专家
                $.each(vm.confirmEPList, function (index, epObj) {
                    if (obj == epObj.id) {
                        epObj.isConfrim = state;
                    }
                })
                if (vm.confirmEPListReplace.length > 0) {
                    $.each(vm.confirmEPListReplace, function (index, epObj) {
                        if (epObj && obj == epObj.id) {
                            epObj.isConfrim = state;
                        }
                    })
                }
            })
        }

        //更新抽取条件的抽取次数
        vm.updateSelectedIndex = function (id) {
            if (id) {
                $.each(vm.expertReview.expertSelConditionDtoList, function (i, con) {
                    if (con.id == id) {
                        con.selectIndex = (!con.selectIndex) ? 1 : con.selectIndex + 1;
                    }
                })
            } else {
                $.each(vm.expertReview.expertSelConditionDtoList, function (i, con) {
                    con.selectIndex = (!con.selectIndex) ? 1 : con.selectIndex + 1;
                })
            }
        }

        vm.init = function (businessId, minBusinessId) {
            vm.expertReview = {};
            vm.confirmEPList = [];
            vm.selectIds = [];
            expertReviewSvc.initReview(businessId, minBusinessId, function (data) {
                vm.expertReview = data;
                //显示随机收取按钮
                /*if((vm.expertReview.finishExtract > 0) ||(vm.expertReview.state == 9 || vm.expertReview.state == '9')){
                    vm.isAutoDraf = true;
                }*/
                //将综合分数转换为string类型，以防遍历时默认选中出问题
                if(vm.expertReview.expertSelConditionDtoList) {
                    $.each(vm.expertReview.expertSelConditionDtoList , function(i , obj){
                        if(obj.compositeScore){
                            vm.expertReview.expertSelConditionDtoList[i].compositeScore = obj.compositeScore.toString();
                        }
                        if(obj.compositeScoreEnd){
                            vm.expertReview.expertSelConditionDtoList[i].compositeScoreEnd = obj.compositeScoreEnd.toString();
                        }
                    })
                }
                //获取已经抽取的专家
                if (!angular.isUndefined(vm.expertReview.expertSelectedDtoList) && angular.isArray(vm.expertReview.expertSelectedDtoList)) {
                    vm.autoSelectedEPList = [];
                    var isShowAutoExpert = false;
                    if(vm.expertReview.extractInfo && vm.showLastDraf){
                        isShowAutoExpert = true;
                    }
                    $.each(vm.expertReview.expertSelectedDtoList, function (i, sep) {
                        if(!vm.isAutoDraf && (sep.selectType == 1 || sep.selectType == '1')){
                            vm.isAutoDraf = true;
                        }
                        vm.selectIds.push(sep.expertDto.expertID);
                        vm.confirmEPList.push(sep);
                        //显示最新抽取未确认的专家
                        if(isShowAutoExpert && sep.selectType == "1"){
                            if(vm.expertReview.extractInfo == "ALL") {
                                sep.show = true;
                                sep.official = (sep.remark == "正选");
                                vm.autoSelectedEPList.push(sep);
                            }else{
                                if((vm.expertReview.extractInfo == sep.conditionId) && (vm.expertReview.selectIndex == sep.selectIndex)){
                                    sep.show = true;
                                    sep.official = (sep.remark == "正选");
                                    vm.autoSelectedEPList.push(sep);
                                }
                            }
                        }
                    })
                    if (vm.selectIds.length > 0) {
                        vm.excludeIds = vm.selectIds.join(',');
                    } else {
                        vm.excludeIds = '';
                    }
                }
            });
        }
        activate();
        function activate() {
            expertReviewSvc.initExpertGrid(vm);
            vm.init(vm.businessId, vm.minBusinessId);
        }

        //弹出自选专家框
        vm.showSelfExpertGrid = function () {
            $("input[name = 'expertID']").val(vm.selectIds);
            vm.selfExpertOptions.dataSource._skip = 0;
            vm.selfExpertOptions.dataSource.read();
            $("#selfExpertDiv").kendoWindow({
                width: "80%",
                height: "680px",
                title: "自选评审专家",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        //保存自选的专家
        vm.saveSelfExpert = function (admin) {
            var selectIds = common.getKendoCheckId('#selfExpertGrid');
            if (selectIds.length == 0) {
                bsWin.alert("请先选择专家！");
            } else {
                if(!admin && selectIds.length > 1){
                    bsWin.alert("自选专家只能选择一个！");
                }else{
                    var selExpertIdArr = [];
                    $.each(selectIds, function (i, obj) {
                        selExpertIdArr.push(obj.value);
                    });
                    expertReviewSvc.saveSelfExpert(vm.businessId, vm.minBusinessId, vm.businessType, selExpertIdArr.join(","), vm.expertReview.id, vm.isCommit, function (data) {
                        if (data.flag || data.reCode == 'ok') {
                            //更新专家评审费用
                            if(vm.businessType == "SIGN"){
                                workprogramSvc.updateWPExpertCost(vm.minBusinessId);
                            }
                            //如果是普通用户，还要删除之前选择的专家，因为他只能选一个
                            if (!"9" == data.reObj.moreExpert) {
                                var ids = [];
                                $.each(vm.confirmEPList, function (i, obj) {
                                    if (obj.selectType == '2') {
                                        ids.push(obj.id);
                                    }
                                })
                                vm.reFleshAfterRemove(ids);
                            }

                            if (!vm.expertReview.id) {
                                vm.expertReview.id = data.idCode;
                            }
                            //刷新
                            vm.reFleshSelEPInfo(data.reObj.selectedDtoList);
                            bsWin.success("操作成功！", function () {
                                window.parent.$("#selfExpertDiv").data("kendoWindow").close();
                            });
                        } else {
                            bsWin.error(data.reMsg);
                        }
                    });
                }
            }
        }

        //删除自选专家
        vm.delertSelfExpert = function () {
            var isCheck = $("input[name='seletedEp']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择要删除的专家");
            } else {
                bsWin.confirm({
                    title: "询问提示",
                    message: "删除数据不可恢复，确定删除么？",
                    onOk: function () {
                        $('.confirmDialog').modal('hide');
                        var ids = [];
                        for (var i = 0; i < isCheck.length; i++) {
                            var obj = JSON.parse(isCheck[i].value);
                            ids.push(obj.id);
                            $.each(vm.selectIds , function(j , id){

                                if(obj.expertDto.expertID == id ){
                                    vm.selectIds.splice(j , 1);
                                }
                            })
                        }


                        expertReviewSvc.delSelectedExpert(vm.expertReview.id, ids.join(','), vm.isCommit, function (data) {
                            if (data.flag || data.reCode == 'ok') {
                                //更新专家评审费用
                                if(vm.businessType == "SIGN"){
                                    workprogramSvc.updateWPExpertCost(vm.minBusinessId);
                                }
                                vm.reFleshAfterRemove(ids);
                                bsWin.success("操作成功！");
                            } else {
                                bsWin.error(data.reMsg);
                            }
                        });
                    },
                });
            }
        }

        //自选专家查询
        vm.querySelfExpert = function () {
            vm.selfExpertOptions.dataSource._skip = 0;
            vm.selfExpertOptions.dataSource.read();
        }

        //境外专家
        vm.showOutExpertGrid = function () {
            $("input[name = 'expertID']").val(vm.selectIds);
            vm.outExpertOptions.dataSource._skip = 0;
            vm.outExpertOptions.dataSource.read();
            $("#outExpertDiv").kendoWindow({
                width: "70%",
                height: "680px",
                title: "自选新专家、市外、境外专家",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        //删除选择的境外专家
        vm.delertOutSelfExpert = function () {
            var isCheck = $("input[name='seletedOutEp']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择要删除的专家");
            } else {
                bsWin.confirm({
                    title: "询问提示",
                    message: "删除数据不可恢复，确定删除么？",
                    onOk: function () {
                        var ids = [];
                        for (var i = 0; i < isCheck.length; i++) {
                            var obj = JSON.parse(isCheck[i].value);
                            ids.push(obj.id);
                            $.each(vm.selectIds , function(j , id){

                                if(obj.expertDto.expertID == id ){
                                    vm.selectIds.splice(j , 1);
                                }
                            })
                        }
                        expertReviewSvc.delSelectedExpert(vm.expertReview.id, ids.join(','), vm.isCommit, function (data) {
                            if (data.flag || data.reCode == 'ok') {
                                //更新专家评审费用
                                if(vm.businessType == "SIGN"){
                                    workprogramSvc.updateWPExpertCost(vm.minBusinessId);
                                }
                                vm.reFleshAfterRemove(ids);
                                bsWin.success("操作成功！");
                            } else {
                                bsWin.error(data.reMsg);
                            }
                        });
                    },
                });
            }
        }

        //保存选择的境外专家
        vm.saveOutExpert = function () {
            var selectIds = common.getKendoCheckId('#outExpertGrid');
            if (selectIds.length == 0) {
                bsWin.alert("请先选择专家！");
            } else {
                var selExpertIdArr = [];
                $.each(selectIds, function (i, obj) {
                    selExpertIdArr.push(obj.value);
                });
                expertReviewSvc.saveOutExpert(vm.businessId, vm.minBusinessId, vm.businessType, selExpertIdArr.join(","), vm.expertReview.id, vm.isCommit, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        //更新专家评审费用
                        if(vm.businessType == "SIGN"){
                            workprogramSvc.updateWPExpertCost(vm.minBusinessId);
                        }
                        if (!vm.expertReview.id) {
                            vm.expertReview.id = data.idCode;
                        }
                        vm.reFleshSelEPInfo(data.reObj.selectedDtoList);

                        bsWin.success("操作成功！", function () {
                            window.parent.$("#outExpertDiv").data("kendoWindow").close();
                        });
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            }
        }

        //境外专家查询
        vm.queryOutExpert = function () {
            vm.outExpertOptions.dataSource._skip = 0;
            vm.outExpertOptions.dataSource.read();
        }

        //计算符合条件的专家
        vm.countMatchExperts = function (id) {
            if (vm.expertReview.id) {
                var postData = {};
                vm.expertReview.expertSelConditionDtoList.forEach(function (t, number) {
                    if (t.id == id) {
                        postData = t;
                    }
                });
                expertReviewSvc.countMatchExperts(postData, vm.minBusinessId, vm.expertReview.id, function (data) {
                    vm.matchEPMap[id] = data;
                    $("#expertCount" + id).html(data.length);
                });
            } else {
                bsWin.alert("请保存整体抽取方案再计算");
            }
        }

        //查看符合条件的专家信息
        vm.showMatchExperts = function (sortIndex) {
            vm.matchExpertList = [];
            vm.matchExpertList = vm.matchEPMap[sortIndex];
            $("#matchExpertDiv").kendoWindow({
                width: "80%",
                height: "600px",
                title: "统计专家信息列表",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        vm.checkIntegerValue = function (checkValue, idStr, idSort) {
            if (expertConditionSvc.isUnsignedInteger(checkValue)) {
                $("#errorsOfficialNum" + idSort).html("");
                $("#errorsAlternativeNum" + idSort).html("");
                return checkValue;
            } else {
                $("#errorsOfficialNum" + idSort).html("只能填写数字");
                $("#errorsAlternativeNum" + idSort).html("只能填写数字");
                return;
            }
        }

        //添加随机抽取条件
        vm.addCondition = function () {
            if (!vm.isSuperUser && (vm.expertReview.state == 9 || vm.expertReview.state == '9')) {
                bsWin.alert("当前项目已经进行整体专家方案的抽取，不能再修改方案！");
            } else {
                if (!vm.expertReview.expertSelConditionDtoList) {
                    vm.expertReview.expertSelConditionDtoList = [];
                }
                vm.condition = {};
                vm.condition.id = common.uuid();            //设置ID
                vm.condition.businessId = vm.minBusinessId; //设置业务ID
                vm.condition.selectType = "1";              //选择类型，这个一定不能少
                vm.expertReview.expertSelConditionDtoList.push(vm.condition);
            }
        }

        //删除专家抽取条件
        vm.removeCondition = function () {
            if (!vm.isSuperUser && (vm.expertReview.state == 9 || vm.expertReview.state == '9')) {
                bsWin.alert("当前项目已经进行整体专家方案的抽取，不能再修改方案！");
            } else {
                var isCheck = $("#conditionTable input[name='epConditionSort']:checked");
                if (isCheck.length > 0) {
                    bsWin.confirm({
                        title: "询问提示",
                        message: "删除数据的同时会删除该条件所抽取的专家，删除数据不可恢复，确定删除么？",
                        onOk: function () {
                            var ids = [];
                            for (var i = 0; i < isCheck.length; i++) {
                                $.each(vm.expertReview.expertSelConditionDtoList, function (c, con) {
                                    if (isCheck[i].value == con.id) {
                                        ids.push(con.id);
                                    }
                                })
                            }
                            if (ids.length > 0) {
                                if(vm.expertReview.id){
                                    expertConditionSvc.deleteSelConditions(vm.expertReview.id,ids.join(","), vm.isCommit, function (data) {
                                        if (data.flag || data.reCode == 'ok') {
                                            //更新专家评审费用
                                            if(vm.businessType == "SIGN"){
                                                workprogramSvc.updateWPExpertCost(vm.minBusinessId);
                                            }
                                            bsWin.success("操作成功！", function () {
                                                vm.init(vm.businessId, vm.minBusinessId);
                                            });
                                        } else {
                                            bsWin.error(data.reMsg);
                                        }
                                    });
                                }else{
                                    bsWin.success("操作成功！", function () {
                                        vm.init(vm.businessId, vm.minBusinessId);
                                    });
                                }
                            } else {
                                bsWin.success("操作成功！");
                            }
                        },
                    });
                } else {
                    bsWin.alert("请选择要删除的抽取条件！");
                }
            }
        }

        //检查是否为正整数
        function isUnsignedInteger(value) {
            if ((/^(\+|-)?\d+$/.test(value)) && value > 0) {
                return true;
            } else {
                return false;
            }
        }

        /******************************  以下是专家抽取方法 ***********************************/
        //封装专家抽取条件信息
        function buildCondition() {
            if (vm.expertReview.expertSelConditionDtoList.length > 0) {
                var validateResult = true;
                vm.expertReview.expertSelConditionDtoList.forEach(function (t, number) {
                    if (vm.expertReview.id) {
                        t.expertReviewDto = {};
                        t.expertReviewDto.id = vm.expertReview.id;   //抽取方案ID
                    }
                    if (!t.officialNum || !isUnsignedInteger(t.officialNum)) {
                        $("#errorsOfficialNum" + t.id).html("必填，且为数字");
                        validateResult = false;
                    }
                    if (!t.alternativeNum || !isUnsignedInteger(t.alternativeNum)) {
                        $("#errorsAlternativeNum" + t.id).html("必填，且为数字");
                        validateResult = false;
                    }
                    if (validateResult) {
                        $("#errorsOfficialNum" + t.id).html("");
                        $("#errorsAlternativeNum" + t.id).html("");
                    }
                });
                return validateResult;
            } else {
                return false;
            }
        }

        //保存专家抽取条件
        vm.saveCondition = function () {
            if (!vm.isSuperUser && (vm.expertReview.state == 9 || vm.expertReview.state == '9')) {
                bsWin.alert("当前项目已经进行整体专家方案的抽取，不能再修改方案！");
            } else {
                if (buildCondition()) {
                    expertConditionSvc.saveCondition(vm.businessId, vm.minBusinessId, vm.businessType, vm.expertReview.id, vm.expertReview.expertSelConditionDtoList, function (data) {
                        if (data.flag || data.reCode == 'ok') {
                            vm.expertReview.expertSelConditionDtoList = data.reObj;

                            //将综合分数转换为string类型，以防遍历时默认选中出问题
                            if(vm.expertReview.expertSelConditionDtoList) {
                                $.each(vm.expertReview.expertSelConditionDtoList , function(i , obj){
                                    if(obj.compositeScore){
                                        vm.expertReview.expertSelConditionDtoList[i].compositeScore = obj.compositeScore.toString();
                                    }
                                    if(obj.compositeScoreEnd){
                                        vm.expertReview.expertSelConditionDtoList[i].compositeScoreEnd = obj.compositeScoreEnd.toString();
                                    }
                                })
                            }

                            if (!vm.expertReview.id) {
                                vm.expertReview.id = vm.expertReview.expertSelConditionDtoList[0].expertReviewId;
                            }
                            bsWin.success("保存成功！");
                        } else {
                            bsWin.error(data.reMsg);
                        }
                    });
                } else {
                    bsWin.alert("专家抽取条件设置不完整！");
                }
            }
        }

        //（整体方案抽取）开始随机抽取
        vm.startAutoExpertWin = function () {
            if (!vm.expertReview.id) {
                bsWin.alert("请先进行整体专家抽取条件设置并保存！");
                return;
            }
            if (!isSuperUser && vm.isAutoDraf) {
                bsWin.alert("当前项目已经进行整体专家方案的抽取，不能再修改方案！");
                return;
            }
            if (buildCondition()) {
                expertConditionSvc.saveCondition(vm.businessId, vm.minBusinessId, vm.businessType, vm.expertReview.id, vm.expertReview.expertSelConditionDtoList, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        vm.expertReview.expertSelConditionDtoList = data.reObj;
                        if (!vm.expertReview.id) {
                            vm.expertReview.id = vm.expertReview.expertSelConditionDtoList[0].expertReviewId;
                        }
                        expertReviewSvc.queryAutoExpert(true,vm.expertReview.expertSelConditionDtoList, vm.minBusinessId, vm.expertReview.id, function (data) {
                            if (data.flag || data.reCode == 'ok') {
                                //更新专家评审费用
                                if(vm.businessType == "SIGN"){
                                    workprogramSvc.updateWPExpertCost(vm.minBusinessId);
                                }
                                vm.showLastDraf = false;
                                //刷新页面抽取的专家
                                vm.reFleshSelEPInfo(data.reObj.autoEPList);

                                //抽取结果数组
                                vm.autoSelectedEPList = [];
                                vm.autoSelectedEPList = data.reObj.autoEPList;
                                //刷新整体抽取信息
                                vm.expertReview.finishExtract = 1;
                                //弹框
                                vm.showAutoExpertWin();
                                //显示抽取效果
                                expertReviewSvc.validateAutoExpert(data.reObj.allEPList, vm);
                                //更新抽取状态
                                vm.isAutoDraf = true;
                            } else {
                                bsWin.error(data.reMsg);
                            }
                        });
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("专家抽取条件设置不完整！");
            }
        }

        //显示随机抽取框
        vm.showAutoExpertWin = function () {
            $("#aotuExpertDiv").kendoWindow({
                width: "90%",
                height: "700px",
                title: "专家抽取",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        //显示随机抽取结果
        vm.showAutoMatchResultWin = function () {
            $("#aotuMatchResultDiv").kendoWindow({
                width: "90%",
                height: "700px",
                title: "专家抽取结果",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        //再次抽取专家
        vm.repeatAutoExpert = function (id) {
            var condition = [];
            $.each(vm.expertReview.expertSelConditionDtoList, function (i, con) {
                if (con.id == id) {
                    condition.push(con);
                }
            })
            //先确认是否已经保存
            expertReviewSvc.checkCondition(id, function (data) {
                if (data && data.id) {
                    expertReviewSvc.queryAutoExpert(false,condition, vm.minBusinessId, vm.expertReview.id, function (data) {
                        if (data.flag || data.reCode == 'ok') {
                            //再次抽取，不用显示上次抽取的专家
                            vm.showLastDraf = false;
                            //更新专家评审费用
                            if(vm.businessType == "SIGN"){
                                workprogramSvc.updateWPExpertCost(vm.minBusinessId);
                            }
                            //刷新页面抽取的专家
                            vm.reFleshSelEPInfo(data.reObj.autoEPList);
                            //已进行整体专家方案抽取
                            vm.expertReview.finishExtract = 1;
                            //抽取结果数组
                            vm.autoSelectedEPList = [];
                            vm.autoSelectedEPList = data.reObj.autoEPList;
                            //刷新抽取次数
                            vm.updateSelectedIndex(id);
                            //弹框
                            vm.showAutoExpertWin();
                            //显示抽取效果
                            expertReviewSvc.validateAutoExpert(data.reObj.allEPList, vm);
                        } else {
                            bsWin.error(data.reMsg);
                        }
                    });
                } else {
                    bsWin.alert("请先保存，再进行抽取！");
                }
            })
        }

        //确认已抽取的专家
        vm.affirmAutoExpert = function () {
            var isCheck = $("#allAutoEPTable input[name='autoEPCheck']:checked");
            if (isCheck.length < 1) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "您还没选择专家，确定没有合适的专家么？",
                    onOk: function () {
                        $scope.$apply(function () {
                            //每个抽取条件的抽取次数加1
                            $.each(vm.expertReview.expertSelConditionDtoList, function (c, con) {
                                if (!con.selectIndex || con.selectIndex < 1) {
                                    con.selectIndex = 1;
                                } else {
                                    con.selectIndex = con.selectIndex + 1;
                                }
                                con.showDraftBt = true;
                            })
                        });
                        window.parent.$("#aotuExpertDiv").data("kendoWindow").close();
                    }
                });
            } else {
                var ids = [];
                for (var i = 0; i < isCheck.length; i++) {
                    ids.push(isCheck[i].value);
                }
                expertReviewSvc.affirmAutoExpert(vm.expertReview.id,vm.minBusinessId, vm.businessType, ids.join(","), '9', function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        //更新专家评审费用
                        if(vm.businessType == "SIGN"){
                            workprogramSvc.updateWPExpertCost(vm.minBusinessId);
                        }
                        vm.reFleshConfirmState(ids, "9");
                        vm.checkAutoOfficeExpert = false;
                        vm.checkAutoAntiExpert = false;
                        bsWin.success(data.reMsg);
                    } else {
                        bsWin.error(data.reMsg);
                    }
                })
            }
        }

        //确定实际参加会议的专家
        vm.affirmJoinExpert = function () {
            if(vm.expertReview && vm.expertReview.expertSelectedDtoList){
                vm.confirmEPList = vm.expertReview.expertSelectedDtoList;
                $("#confirmJoinExpert").kendoWindow({
                    width: "960px",
                    height: "600px",
                    title: "参加评审会专家确认",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            }

        }

        //拟聘请专家信息返回
        vm.expertBack = function () {
            if (vm.saveNewExpertFlag == '1') {
                bsWin.alert("拟聘请专家数据有改动，请保存后再返回！");
                return;
            }
            window.history.back();
            /*if (vm.isback) {
                $state.go('MaintainProjectEdit',{
                    signid: vm.businessId,
                    processInstanceId:vm.processInstanceId
                });
            } else {
                $("#outExpertDiv").remove();
                $("#selfExpertDiv").remove();
                $state.go('flowWPEdit', {
                    signid: vm.businessId,
                    taskid: vm.taskId
                });
            }*/

        }


        //未参加改为参加
        vm.updateToJoin = function () {
            var isCheck = $("#notJoinExpertTable input[name='notJoinExpert']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择要改为参加会议的专家");
            } else {
                var ids = [];
                for (var i = 0; i < isCheck.length; i++) {
                    ids.push(isCheck[i].value);
                }
                expertReviewSvc.updateJoinState(vm.expertReview.id, vm.minBusinessId, vm.businessType, ids.join(','), '9', vm.isCommit, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        //更新专家评审费用
                        if(vm.businessType == "SIGN"){
                            workprogramSvc.updateWPExpertCost(vm.minBusinessId);
                        }
                        //1、更改专家评分和评审费发放的专家
                        vm.reFleshJoinState(ids, '9');
                        bsWin.success("操作成功！");
                    } else {
                        bsWin.success(data.reMsg);
                    }
                });
            }
        }

        //参加改为未参加
        vm.updateToNotJoin = function () {
            var isCheck = $("#joinExpertTable input[name='joinExpert']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择未参加会议的专家");
            } else {
                var ids = [];
                for (var i = 0; i < isCheck.length; i++) {
                    ids.push(isCheck[i].value);
                }
                expertReviewSvc.updateJoinState(vm.expertReview.id, vm.minBusinessId, vm.businessType, ids.join(','), '0', vm.isCommit, function (data) {
                    if(data.flag || data.reCode == 'ok'){
                        //更新专家评审费用
                        if(vm.businessType == "SIGN"){
                            workprogramSvc.updateWPExpertCost(vm.minBusinessId);
                        }
                        vm.reFleshJoinState(ids,'0');
                        bsWin.success("操作成功！");
                    }else{
                        bsWin.success(data.reMsg);
                    }
                });
            }
        }

        //判断分值大小
        vm.checkScore = function (expertSelObj) {
            if (expertSelObj.compositeScoreEnd) {
                if (expertSelObj.compositeScore && (expertSelObj.compositeScore > expertSelObj.compositeScoreEnd)) {
                    $("#compositeScoreEnd_" + expertSelObj.id).html("分值设置错误");
                    expertSelObj.compositeScoreEnd = "";
                } else {
                    $("#compositeScoreEnd_" + expertSelObj.id).html("");
                }
            } else {
                $("#compositeScoreEnd_" + expertSelObj.id).html("");
            }
        }

        //超级管理员删除抽取的专家
        vm.deleteAutoSelectEP = function () {
            var isCheck = $("#autoDraftExpertTable input[name='checkSelectExpert']:checked");
            if (isCheck.length > 0) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "删除数据不可恢复，确定删除么？",
                    onOk: function () {
                        var ids = [];
                        for (var i = 0; i < isCheck.length; i++) {
                            ids.push(isCheck[i].value);
                        }
                        expertReviewSvc.delSelectedExpert(vm.expertReview.id, ids.join(","), vm.isCommit, function (data) {
                            if (data.flag || data.reCode == 'ok') {
                                //更新专家评审费用
                                if(vm.businessType == "SIGN"){
                                    workprogramSvc.updateWPExpertCost(vm.minBusinessId);
                                }
                                bsWin.alert("删除成功！", function () {
                                    vm.removeSelectEP = false;
                                    //重新查询专家
                                    vm.init(vm.businessId, vm.minBusinessId);
                                });
                            } else {
                                bsWin.alert(data.reMsg);
                            }
                        })
                    }
                });
            } else {
                bsWin.alert("请选择要删除的抽取专家！");
            }
        }

        //超级管理员选中之前抽取的专家
        vm.adminSelectEP = function () {
            var isCheck = $("#autoDraftExpertTable input[name='checkSelectExpert']:checked");
            if (isCheck.length > 0) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "确认对专家进行修改么？",
                    onOk: function () {
                        var ids = [];
                        for (var i = 0; i < isCheck.length; i++) {
                            ids.push(isCheck[i].value);
                        }
                        expertReviewSvc.affirmAutoExpert(vm.expertReview.id,vm.minBusinessId, vm.businessType, ids.join(","), '9', function (data) {
                            if (data.flag || data.reCode == 'ok') {
                                //更新专家评审费用
                                if(vm.businessType == "SIGN"){
                                    workprogramSvc.updateWPExpertCost(vm.minBusinessId);
                                }
                                vm.reFleshConfirmState(ids, "9");
                                bsWin.success(data.reMsg);
                            } else {
                                bsWin.error(data.reMsg);
                            }
                        })
                    }
                });
            } else {
                bsWin.alert("您还没选择任何专家！");
            }
        }

        // 交换数组元素
        var swapItems = function (arr, index1, index2) {
            arr[index1] = arr.splice(index2, 1, arr[index1])[0];
            return arr;
        };


        // 上移
        vm.upRecord = function (arr, $index) {
            vm.saveNewExpertFlag = '1';
            if ($index == 0) {
                vm.confirmEPListReplace = arr;
                return;
            }
            vm.confirmEPListReplace = swapItems(arr, $index, $index - 1);
        };

        // 下移
        vm.downRecord = function (arr, $index) {
            vm.saveNewExpertFlag = '1';
            if ($index == arr.length - 1) {
                vm.confirmEPListReplace = arr;
                return;
            }
            vm.confirmEPListReplace = swapItems(arr, $index, $index + 1);
        };

        /**
         * 保存新专家信息
         */
        vm.saveExpert = function () {
            var isdisp = true;//用来判断专家类型
            vm.saveNewExpertFlag = '0';
            if (vm.confirmEPListReplace.length > 0) {
                //查询是否有为空的
                angular.forEach(vm.confirmEPListReplace, function (each) {
                    if (each.expeRttype == "" || each.expeRttype == undefined) {
                        isdisp = false;
                        vm.saveNewExpertFlag = '1';
                    }

                });
            } else {
                $.each(vm.confirmEPList, function (j, obj2) {
                    if (obj2.isConfrim == '9' && obj2.isJoin == '9') {
                        if (obj2.expeRttype == "" || obj2.expeRttype == undefined) {
                            isdisp = false;
                            vm.saveNewExpertFlag = '1';
                        }
                        vm.confirmEPListReplace.push(obj2);
                    }
                });
            }

            if (isdisp) {
                expertReviewSvc.saveNewExpert(vm.confirmEPListReplace, function (data) {
                    bsWin.success("操作成功！");
                });
            } else {
                bsWin.alert("拟聘专家的专家类型不能为空");
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('expertReviewSvc', expertReview);

    expertReview.$inject = ['$http', '$interval' , 'bsWin'];

    function expertReview($http, $interval , bsWin) {
        var service = {
            initExpertGrid: initExpertGrid,	            //初始化待抽取专家列表
            saveSelfExpert: saveSelfExpert,		        //保存自选专家
            saveOutExpert: saveOutExpert,               //保存选择的境外专家
            countMatchExperts: countMatchExperts,       //计算符合条件的专家
            getReviewList: getReviewList,               //查询专家评分
            //以下为新方法
            initReview: initReview,                      //初始化评审方案信息
            delSelectedExpert: delSelectedExpert,        //删除已选专家信息
            deleteExpertNewInfo:deleteExpertNewInfo,     //删除已选新专家信息
            queryAutoExpert: queryAutoExpert,            //查询符合抽取条件的专家
            validateAutoExpert: validateAutoExpert,      //显示抽取专家效果(抽取方法已在后台封装)
            affirmAutoExpert: affirmAutoExpert,	         //确认已经抽取的专家
            updateJoinState: updateJoinState,            //更改是否参加状态
            findByBusinessId : findByBusinessId,         //根据业务ID查询评审方案信息

            saveMark: saveMark,                         // 保存专家评分
            savePayment: savePayment,                   // 保存专家费用
            countTaxes: countTaxes,                     // 计算应纳税额
            refleshBusinessEP : refleshBusinessEP,      //刷新业务的专家信息（已经确认和确定参加会议的专家）

            saveNewExpert:saveNewExpert,                //保存新的聘请专家信息,
            initNewExpertInfo:initNewExpertInfo,        // 初始化调整后的专家信息
            saveSplit : saveSplit ,                     // 保存评审费发放打印方案信息
            checkCondition : checkCondition,            // 确认抽取条件是否存在（主要用户系统管理员抽取专家设定）
        };
        return service;

        function checkCondition(id,callBack){
            var httpOptions = {
                method: 'get',
                url: rootPath + "/expertSelCondition/html/findById",
                params : {id : id}
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //S_saveSplit
        function saveSplit(vm){
            var httpOptions = {
                method: 'put',
                url: rootPath + "/expertReview/saveSplit",
                data : vm.expertSelect
            };
            var httpSuccess = function success(response) {
                bsWin.success("操作成功！", function(){
                    window.parent.$("#splitPayment").data("kendoWindow").close();
                });
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //E_saveSplit

        //S_initReview
        function initReview(businessId,minBusinessId,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertReview/initBybusinessId",
                params: {
                    businessId:businessId,
                    minBusinessId:minBusinessId
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_initReview

        function getMinColumns() {
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.expertID)
                    },
                    filterable: false,
                    width: 25,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
                    field: "name",
                    title: "姓名",
                    width: 100,
                    filterable: false,
                  template: function (item) {
                      return '<a  ng-click="vm.findExportDetail(\''+item.expertID+'\')">'+item.name+'</a>'
                  }
                },
                {
                    field: "degRee",
                    title: "学位",
                    width: 100,
                    filterable: false
                },

                {
                    field: "sex",
                    title: "性别",
                    width: 50,
                    filterable: true
                },
                {
                    field: "comPany",
                    title: "工作单位",
                    width: 100,
                    filterable: false
                },
                {
                    field: "degRee",
                    title: "职务",
                    width: 100,
                    filterable: false
                },{
                    field: "",
                    title: "专业大类",
                    width: 100,
                    template : function(item) {
                        if(item.expertTypeDtoList){
                            if(item.expertTypeDtoList.length > 1){
                                return "";
                            }else if(item.expertTypeDtoList.length == 1){

                                return item.expertTypeDtoList[0].maJorBig;
                            }
                        }else{
                            return "";
                        }
                    }
                },{
                    field: "",
                    title: "专业小类",
                    width: 100,
                    template : function(item) {
                        if(item.expertTypeDtoList){
                            if(item.expertTypeDtoList.length > 1){
                                return "";
                            }else if(item.expertTypeDtoList.length == 1){
                                return item.expertTypeDtoList[0].maJorSmall;
                            }
                        }else{
                            return "";
                        }
                    }
                },{
                    field: "",
                    title: "专家类型",
                    width: 100,
                    template : function(item) {
                        if(item.expertTypeDtoList){
                            if(item.expertTypeDtoList.length > 1){
                                return "";
                            }else if(item.expertTypeDtoList.length == 1){
                                return item.expertTypeDtoList[0].expertType;
                            }
                        }else{
                            return "";
                        }
                    }

                }
            ];
            return columns;
        }

        function initExpertGrid(vm) {
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }

            //S_专家自选
            var dataSource2 = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/expert/findByOData", $("#selfSelExpertForm")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            vm.selfExpertOptions = {
                dataSource: common.gridDataSource(dataSource2),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: getMinColumns(),
                dataBound: dataBound,
                resizable: true
            };//E_专家自选


            //S_市外专家
            var dataSource3 = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/expert/findExpertFieldByOData", $("#outSelExpertForm")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            vm.outExpertOptions = {
                dataSource: common.gridDataSource(dataSource3),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: getMinColumns(),
                dataBound: dataBound,
                resizable: true
            };//E_市外专家
        }

        //S_saveSelfExpert
        function saveSelfExpert(businessId,minBusinessId,businessType,expertId,expertReviewId,isCommit,callBack) {
            isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertReview/saveExpertReview",
                params: {
                    businessId:businessId,
                    minBusinessId : minBusinessId,
                    businessType : businessType,
                    reviewId: angular.isUndefined(expertReviewId)?"":expertReviewId,
                    expertIds: expertId,
                    selectType: "2"
                }
            }
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {
                    isCommit = false;
                }
            });
        }//E_saveSelfExpert

        //S_保存境外专家
        function saveOutExpert(businessId,minBusinessId,businessType,selExpertIds,expertReviewId,isCommit,callBack) {
            isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertReview/saveExpertReview",
                params: {
                    businessId:businessId,
                    minBusinessId:minBusinessId,
                    businessType : businessType,
                    reviewId: angular.isUndefined(expertReviewId)?"":expertReviewId,
                    expertIds: selExpertIds,
                    selectType: "3"
                }
            }
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {
                    isCommit = false;
                }
            });
        }//E_saveOutExpert

        //S_countMatchExperts
        function countMatchExperts(postData,minBusinessId,expertReviewId,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expert/countReviewExpert",
                data: postData,
                params: {
                    minBusinessId:minBusinessId,
                    reviewId: expertReviewId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_countMatchExperts

        //begin##getReviewList
        function getReviewList(vm) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/expertReview/html/getReviewList"
            }
            var httpSuccess = function success(response) {
                vm.reviewList = response.data;
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {
                    vm.isCommit = false;
                }
            });
        }//end##getReviewList

        //S_queryAutoExpert
        function queryAutoExpert(isAllExtract,conditionArr,minBusinessId,expertReviewId,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expert/autoExpertReview",
                headers: {
                    "contentType": "application/json;charset=utf-8"  //设置请求头信息
                },
                traditional: true,
                dataType: "json",
                data: angular.toJson(conditionArr),//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
                params: {
                    isAllExtract : isAllExtract,
                    minBusinessId: minBusinessId,
                    reviewId: expertReviewId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_queryAutoExpert


        //S_validateAutoExpert
        function validateAutoExpert(allEPList,vm) {
            //随机抽取
            var timeCount = 0,totalExpertCount = vm.autoSelectedEPList.length,index = 0;
            var interValVar = $interval(function () {
                if (totalExpertCount == 0) {
                    $interval.cancel(interValVar);
                    vm.showLastDraf = true;
                    vm.init(vm.businessId, vm.minBusinessId);
                }else{
                    var selscope = Math.floor(Math.random() * (allEPList.length));
                    vm.showAutoExpertName = allEPList[selscope].name;
                    timeCount++;
                    if (timeCount % 10 == 0) {
                        vm.autoSelectedEPList[index].show = true;
                        vm.autoSelectedEPList[index].official = true;       //正式专家
                        vm.autoSelectedEPList[index+1].show = true;
                        vm.autoSelectedEPList[index+1].official = false;    //备选专家
                        index = index + 2;
                        totalExpertCount = totalExpertCount-2;
                    }
                }
            }, 200);
        }//E_validateAutoExpert

        //S_updateJoinState
        function updateJoinState(reviewId,minBusinessId,businessType,ids, joinState,isCommit,callBack) {
            isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertReview/updateJoinState",
                params: {
                    reviewId : reviewId,
                    minBusinessId : minBusinessId,
                    businessType : businessType,
                    expertSelId: ids,
                    state: joinState
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {
                    isCommit = false;
                }
            });
        }//E_updateJoinState

        //S_affirmAutoExpert(确认抽取专家)
        function affirmAutoExpert(reviewId,minBusinessId,businessType,seletedIds,joinState,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertReview/affirmAutoExpert",
                params: {
                    reviewId : reviewId,
                    minBusinessId: minBusinessId,
                    businessType: businessType,
                    expertSelId:seletedIds,
                    state: joinState
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {
                }
            });
        }//E_affirmAutoExpert

        //S_delSelectedExpert(删除已选专家)
        function delSelectedExpert(expertReviewId, delIds,isCommit,callBack) {
            isCommit = true;
            var httpOptions = {
                method: 'delete',
                url: rootPath + "/expertSelected",
                params: {
                    reviewId: expertReviewId,
                    id: delIds,
                    deleteAll: false
                }
            }
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {
                    isCommit = false;
                }
            });
        }//E_delSelectedExpert

        //deleteExpertNewInfo(删除最新已选专家)
        function deleteExpertNewInfo(minBusinessId) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/expertReview/deleteExpertNewInfo",
                params: {
                    minBusinessId: minBusinessId,
                }
            }
            var httpSuccess = function success(response) {

            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {
                }
            });
        }//deleteExpertNewInfo


        //S_根据业务ID查询评审方案信息
        function findByBusinessId(businessId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertReview/initBybusinessId",
                params: {
                    businessId: businessId,
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {

                }
            });
        }

        // S_保存专家评分
        function saveMark(expertScore,callBack) {
            var httpOptions = {
                method: 'put',
                url: rootPath + "/expertSelected",
                data: expertScore,
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }// E_saveMark

        // S_保存专家评审费
        function savePayment(expertReview,isCommit,countTaxes,callBack) {
            isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertReview/saveExpertReviewCostSingle",
                data: expertReview,
                params:{isCountTaxes : countTaxes}
            }
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError:function () {
                    isCommit = false;
                }
            });
        }// E_savePayment

        // S_计算费用
        function countTaxes(reviewId,epIds,reviewDateStr,callBack) {
            var url = rootPath + "/expertReview/getExpertReviewCost?reviewId={0}&expertIds={1}&month={2}";
            //取得该评审方案评审专家在这个月的所有评审费用
            var httpOptions = {
                method: 'get',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                url: common.format(url, reviewId,epIds, reviewDateStr)
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }// E_countTaxes

        // S_validateNum
        function validateNum(expertReviews) {
            var isVilad = true;
            //计算每个评审的评审费是否正确
            if (expertReviews != undefined && expertReviews.length > 0) {
                expertReviews.forEach(function (v, i) {
                    if (v.payDate == undefined) {
                        v.errorMsg = "请选择发放日期";
                        isVilad = false;
                        return;
                    }
                    v.errorMsg = "";
                    //总评审费
                    var totalReviewCost = v.reviewCost == undefined ? 0 : v.reviewCost;
                    //总税额
                    var totalReviwTaxes = v.reviewTaxes == undefined ? 0 : v.reviewTaxes;
                    //总合计
                    var totalCost = v.totalCost == undefined ? 0 : v.totalCost;

                    //计算每个专家
                    if (v.expertSelectedDtoList != undefined && v.expertSelectedDtoList.length > 0) {

                        var tempTotalReviewCost = 0;
                        var tempTotalReviwTaxes = 0;
                        var tempTotalCost = 0;

                        v.expertSelectedDtoList.forEach(function (expertSelected, i) {
                            //评审费用
                            var reviewCost = expertSelected.reviewCost == undefined ? 0 : expertSelected.reviewCost;
                            //税额
                            var reviewTaxes = expertSelected.reviewTaxes == undefined ? 0 : expertSelected.reviewTaxes;
                            //合计
                            var totalCost = expertSelected.totalCost == undefined ? 0 : expertSelected.totalCost;
                            var tempCost = parseFloat(reviewCost) + parseFloat(reviewTaxes);
                            if (tempCost.toFixed(2) != parseFloat(totalCost).toFixed(2)) {
                                isVilad = false;
                                return;
                            }
                            tempTotalReviewCost = parseFloat(tempTotalReviewCost) + parseFloat(reviewCost);
                            tempTotalReviwTaxes = parseFloat(tempTotalReviwTaxes) + parseFloat(reviewTaxes);
                            tempTotalCost = parseFloat(tempTotalCost) + parseFloat(totalCost);
                        });

                        if (parseFloat(tempTotalReviewCost).toFixed(2) != parseFloat(totalReviewCost).toFixed(2)) {
                            isVilad = false;
                            return;
                        }
                        if (parseFloat(tempTotalReviwTaxes).toFixed(2) != parseFloat(totalReviwTaxes).toFixed(2)) {
                            isVilad = false;
                            return;
                        }
                        if (parseFloat(tempTotalCost).toFixed(2) != parseFloat(totalCost).toFixed(2)) {
                            isVilad = false;
                            return;
                        }
                    }
                });
            }

            return isVilad;
        }// E_validateNum

        //S_刷新业务的专家信息
        function refleshBusinessEP(businessId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertReview/refleshBusinessEP",
                params: {
                    businessId : businessId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError:function () {

                }
            });
        }//E_refleshBusinessEP

        // S_保存修改过的最新聘请专家信息
        function saveNewExpert(expertNewInfo,callBack) {
            var httpOptions = {
                method : 'post',
                url : rootPath + "/expertReview/expertNewInfo",
                headers:{
                    "contentType":"application/json;charset=utf-8"  //设置请求头信息
                },
                traditional: true,
                dataType : "json",
                data : angular.toJson(expertNewInfo)//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess,
            })

        }
        // end#saveExpert

        function initNewExpertInfo(businessId,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertReview/getExpertInfo",
                params: {
                    businessId : businessId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError:function () {

                }
            });
        }
    }
})();
(function () {
    'use strict';

    angular.module('app').factory('expertConditionSvc', expertCondition);

    expertCondition.$inject = ['$http'];

    function expertCondition($http) {
        var service = {
        	saveCondition:saveCondition,	    //保存抽取条件
            deleteSelConditions:deleteSelConditions,    //删除抽取条件
            isUnsignedInteger : isUnsignedInteger,  //验证是否是正整数
        };
        return service;

        //S_saveCondition
		function saveCondition(businessId,minBusinessId,businessType,reviewId,conditions,callBack) {
            var httpOptions = {
                method : 'post',
                url : rootPath + "/expertSelCondition/saveConditionList",
                headers:{
                    "contentType":"application/json;charset=utf-8"  //设置请求头信息
                },
                traditional: true,
                dataType : "json",
                data : angular.toJson(conditions),//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
                params:{
                    businessId:businessId,
                    minBusinessId:minBusinessId,
                    reviewId:reviewId,
                    businessType : businessType,
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }//E_saveCondition

        //检查是否为正整数
        function isUnsignedInteger(value){
            if((/^(\+|-)?\d+$/.test(value)) && value>0 ){
                return true;
            }else{
                return false;
            }
        }

        //S_deleteSelConditions
        function deleteSelConditions(reviewId,delIds,isCommit,callBack){
            isCommit = true;
            var httpOptions = {
                method : 'delete',
                url : rootPath + "/expertSelCondition",
                params:{
                    ids : delIds,
                    reviewId : reviewId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess,
                onError: function(response){isCommit = false;}
            });
        }//E_deleteSelConditions
    }
})();
(function(){
    'use strict';
    angular.module('app').controller('documentListCtrl',documentList);

    documentList.$inject=['$scope','$state','$location', 'bsWin' , '$interval' , 'fileLibrarySvc' , 'sysfileSvc'];

    function documentList($scope,$state,$location, bsWin , $interval , fileLibrarySvc , sysfileSvc){
        var vm = this;

        vm.fileLibrary = {};
        activate();
        function activate() {

            fileLibrarySvc.getFiles(function (data) {
                vm.data = data;
                /*vm.ids = [];
                vm.key = [];
                vm.value = [];
                if(vm.data){
                    var i = 0;
                    for(var key in vm.data){
                        vm.ids.push("div_" + i);
                        vm.key.push(key);
                        vm.value.push(vm.data[key]);
                        i++;
                    }

                }*/
            });
        }

        //附件下载
        vm.commonDownloadSysFile = function (sysFileId) {
            sysfileSvc.downloadFile(sysFileId);
        }

        /**
         * 点击左边导航栏，右边定位指定内容到顶部
         * @param key
         */
        vm.animate = function(index){
            $("html, body").animate({
                scrollTop: $("#div_" + index ).offset().top }, {duration: 500,easing: "swing"});
            return false;
        }


    }
})();
(function () {
    'use strict';
    angular.module('app').factory('fileLibrarySvc', fileLibrary);

    fileLibrary.$inject = ['$http', '$state', '$location', 'sysfileSvc'];

    function fileLibrary($http, $state, $location, sysfileSvc) {
        var service = {
            saveRootFolder: saveRootFolder,//新建根目录文件夹
            saveChildFolder: saveChildFolder,//新建子目录
            initFileFolder: initFileFolder,//初始化文件夹
            initFileList: initFileList,//初始化文件夹下所有文件
            saveFile: saveFile,//保存文件
            findFileById: findFileById,//通过id查询文件
            updateFile: updateFile,//更新文件
            deleteFile: deleteFile,//删除文件
            deleteRootDirectory: deleteRootDirectory,//删除根目录
            folderById: folderById, //通过id查询文件夹
            queryUser: queryUser,//模糊查询
            getFileUrlById: getFileUrlById,//获取路径
            getFiles : getFiles , //获取所有文件，并分等级
            // createPolicy: createPolicy //创建政策指标库
        }

        return service;

        //begin getFiles
        function getFiles(callBack){
            var httpOptions = {
                method: "post",
                url: rootPath + "/fileLibrary/getFiles",
            }
            var httpSuccess = function success(response) {
                if(callBack != undefined && typeof callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //end getFiles

        //begin getFileUrlById
        function getFileUrlById(vm, fileId) {
            var httpOptions = {
                method: "get",
                url: rootPath + "/fileLibrary/getFileUrlById",
                params: {fileId: fileId}
            }
            var httpSuccess = function success(response) {
                vm.fileUrl = response.data.fileUrl;
                vm.title = response.data.fileUrl;
                vm.initFileUpload();
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        //end getFileUrlById
        //查询
        function queryUser(vm) {
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        //begin deleteRootDirectory
        function deleteRootDirectory(treeId , callBack) {
            var httpOptions = {
                method: "delete",
                url: rootPath + "/fileLibrary/deleteRootDirectory",
                params: {parentFileId: treeId}
            }

            var httpSuccess = function success(response) {
                if(callBack != undefined && typeof callBack == 'function'){
                    callBack(response.data);

                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //end deleteRootDirectory


        //begin deleteFile
        function deleteFile(fileId , callBack) {
            var httpOptions = {
                method: "delete",
                url: rootPath + "/fileLibrary/deleteFile",
                params: {fileId: fileId}
            }

            var httpSuccess = function success(response) {
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack();
                }
                // vm.gridOptions.dataSource.read();
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //end deleteFile

        //begin updateFile
        function updateFile(vm , callBack) {
            var httpOptions = {
                method: "put",
                url: rootPath + "/fileLibrary/updateFile",
                data: vm.fileLibrary
            }

            var httpSuccess = function success(response) {
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //end updateFile

        //begin fodlerById
        function folderById(vm, fileId) {
            var httpOptions = {
                method: "get",
                url: rootPath + "/fileLibrary/findFileById",
                params: {fileId: fileId}
            }
            var httpSuccess = function success(response) {
                vm.fileLibrary = response.data;
                vm.addFolderWindow();
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        //end fodlerById

        //begin findFileById
        function findFileById( fileId , callBack) {
            var httpOptions = {
                method: "get",
                url: rootPath + "/fileLibrary/findFileById",
                params: {fileId: fileId}
            }
            var httpSuccess = function success(response) {
                if( callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }

            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        //end findFileById

        //begin saveFile
        function saveFile(vm , callBack) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                var httpOptions = {
                    method: 'post',
                    url: rootPath + "/fileLibrary/saveFile",
                    data: vm.fileLibrary
                }
                var httpSuccess = function success(response) {
                    if(callBack != undefined && typeof  callBack=="function"){
                        callBack(response.data);
                    }
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
            }
        }

        //end saveFile

        //begin initFolder
        function initFileFolder(vm,$scope,callBack) {
            var httpOptions = {
                method: "get",
                url: rootPath + "/fileLibrary/initFileFolder",
                params : {fileType : vm.fileLibrary.fileType}
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }//end initFolder


        //begin saveRootFolder
        function saveRootFolder(fileLibrary, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/fileLibrary/addFileFolder",
                data: fileLibrary
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }//end saveRootFolder

        //begin saveChildFolder
        function saveChildFolder(fileLibrary, callBack) {
            if (fileLibrary.fileName != undefined) {
                var httpOptions = {
                    method: 'post',
                    url: rootPath + "/fileLibrary/addFileFolder",
                    data: fileLibrary
                };
                var httpSuccess = function success(response) {
                    if (callBack != undefined && typeof callBack == 'function') {
                        callBack(response.data);
                    }
                };
                common.http({
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
            } else {
                common.alert({
                    vm: vm,
                    msg: "文件名不能为空",
                    fn: function () {
                        $('.alertDialog').modal('hide');
                        $('.modal-backdrop').remove();
                    }
                })
            }
        }//end saveChildFolder

        //begin initFileList
        function initFileList(fileId,fileType, callBack) {
            var httpOptions = {
                method: "post",
                url: rootPath + "/fileLibrary/initFileList",
                params : {fileId : fileId , fileType : fileType}
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//end initFileList

    }

})();
(function(){
    'use strict';
    angular.module('app').controller('policyCtrl',policy);

    policy.$inject=['$scope','$state','$location','fileLibrarySvc' , 'bsWin' , '$interval' , 'sysfileSvc' , 'policySvc'];

    function policy($scope,$state,$location,fileLibrarySvc , bsWin , $interval , sysfileSvc , policySvc){
        var vm = this;
        // vm.title="";
        vm.parentId = $state.params.parentId;
        vm.fileId = $state.params.fileId;
        vm.fileLibrary={};
        vm.fileLibrary.fileType = "POLICY";//初始化文件库类型 - 政策标准文件库
        vm.fileType = "POLICY";
        vm.showPolicyList = true;
        vm.search;

        //初始化附件上传控件
        vm.initFileUpload = function(){
            if(!vm.fileId){
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.fileId",function (newValue , oldValue){
                    if(newValue && newValue != oldValue && !vm.initUploadOptionSuccess){
                        vm.initFileUpload();
                    }
                });
            }
            //创建附件对象
            vm.sysFile = {
                businessId : vm.fileId,
                mainId : vm.fileId,
                mainType : sysfileSvc.mainTypeValue().POLICYLIBRARY,
                sysBusiType :vm.fileUrl == undefined ? "" : vm.fileUrl.substring(vm.fileUrl.lastIndexOf(sysfileSvc.mainTypeValue().POLICYLIBRARY),vm.fileUrl.lastIndexOf(vm.fileName)),
                showBusiType : false,
            };
            sysfileSvc.initUploadOptions({
                inputId : "sysfileinput",
                vm :vm ,
                uploadSuccess : function(){
                    sysfileSvc.findByBusinessId(vm.fileId,function(data){
                        vm.sysFilelists = data;
                        fileLibrarySvc.initFileList(vm.parentFileId , vm.fileType , function(data){
                            vm.policyList = data.reObj;
                        })
                    });
                }
            });
        }

        /**
         * 初始化文件列表
         * @param fileId
         */
        vm.initFileList = function(){
            vm.showAddPolicyLibrary = false;
            vm.showPolicyList = true;
            vm.showPolicyDetail = false;
            if(!vm.exist){
                vm.page = lgx.page.init({
                    id: "demo5", get: function (o) {
                        var skip ;
                        vm.price ={};

                        //oracle的分页不一样。
                        if (o.skip != 0) {
                            skip = o.skip + 1
                        } else {
                            skip = o.skip
                        }

                        vm.price.skip = skip;//页码
                        vm.price.size = o.size + o.skip;//页数
                        policySvc.findFileByIdGrid(vm, function (data) {
                            vm.fileList = [];
                            if(vm.fileList){
                                vm.fileList = data.value;
                                vm.page.callback(data.count);//请求回调时传入总记录数

                            }

                        });
                    }
                });
                vm.exist = true;
            }else{
                vm.page.selPage(1);
            }
        }

        /**
         * 初始化树
         */
        vm.initZtree = function(){
            policySvc.initFileFolder($scope,function(data){
                var zTreeObj;
                var setting = {
                    check: {
                        enable: true,
                        chkStyle: "radio",
                        chkboxType: { "Y": "", "N": "" }
                    },
                    edit:{
                        enable :true,
                        // editNameSelectAll: true,//设置编辑时
                        showRenameBtn : false, //不显示编辑按钮
                        showRemoveBtn : false,//显示删除按钮
                        showAddBtn : false ,
                        removeTitle : "删除节点",//设置删除按钮标题
                    },
                    view: {
                        // addHoverDom: addHoverDom, // 添加节点方法
                        removeHoverDom: removeHoverDom, // 删除节点方法
                        dblClickExpand: true , //双击节点 自动展开子节点

                    },
                    callback:{
                        onClick : zTreeOnClick,
                        beforeRemove : zTreeOnRemove,
                    },
                    data: {
                        simpleData: {
                            enable: true,
                            idKey: "id",
                            pIdKey: "pId"
                        },
                        showTitle:true, //是否显示节点title信息提示 默认为true
                        key: {
                            title:"standardName" //设置title提示信息对应的属性名称 也就是节点相关的某个属性
                        }
                    }
                };
                function zTreeOnClick(event, treeId, treeNode) {
                    vm.parentFileId = treeNode.id;
                    vm.showAddFile = true;
                    vm.standardId = vm.parentFileId;
                    vm.initFileList();
                };

                //删除节点
                function zTreeOnRemove(event, treeId, treeNode ){
                    var zTree = $.fn.zTree.getZTreeObj("zTree");
                    var treeNode = zTree.getSelectedNodes();
                    vm.onRemove(treeNode.id);
                }

                //添加节点
                function addHoverDom(treeId,treeNode){
                    //判断，如果是文件夹，才有新增按钮,只能到四级
                    if(treeNode.stardandType == 'FOLDER'  && treeNode.level < 2 ) {
                        var sObj = $("#" + treeNode.tId + "_span");
                        if (treeNode.editNameFlag || $("#addBtn_" + treeNode.tId).length > 0) return;
                        var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
                            + "' title='添加子节点' onfocus='this.blur();'></span>";
                        sObj.after(addStr);
                        var btn = $("#addBtn_" + treeNode.tId);
                        if (btn) btn.bind("click", function () {
                            var zTree = $.fn.zTree.getZTreeObj("zTree");
                            vm.addFolderWindow(treeNode.id);
                        });
                    }else{
                        return ;
                    }
                }

                //删除节点
                function removeHoverDom(treeId,treeNode){
                    $("#addBtn_"+treeNode.tId).unbind().remove();
                }
                vm.zNodes = $linq(data).select(
                    function(x){
                        var pId = null;
                        var returnObj = x;
                        returnObj = x;
                        returnObj.id = x.id;
                        returnObj.name = x.standardName;
                        returnObj.pId = x.standardPId;

                        if(x.stardandType == 'FOLDER'){
                            returnObj.icon = rootPath+"/contents/libs/zTree/css/zTreeStyle/img/diy/7.png";
                        }
                        return returnObj;
                    }).toArray();

                vm.initFileTreeSucess = true;
                //监听值改变
                $scope.$watch("vm.initFileTreeSucess", function (newValue, oldValue) {
                    if (newValue == true) {
                        var timer = $interval(function () {
                            var s = document.getElementById("zTree");
                            for(var i=0;i<vm.zNodes.length;i++){//控制文件名，多的用点来显示
                                if(vm.zNodes[i].name.length>7){
                                    var ss=vm.zNodes[i].name.substring(0,7);
                                    vm.zNodes[i].name=ss+"...";
                                }
                            }
                            //当有ztree的id时开始赋值
                            if (s != null) {
                                zTreeObj = $.fn.zTree.init($("#zTree"), setting, vm.zNodes);
                                $interval.cancel(timer);//停止定时器
                            }
                        }, 500);   //间隔0.5秒定时执行
                    }
                });
            });
        }


        activate();
        function activate(){
            vm.initFileList();
            vm.initZtree();
            vm.initFileUpload();
        }

        /**
         * 政策指标库文件夹添加操作
         * */
        vm.addFolderWindow=function(fileId){
            vm.fileLibrary = {};
            //初设化是文件夹类型
            vm.fileLibrary.stardandType = "FOLDER";
            if(fileId != undefined){
                vm.fileLibrary.standardPId = fileId;
            }
            vm.showAddPolicyLibrary = true;
            vm.showPolicyList = false;
            vm.showPolicyDetail = false;
        }

        /**
         * 保存新建文件夹 - 作废
         */
        vm.saveRootFolder = function(){
            if (vm.fileLibrary.fileName != undefined) {
                fileLibrarySvc.saveRootFolder(vm.fileLibrary,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.alert("保存成功！",function(){
                            window.parent.$("#addRootFolder").data("kendoWindow").close();
                            $state.go('policyLibrary',{},{reload:true});
                        });
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("文件名不能为空!");
            }
        }

        /**
         * 删除政策指标库
         */
        vm.deleteFolder = function(){
            var zTree = $.fn.zTree.getZTreeObj("zTree");
            var nodes = zTree.getCheckedNodes();
            if(nodes != undefined && nodes.length >0){
                var idStr = nodes[0].id;
                bsWin.confirm("所有子文件将被删除，确认删除？" , function(){
                    policySvc.deletePolicy(idStr , function(data){
                        bsWin.alert("删除成功!");
                        activate();
                    });
                });
            }else{
                bsWin.alert("请选择删除数据!");
            }
        }

        /**
         *新增（更新）政策指标库文件操作
         */
        vm.fileEdit = function(fileId ){
            vm.isUpdate = false;
            vm.fileId = fileId;
            vm.fileLibrary = {};
            vm.sysFilelists = {};
            vm.fileLibrary.stardandType = "FILE"; //初始化政策指标库类型
            vm.fileLibrary.standardPId  = vm.parentFileId; //初始化父Id
            vm.showAddPolicyLibrary = true;
            vm.showPolicyList = false;
            vm.showPolicyDetail = false;
            if(vm.fileId){
                vm.isUpdate=true;
                policySvc.findFileById(vm.fileId , function(data){
                    vm.fileLibrary = data;
                    vm.fileUrl = vm.fileLibrary.fileUrl;
                    vm.fileName = vm.fileLibrary.fileName;
                    vm.initFileUpload();
                });
                sysfileSvc.findByBusinessId(vm.fileId,function(data){
                    vm.sysFilelists = data;
                });
            }
        }

        /**
         * 保存新建文件 -作废
         */
        vm.createFile=function(){
            vm.fileLibrary.parentFileId = vm.parentFileId;
            common.initJqValidation();
            if (vm.fileLibrary.fileName) {

                fileLibrarySvc.saveFile(vm, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        bsWin.alert("保存成功！", function () {
                            /* window.parent.$("#qualityEdit").data("kendoWindow").close();*/
                            vm.isUpdate=true;
                            activate();
                            vm.policyList.push(data.reObj);
                            vm.fileId = data.reObj.fileId;
                            fileLibrarySvc.getFileUrlById(vm, vm.fileId);
                            vm.initFileUpload();

                        });
                    } else {
                        bsWin.error(data.reMsg);
                    }
                    // vm.fileLibrary = {};
                });
            }
        }

        /**
         * 更新文件 -作废
         */
        vm.updateFile = function (){
            fileLibrarySvc.updateFile(vm , function(data){
                if(data.flag || data.reCode == 'ok'){
                    bsWin.alert("更新成功！", function(){
                        vm.initFileUpload();
                        window.parent.$("#qualityEdit").data("kendoWindow").close();
                        activate();
                    });
                }else{
                    bsWin.error(data.reMsg);
                }
            });
        }

        /**
         * 删除文件 - 作废
         * @param fileId
         */
        vm.del = function(fileId){
            bsWin.confirm("删除的数据将无法恢复，确认删除？" , function(){

                //手动删除树节点
                var tree = $.fn.zTree.getZTreeObj("zTree");
                var nodes = tree.getNodeByParam("id",fileId,null) ;
                tree.removeNode(nodes);

                fileLibrarySvc.deleteFile(fileId,function(){
                    vm.policyList.forEach(function(quality , number){
                        if(quality.fileId == fileId){
                            vm.policyList.splice(number , 1);
                        }
                    });
                });
            })
        }

        /**
         * 附件下载
         */

        vm.commonDownloadSysFile = function(sysFileId){
            sysfileSvc.downloadFile(sysFileId);
        }

        /**
         * 重写 删除附件
         * @param fileId
         */
        vm.delFile = function(fileId){
            sysfileSvc.delSysFile(fileId, function () {
                $.each(vm.sysFilelists, function (i, sf) {
                    if (sf.sysFileId == fileId) {
                        vm.sysFilelists.splice(i, 1);
                    }
                });
                fileLibrarySvc.initFileList(vm.parentFileId , vm.fileType , function(data){
                    vm.policyList = data.reObj;
                })
            });
        }

        /**
         * 返回列表页
         */
        vm.goBack = function(){
                vm.showAddPolicyLibrary = false;
                vm.showPolicyList = true;
                vm.showPolicyDetail = false;
            activate();
        }

        /**
         * 保存政策指标库
         */
        vm.create = function(){
            common.initJqValidation($('#policyform'));
            var isValid = $('#policyform').valid();
            if (isValid) {
                policySvc.createPolicy(vm.fileLibrary, function (data) {
                    if (data.flag || data.reCode == 'ok') {

                        //1、先记录当前文件类型,以及父Id 2、清空对象 3、初始化文件类型,以及父Id
                        // vm.stardandType = vm.fileLibrary.stardandType;
                        // vm.standardPId = vm.fileLibrary.standardPId;
                        // vm.fileLibrary = {};
                        // vm.fileLibrary.stardandType = vm.stardandType;
                        // vm.fileLibrary.standardPId = vm.standardPId;
                        bsWin.alert("操作成功！" , function(){
                            vm.fileId = data.reObj.id;
                            vm.fileLibrary.id =  data.reObj.id;
                            vm.update = true;
                            vm.initFileUpload();
                            vm.initZtree();
                        });
                        // activate();
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("页面未填报完整或者为正确，请检查！");
            }
        }

        /**
         * 查看详情
         * @param fileId
         */
        vm.policyLibraryEdit = function(fileId){
            vm.showPolicyList = false;
            vm.showPolicyDetail = true;
            vm.fileId = fileId;
            policySvc.findByPolicyId(vm , function(data){
                vm.policy = data;
            });

        }


        /**
         * 更新政策指标库，跳转页面
         */
        vm.updatePolicy = function(){
            var zTree = $.fn.zTree.getZTreeObj("zTree");
            var nodes = zTree.getCheckedNodes();
            if(nodes != undefined && nodes.length >0){
                var idStr = nodes[0].id;
                vm.fileId = idStr;
                vm.update = true;
                vm.showAddPolicyLibrary = true;
                vm.showPolicyList = false;
                vm.showPolicyDetail = false;
                policySvc.findByPolicyId(vm , function(data){

                    vm.fileLibrary = data;
                });

            }else{
                bsWin.alert("请选择要更新的数据!");
            }
        }

        /**
         * 保存，更新政策指标库
         */
        vm.updatePolicySave = function(){
            common.initJqValidation($('#policyform'));
            var isValid = $('#policyform').valid();
            if (isValid) {
                policySvc.createPolicy(vm.fileLibrary, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        bsWin.alert("操作成功！" , function(){
                            vm.fileLibrary.id =  data.reObj.id;
                            vm.update = true;
                            // activate();
                            vm.initZtree();
                        });

                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("页面未填报完整或者为正确，请检查！");
            }
        }

        /**
         * 查询
         */
        vm.queryPolicy = function(){
            vm.initFileList();
        }

        /**
         * 更新指标库文件，跳转页面
         * @param policyId
         */
        vm.updatePolicyFile = function(policyId){
            vm.showAddPolicyLibrary = true;
            vm.showPolicyList = false;
            vm.showPolicyDetail = false;
            vm.fileId = policyId;
            policySvc.findByPolicyId(vm , function(data){

                vm.fileLibrary = data;
            });
        }

        /**
         * 删除指标库文件
         * @param policyId
         */
        vm.deletePolicyFile = function(policyId){
            bsWin.confirm("删除的数据无法恢复，确定删除？" , function(){
                policySvc.deletePolicy(policyId , function(data){
                    bsWin.alert("删除成功!");
                    activate();
                });
            })

        }

    }
})();
(function(){
    'ust strict';
    angular.module('app').factory('policySvc' , policy);
    policy.$inject = ['$http'];
    function policy($http){
        var service = {
            initFileFolder : initFileFolder , //初始化政策指标库所有的文件夹
            createPolicy : createPolicy, //创建政策指标库
            findFileByIdGrid : findFileByIdGrid , // 通过id查询文件
            deletePolicy : deletePolicy , //删除政策指标库
            findByPolicyId : findByPolicyId , //通过ID获取政策指标库
        }

        return service;

        //begin initFileFolder
        function initFileFolder($scope,callBack){

            var httpOptions = {
                method: 'post',
                url: rootPath + "/policy/initFileFolder",
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){}
            });
        }
        //end initFileFolder


        //S_创建政策指标库
        function createPolicy(topicModel,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/policy",
                data : topicModel
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){}
            });
        }
        //end createPolicy

        //begin findFileByIdGrid
        function findFileByIdGrid( vm , callBack) {
            $http({
                method: 'post',
                url: rootPath + "/policy/findFileById",
                params: {
                    fileId: vm.standardId,
                    skip: vm.price.skip,
                    size: vm.price.size,
                    search : JSON.stringify(vm.search),
                },
            }).then(function (r) {
                if (typeof callBack == 'function') {
                    callBack(r.data);
                }
            });
        }
        //end findFileByIdGrid

        //begin deletePolicy
        function deletePolicy(idStr , callBack){
            var httpOptions = {
                method: 'delete',
                url: rootPath + "/policy/deletePolicy",
                params : {idStr : idStr}
            };
            console.log(idStr);
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){}
            });
        }
        //end deletePolicy

        //beign findByPolicyId
        function findByPolicyId( vm , callBack){
            var httpOptions = {
                method : "post",
                url : rootPath + "/policy/findByPolicyId",
                params : {policyId : vm.fileId}
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack  == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            })
        }
        //end findByPolicyId

    }
})();
(function(){
    'use strict';
    angular.module('app').controller('policyAddCtrl',policyAdd);
    policyAdd.$inject=['$state','fileLibrarySvc','$scope' , 'bsWin'];
    function policyAdd($state,fileLibrarySvc,$scope , bsWin){
        var vm = this;
        activate();
        function activate(){

        }

        //保存
        vm.create = function(){
            common.initJqValidation($('#policyform'));
            var isValid = $('#policyform').valid();
            if (isValid) {
                fileLibrarySvc.createPolicy(vm.model, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        vm.model = data.reObj;
                        bsWin.alert("操作成功！");
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("页面未填报完整或者为正确，请检查！");
            }
        }

    }

})();
(function(){
    'use strict';
    angular.module('app').controller('policyEditCtrl',policyEdit);
    policyEdit.$inject=['$state','fileLibrarySvc','sysfileSvc','$scope' , 'bsWin'];
    function policyEdit($state,fileLibrarySvc,sysfileSvc,$scope , bsWin){
        var vm = this;
        vm.parentId = $state.params.parentId;
        vm.fileLibrary={};
        vm.fileLibrary.parentFileId = vm.parentId;
        vm.fileLibrary.fileType = "POLICY";//初始化文件库类型 - 政策标准文件库
        vm.fileId = $state.params.fileId;
        vm.fileUrl = "";
        vm.fileName="";

        vm.businessFlag ={
            isInitFileOption : false,   //是否已经初始化附件上传控件
        }

        //初始化附件上传控件
        vm.initFileUpload = function(){
            if(!vm.fileId){
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.fileId",function (newValue , oldValue){
                    if(newValue && newValue != oldValue && !vm.initUploadOptionSuccess){
                        vm.initFileUpload();
                    }
                });
            }
            //创建附件对象
            vm.sysFile = {
                businessId : vm.fileId,
                mainId : '',
                mainType : sysfileSvc.mainTypeValue().POLICYLIBRARY,
                sysBusiType :vm.fileUrl.substring(vm.fileUrl.lastIndexOf(sysfileSvc.mainTypeValue().POLICYLIBRARY),vm.fileUrl.lastIndexOf(vm.fileName))
            };
            sysfileSvc.initUploadOptions({
                inputId : "sysfileinput",
                vm :vm ,
                uploadSuccess : function(){
                    sysfileSvc.findByBusinessId(vm.fileId,function(data){
                        vm.sysFilelists = data;
                    });
                }
            });
        }


        activate();
        function activate(){
            if(vm.fileId){
                vm.isUpdate=true;
                fileLibrarySvc.findFileById(vm , vm.fileId);
                sysfileSvc.findByBusinessId(vm.fileId,function(data){
                    vm.sysFilelists = data;
                });
            }

            if(vm.parentId){
                fileLibrarySvc.getFileUrlById(vm,vm.parentId);
                fileLibrarySvc.initFileList(vm);
            }
        }



        /**
         * 保存新建文件
         */
        vm.createFile=function(){
            fileLibrarySvc.saveFile(vm , function(data){
                if(data.flag || data.reCode == 'ok'){
                    bsWin.alert("保存成功！",function(){
                        vm.fileId = data.reObj.fileId;
                        vm.initFileUpload();
                    });
                }else{
                    bsWin.error(data.reMsg);
                }
            });
        }

        /**
         * 更新文件
         */
        vm.updateFile = function (){
            fileLibrarySvc.updateFile(vm , function(data){
                if(data.flag || data.reCode == 'ok'){
                    bsWin.alert("更新成功！");
                    vm.initFileUpload();
                }else{
                    bsWin.error(data.reMsg);
                }
            });
        }
    }

})();
(function(){
    'use strict';
    angular.module('app').controller('policyListCtrl',policyList);
    policyList.$inject=['$state','fileLibrarySvc', 'bsWin'];
    function policyList($state,fileLibrarySvc, bsWin){
        var vm = this;
        vm.parentId = $state.params.parentId;
        vm.fileLibrary={};
        vm.fileLibrary.parentFileId = vm.parentId;
        vm.fileLibrary.fileType = "POLICY";//初始化文件库类型 - 政策标准文件库
        vm.formId = "policyForm";

        activate();
        function activate(){
            fileLibrarySvc.initFileList(vm);
        }

        /**
         * 新建文件跳转页
         */
        vm.addFile = function(){
            $state.go('policyLibrary.policyEdit',{parentId : vm.parentId,fileId : ''});
        }

        /**
         * 跳转更新文件页面
         * @param fileId
         */
        vm.update  = function(fileId){
            $state.go('policyLibrary.policyEdit',{parentId :vm.parentId ,fileId : fileId});
        }

        /**
         * 删除文件
         * @param fileId
         */
        vm.del = function(fileId){
            bsWin.confirm("删除的数据将无法恢复，确认删除？", function(){
                fileLibrarySvc.deleteFile(vm,fileId);
            })
        }


        /**
         *  模糊查询
         */
        vm.queryPolicy=function(){
            fileLibrarySvc.queryUser(vm);
        };

        /**
         * 重置按钮
         */
        vm.resetPolicy = function(){
            var tab = $("#policyForm").find('input');
            $.each(tab, function (i, obj) {
                obj.value = "";
            });
        }

    }

})();
(function(){
    'use strict';
    angular.module('app').controller('qualityCtrl', quality);

    quality.$inject=['bsWin','$state','$location','fileLibrarySvc' ,'$scope' , '$interval' , 'sysfileSvc'];

    function quality(bsWin,$state,$location,fileLibrarySvc , $scope , $interval , sysfileSvc){
        var vm = this;
        // vm.title="";
        vm.parentId = $state.params.parentId;
        vm.fileId = $state.params.fileId;
        vm.fileLibrary={};
        vm.fileLibrary.fileType = "QUALITY";//初始化文件库类型 - 质量管理文件库
        vm.fileType = "QUALITY";
        vm.qualityList = [];

        //初始化附件上传控件
        vm.initFileUpload = function(){
            if(!vm.fileId){
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.fileId",function (newValue , oldValue){
                    if(newValue && newValue != oldValue && !vm.initUploadOptionSuccess){
                        vm.initFileUpload();
                    }
                });
            }
            //创建附件对象
            vm.sysFile = {
                businessId : vm.fileId,
                mainId : vm.fileId,
                mainType : sysfileSvc.mainTypeValue().FILELIBRARY,
                sysBusiType :vm.fileUrl == undefined ? "" : vm.fileUrl.substring(vm.fileUrl.lastIndexOf(sysfileSvc.mainTypeValue().FILELIBRARY),vm.fileUrl.lastIndexOf(vm.fileName)),
                showBusiType : false,
            };
            sysfileSvc.initUploadOptions({
                inputId : "sysfileinput",
                vm :vm ,
                uploadSuccess : function(){
                    sysfileSvc.findByBusinessId(vm.fileId,function(data){
                        vm.sysFilelists = data;
                        fileLibrarySvc.initFileList(vm.parentFileId , vm.fileType, function(data){
                            vm.qualityList = data.reObj;
                        })
                    });
                }
            });
        }

        vm.query=function(){
            var treeObj = $.fn.zTree.getZTreeObj("zTree");
           treeObj.expandAll(false);
            treeObj.cancelSelectedNode();
            // var root = treeObj.getNodeByParam("id",1);
            //    zTree.expandNode(root,false,true,false,false); //树折叠
            var nodes = treeObj.getNodesByParamFuzzy("name", ""+vm.name+"", null);
            for(var i=0, m=nodes.length; i<m; i++){
                var node = treeObj.getNodeByParam("tId",nodes[i].tId , null);
                treeObj.expandNode(node,true, true,true);
                var parentNode = node.getParentNode();//找到父节点
               if (parentNode != null) {
                    treeObj.expandNode(parentNode, true,true,true);
                }
            }
        }
        activate();
        function activate(){
            fileLibrarySvc.initFileFolder(vm, $scope , function(data){
                // vm.qualityList = data;

                var zTreeObj;
                var setting = {
                    check: {
                        enable: true,
                        chkStyle: "radio",
                        chkboxType: { "Y": "", "N": "" }
                    },
                    edit:{
                        enable :true,
                        // editNameSelectAll: true,//设置编辑时
                        showRenameBtn : false, //不显示编辑按钮
                        showRemoveBtn : false,//显示删除按钮
                        showAddBtn : true ,
                        removeTitle : "删除节点",//设置删除按钮标题
                    },
                    view: {
                        addHoverDom: addHoverDom, // 鼠标经过时，有添加按钮
                        removeHoverDom: removeHoverDom, // 鼠标移除，删除添加按钮
                        dblClickExpand: true , //双击节点 自动展开子节点

                    },
                    callback:{
                        onClick : zTreeOnClick,
                        beforeRemove : zTreeOnRemove,
                    },
                    data: {
                        simpleData: {
                            enable: true,
                            idKey: "id",
                            pIdKey: "pId",
                        },
                        showTitle:true, //是否显示节点title信息提示 默认为true
                        key: {
                            title:"fileName" //设置title提示信息对应的属性名称 也就是节点相关的某个属性
                        }
                    }
                };
                function zTreeOnClick(event, treeId, treeNode ) {
                    // $state.go('fileLibrary.fileList',{parentId : treeNode.id});
                    zTreeObj.checkNode(treeNode, !treeNode.checked, true);
                    vm.parentFileId = treeNode.fileId;
                    if(treeNode.fileNature == "FOLDER" ){
                        vm.qualityList = [];
                        if(treeNode.children){
                            vm.qualityList = treeNode.children;
                        }
                        $scope.$apply();
                    }
                    if(treeNode.fileNature == "FILE"){
                        vm.fileEdit(vm.parentFileId);
                    }

                };
                //删除节点
                function zTreeOnRemove(event, treeId, treeNode ){
                    // var zTree = $.fn.zTree.getZTreeObj("zTree");
                    // var treeNode = zTree.getSelectedNodes();
                    vm.onRemove(treeNode.id);
                }
                //添加节点
                function addHoverDom(treeId,treeNode){
                    //判断，如果是文件夹，才有新增按钮，只能到四级
                    if(treeNode.fileNature == 'FOLDER' && treeNode.level < 2 ){
                        var sObj = $("#" + treeNode.tId + "_span");
                        if (treeNode.editNameFlag || $("#addBtn_"+treeNode.tId).length>0) return;
                        var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
                            + "' title='添加子节点' onfocus='this.blur();'></span>";
                        sObj.after(addStr);
                        var btn = $("#addBtn_"+treeNode.tId);
                        if (btn) btn.bind("click", function(){
                            var zTree = $.fn.zTree.getZTreeObj("zTree");
                            vm.addFolderWindow(treeNode.id);
                        });
                    }else{
                        return ;
                    }

                }

                //删除节点
                function removeHoverDom(treeId,treeNode){
                    $("#addBtn_"+treeNode.tId).unbind().remove();
                }

                vm.zNodes = $linq(data).select(
                    function(x){
                        var pId = null;
                        var returnObj = x;
                        returnObj = x;
                        returnObj.id = x.fileId;
                        returnObj.name = x.fileName;
                        returnObj.pId = x.parentFileId;

                        if(x.fileNature == 'FOLDER'){
                            returnObj.icon = rootPath+"/contents/libs/zTree/css/zTreeStyle/img/diy/7.png";
                        }
                        return returnObj;
                    }).toArray();

                vm.initFileTreeSucess = true;
                // zTreeObj = $.fn.zTree.init($("#zTree"),setting,  zNodes );
                // vm.folderTree = zTreeObj;

                //监听值改变
                $scope.$watch("vm.initFileTreeSucess", function (newValue, oldValue) {
                    if (newValue == true) {
                        var timer = $interval(function () {
                            var s = document.getElementById("zTree");

                            for(var i=0;i<vm.zNodes.length;i++){//控制文件名，多的用点来显示
                                if(vm.zNodes[i].name.length>7){
                                    var ss=vm.zNodes[i].name.substring(0,7);
                                    vm.zNodes[i].name=ss+"...";
                                }
                            }
                            //当有ztree的id时开始赋值
                            if (s != null) {
                                zTreeObj = $.fn.zTree.init($("#zTree"), setting, vm.zNodes);
                                $interval.cancel(timer);//停止定时器
                            }
                        }, 500);   //间隔0.5秒定时执行
                    }
                });
            });
            vm.initFileUpload();
        }

        /**
         * 新建文件夹弹出窗
         * */
        vm.addFolderWindow=function(fileId){
            vm.fileLibrary = {};
            vm.fileLibrary.fileType = "QUALITY";
            if(fileId != undefined){
                vm.fileLibrary.parentFileId = fileId;
            }
            $("#addRootFolder").kendoWindow({
                width: "600px",
                height: "300px",
                title: "创建文件夹",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "close"]
            }).data("kendoWindow").center().open();
        }

        /**
         * 保存新建文件夹
         */
        vm.saveRootFolder = function(){
            if (vm.fileLibrary.fileName != undefined) {
                fileLibrarySvc.saveRootFolder(vm.fileLibrary,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.alert("保存成功！",function(){
                            window.parent.$("#addRootFolder").data("kendoWindow").close();
                            $state.go('fileLibrary',{},{reload:true});
                        });
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("文件名不能为空!");
            }
        }

        /**
         * 删除文件夹 -停用
         * @param treeId
         * @param $scope
         */
        $scope.onRemove = function(treeId ){
            bsWin.confirm("删除的文件将无法恢复，确认删除？" , function(){
                fileLibrarySvc.deleteRootDirectory(treeId , function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.success("操作成功！");
                        return true;
                    }else{
                        bsWin.error(data.reMsg);
                        return false;
                    }

                });
            });
        }

        /**
         * 删除文件夹
         */
        vm.deleteFolder = function(){
            var zTree = $.fn.zTree.getZTreeObj("zTree");
            var nodes = zTree.getCheckedNodes();
            if(nodes != undefined && nodes.length >0){
                // var ids = [];
                var idStr = nodes[0].id;
                //判断是不是选择的是父节点，如果有选择子节点，则默认传递子节点的id进行删除
                // if (nodes.length == 1 ){
                //     idStr = nodes[0].id;
                // }else{
                //     for(var i=1 ; i<nodes.length ; i++){
                //         ids.push(nodes[i].id);
                //     }
                //     idStr = ids.join(',');
                // }

                bsWin.confirm("删除的文件将无法恢复，确认删除？" , function(){
                    fileLibrarySvc.deleteRootDirectory(idStr , function(data){
                        if(data.flag || data.reCode == 'ok'){
                            bsWin.success("操作成功！");
                            $state.go('fileLibrary',{},{reload:true});
                        }else{
                            bsWin.error(data.reMsg);
                        }

                    });
                });
            }
        }


        /**
         * 新建文件 或 更新文件 操作
         */
        vm.fileEdit = function(fileId ){
            vm.isUpdate = false;
            vm.fileId = fileId;
            vm.fileLibrary = {};
            vm.sysFilelists = {};
            vm.fileLibrary.fileType = "QUALITY";
            if(vm.fileId){
                vm.isUpdate=true;
                fileLibrarySvc.findFileById(vm.fileId , function(data){
                    vm.fileLibrary = data;
                    vm.fileUrl = vm.fileLibrary.fileUrl;
                    vm.fileName = vm.fileLibrary.fileName;
                    vm.initFileUpload();
                });
                sysfileSvc.findByBusinessId(vm.fileId,function(data){
                    vm.sysFilelists = data;
                });
            }
            $("#qualityEdit").kendoWindow({
                width: "800px",
                height: "500px",
                title: "文件编辑",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "close"]
            }).data("kendoWindow").center().open();
        }

        /**
         * 保存新建文件
         */
        vm.createFile=function(){
            vm.fileLibrary.parentFileId = vm.parentFileId;
            common.initJqValidation();
            if (vm.fileLibrary.fileName) {
                fileLibrarySvc.saveFile(vm, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        bsWin.alert("保存成功！", function () {
                            /*window.parent.$("#qualityEdit").data("kendoWindow").close();*/
                            vm.isUpdate=true;
                            vm.qualityList.push(data.reObj);
                            vm.fileId = data.reObj.fileId;
                            fileLibrarySvc.getFileUrlById(vm, vm.fileId);
                            vm.initFileUpload();
                            activate();
                            // vm.refresh(vm.parentFileId);
                        });
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            }
        }

        /**
         * 更新文件
         */
        vm.updateFile = function (){
            fileLibrarySvc.updateFile(vm , function(data){
                if(data.flag || data.reCode == 'ok'){
                    bsWin.alert("更新成功！", function(){
                        vm.initFileUpload();
                        // vm.refresh(vm.parentFileId);
                        window.parent.$("#qualityEdit").data("kendoWindow").close();
                        activate();
                    });
                }else{
                    bsWin.error(data.reMsg);
                }
            });
        }

        /**
         * 删除文件
         * @param fileId
         */
        vm.del = function(fileId){

            bsWin.confirm("删除的数据将无法恢复，确认删除？" , function(){
                //手动删除树节点
                var tree = $.fn.zTree.getZTreeObj("zTree");
                var nodes = tree.getNodeByParam("id",fileId,null) ;
                tree.removeNode(nodes);

                fileLibrarySvc.deleteFile(fileId,function(){
                    vm.qualityList.forEach(function(quality , number){
                        if(quality.fileId == fileId){
                            vm.qualityList.splice(number , 1);
                        }
                    });
                });
            })
        }


        /**
         *  模糊查询
         */
       /* vm.queryUser=function(){
            fileLibrarySvc.queryUser(vm);
        };*/

        /**
         * 重置按钮
         */
        /*vm.resetUser = function(){
            var tab = $("#fileForm").find('input');
            $.each(tab, function (i, obj) {
                obj.value = "";
            });
        }*/

        /**
         * 附件下载
         */

        vm.commonDownloadSysFile = function(sysFileId){
            sysfileSvc.downloadFile(sysFileId);g
        }
        /**
         * 重写 删除附件
         * @param fileId
         */
        vm.delFile = function(fileId){
            sysfileSvc.delSysFile(fileId, function () {
                $.each(vm.sysFilelists, function (i, sf) {
                    if (sf.sysFileId == fileId) {
                        vm.sysFilelists.splice(i, 1);
                    }
                });
                fileLibrarySvc.initFileList(vm.parentFileId , vm.fileType , function(data){
                    vm.qualityList = data.reObj;
                })
            });
        }

    }
})();
(function(){
    'use strict';
    angular.module('app').controller('qualityEditCtrl',qualityEdit);
    qualityEdit.$inject=['$state','fileLibrarySvc','sysfileSvc','$scope' , 'bsWin'];
    function qualityEdit($state,fileLibrarySvc,sysfileSvc,$scope , bsWin){
        var vm = this;
        vm.parentId = $state.params.parentId;
        vm.fileLibrary={};
        vm.fileLibrary.parentFileId = vm.parentId;
        vm.fileLibrary.fileType = "QUALITY";//初始化文件库类型 - 质量管理文件库
        vm.fileId = $state.params.fileId;
        vm.fileUrl = "";
        vm.fileName="";

        vm.businessFlag ={
            isInitFileOption : false,   //是否已经初始化附件上传控件
        }

        //初始化附件上传控件
        vm.initFileUpload = function(){
            if(!vm.fileId){
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.fileId",function (newValue , oldValue){
                    if(newValue && newValue != oldValue && !vm.initUploadOptionSuccess){
                        vm.initFileUpload();
                    }
                });
            }
            //创建附件对象
            vm.sysFile = {
                businessId : vm.fileId,
                mainId : '',
                mainType : sysfileSvc.mainTypeValue().FILELIBRARY,
                sysBusiType :vm.fileUrl.substring(vm.fileUrl.lastIndexOf(sysfileSvc.mainTypeValue().FILELIBRARY),vm.fileUrl.lastIndexOf(vm.fileName))
            };
            sysfileSvc.initUploadOptions({
                inputId : "sysfileinput",
                vm :vm ,
                uploadSuccess : function(){
                    sysfileSvc.findByBusinessId(vm.fileId,function(data){
                        vm.sysFilelists = data;
                    });
                }
            });
        }


        activate();
        function activate(){
            if(vm.fileId){
                vm.isUpdate=true;
                fileLibrarySvc.findFileById(vm , vm.fileId);
                sysfileSvc.findByBusinessId(vm.fileId,function(data){
                    vm.sysFilelists = data;
                });
            }

            if(vm.parentId){
                fileLibrarySvc.getFileUrlById(vm,vm.parentId);
                fileLibrarySvc.initFileList(vm);
            }
        }

        /**
         * 保存新建文件
         */
        vm.createFile=function(){
            fileLibrarySvc.saveFile(vm , function(data){
                if(data.flag || data.reCode == 'ok'){
                    bsWin.alert("保存成功！", function(){
                        vm.fileId = data.reObj.fileId;
                        vm.initFileUpload();
                    });


                }else{
                    bsWin.error(data.reMsg);
                }
            });
        }

        /**
         * 更新文件
         */
        vm.updateFile = function (){
            fileLibrarySvc.updateFile(vm , function(data){
                if(data.flag || data.reCode == 'ok'){
                    bsWin.alert("更新成功！", function(){
                        vm.initFileUpload();
                    });
                }else{
                    bsWin.error(data.reMsg);
                }
            });
        }

    }

})();
(function(){
    'use strict';
    angular.module('app').controller('qualityListCtrl',qualityList);
    qualityList.$inject=['$state','fileLibrarySvc','sysfileSvc','$scope' , 'bsWin'];
    function qualityList($state,fileLibrarySvc,sysfileSvc,$scope , bsWin){
        var vm = this;
        vm.parentId = $state.params.parentId;
        vm.fileLibrary={};
        vm.fileLibrary.parentFileId = vm.parentId;
        vm.fileLibrary.fileType = "QUALITY";//初始化文件库类型 - 质量管理文件库
        vm.formId = "fileForm";

        activate();
        function activate(){
            fileLibrarySvc.initFileList(vm);
        }
        /**
         * 新建文件跳转页
         */
        vm.addFile = function(){
            $state.go('fileLibrary.fileEdit',{parentId : vm.parentId,fileId : ''});
        }

        /**
         * 跳转更新文件页面
         * @param fileId
         */
        vm.update  = function(fileId){
            $state.go('fileLibrary.fileEdit',{parentId :vm.parentId ,fileId : fileId});
        }

        /**
         * 删除文件
         * @param fileId
         */
        vm.del = function(fileId){
            bsWin.confirm("删除的数据将无法恢复，确认删除？" , function(){
                fileLibrarySvc.deleteFile(vm,fileId);
            })
        }


        /**
         *  模糊查询
         */
        vm.queryUser=function(){
            fileLibrarySvc.queryUser(vm);
        };

        /**
         * 重置按钮
         */
        vm.resetUser = function(){
            var tab = $("#fileForm").find('input');
            $.each(tab, function (i, obj) {
                obj.value = "";
            });
        }



    }

})();
(function () {
    'use strict';

    angular.module('app').controller('fileRecordEditCtrl', fileRecord);

    fileRecord.$inject = ['fileRecordSvc','$state','sysfileSvc', 'bsWin','$scope' , 'templatePrintSvc' , 'addRegisterFileSvc'];

    function fileRecord(fileRecordSvc,$state,sysfileSvc,bsWin,$scope , templatePrintSvc , addRegisterFileSvc) {
        var vm = this;
        vm.title = '项目归档编辑';

        vm.fileRecord = {};
        vm.fileRecord.signId = $state.params.signid;
        vm.fileRecord.fileRecordId = "";
        vm.signId = $state.params.signid;
        vm.isControl=$state.params.isControl;		//按钮显示
        //是否协审归档（默认不是）
        vm.isassistproc = false;
        vm.drawingFile = [];//图纸资料
        vm.otherFile = [];//其它资料
        vm.declareFile = [];//建议书申报资料
        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.fileRecord.fileRecordId) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.fileRecord.fileRecordId", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }
            vm.sysFile = {
                businessId: vm.fileRecord.fileRecordId,
                mainId: vm.signId,
                mainType: sysfileSvc.mainTypeValue().SIGN,
                sysfileType: sysfileSvc.mainTypeValue().DOFILE,
                sysBusiType: sysfileSvc.mainTypeValue().DOFILE,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm
            });
        }

        activate();
        function activate() {
            fileRecordSvc.initFileRecordData(vm);

        }

        vm.create = function () {
            fileRecordSvc.saveFileRecord(vm,function(data){
                vm.isCommit = false;
                if(data.flag || data.reCode == 'ok'){
                    //重新加载页面
                    vm.fileRecord.fileRecordId = data.reObj;
                    bsWin.alert("修改成功！");
                }else{
                    bsWin.error(response.data.reMsg);
                }
            });
        }

        /**
         * 打印功能 -分页
         */
        vm.templatePage = function (id) {
            templatePrintSvc.templatePage(id);
        }

        /******以下是其它资料添加*****/

        vm.addOtherFile = function (businessId, businessType) {
            if(!vm.addRegisters){
                vm.addRegisters = [];
            }
            if (!businessId) {
                bsWin.alert("请先保存数据！");
            } else {
                if(businessType == "2"){
                    vm.addRegisters = vm.drawingFile;
                    vm.showFilePage = true;
                    vm.showFileOther = false;
                    vm.showSignOther = false;
                }else{
                    vm.addRegisters = vm.otherFile;
                    vm.showFileOther = true;
                    vm.showFilePage = false;
                    vm.showSignOther = false;
                }
                vm.businessId = businessId;
                vm.businessType = businessType;

                $("#addOtherFile").kendoWindow({
                    width: "840px",
                    height: "480px",
                    title: "补充资料编辑",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            }

        }

        //新建其它资料
        vm.addRegisterFile = function () {
            vm.addRegister = {};
            vm.addRegister.businessId = vm.businessId;
            vm.addRegister.id = common.uuid();
            vm.addRegisters.push(vm.addRegister);
        }

        //保存其它资料
        vm.saveRegisterFile = function () {
            addRegisterFileSvc.saveRegisterFile(vm.addRegisters, function (data) {
                if (data.flag || data.reCode == 'ok') {
                    vm.addRegisters = data.reObj;
                    bsWin.alert("操作成功");
                } else {
                    bsWin.alert(data.reMsg);
                }
            });
        }
        //删除其它资料
        vm.deleteRegisterFile = function () {
            var isCheked = $("#addOtherFile input[name='addRegistersCheck']:checked")
            if (isCheked.length < 1) {
                bsWin.alert("请选择要删除的记录！");
            } else {
                var ids = [];
                for (var i = 0; i < isCheked.length; i++) {
                    vm.addRegisters.forEach(function (f, number) {
                        if (f.id && isCheked[i].value == f.id) {
                            ids.push(isCheked[i].value);
                            vm.addRegisters.splice(number, 1);
                        }
                    });
                }
                if (ids.length > 0) {
                    addRegisterFileSvc.deleteByIds(ids.join(","), function (data) {
                        bsWin.alert("删除成功！");
                    });
                }
            }
        }

        vm.updateFileCode = function(){
            $("#fileCodeWin").kendoWindow({
                width: "660px",
                height: "400px",
                title: "归档文号编辑",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Close"]
            }).data("kendoWindow").center().open();
        }

        vm.resetCancelBox = function (temp) {
            var cheboxObj = $("input[name='"+temp+"']:checked");
           if(cheboxObj.length==0){
               vm.fileRecord[temp] = '0';
            }
        }

        //S_初始化input框的值
        vm.initInputValue = function($event,defaultValue,temp){
            var checkbox = $event.target;
            var checked = checkbox.checked;
            console.log("333");
            if (checked) {
                if((!defaultValue)){
                    return 1;
                }else{
                    return defaultValue;
                }

            }else{
                vm.fileRecord[temp] = '0';
                return defaultValue;
            }
        }//E_initInputValue
    }

})();

(function () {
    'use strict';

    angular.module('app').factory('fileRecordSvc', fileRecord);

    fileRecord.$inject = ['bsWin', '$http'];

    function fileRecord(bsWin, $http) {
        var service = {
            initFileRecordData: initFileRecordData,		//初始化流程数据
            saveFileRecord: saveFileRecord,				//保存
        };
        return service;

        //S_初始化
        function initFileRecordData(vm) {
            vm.otherFile=[];//定义归档其他资料的包含分类5、6、7
            var httpOptions = {
                method: 'get',
                url: rootPath + "/fileRecord/initFillPage",
                params: {signId: vm.fileRecord.signId}
            }
            var httpSuccess = function success(response) {
                if (response.data != null && response.data != "") {
                    vm.fileRecord = response.data.file_record;
                    vm.fileRecord.signId = vm.signId;
                    vm.signUserList = response.data.sign_user_List;
                    //是否协审
                    vm.isassistproc = (vm.fileRecord.isassistproc == '9')?true:false;
                    //其它资料信息
                    vm.fileRecord.registerFileDto.forEach(function(registerFile  , x){
                        if(registerFile.businessType == "5" ||registerFile.businessType == "6" ||registerFile.businessType == "7"){
                            vm.otherFile.push(registerFile);
                        }else if(registerFile.businessType == "2"){
                            vm.drawingFile.push(registerFile);
                        }
                        /*else if(registerFile.businessType == "XMJYS_DECLARE_FILE"){
                            vm.declareFile.push(registerFile);
                        }*/
                    })

                    //初始化附件上传
                    vm.initFileUpload();
                }
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_初始化

        //S_保存
        function saveFileRecord(vm,callBack) {
            common.initJqValidation($("#fileRecord_form"));
            var isValid = $("#fileRecord_form").valid();
            if (isValid) {
                //查找选定的签收人
                vm.signUserList.forEach(function(su,index){
                    if(vm.fileRecord.signUserid == su.id){
                        vm.fileRecord.signUserName = su.displayName;
                    }
                })

                vm.isCommit = true;
                var httpOptions = {
                    method: 'post',
                    url: rootPath + "/fileRecord",
                    data: vm.fileRecord
                }
                var httpSuccess = function success(response) {
                    if (callBack != undefined && typeof callBack == 'function') {
                        callBack(response.data);
                    }
                }
                common.http({
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess,
                    onError: function (response) {
                        vm.isCommit = false;
                    }
                });
            }else{

            }
        }//E_保存

    }
})();
/**
 * 停用
 */
(function () {
    'use strict';

    angular.module('app').controller('addCostCtrl', addCost);

    addCost.$inject = [ 'financialManagerSvc', '$state' ,  'bsWin' , 'expertReviewSvc' , 'adminSvc' , 'assistCostCountSvc'];

    function addCost( financialManagerSvc, $state ,  bsWin , expertReviewSvc , adminSvc ,assistCostCountSvc) {
        /* jshint validthis:true */
        var vm = this;

        vm.sign = {}; //收文对象
        vm.financial = {};//财务对象
        vm.model = {};
        vm.signAssistCost = {};//项目协审对象
        vm.isuserExist = false;
        vm.id = $state.params.id;
        vm.financial.businessId = $state.params.businessId;
        vm.costType = $state.params.costType;
        if(vm.costType == "REVIEW"){
            vm.title = '评审费统计管理';
            vm.titleName = "专家评审费";
            vm.windowName = "专家评审费录入";
        }
        if(vm.costType == "ASSIST"){
            vm.title = '协审费统计管理';
            vm.titleName = "专家协审费";
            vm.windowName = "专家协审费录入";
        }


        /**
         * 费用录入弹出框
         */
        vm.addCostWindow = function(object){


            vm.signAssistCostCounList = {};
            vm.expertSelectedDtoList = {};
            vm.signAssistCost = {};


            if(vm.costType == "REVIEW"){
                financialManagerSvc.sumFinancial(vm , object.businessId);
                vm.businessId = object.businessId;
                vm.projectName =  object.projectname;
            }
            if(vm.costType == "ASSIST"){
                vm.businessId = object.signId;
                vm.projectName =  object.projectName;
            }
            financialManagerSvc.initFinancialProject(vm.businessId ,  function(data){
                vm.financial = {};
                vm.financial.businessId = vm.businessId;
                vm.financial.projectName = vm.projectName;
                // vm.model.assissCost = object.totalCost;
                vm.financial.paymentData = data.financialDto.paymentData;
                expertReviewSvc.initReview(vm.financial.businessId, "", function (data) {
                    vm.expertReview = data;
                    vm.reviewTitle = data.reviewTitle;
                    vm.payDate = data.payDate;
                    vm.expertSelectedDtoList = data.expertSelectedDtoList;
                    if( vm.expertSelectedDtoList && vm.expertSelectedDtoList.length >0){
                        vm.showReviewCost = true;
                    }
                });

                vm.signAssistCost.signId =  vm.businessId;
                assistCostCountSvc.findSingAssistCostCount(vm.signAssistCost,function (data) {
                    vm.signAssistCostCounList = data;
                    if(vm.signAssistCostCounList && vm.signAssistCostCounList.length >0){
                        vm.showAssistCost = true;
                    }
                });

                vm.financials = data.financiallist;
                vm.countCost();
                $("#addCostWindow").kendoWindow({
                    width: "70%",
                    height: "600px;",
                    title: vm.windowName ,
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "close"]
                }).data("kendoWindow").center().open();
            });

        }


        /**
         * 导出excel
         */
        vm.costExportExcel = function (){
            var fileName = vm.reviewTitle + "(" + vm.payDate + ")";
            financialManagerSvc.exportExcel(vm , vm.financial.businessId ,fileName );
        }

        /**
         * 计算总金额
         */
        vm.countCost = function(){
            var totalCost = 0;
            if(vm.financials && vm.financials.length > 0){
                angular.forEach(vm.financials,function (f,i) {
                    if(f.charge){
                        totalCost += f.charge;
                    }
                })
            }
            $("#financialCount").html(common.htmlEscape(totalCost));
        }

        /**
         * 改变费用名称时判断是否已存在
         * @param index
         */
        vm.changeName = function (index, changeName) {
            if (vm.financials.length > 0) {
                for (var i = 0; i < (vm.financials.length) - 1; i++) {
                    if(i != index){
                        if (vm.financials[i].chargeName != undefined && vm.financials[i].chargeName == changeName) {
                            bsWin.alert("该费用已经录入，不能重复录入！");
                            vm.financials[index] = {};
                        }
                    }

                }
            }
        }

        //添加报销记录
        vm.addFinancial =  function () {
            var financial = {};
            financial.chargeType = "8";
            financial.businessId = vm.financial.businessId;
            financial.projectName = vm.financial.projectName;
            financial.paymentData = vm.financial.paymentData;
            if(!vm.financials){
                vm.financials = [];
            }
            vm.financials.push(financial);
        }// end

        //保存报销记录
        vm.saveFinancial = function (){
            common.initJqValidation($("#fnFrom"));
            var isValid = $("#fnFrom").valid();
            if(isValid){
                financialManagerSvc.savefinancial(vm.financials,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        vm.financials = data.reObj;
                        bsWin.success(data.reMsg);
                        $("#addCostWindow").data("kendoWindow").close();
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            }else{
                bsWin.error("费用信息填写不正确！");
            }
            // financialManagerSvc.savefinancial(vm);
        }
        //删除报销记录
        vm.deleteFinancial = function(){
            var isChecked = $("#financialsTable input[name='financialsCheck']:checked");
            if(isChecked.length < 1){
                common.alert({
                    vm:vm,
                    msg:"请选择要删除的记录！"
                })
            }else{
                var ids = [];
                for(var i = 0; i <isChecked.length ;i++){
                    vm.financials.forEach(function( f , number){
                        if(isChecked[i].value == f.id || f.id == undefined){
                            vm.financials.splice(number,1);
                        }
                        ids.push(isChecked[i].value);
                    });
                    var idsStr = ids.join(",");
                    financialManagerSvc.deleteFinancialManager(idsStr,function(data){

                    });
                }
            }
        }



        /**
         * 查询
         */
        vm.queryUser = function (){

            activate();
        }

        /**
         * 重置
         */
        vm.resetQuery = function(){
            vm.financial = {};
        }

        activate();
        function activate() {

            if(vm.costType == "REVIEW"){
                adminSvc.initSignList(function(data){
                    if(data.flag || data.reCode == 'ok'){
                        vm.orgDeptList = data.reObj;
                    }
                });

                financialManagerSvc.initfinancial(vm , function(data){
                    vm.stageCountList = data;
                });
            }
            if(vm.costType == "ASSIST"){
                assistCostCountSvc.findSingAssistCostList(vm.signAssistCost, function (data) {
                    vm.signAssistCostList = data;
                });
            }

        }
    }
})();

(function () {
    'use strict';
    angular.module('app').factory('addCostSvc', addCost);
    addCost.$inject = ['bsWin', 'financialManagerSvc', 'expertReviewSvc', 'assistCostCountSvc'];
    function addCost(bsWin, financialManagerSvc, expertReviewSvc, assistCostCountSvc) {
        var service = {
            initAddCost: initAddCost,     //初始化财务录入
        }
        return service;

        function initAddCost(vm, costType, object, id) {
            vm.financial = {};
            //该判断用于项目签收流程中的财务办理
            if (object.businessId == undefined) {
                if (object.signid == undefined) {
                    object.businessId = object.signId;
                } else {
                    object.businessId = object.signid;
                }
            }
            if (!object.projectname) {
                object.projectname = object.projectName;
            }

            if (costType == "REVIEW") {
                vm.windowName = "项目评审费录入";
                vm.financial.businessType = "SIGN";
                vm.financial.chargeType = '1';      //费用类型，1表示评审费，2表示协审费
            } else if (costType == "ASSIST") {
                vm.windowName = "项目协审费录入";
                vm.financial.businessType = "SIGN";
                vm.financial.chargeType = '2';      //费用类型，1表示评审费，2表示协审费
            }

            vm.financial.businessId = object.businessId;
            vm.financial.projectName = object.projectname;

            /**
             * 导出excel
             */
            vm.costExportExcel = function () {
                var fileName = vm.expertReview.reviewTitle + "(" + vm.expertReview.payDate + ")";
                financialManagerSvc.exportExcel(vm, vm.financial.businessId, fileName);
            }

            /**
             * 计算总金额
             */
            vm.countCost = function () {
                var totalCost = 0;
                if (vm.financials && vm.financials.length > 0) {
                    angular.forEach(vm.financials, function (f, i) {
                        if (f.charge) {
                            totalCost += f.charge;
                        }
                    })
                }
                $("#financialCount").html(common.htmlEscape(totalCost));
            }

            /**
             * 改变费用名称时判断是否已存在(停用，2017-12-03)
             * @param index
             */
            /*vm.changeName = function (index, changeName) {
             if (vm.financials.length > 0) {
             for (var i = 0; i < (vm.financials.length) - 1; i++) {
             if (i != index) {
             if (vm.financials[i].chargeName != undefined && vm.financials[i].chargeName == changeName) {
             bsWin.alert("该费用已经录入，不能重复录入！");
             vm.financials[index] = {};
             }
             }
             }
             }
             }*/

            //添加报销记录
            vm.addFinancial = function () {
                var financial = {};
                financial.businessId = vm.financial.businessId;
                financial.projectName = vm.financial.projectName;
                financial.paymentData = vm.financial.paymentData;
                financial.chargeType = vm.financial.chargeType;
                financial.isNew = true;
                financial.id = common.uuid();
                if (!vm.financials) {
                    vm.financials = [];
                }
                vm.financials.push(financial);
            }// end

            //保存报销记录
            vm.saveFinancial = function () {
                common.initJqValidation($("#fnFrom"));
                var isValid = $("#fnFrom").valid();
                if (isValid) {
                    //更新付款日期
                    angular.forEach(vm.financials, function (f, index) {
                        f.paymentData = vm.financial.paymentData;
                        if(f.isNew){
                            f.id = "";
                        }
                    })
                    //保存
                    financialManagerSvc.savefinancial(vm.financials, function (data) {
                        if (data.flag || data.reCode == 'ok') {
                            vm.financials = data.reObj;
                            bsWin.success(data.reMsg, function () {
                                $("#" + id).data("kendoWindow").close();
                            });
                        } else {
                            bsWin.error(data.reMsg);
                        }
                    });
                } else {
                    bsWin.error("费用信息填写不正确！");
                }
                // financialManagerSvc.savefinancial(vm);
            }

            //删除报销记录
            vm.deleteFinancial = function () {
                var isChecked = $("#financialsTable input[name='financialsCheck']:checked");
                if (isChecked.length < 1) {
                    bsWin.alert("请选择要删除的记录！");
                } else {
                    bsWin.confirm({
                        title: "询问提示",
                        message: "确认删除？",
                        onOk: function () {
                            var ids = [];
                            for (var i = 0; i < isChecked.length; i++) {
                                vm.financials.forEach(function (f, number) {
                                    if (isChecked[i].value == f.id) {
                                        vm.financials.splice(number, 1);
                                        if(isChecked[i].value){
                                            ids.push(isChecked[i].value);
                                        }
                                    }
                                });
                            }

                            if(!vm.financials || vm.financials.length == 0){
                                vm.financialsCheck = false;
                            }
                            if(ids.length > 0 ){
                                var idsStr = ids.join(",");
                                financialManagerSvc.deleteFinancialManager(idsStr, function (data) {
                                    //删除成功后，总金额需要重新计算
                                    vm.countCost();
                                });
                            }
                        }
                    });

                }
            }
            vm.count = function () {//当输入框输入值时就计算
                vm.countCost();
            }
            //初始化报销费用列表
            financialManagerSvc.initFinancialProject(vm.financial, function (data) {
                //1、获取已经添加的费用列表
                vm.financials = data.financiallist;
                //如果已经有项目费用，则计算总额
                if (vm.financials && vm.financials.length > 0) {
                    vm.countCost();
                    if (vm.financials[0].paymentData) {
                        vm.financial.paymentData = (new Date((vm.financials[0].paymentData).CompatibleDate())).Format("yyyy-MM-dd");
                    }
                }

                //2、查找专家评审费
                expertReviewSvc.initReview(vm.financial.businessId, "", function (data) {
                    vm.expertReview = data;
                    console.log(vm.expertReview);
                });

                //项目才有协审费，不是项目，没有协审费
                if (costType == "ASSIST") {
                    assistCostCountSvc.findSignCostBySignId(vm.financial.businessId, function (data) {
                        if(data){
                            vm.signAssistCostCounList = data;
                        }else{
                            vm.signAssistCostCounList = [];
                        }
                    });
                }
                $("#" + id).kendoWindow({
                    width: "70%",
                    height: "560",
                    title: vm.windowName,
                    visible: false,
                    modal: true,
                    closable: true,
                    close: function () {
                        vm.financial = {};
                        vm.expertReview = {};
                        vm.financials = {};
                        vm.signAssistCostCounList = {};
                    },
                    actions: ["Pin", "Minimize", "Maximize", "close"]
                }).data("kendoWindow").center().open();
            });


        }


    }

})();
/**
 * 停用
 */
(function () {
    'use strict';

    angular.module('app').controller('assistCostEditCtrl', assistCostEdit);

    assistCostEdit.$inject = ['bsWin', 'financialManagerSvc','$state', 'expertReviewSvc'];

    function assistCostEdit(bsWin, financialManagerSvc,$state,expertReviewSvc) {
        var vm = this;
        vm.title = '协审费录入';
        vm.financials = new Array();
        vm.financial = {};//财务对象
        vm.financial.businessId = $state.params.signid;

        activate();
        function activate() {
            financialManagerSvc.initAssistProject(vm.financial.businessId, function (data) {
                vm.model = data.financialDto;
                vm.financials = data.financiallist;
                vm.countCost();
            });
        }

        /**
         * 计算总金额
         */
        vm.countCost = function () {
            if (vm.financials && vm.financials.length > 0) {
                var totalCost = 0;
                angular.forEach(vm.financials, function (f, i) {
                    if (f.charge) {
                        totalCost += f.charge;
                    }
                })
                $("#financialCount").html(common.htmlEscape(totalCost));
            }
        }

        //添加报销记录
        vm.addFinancial =  function () {
            var financial = {};
            financial.chargeType = "8";
            financial.businessId = vm.model.businessId;
            financial.projectName = vm.model.projectName;
            financial.paymentData = vm.model.paymentData;
            if(!vm.financials){
                vm.financials = [];
            }
            vm.financials.push(financial);
        }// end

        //保存报销记录
        vm.saveFinancial = function (){
            financialManagerSvc.savefinancial(vm.financials,function(data){
                if(data.flag || data.reCode == 'ok'){
                    vm.financials = data.reObj;
                    if(!vm.model.paymentData){
                        vm.model.paymentData = vm.financials[0].paymentData;
                    }
                    vm.countCost();
                    bsWin.success(data.reMsg);
                }else{
                    bsWin.error(data.reMsg);
                }
            });
        }

        //删除报销记录
        vm.deleteFinancial = function(){
            var isChecked = $("#financialsTable input[name='financialsCheck']:checked");
            if (isChecked.length < 1) {
                common.alert({
                    vm: vm,
                    msg: "请选择要删除的记录！"
                })
            } else {
                var ids = [];
                for (var i = 0; i < isChecked.length; i++) {
                    vm.financials.forEach(function (f, number) {
                        if (f.id == undefined || isChecked[i].value == f.id ) {
                            vm.financials.splice(number, 1);
                        }
                        if(isChecked[i].value){
                            ids.push(isChecked[i].value);
                        }
                    });
                }
                if(ids.length > 0){
                    var idsStr = ids.join(",");
                    financialManagerSvc.deleteFinancialManager(idsStr,function(data){
                        vm.countCost();
                        bsWin.alert("操作成功！！");
                    });
                }else{
                    vm.countCost();
                }
            }
        }

    }
})();

/**
 * 停用
 */
(function () {
    'use strict';

    angular.module('app').controller('assistCostCountEditCtrl', assistCostCount);

    assistCostCount.$inject = ['bsWin', 'assistCostCountSvc', 'addCostSvc', '$state'];

    function assistCostCount(bsWin, assistCostCountSvc, addCostSvc, $state) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '协审费录入';
        vm.signAssistCost = {};
        vm.signAssistCost.beginTime = (new Date()).halfYearAgo();
        vm.signAssistCost.endTime = (new Date()).Format("yyyy-MM-dd");

        vm.costType = $state.params.costType;
        vm.financials = [];

        activate();
        function activate() {
            vm.isSubmit = true;
            vm.nodata = false;
            assistCostCountSvc.findSingAssistCostList(vm.signAssistCost, function (data) {
                vm.isSubmit = false;
                vm.signAssistCostList = data;
                if(!vm.signAssistCostList || vm.signAssistCostList.length == 0){
                    vm.nodata = true;
                }
            });
        }

        //查询
        vm.queryAssistCost = function () {
            activate();
        }
        //重置
        vm.assistCostReset = function () {
            vm.signAssistCost = {};
        }

        /**
         * 协审费录入
         * @param object
         */
        vm.addCostWindow = function(object,id){
            addCostSvc.initAddCost(vm,vm.costType,object,id);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('assistCostCountListCtrl', assistCostCountList);

    assistCostCountList.$inject = ['assistCostCountSvc','$state','addCostSvc'];

    function assistCostCountList(assistCostCountSvc,$state,addCostSvc) {
        var vm = this;
        vm.signAssistCost = {};                 //搜索对象
        vm.signAssistCost.beginTime = (new Date()).halfYearAgo();
        vm.signAssistCost.endTime = (new Date()).Format("yyyy-MM-dd");

        activate();
        function activate() {
            vm.isSubmit = true;
            vm.nodata = false;
            assistCostCountSvc.findSingAssistCostCount(vm.signAssistCost,function (data) {
                vm.isSubmit = false;
                vm.signAssistCostCounList = data;
                if(!vm.signAssistCostCounList || vm.signAssistCostCounList.length == 0){
                    vm.nodata = true;
                }

            });
        }

        //查询
        vm.queryAssistCost = function(){
            activate();
        }
        //重置
        vm.assistCostReset = function(){
            vm.signAssistCost = {};
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').factory('assistCostCountSvc', assistCostCount);

    assistCostCount.$inject = ['$http'];

    function assistCostCount($http) {
        var url_assistCostCount = rootPath + "/financialManager", url_back = '#/assistCostCountList';
        var service = {
            grid: grid,
            deleteassistCostCount: deleteassistCostCount,			//删除协审费用记录
            saveAssistCost: saveAssistCost,							//协审费用保存
            sumAssistCount: sumAssistCount,							//统计评审费用总和
            initAssistlProject: initAssistlProject,					//初始化协审费用关联的项目
            isUnsignedInteger: isUnsignedInteger,					//数字校验
            assistExportExcel: assistExportExcel,					//专家协申费用导出
            findSingAssistCostCount: findSingAssistCostCount,		//协审费用统计列表
            findSingAssistCostList: findSingAssistCostList,			//协审费录入列表
            findSignCostBySignId : findSignCostBySignId,            //根据项目ID获取项目的协审费用
        };

        return service;

        //S_根据项目ID获取项目的协审费用
        function findSignCostBySignId(signId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/financialManager/findSignCostBySignId",
                params: {
                    signId : signId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_根据项目ID获取项目的协审费用

        //S 协审费用统计列表
        function findSingAssistCostCount(singAssist, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/financialManager/findSingAssistCostCount",
                data: singAssist
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E 协审费用统计列表

        //S 协审费录入列表
        function findSingAssistCostList(singAssist, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/financialManager/findSingAssistCostList",
                data: singAssist
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // E 协审费录入列表

        //S 专家协申费用导出
        function assistExportExcel(vm, businessId, fileName) {
            var fileName = escape(encodeURIComponent(fileName));
            window.open(rootPath + '/financialManager/exportExcel?fileName=' + fileName + '&businessId=' + businessId);
        }

        // E 专家协申费用导出


        //检查是否为正整数
        function isUnsignedInteger(value) {
            if ((/^(\+|-)?\d+$/.test(value)) && value > 0) {
                return true;
            } else {
                return false;
            }
        }

        //S 初始化协审费用关联的项目
        function initAssistlProject(businessId, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/financialManager/initfinancial",
                params: {
                    businessId: businessId,
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof  callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // E 初始化协审费用关联的项目

        //S 统计评审费用总和
        function sumAssistCount(vm) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/financialManager/html/sumfinancial",
                params: {
                    businessId: vm.financial.businessId
                }
            };
            var httpSuccess = function success(response) {
                vm.financial.stageCount = 0;
                if(response.data){
                    vm.financial.stageCount = response.data;
                }
                $("#financialCount").html(common.htmlEscape(vm.financial.stageCount));
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //E 统计评审费用总和

        //S 保存报销记录
        function saveAssistCost(financials,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/financialManager",
                headers: {
                    "contentType": "application/json;charset=utf-8"  //设置请求头信息
                },
                traditional: true,
                dataType: "json",
                data: angular.toJson(financials),//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //E 保存报销记录
        //刷新页面
        function myrefresh() {
            window.location.reload();
        }

        // begin#删除协审费用记录
        function deleteassistCostCount(id, callBack) {
            var httpOptions = {
                method: 'delete',
                url: url_assistCostCount,
                data: id
            };

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // end#删除协审费用记录

        //S_初始化grid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/expertSelected/assistCostList", $("#searchform")),
                schema: {
                    data: "value",
                    model: {
                        id: "id",
                        fields: {
                            createdDate: {
                                type: "date"
                            }
                        }
                    }
                },
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            // Begin:column
            var columns = [
                {
                    field: "",
                    title: "",
                    width: 30,
                    template: function (item) {
                        switch (item.lightState) {
                            case "4":          //暂停
                                return $('#span1').html();
                                break;
                            case "8":         	//存档超期
                                return $('#span5').html();
                                break;
                            case "7":           //超过25个工作日未存档
                                return $('#span4').html();
                                break;
                            case "6":          	//发文超期
                                return $('#span3').html();
                                break;
                            case "5":          //少于3个工作日
                                return $('#span2').html();
                                break;
                            case "1":          //在办
                                return "";
                                break;
                            case "2":           //已发文
                                return "";
                                break;
                            case "3":           //已发送存档
                                return "";
                                break;
                            default:
                                return "";
                                ;
                        }
                    }
                },
                /* {
                 field: "",
                 title: "序号",
                 template: "<span class='row-number'></span>",
                 width: 50
                 },*/
                {
                    field: "projectname",
                    title: "项目名称",
                    width: 100,
                    filterable: false
                },

                {
                    field: "builtcompanyname",
                    title: "协审单位",
                    width: 100,
                    filterable: false,
                },

                {
                    field: "principal",
                    title: "项目负责人",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "signNum",
                    title: "协审登记号",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "totalCost",
                    title: "计划协审费用",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "totalCost",
                    title: "实付协审费用",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "payDate",
                    title: "付款日期",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "declareValue",
                    title: "申报金额",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "",
                    title: "操作",
                    width: 100,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                            "vm.addCost('" + item.businessId + "')"
                        );
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: function () {
                    var rows = this.items();
                    var page = this.pager.page() - 1;
                    var pagesize = this.pager.pageSize();
                    $(rows).each(function () {
                        var index = $(this).index() + 1 + page * pagesize;
                        var rowLabel = $(this).find(".row-number");
                        $(rowLabel).html(index);
                    });
                },
                resizable: true
            };
        }//E_初始化grid

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('exportCountCtrl', exportCount);

    exportCount.$inject = ['$location', 'exportCountSvc','$state','$http'];

    function exportCount($location, exportCountSvc,$state,$http) {
        var vm = this;
        vm.title = '专家费统计管理';
        vm.financials = [];
        vm.searchModel = {};
        vm.searchModel.beginTime = (new Date()).halfYearAgo();
        vm.searchModel.endTime = (new Date()).Format("yyyy-MM-dd");
        vm.model={};
        vm.sign = {}; //收文对象
        vm.financial = {};//财务对象
        vm.financial.signid = $state.params.signid;
        
        //S 输入数字校验
        vm.inputIntegerValue = function(checkValue,idSort){
        	if(exportCountSvc.isUnsignedInteger(checkValue)){
        		$("#errorsUnmber" + idSort).html("");
        	}else{
        		$("#errorsUnmber" + idSort).html("只能输入数字");
        	}
        }
        //E 输入数字校验
        
        //检查是否为正整数
        function isUnsignedInteger(value) {
            if ((/^(\+|-)?\d+$/.test(value)) && value > 0) {
                return true;
            } else {
                return false;
            }
        }
        //添加报销记录
       vm.addFinancial =  function () {
    	   	var projectName = $("#projectName").val();
    	   	var paymentData = $("#paymentData").val();
    	    var signid =vm.financial.signid;
        	vm.financial = {};
        	vm.financial.chargeType ="评审项目"; 
        	vm.financial.signid = signid ;
        	vm.financial.projectName= projectName;
        	vm.financial.paymentData= paymentData;
            vm.financials.push(vm.financial);
            vm.i++;
        }// end
       
       //保存报销记录
       vm.saveFinancial = function (){
    	   exportCountSvc.savefinancial(vm);
       }
       //删除报销记录
       vm.deleteFinancial = function(){
    	   var isChecked = $("#financialsTable input[name='financialsCheck']:checked");
    	   if(isChecked.length < 1){
    		   common.alert({
                   vm:vm,
                   msg:"请选择要删除的记录！"
               })
    	   }else{
    		   var ids = [];
    		   for(var i = 0; i <isChecked.length ;i++){
    			   vm.financials.forEach(function( f , number){
    				   if(isChecked[i].value == f.id || f.id == undefined){
    					   vm.financials.splice(number,1);
    				   }
    				   ids.push(isChecked[i].value);
    			   });
    				var idsStr = ids.join(",");
    				 exportCountSvc.deleteexportCount(vm,idsStr);
    		   }
    	   }
       }
        //表单查询
        vm.searchForm = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        /**
         * 专家评审费明细导出
         */
        vm.excelExport = function(){
            vm.fileName = "专家评审费明细";
            // Begin:dataSource
            // End:dataSource
         //   console.log(vm.model.beginTime);
            vm.exportData = $("#statisticalGrid").data("kendoGrid")._data;
            exportCountSvc.excelExport(vm,vm.exportData,vm.fileName);
        }

        //重置查询表单
        vm.formReset = function(){
            vm.searchModel = {};
        }
        activate();
        function activate() {
            exportCountSvc.grid(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('exportCountSvc', exportCount);

    exportCount.$inject = ['$http'];

    function exportCount($http) {
        var url_exportCount = rootPath + "/exportCount", url_back = '#/exportCountList';
        var service = {
            grid: grid,
            deleteexportCount: deleteexportCount,			//删除报销记录
            savefinancial:savefinancial,							//保存报销记录
            sumFinancial:sumFinancial,								//统计评审费用总和
            initFinancialProject:initFinancialProject,				//初始化关联项目评审费
            isUnsignedInteger:isUnsignedInteger,					//	数字校验
            excelExport:excelExport
        };

        return service;
      //检查是否为正整数
        function isUnsignedInteger(value){
            if((/^(\+|-)?\d+$/.test(value)) && value>0 ){
                return true;
            }else{
                return false;
            }
        }
       //S 初始化关联项目评审费
        function initFinancialProject(vm){
        	var httpOptions = {
                    method: 'get',
                    url: rootPath + "/exportCount/initfinancial",
                    params:{
                    	signid: vm.financial.signid
                    }
                };
                var httpSuccess = function success(response) {
                    vm.model = response.data.financialDto;
                    vm.financials = response.data.financiallist;
                };
                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });            
        }
       // E 初始化关联项目评审费
        
        //S 统计评审费用总和
       function  sumFinancial(vm){
    		var httpOptions = {
                    method: 'get',
                    url: rootPath + "/exportCount/html/sumfinancial",
                    params:{
                    	signId: vm.financial.signid
                    }
                };
                var httpSuccess = function success(response) {
                	vm.financial.stageCount = 0;
                	if(response.data){
                        vm.financial.stageCount = response.data;
                    }
                   $("#financialCount").html(common.htmlEscape(vm.financial.stageCount));
                   
                };

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
               });   
       }
     //E 统计评审费用总和
       
       //S 保存报销记录
       function savefinancial(vm){
    		   var httpOptions = {
    				   method : 'post',
    				   url : rootPath + "/exportCount",
    				   headers:{
    					   "contentType":"application/json;charset=utf-8"  //设置请求头信息
    				   },
    				   traditional: true,
    				   dataType : "json",
    				   data : angular.toJson(vm.financials),//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
    		   }
    		   var httpSuccess = function success(response) {
    			   common.requestSuccess({
    				   vm : vm,
    				   response : response,
    				   fn : function() {
    					   common.alert({
    						   vm: vm,
    						   msg: "操作成功",
    						   fn: function () {
    							   myrefresh();
    						   }
    					   })
    				   }
    			   });
    		 
    	   }

    	   common.http({
    		   vm : vm,
    		   $http : $http,
    		   httpOptions : httpOptions,
    		   success : httpSuccess
    	   });
       }
       //E 保存报销记录
        //刷新页面
        function myrefresh(){
        	 window.location.reload();
        }

        // begin#deleteexportCount
        function deleteexportCount(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_exportCount,
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                    	common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog :true,
                            fn: function () {
                            	vm.isSubmit = false;
                            	myrefresh();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        // end#deleteexportCount

        //begin excelExport
        function excelExport(vm,exportData,fileName){
            var fileName1 = window.encodeURIComponent(window.encodeURIComponent(fileName));
            var paramStr = {fileName:fileName1};
            var url = rootPath + "/expertSelected/expertDetailExport";
            if ($("#searchform")) {
                var filterParam = common.buildOdataFilter($("#searchform"));
                if (filterParam) {
                    paramStr.$filter = filterParam;
                }
            }
            var httpOptions ={
                method : 'post',
                url : url,
                traditional : true,
                dataType : "json",
                responseType: 'arraybuffer',
                params:paramStr
            }
            var httpSuccess = function success(response){
                fileName =fileName + ".xls";
                var fileType ="vnd.ms-excel";
                common.downloadReport(response.data , fileName , fileType);
            }
            common.http({
                vm : vm,
                $http : $http ,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }
        //end excelExport

        //S_初始化grid(过滤已签收和已经完成的项目)
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/expertSelected/findByOData", $("#searchform")),
                schema: common.kendoGridConfig().schema({
                    id: "id"
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10
            });
            // End:dataSource
            //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
				    field: "rowNumber",
				    title: "序号",
				    width: 50,
				    filterable : false,
                    attributes: {
                        "class": "table-cell",
                        style: "text-align: center"
                    },
				    template: "<span class='row-number'></span>"
				 },
                {
                    field: "expertDto.name",
                    title: "姓名",
                    width: 80,
                    filterable: false
                },
               
                {
                    field: "expertDto.idCard",
                    title: "身份证号",
                    width: 170,
                    filterable: false,
                },
                {
                    field: "expertDto.openingBank",
                    title: "开户行",
                    width: 140,
                    filterable: false,
                },
                {
                    field: "expertDto.bankAccount",
                    title: "银行账号",
                    width: 200,
                    filterable: false,
                },
                {
                    field: "reviewCost",
                    title: "评审费",
                    width: 70,
                    filterable: false,
                },
                {
                    field: "reviewTaxes",
                    title: "应缴税",
                    width: 70,
                    filterable: false,
                },
                {
                    field: "expertReviewDto.reviewTitle",
                    title: "项目名称",
                    width: 380,
                    filterable: false,
                },
                {
                    field: "expertReviewDto.reviewDate",
                    title: "评审/函评日期",
                    width: 120,
                    filterable: false,
                },
                /*{
                    field: "expertReviewDto.reviewDate",
                    title: "函评时间",
                    width: 70,
                    filterable: false,
                },*/
                {
                    field: "principal",
                    title: "负责人",
                    width: 140,
                    filterable: false,
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound:dataBound,
                resizable: true
            };
        }//E_初始化grid

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('expertPaymentCountCtrl', expertPaymentCount);

    expertPaymentCount.$inject = ['$location', 'expertPaymentCountSvc', '$state', '$http'];

    function expertPaymentCount($location, expertPaymentCountSvc, $state, $http) {
        var vm = this;
        vm.title = '专家缴税统计管理';
        vm.financials = [];
        vm.sign = {}; //收文对象
        vm.financial = {};//财务对象
        vm.model = {};
        vm.model.year = $state.params.year;
        vm.model.month = $state.params.month;

        vm.countExpertCost = function () {
            expertPaymentCountSvc.expertCostTotal(vm, function (data) {
                vm.expertCostTotalInfo = data.reObj.expertCostTotalInfo;
                vm.tMonthReviewcost = data.reObj.tMonthReviewcost;
                vm.tMonthReviewtaxes = data.reObj.tMonthReviewtaxes;
                vm.tYearReviewcost = data.reObj.tYearReviewcost;
                vm.tYearReviewtaxes = data.reObj.tYearReviewtaxes;
            });
        }

        vm.getExpertCoustDetail = function () {
            $state.go('expertPaymentDetailCountList', {year:vm.model.year,month:vm.model.month});
        }

        //打印
        vm.printFile = function () {
            var url = rootPath + "/contents/libs/pdfjs-dist/web/viewer.html?version=" + (new Date()).getTime() + "&file=" + rootPath + "/expertSelected/printPreview/" + vm.model.year+"/"+vm.model.month;
            $("#iframePreview").attr("src", url);
            $("#previewModal").kendoWindow({
                width: "80%",
                height: "730px",
                title: "",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        /**
         * 专家评审费统计导出
         */
        vm.excelExport = function () {
            expertPaymentCountSvc.excelExport(vm.expertCostTotalInfo, vm.model.year,vm.model.month);
        }

        activate();
        function activate() {
            if(!vm.model.year || !vm.model.month) {
                var date = new Date();
                var year = date.getFullYear();
                var month = date.getMonth() + 1;
                vm.model.year = year+'';
                vm.model.month = month+'';
            }
            expertPaymentCountSvc.expertCostTotal(vm, function (data) {
                vm.expertCostTotalInfo = data.reObj.expertCostTotalInfo;
                vm.tMonthReviewcost = data.reObj.tMonthReviewcost;
                vm.tMonthReviewtaxes = data.reObj.tMonthReviewtaxes;
                vm.tYearReviewcost = data.reObj.tYearReviewcost;
                vm.tYearReviewtaxes = data.reObj.tYearReviewtaxes;
            });
        }

        //生成专家评审费明细表格
        /*function createExpertCostTable(expertCostTotalInfo) {
            var expertCostTr = "";
            var rowIndex = 0;
            if (expertCostTotalInfo.length > 0) {
                for (var i = 0; i < expertCostTotalInfo.length; i++) {
                    rowIndex++;
                    expertCostTr += "<tr id='option" + rowIndex + "'>";
                    expertCostTr += "<td colspan='5'>";
                    if (expertCostTotalInfo[i].name.length == 2) {
                        expertCostTr += "<span style='margin-left: 6.5%;'><strong>" + expertCostTotalInfo[i].name + "</strong></span>";
                    } else {
                        expertCostTr += "<span style='margin-left: 5%;'><strong>" + expertCostTotalInfo[i].name + "</strong></span>";
                    }
                    expertCostTr += "<span style='margin-left: 8%;'></span><strong>" + expertCostTotalInfo[i].expertNo + "</strong></span>";
                    expertCostTr += "<span style='margin-left: 65%;'></span><strong>合计:</strong></span>";
                    expertCostTr += "<span style='margin-left: 4%;'></span><strong>" + expertCostTotalInfo[i].monthTotal + "</strong></span>";
                    expertCostTr += "</td>";
                    expertCostTr += "<td class='text-center'>";
                    expertCostTr += expertCostTotalInfo[i].reviewcost;
                    expertCostTr += "</td>"
                    expertCostTr += "<td class='text-center'>";
                    expertCostTr += expertCostTotalInfo[i].reviewtaxes;
                    expertCostTr += "</td>"
                    expertCostTr += "</tr>";
                    if (expertCostTotalInfo[i].expertCostDetailCountDtoList.length > 0) {
                        for (var j = 0; j < expertCostTotalInfo[i].expertCostDetailCountDtoList.length; j++) {
                            rowIndex++;
                            var expertCostDetailTr = "";
                            expertCostDetailTr += "<tr id='option" + rowIndex + "'>";
                            expertCostDetailTr += "<td class='text-center' colspan='2'>";
                            expertCostDetailTr += expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewTitle == undefined ? "" : expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewTitle;
                            expertCostDetailTr += "</td>"
                            expertCostDetailTr += "<td class='text-center'>";
                            expertCostDetailTr += expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewType == undefined ? "" : expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewType;
                            expertCostDetailTr += "</td>"
                            expertCostDetailTr += "<td class='text-center'>";
                            if (expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewDate != undefined) {
                                expertCostDetailTr += expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewDate;
                            }
                            expertCostDetailTr += "</td>"
                            expertCostDetailTr += "<td class='text-center'>";
                            if (expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewDate != undefined) {
                                expertCostDetailTr += expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewDate;
                            }
                            expertCostDetailTr += "</td>"
                            expertCostDetailTr += "<td class='text-center'>";
                            expertCostDetailTr += expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewcost;
                            expertCostDetailTr += "</td>"
                            expertCostDetailTr += "<td class='text-center'>";
                            expertCostDetailTr += expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewtaxes;
                            expertCostDetailTr += "</td>"
                            expertCostDetailTr += "</tr>";
                        }
                        expertCostTr += expertCostDetailTr;
                    }
                }
                $("#expertCostHead").after(expertCostTr);
            }
        }*/
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('expertPaymentCountSvc', expertPaymentCount);

    expertPaymentCount.$inject = ['$http','FileSaver'];

    function expertPaymentCount($http,FileSaver) {
        var url_expertPaymentCount = rootPath + "/expertPaymentCount", url_back = '#/expertPaymentCountList';
        var service = {
            grid: grid,
            deleteexpertPaymentCount: deleteexpertPaymentCount,			//删除报销记录
            savefinancial:savefinancial,							//保存报销记录
            sumFinancial:sumFinancial,								//统计评审费用总和
            initFinancialProject:initFinancialProject,				//初始化关联项目评审费
            isUnsignedInteger:isUnsignedInteger,					//	数字校验
            expertCostTotal:expertCostTotal,                         //专家评审费用统计
            expertCostDetailTotal:expertCostDetailTotal,            //专家评审明细费用统计
            excelExport:excelExport                                 //专家汇总统计导出
        };

        return service;

        //S_专家评审费用统计
        function expertCostTotal(vm,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertSelected/expertCostTotal",
                data: vm.model
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_专家评审费用统计

        //S_专家评审费用明细统计
        function expertCostDetailTotal(vm,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertSelected/expertCostDetailTotal",
                data: vm.model
        }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_专家评审费用明细统计

        //begin excelExport
        function excelExport(exportData,year,month){
            var fileName = "专家缴税统计汇总表(" + year + "-" + month+")";
            var httpOptions ={
                method : 'post',
                url : rootPath + "/expertSelected/excelExport/"+year+"/"+month,
                headers : {
                    "contentType" : "application/json;charset=utf-8"
                },
                traditional : true,
                dataType : "json",
                responseType: 'arraybuffer',
                data : angular.toJson(exportData),
            }
            var httpSuccess = function success(response){
                var blob = new Blob([response.data] , {type : "application/vnd.ms-excel"});
                FileSaver.saveAs(blob, fileName+".xls");
            }
            common.http({
                $http : $http ,
                httpOptions : httpOptions,
                success : httpSuccess
            });
            /*var fileName1 = window.encodeURIComponent(window.encodeURIComponent(fileName));
            var httpOptions ={
                method : 'post',
                url : rootPath + "/expertSelected/excelExport",
                headers : {
                    "contentType" : "application/json;charset=utf-8"
                },
                traditional : true,
                dataType : "json",
                responseType: 'arraybuffer',
                data : angular.toJson(exportData),
                params:{
                    fileName :fileName1
                }

            }
            var httpSuccess = function success(response){
                fileName =fileName + ".xls";
                var fileType ="vnd.ms-excel";
                common.downloadReport(response.data , fileName , fileType);
            }
            common.http({
                vm : vm,
                $http : $http ,
                httpOptions : httpOptions,
                success : httpSuccess
            });*/
        }
        //end excelExport

      //检查是否为正整数
        function isUnsignedInteger(value){
            if((/^(\+|-)?\d+$/.test(value)) && value>0 ){
                return true;
            }else{
                return false;
            }
        }
       //S 初始化关联项目评审费
        function initFinancialProject(vm){
        	var httpOptions = {
                method: 'get',
                url: rootPath + "/expertPaymentCount/initfinancial",
                params:{
                    signid: vm.financial.signid
                }
            };
            var httpSuccess = function success(response) {
                vm.model = response.data.financialDto;
                vm.financials = response.data.financiallist;
            };
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
       // E 初始化关联项目评审费

        //S 统计评审费用总和
       function  sumFinancial(vm){
    		var httpOptions = {
                    method: 'get',
                    url: rootPath + "/expertPaymentCount/html/sumfinancial",
                    params:{
                    	signId: vm.financial.signid
                    }
                };
                var httpSuccess = function success(response) {
                	vm.financial.stageCount = 0;
                	if(response.data){
                        vm.financial.stageCount = response.data;
                    }
                    $("#financialCount").html(common.htmlEscape(vm.financial.stageCount));
                };

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
               });
       }
     //E 统计评审费用总和

       //S 保存报销记录
       function savefinancial(vm){
    		   var httpOptions = {
    				   method : 'post',
    				   url : rootPath + "/expertPaymentCount",
    				   headers:{
    					   "contentType":"application/json;charset=utf-8"  //设置请求头信息
    				   },
    				   traditional: true,
    				   dataType : "json",
    				   data : angular.toJson(vm.financials),//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
    		   }
    		   var httpSuccess = function success(response) {
    			   common.requestSuccess({
    				   vm : vm,
    				   response : response,
    				   fn : function() {
    					   common.alert({
    						   vm: vm,
    						   msg: "操作成功",
    						   fn: function () {
    							   myrefresh();
    						   }
    					   })
    				   }
    			   });

    	   }

    	   common.http({
    		   vm : vm,
    		   $http : $http,
    		   httpOptions : httpOptions,
    		   success : httpSuccess
    	   });
       }
       //E 保存报销记录
        //刷新页面
        function myrefresh(){
        	 window.location.reload();
        }

        // begin#deleteexpertPaymentCount
        function deleteexpertPaymentCount(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_expertPaymentCount,
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                    	common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog :true,
                            fn: function () {
                            	vm.isSubmit = false;
                            	myrefresh();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        // end#deleteexpertPaymentCount

        //S_初始化grid(过滤已签收和已经完成的项目)
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/expertReview/findByOData", $("#searchform")),
                schema: common.kendoGridConfig().schema({
                    id: "id"
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10
            });
            // End:dataSource
            //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.signid)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"

                },
                {
				    field: "rowNumber",
				    title: "序号",
				    width: 50,
				    filterable : false,
				    template: "<span class='row-number'></span>"
				 },
                {
                    field: "expretCount",
                    title: "姓名",
                    width: 100,
                    filterable: false
                },

                {
                    field: "expretCount",
                    title: "身份证号",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "expretCount",
                    title: "开户行",
                    width: 80,
                    filterable: false,
                },
                {
                    field: "expretCount",
                    title: "银行账号",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "reviewCost",
                    title: "评审费（元）",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "reviewTaxes",
                    title: "应缴税",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "reviewTitle",
                    title: "项目名称",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "reviewDate",
                    title: "评审时间",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "reviewDate",
                    title: "函评时间",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "reviewDate",
                    title: "负责人",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "",
                    title: "操作",
                    width: 100,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                             item.signid
                            );
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound:dataBound,
                resizable: true
            };
        }//E_初始化grid

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('expertPaymentDetailCountCtrl', expertPaymentCount);

    expertPaymentCount.$inject = ['$location', 'expertPaymentCountSvc', '$state', '$http'];

    function expertPaymentCount($location, expertPaymentCountSvc, $state, $http) {
        var vm = this;
        vm.title = '专家缴税统计管理';
        vm.model = {};
        vm.financials = new Array;
        vm.sign = {}; //收文对象
        vm.financial = {};//财务对象
        vm.model.year = $state.params.year;
        vm.model.month = $state.params.month;


        //查看汇总
        vm.getExpertCoust = function () {
            $state.go('expertPaymentCountList', {year: vm.model.year, month: vm.model.month});
        }

        //按月份统计专家明细
        vm.countExpertCostDetail = function () {
            expertPaymentCountSvc.expertCostDetailTotal(vm, function (data) {
                vm.expertCostTotalInfo = data.reObj.expertCostTotalInfo;
                var trCount = $("#expertCostTable tr").length;
                for (var i = 1; i < trCount; i++) {
                    $("#option" + i).remove();
                }
                createExpertCostTable(vm.expertCostTotalInfo);
            });
        }

        activate();
        function activate() {
            if ($state.params.year) {
                vm.model.year = $state.params.year;
                vm.model.month = $state.params.month;
            } else {
                var date = new Date;
                var year = date.getFullYear();
                var month = date.getMonth() + 1;
                vm.model.year = year;
                vm.model.month = month;
            }
            expertPaymentCountSvc.expertCostDetailTotal(vm, function (data) {
                vm.expertCostTotalInfo = data.reObj.expertCostTotalInfo
                createExpertCostTable(vm.expertCostTotalInfo);
            });
        }

        //生成专家评审费明细表格
        function createExpertCostTable(expertCostTotalInfo) {
            var expertCostTr = "";
            var rowIndex = 0;
            if (expertCostTotalInfo.length > 0) {
                for (var i = 0; i < expertCostTotalInfo.length; i++) {
                    rowIndex++;
                    expertCostTr += "<tr id='option" + rowIndex + "'>";
                    // expertCostTr += "<td colspan='5'>";
                    if (expertCostTotalInfo[i].name.length == 2) {
                        expertCostTr += "<td  class='text-center'><strong>" + expertCostTotalInfo[i].name + "</strong></td>";
                    } else {
                        expertCostTr += "<td  class='text-center'><strong>" + expertCostTotalInfo[i].name + "</strong></td>";
                    }
                    expertCostTr += "<td  class='text-center'><strong>" + expertCostTotalInfo[i].expertNo + "</strong></td>";
                    // expertCostTr += "</td>";
                    expertCostTr += "<td class='text-center'>";
                    expertCostTr += expertCostTotalInfo[i].reviewcost;
                    expertCostTr += "</td>"
                    expertCostTr += "<td class='text-center'>";
                    expertCostTr += expertCostTotalInfo[i].reviewtaxes;
                    expertCostTr += "</td>"
                    expertCostTr += "<td  class='text-center'><strong>" + expertCostTotalInfo[i].monthTotal + "</strong></td>";
                    expertCostTr += "</tr>";
                    if (expertCostTotalInfo[i].expertCostDetailCountDtoList != undefined && expertCostTotalInfo[i].expertCostDetailCountDtoList.length > 0) {
                        for (var j = 0; j < expertCostTotalInfo[i].expertCostDetailCountDtoList.length; j++) {
                            rowIndex++;
                            var expertCostDetailTr = "";
                            expertCostDetailTr += "<tr id='option" + rowIndex + "'>";
                            expertCostDetailTr += "<td class='text-center' colspan='2'>";
                            expertCostDetailTr += expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewTitle == undefined ? "" : expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewTitle;
                            expertCostDetailTr += "</td>"
                            expertCostDetailTr += "<td class='text-center'>";
                            expertCostDetailTr += expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewType == undefined ? "" : expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewType;
                            expertCostDetailTr += "</td>"
                            expertCostDetailTr += "<td class='text-center'>";
                            if (expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewDate != undefined) {
                                expertCostDetailTr += expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewDate;
                            }
                            expertCostDetailTr += "</td>"
                            expertCostDetailTr += "<td class='text-center'>";
                            if (expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewDate != undefined) {
                                expertCostDetailTr += expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewDate;
                            }
                            expertCostDetailTr += "</td>"
                            expertCostDetailTr += "<td class='text-center'>";
                            expertCostDetailTr += expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewcost;
                            expertCostDetailTr += "</td>"
                            expertCostDetailTr += "<td class='text-center'>";
                            expertCostDetailTr += expertCostTotalInfo[i].expertCostDetailCountDtoList[j].reviewtaxes;
                            expertCostDetailTr += "</td>"
                            expertCostDetailTr += "</tr>";
                            expertCostTr += expertCostDetailTr;
                        }
                    }
                }
                $("#expertCostHead").after(expertCostTr);
            }
        }

        //打印
        vm.printFile = function () {
            var time = vm.model.year + vm.model.month;
            var url = rootPath + "/contents/libs/pdfjs-dist/web/viewer.html?version=" + (new Date()).getTime() + "&file=" + rootPath + "/expertSelected/printPreviewDetail/" + time;
            $("#iframePreview").attr("src", url);
            $("#previewModal").kendoWindow({
                width: "80%",
                height: "730px",
                title: "",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('expertRevConCountCtrl', expertRevConCount);

    expertRevConCount.$inject = ['$location', 'expertRevConCountSvc','$state','$http','bsWin'];

    function expertRevConCount($location, expertRevConCountSvc,$state,$http,bsWin) {
        var vm = this;
        vm.title = '专家评审基本情况统计';
        vm.model={};

        vm.expertRevConCount = function () {
            if(vm.model.reportType == 3){
                if(vm.model.beginTime==undefined || vm.model.beginTime=='' || vm.model.endTime==undefined || vm.model.endTime==''){
                    bsWin.alert("会议起止时间不能为空");
                    return;
                }
            }
            expertRevConCountSvc.expertRevConCount(vm,function(data){
                if(vm.model.reportType == 1){
                    vm.expertReviewConDtoList = data.reObj.expertReviewConDtoList;
                }else if(vm.model.reportType == 2){
                    vm.expertRevConSimDtoList = data.reObj.expertRevConSimDtoList;
                }else if(vm.model.reportType == 3){
                    vm.expertRevConCompDtoList = data.reObj.expertRevConCompDtoList;
                }
            });
        }

        vm.dropSlelectedCount = function () {
            if(vm.model.reportType == 1 || vm.model.reportType==2){
                var date=new Date;
                var year=date.getFullYear();
                var month=date.getMonth()+1;
                var day = date.getDate();
                month =(month<10 ? "0"+month:month);
                vm.model.beginTime = year.toString()+"-01-01";
                vm.model.endTime = year.toString()+"-"+month.toString()+"-"+day;
            }else if(vm.model.reportType == 3){
                vm.model.beginTime = getQuarterStartDate();
                vm.model.endTime = getQuarterEndDate();
            }
            expertRevConCountSvc.expertRevConCount(vm,function(data){
                if(vm.model.reportType == 1){
                    vm.expertReviewConDtoList = data.reObj.expertReviewConDtoList;
                }else if(vm.model.reportType == 2){
                    vm.expertRevConSimDtoList = data.reObj.expertRevConSimDtoList;
                }else if(vm.model.reportType == 3){
                    vm.expertRevConCompDtoList = data.reObj.expertRevConCompDtoList;
                }
            });
        }
        //获得本季度的开始日期
        function getQuarterStartDate() {
            var now = new Date(); //当前日期
            var nowYear = now.getFullYear(); //当前年
            var quarterStartDate = new Date(nowYear, getQuarterStartMonth(), 1);
            return formatDate(quarterStartDate);
        }
        //或的本季度的结束日期
        function getQuarterEndDate() {
            var now = new Date(); //当前日期
            var nowYear = now.getFullYear(); //当前年
            var quarterEndMonth = getQuarterStartMonth() + 2;
            var quarterStartDate = new Date(nowYear, quarterEndMonth,
                getMonthDays(quarterEndMonth));
            return formatDate(quarterStartDate);
        }

        //获得某月的天数
        function getMonthDays(myMonth) {
            var now = new Date(); //当前日期
            var nowYear = now.getYear(); //当前年
            var monthStartDate = new Date(nowYear, myMonth, 1);
            var monthEndDate = new Date(nowYear, myMonth + 1, 1);
            var days = (monthEndDate - monthStartDate) / (1000 * 60 * 60 * 24);
            return days;
        }

        //获得本季度的开始月份
        function getQuarterStartMonth() {
            var now = new Date(); //当前日期
            var nowMonth = now.getMonth(); //当前月
            var quarterStartMonth = 0;
            if (nowMonth < 3) {
                quarterStartMonth = 0;
            }
            if (2 < nowMonth && nowMonth < 6) {
                quarterStartMonth = 3;
            }
            if (5 < nowMonth && nowMonth < 9) {
                quarterStartMonth = 6;
            }
            if (nowMonth > 8) {
                quarterStartMonth = 9;
            }
            return quarterStartMonth;
        }

        //格式化日期：yyyy-MM-dd
        function formatDate(date) {
            var myyear = date.getFullYear();
            var mymonth = date.getMonth() + 1;
            var myweekday = date.getDate();
            if (mymonth < 10) {
                mymonth = "0" + mymonth;
            }
            if (myweekday < 10) {
                myweekday = "0" + myweekday;
            }
            return (myyear.toString() + "-" + mymonth.toString() + "-" + myweekday.toString());
        }


        //重置查询表单
        vm.formReset = function(){
            var reportType = vm.model.reportType;
            vm.model = {};
            vm.model.reportType = reportType;
        }
        activate();
        function activate() {
                var date=new Date;
                var year=date.getFullYear();
                var month=date.getMonth()+1;
                var day = date.getDate();
                month =(month<10 ? "0"+month:month);
                vm.model.beginTime = year.toString()+"-01-01";
                vm.model.endTime = year.toString()+"-"+month.toString()+"-"+day;
                vm.model.reportType=1;
                expertRevConCountSvc.expertRevConCount(vm,function(data){
                vm.expertReviewConDtoList = data.reObj.expertReviewConDtoList;
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('expertRevConCountSvc', expertRevConCount);

    expertRevConCount.$inject = ['$http'];

    function expertRevConCount($http) {
        var service = {
            expertRevConCount:expertRevConCount,                   //专家评审基本情况统计
        };

        return service;


        function expertRevConCount(vm,callBack) {
            if(vm.model.reportType==1){ //专家评审基本情况详细统计
                var httpOptions = {
                    method: 'post',
                    url: rootPath + "/expertSelected/expertReviewCondDetailCount",
                    data: vm.model
                }
            }else if(vm.model.reportType==2){
                var httpOptions = {//专家评审基本情况综合统计
                    method: 'post',
                    url: rootPath + "/expertSelected/expertReviewCondCount",
                    data: vm.model
                }
            }else if(vm.model.reportType==3){
                var httpOptions = {//专家评审基本情况不规则统计
                    method: 'post',
                    url: rootPath + "/expertSelected/expertReviewCompliCount",
                    data: vm.model
                }
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_专家评审基本情况详细统计

        //项目评审费用分类统计
        function projectCostClassifyCout(vm,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertSelected/proCostClassifyTotal",
                data: vm.model
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_项目评审费用分类统计

        //S_专家评审费用明细统计
        function expertCostDetailTotal(vm,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertSelected/expertCostDetailTotal",
                data: vm.model
        }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_专家评审费用明细统计

        //begin excelExport
        function excelExport(vm,exportData,fileName){
            var httpOptions ={
                method : 'post',
                url : rootPath + "/expertSelected/excelExport",
                headers : {
                    "contentType" : "application/json;charset=utf-8"
                },
                traditional : true,
                dataType : "json",
                responseType: 'arraybuffer',
                data : angular.toJson(exportData),
                params:{
                    fileName :fileName
                }

            }
            var httpSuccess = function success(response){
                fileName =fileName + ".xls";
                var fileType ="vnd.ms-excel";
                common.downloadReport(response.data , fileName , fileType);
            }
            common.http({
                vm : vm,
                $http : $http ,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }
        //end excelExport

      //检查是否为正整数
        function isUnsignedInteger(value){
            if((/^(\+|-)?\d+$/.test(value)) && value>0 ){
                return true;
            }else{
                return false;
            }
        }
       //S 初始化关联项目评审费
        function initFinancialProject(vm){
        	var httpOptions = {
                    method: 'get',
                    url: rootPath + "/expertPaymentCount/initfinancial",
                    params:{
                    	signid: vm.financial.signid
                    }
                };
                var httpSuccess = function success(response) {
                    vm.model = response.data.financialDto;
                    vm.financials = response.data.financiallist;
                };
                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });            
        }
       // E 初始化关联项目评审费
        
        //S 统计评审费用总和
       function  sumFinancial(vm){
    		var httpOptions = {
                    method: 'get',
                    url: rootPath + "/expertPaymentCount/html/sumfinancial",
                    params:{
                    	signId: vm.financial.signid
                    }
                };
                var httpSuccess = function success(response) {
                	vm.financial.stageCount = 0;
                	if(response.data){
                        vm.financial.stageCount = response.data;
                    }
                    $("#financialCount").html(common.htmlEscape(vm.financial.stageCount));
                };

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
               });   
       }
     //E 统计评审费用总和
       
       //S 保存报销记录
       function savefinancial(vm){
    		   var httpOptions = {
    				   method : 'post',
    				   url : rootPath + "/expertPaymentCount",
    				   headers:{
    					   "contentType":"application/json;charset=utf-8"  //设置请求头信息
    				   },
    				   traditional: true,
    				   dataType : "json",
    				   data : angular.toJson(vm.financials),//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
    		   }
    		   var httpSuccess = function success(response) {
    			   common.requestSuccess({
    				   vm : vm,
    				   response : response,
    				   fn : function() {
    					   common.alert({
    						   vm: vm,
    						   msg: "操作成功",
    						   fn: function () {
    							   myrefresh();
    						   }
    					   })
    				   }
    			   });
    		 
    	   }

    	   common.http({
    		   vm : vm,
    		   $http : $http,
    		   httpOptions : httpOptions,
    		   success : httpSuccess
    	   });
       }
       //E 保存报销记录
        //刷新页面
        function myrefresh(){
        	 window.location.reload();
        }

        // begin#deleteexpertPaymentCount
        function deleteexpertPaymentCount(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_expertPaymentCount,
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                    	common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog :true,
                            fn: function () {
                            	vm.isSubmit = false;
                            	myrefresh();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        // end#deleteexpertPaymentCount

        //S_初始化grid(过滤已签收和已经完成的项目)
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/expertReview/findByOData", $("#searchform")),
                schema: common.kendoGridConfig().schema({
                    id: "id"
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10
            });
            // End:dataSource
            //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.signid)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"

                },
                {
				    field: "rowNumber",
				    title: "序号",
				    width: 50,
				    filterable : false,
				    template: "<span class='row-number'></span>"
				 },
                {
                    field: "expretCount",
                    title: "姓名",
                    width: 100,
                    filterable: false
                },
               
                {
                    field: "expretCount",
                    title: "身份证号",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "expretCount",
                    title: "开户行",
                    width: 80,
                    filterable: false,
                },
                {
                    field: "expretCount",
                    title: "银行账号",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "reviewCost",
                    title: "评审费（元）",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "reviewTaxes",
                    title: "应缴税",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "reviewTitle",
                    title: "项目名称",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "reviewDate",
                    title: "评审时间",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "reviewDate",
                    title: "函评时间",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "reviewDate",
                    title: "负责人",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "",
                    title: "操作",
                    width: 100,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                             item.signid 
                            );
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound:dataBound,
                resizable: true
            };
        }//E_初始化grid

    }
})();
/**
 * 停用
 */
(function () {
    'use strict';

    angular.module('app').controller('financialManagerCtrl', financialManager);

    financialManager.$inject = ['bsWin', 'financialManagerSvc','$state','$http' , 'expertReviewSvc'];

    function financialManager(bsWin, financialManagerSvc,$state,$http , expertReviewSvc) {
        var vm = this;
        vm.title = '评审费录入';
        vm.financials = new Array;
        vm.financial = {};//财务对象
        vm.financial.businessId = $state.params.businessId;

        activate();
        function activate() {
            financialManagerSvc.initFinancialProject(vm.financial.businessId,function(data){
                vm.model = data.financialDto;
                vm.financials = data.financiallist;
                vm.countCost();
            });
        }

        /**
         * 计算总金额
         */
        vm.countCost = function(){
            if(vm.financials && vm.financials.length > 0){
                var totalCost = 0;
                angular.forEach(vm.financials,function (f,i) {
                    if(f.charge){
                        totalCost += f.charge;
                    }
                })
                $("#financialCount").html(common.htmlEscape(totalCost));
            }
        }

        //跳转到评审会发放表页面
        vm.findStageCostTable = function(){
            expertReviewSvc.initReview(vm.financial.businessId , "", function (data){
                vm.expertReview = data;
                vm.reviewTitle = data.reviewTitle;
                vm.payDate = data.payDate;
                vm.expertSelectedDtoList = data.expertSelectedDtoList;
                $("#stageCostWindow").kendoWindow({
                    width: "70%",
                    height: "600px",
                    title: "评审费用统计表",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            } )
        	// $state.go('findStageCostTable',{signid: vm.financial.signid});
        }


        /**
         * 导出excel
         */
        vm.exportExcel = function (){
            var fileName = vm.reviewTitle + "(" + vm.payDate + ")";
            financialManagerSvc.exportExcel(vm , vm.financial.businessId ,fileName );
        }


        //S 输入数字校验
        vm.inputIntegerValue = function(checkValue,idSort){
        	if(financialManagerSvc.isUnsignedInteger(checkValue)){
        		$("#errorsUnmber" + idSort).html("");
        	}else{
        		$("#errorsUnmber" + idSort).html("只能输入数字");
        	}
        }
        //E 输入数字校验
        
        //添加报销记录
       vm.addFinancial =  function () {
           var financial = {};
           financial.chargeType = "1";
           financial.businessId = vm.model.businessId;
           financial.projectName = vm.model.projectName;
           financial.paymentData = vm.model.paymentData;
           if(!vm.financials){
               vm.financials = [];
           }
           vm.financials.push(financial);
        }// end
       
       //保存报销记录
       vm.saveFinancial = function (){
           financialManagerSvc.savefinancial(vm.financials,function(data){
               if(data.flag || data.reCode == 'ok'){
                   vm.financials = data.reObj;
                   if(!vm.model.paymentData){
                       vm.model.paymentData = vm.financials[0].paymentData;
                   }
                   vm.countCost();
                   bsWin.success(data.reMsg);
               }else{
                   bsWin.error(data.reMsg);
               }
           });
       }

       //删除报销记录
       vm.deleteFinancial = function(){
           var isChecked = $("#financialsTable input[name='financialsCheck']:checked");
           if (isChecked.length < 1) {
               common.alert({
                   vm: vm,
                   msg: "请选择要删除的记录！"
               })
           } else {
               var ids = [];
               for (var i = 0; i < isChecked.length; i++) {
                   vm.financials.forEach(function (f, number) {
                       if (f.id == undefined || isChecked[i].value == f.id ) {
                           vm.financials.splice(number, 1);
                       }
                       if(isChecked[i].value){
                           ids.push(isChecked[i].value);
                       }
                   });
               }
               if(ids.length > 0){
                   var idsStr = ids.join(",");
                   financialManagerSvc.deleteFinancialManager(idsStr,function(data){
                       vm.countCost();
                       bsWin.alert("操作成功！！");
                   });
               }
           }
       }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('financialManagerEditCtrl', financialManager);

    financialManager.$inject = ['$location', 'financialManagerSvc', '$state' , 'signSvc' , 'bsWin', 'expertReviewSvc' , 'adminSvc' , 'addCostSvc'];

    function financialManager($location, financialManagerSvc, $state , signSvc , bsWin , expertReviewSvc , adminSvc , addCostSvc) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '评审费录入';
        vm.sign = {}; //收文对象
        vm.financial = {};//财务对象
        //初始化查询时间范围
        vm.model = {};
        vm.model.beginTime = (new Date()).halfYearAgo();
        vm.model.endTime = (new Date()).Format("yyyy-MM-dd");

        vm.isuserExist = false;
        vm.id = $state.params.id;
        vm.financial.businessId = $state.params.businessId;
        vm.costType = $state.params.costType;
      
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '评审费统计管理';
        }
        //评审费放表业务对象
        vm.businessFlag = {
       		 expertReviews : [],   	
       }

        activate();
        function activate() {
            if(!vm.exist){
                vm.page = lgx.page.init({
                    id: "demo5", get: function (o) {
                        var skip ;
                        vm.price ={};

                        //oracle的分页不一样。
                        if (o.skip != 0) {
                            skip = o.skip + 1
                        } else {
                            skip = o.skip
                        }
                        vm.price.skip = skip;//页码
                        vm.price.size = parseInt(o.size) + parseInt(o.skip);//页数

                        financialManagerSvc.initfinancial(vm, function (data) {
                            vm.stageCountList = [];
                            if(data){
                                vm.stageCountList = data.value;
                                vm.page.callback(data.count);//请求回调时传入总记录数
                            }

                        });
                    }
                });
                vm.exist = true;
            }else{
                vm.page.selPage(1);
            }
            //查询评审部门
            adminSvc.initSignList(function(data){
                if(data.flag || data.reCode == 'ok'){
                    vm.orgDeptList = data.reObj;
                }
            });
        }

        /**
         * 评审费录入
         * @param object
         */
        vm.showCostWindow = function(object,id){
            addCostSvc.initAddCost(vm,vm.costType,object,id);
        }

        /**
         * 查询
         */
        vm.queryFinancl = function (){
            //统计评审费信息
            financialManagerSvc.initfinancial(vm, function (data) {
                vm.stageCountList = [];
                if (data) {
                    vm.stageCountList = data.value;
                    vm.page.callback(data.count);//请求回调时传入总记录数
                    vm.page.selPage(1);          //跳回第一页
                }
            });
        }

        /**
         * 重置
         */
        vm.resetQuery = function(){
            vm.model = {};
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').factory('financialManagerSvc', financialManager);

    financialManager.$inject = ['$http'];

    function financialManager($http) {
        var url_financialManager = rootPath + "/financialManager", url_back = '#/financialManagerList';
        var service = {
            grid: grid, //评审费录入列表
            deleteFinancialManager: deleteFinancialManager,			//删除报销记录
            savefinancial:savefinancial,							//保存报销记录
            sumFinancial:sumFinancial,								//统计评审费用总和
            initFinancialProject:initFinancialProject,				//初始化关联项目评审费
            initAssistProject : initAssistProject,                  //初始化项目协审费
            isUnsignedInteger:isUnsignedInteger,					//	数字校验
            stageCostCountList:stageCostCountList,		            //评审费用统计列表
            exportExcel : exportExcel ,                             //评审费用统计表导出
            initfinancial :initfinancial ,                          //初始化评审录入列表

        };

        return service;

        //begin initfinancial
        function initfinancial(vm , callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + '/expertSelected/findProjectReviewCost',
                data: vm.model,
                params: {
                    skip: vm.price.skip,
                    size: vm.price.size,
                },
            }

            var httpSuccess = function success(response){
                if(callBack !=undefined && typeof  callBack == "function"){
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end initfinancial


        //begin reportExcel
        function exportExcel(vm , businessId , fileName){
            var   fileName = escape(encodeURIComponent(fileName));
            window.open(rootPath + '/financialManager/exportExcel?fileName=' + fileName + '&businessId=' + businessId)
            /* var httpOptions = {
             method : 'post' ,
             url : rootPath + '/financialManager/exportExcel',
             headers : {
             "contentType" : "application/json;charset=utf-8"
             },
             traditional : true,
             dataType : "json",
             responseType: 'arraybuffer',
             data : angular.toJson(exportData),
             params:{
             fileName :fileName
             }
             }

             var httpSuccess = function success(response){
             fileName =fileName + ".xls";
             var fileType ="vnd.ms-excel";
             common.downloadReport(response.data , fileName , fileType);
             }

             common.http({
             vm : vm ,
             $http : $http ,
             httpOptions : httpOptions,
             success : httpSuccess
             });*/
        }
        //end reportExcel


        //S 评审费用统计列表
        function stageCostCountList(vm){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/financialManager/findByOData",
            };
            var httpSuccess = function success(response) {
                vm.stageCountList = response.data.value;

            };
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //E 评审费用统计列表
        //检查是否为正整数
        function isUnsignedInteger(value){
            if((/^(\+|-)?\d+$/.test(value)) && value>0 ){
                return true;
            }else{
                return false;
            }
        }
        //S 初始化关联项目评审费
        function initFinancialProject(financial, callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/financialManager/initfinancial",        
                params: {
                    businessId: financial.businessId,
                    businessType: financial.businessType,
                    chargeType : financial.chargeType
                }
            };
            var httpSuccess = function success(response) {
                if(callBack != undefined && typeof  callBack == "function"){
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        // E 初始化关联项目评审费

        //S_初始化关联项目协审费
        function initAssistProject(businessId, callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/financialManager/initfinancial",
                params: {
                    businessId: businessId,
                    businessType: "SIGN"
                }
            };
            var httpSuccess = function success(response) {
                if(callBack != undefined && typeof  callBack == "function"){
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_initAssistProject

        //S 统计评审费用总和
        function  sumFinancial(vm , businessId){
            var httpOptions = {
                method: 'get',
                url: rootPath + "/financialManager/html/sumfinancial",
                params:{
                    businessId: businessId
                }
            };
            var httpSuccess = function success(response) {
                vm.financial.stageCount = 0;
                if(response.data){
                    vm.financial.stageCount = response.data;
                }
                $("#financialCount").html(common.htmlEscape(vm.financial.stageCount));
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //E 统计评审费用总和

        //S 保存报销记录
        function savefinancial(financials , callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/financialManager",
                headers:{
                    "contentType":"application/json;charset=utf-8"  //设置请求头信息
                },
                traditional: true,
                dataType : "json",
                data : angular.toJson(financials),//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
            }
            var httpSuccess = function success(response) {
               if(callBack != undefined && typeof  callBack == "function"){
                   callBack(response.data);
               }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }
        //E 保存报销记录

        // begin#deleteFinancialManager
        function deleteFinancialManager(id,callBack) {
            var httpOptions = {
                method: 'delete',
                url: rootPath + "/financialManager",
                data: id
            };

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        // end#deleteFinancialManager

        //S_初始化grid 评审费录入列表
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/expertSelected/findProjectReviewCost", $("#searchform")),
                schema: common.kendoGridConfig().schema({
                    id: "signid",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    field: "",
                    title: "",
                    width: 30,
                    template: function (item) {

                        if(item.isLightUp == '4'){//项目暂停
                            return $('#span4').html();
                        }else{
                            switch (item.processState){
                                case 9 :  //已结办
                                    return $('#span5').html();
                                    break ;
                                case 4:  //已发文
                                case 5 :  //已发文
                                    return $('#span2').html();
                                    break ;
                                case 7:   //已发送存档
                                case 8 :  //已发送存档
                                    return $('#span3').html();
                                    break;
                                default : //在办
                                    return $('#span1').html();
                                    break;
                            }
                        }

                    }
                },
                /* {
                 template: function (item) {
                 return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.signid)
                 },
                 filterable: false,
                 width: 40,
                 title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"

                 },*/
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable : false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "projectname",
                    title: "项目名称",
                    width: 140,
                    filterable: false
                },

                {
                    field: "builtcompanyname",
                    title: "建设单位",
                    width: 180,
                    filterable: false,
                },
                {
                    field: "reviewstage",
                    title: "项目阶段",
                    width: 80,
                    filterable: false,
                },
                {
                    field: "principal",
                    title: "项目负责人",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "totalCost",
                    title: "计划专家费用",
                    width: 160,
                    filterable: false,
                    template: function (item) {
                        // return "";
                        return "<button ng-click='vm.reviewCostWindow('" +item.businessId + "') '>"+item.totalCost+"</button>";
                    }
                },
                {
                    field: "signdate",
                    title: "签收日期",
                    width: 120,
                    filterable: false,
                    format :  "{0: yyyy-MM-dd}"
                },

            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound:dataBound,
                resizable: true
            };
        }//E_初始化grid

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('proCostClassifyCountCtrl', proCostClassifyCount);

    proCostClassifyCount.$inject = ['$location', 'projectCostCountSvc','adminSvc','$state','$http'];

    function proCostClassifyCount($location, projectCostCountSvc,adminSvc,$state,$http) {
        var vm = this;
        vm.title = '项目评审费分类统计';
        vm.model={};
        vm.page=0;
        vm.proReviewClassifyDetailDtoList=[];
        vm.proReviewClassifyCountDtoList=[];
        vm.model.beginTime = (new Date()).halfYearAgo();
        vm.model.endTime = new Date().Format("yyyy-MM-dd");
        //查看汇总
        vm.projectCostCountList = function () {
            $state.go('projectCostCountList');
        }

        vm.initFinancial = function (businessId) {
            var url = $state.href('financialManager',{businessId:businessId});
            window.open(url,'_blank');
        }

        vm.proCostCount = function () {
            projectCostCountSvc.projectCostClassifyCout(vm,function(data){
   /*             vm.proReviewClassifyDetailDtoList = data.reObj.proReviewClassifyDetailDtoList;*/
                vm.proReviewClassifyCountDtoList = data.reObj.proReviewClassifyCountDtoList;
                if (data.reObj != undefined) {
                    data.reObj.proReviewClassifyDetailDtoList.forEach(function (obj, x) {
                        vm.proReviewClassifyDetailDtoList.push(obj);
                    });
                }
                if (data.reObj.proReviewClassifyDetailDtoList != undefined && data.reObj.proReviewClassifyDetailDtoList.length !=0) {
                    vm.page++;
                    vm.proCostCount();
                } else {

                }
            });
        }
        vm.proCostClassifyCount = function () {
            vm.proReviewClassifyDetailDtoList=[];
            vm.proReviewClassifyCountDtoList=[];
            vm.page=0;
            vm.proCostCount();

        }

        //重置查询表单
        vm.formReset = function(){
            vm.model = {};
        }

        activate();
        function activate() {
            adminSvc.initSignList(function(data){
                if(data.flag || data.reCode == 'ok'){
                    vm.orgDeptList = data.reObj;
                }
            });
            vm.proCostCount();

        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('projectCostCountCtrl', projectCostCount);

    projectCostCount.$inject = ['$location', 'projectCostCountSvc','adminSvc','$state','$http','expertReviewSvc','bsWin'];

    function projectCostCount($location, projectCostCountSvc,adminSvc,$state,$http,expertReviewSvc,bsWin) {
        var vm = this;
        vm.title = '项目评审费统计';
        vm.model={};
        vm.model.beginTime = (new Date()).halfYearAgo();
        vm.model.endTime = (new Date()).Format("yyyy-MM-dd");

        //项目评审费分类统计
        vm.proCostClassifyCountList = function(){
            $state.go('proCostClassifyCountList');
        }

        vm.proCostCount = function () {
            projectCostCountSvc.projectCostTotal(vm,function(data){
                vm.projectReviewCostDtoList = data.reObj.projectReviewCostDtoList;
            });
        }

        //查看项目的专家详细信息
        vm.queyCostWindow=function (data) {
            expertReviewSvc.initReview(data.businessId, "", function (data) {
                vm.titleName = "专家评审费";
                vm.expertReview = data;
                vm.reviewTitle = data.reviewTitle;
                vm.payDate = data.payDate;
                vm.businessId=vm.expertReview.businessId;
                vm.expertSelectedDtoList = data.expertSelectedDtoList;
                if( vm.expertSelectedDtoList && vm.expertSelectedDtoList.length >0){
                    vm.showReviewCost = true;
                    $("#expertCostWindow").kendoWindow({
                        width: "70%",
                        height: "600px;",
                        title: vm.titleName ,
                        visible: false,
                        modal: true,
                        closable: true,
                        actions: ["Pin", "Minimize", "Maximize", "close"]
                    }).data("kendoWindow").center().open();
                }else{
                    bsWin.alert("没有专家");
                }

            });

        }

        // vm.initFinancial = function (businessId) {
        //     var url = $state.href('financialManager',{businessId:businessId});
        //     window.open(url,'_blank');
        // }

        /**
         * 导出excel
         */
        vm.costExportExcel = function (){
            var fileName = vm.reviewTitle + "(" + vm.payDate + ")";
            projectCostCountSvc.exportExcel(vm , vm.businessId ,fileName );
        }
        //重置查询表单
        vm.formReset = function(){
            vm.model = {};
        }

        activate();
        function activate() {
            adminSvc.initSignList(function(data){
                if(data.flag || data.reCode == 'ok'){
                    vm.orgDeptList = data.reObj;
                }
            });
            projectCostCountSvc.projectCostTotal(vm,function(data){
                vm.projectReviewCostDtoList = data.reObj.projectReviewCostDtoList;
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('projectCostCountSvc', projectCostCount);

    projectCostCount.$inject = ['$http'];

    function projectCostCount($http) {
        var url_expertPaymentCount = rootPath + "/expertPaymentCount", url_back = '#/expertPaymentCountList';
        var service = {
            grid: grid,
            projectCostTotal:projectCostTotal,                         //项目评审费用统计
            projectCostClassifyCout:projectCostClassifyCout,            //项目费用分类统计
            excelExport:excelExport,                                //专家汇总统计导出
            exportExcel:exportExcel                                    //导出excel表
        };

        return service;

        //项目评审费用统计
        function projectCostTotal(vm,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertSelected/projectCostTotal",
                data: vm.model
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_项目评审费用统计

        //项目评审费用分类统计
        function projectCostClassifyCout(vm,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertSelected/proCostClassifyTotal?page="+vm.page,
                data: vm.model,
               /* params : {queryData : vm.model ,  page : vm.page}*/
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_项目评审费用分类统计

        //S_专家评审费用明细统计
        function expertCostDetailTotal(vm,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertSelected/expertCostDetailTotal",
                data: vm.model
        }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_专家评审费用明细统计

        //begin excelExport
        function excelExport(vm,exportData,fileName){
            var httpOptions ={
                method : 'post',
                url : rootPath + "/expertSelected/excelExport",
                headers : {
                    "contentType" : "application/json;charset=utf-8"
                },
                traditional : true,
                dataType : "json",
                responseType: 'arraybuffer',
                data : angular.toJson(exportData),
                params:{
                    fileName :fileName
                }

            }
            var httpSuccess = function success(response){
                fileName =fileName + ".xls";
                var fileType ="vnd.ms-excel";
                common.downloadReport(response.data , fileName , fileType);
            }
            common.http({
                vm : vm,
                $http : $http ,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }
        //end excelExport

      //检查是否为正整数
        function isUnsignedInteger(value){
            if((/^(\+|-)?\d+$/.test(value)) && value>0 ){
                return true;
            }else{
                return false;
            }
        }
       //S 初始化关联项目评审费
        function initFinancialProject(vm){
        	var httpOptions = {
                    method: 'post',
                    url: rootPath + "/expertPaymentCount/initfinancial",
                    params:{
                    	businessId: vm.financial.signid,
                        businessType:"SIGN"
                    }
                };
                var httpSuccess = function success(response) {
                    vm.model = response.data.financialDto;
                    vm.financials = response.data.financiallist;
                };
                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });            
        }
       // E 初始化关联项目评审费
        
        //S 统计评审费用总和
       function  sumFinancial(vm){
    		var httpOptions = {
                    method: 'get',
                    url: rootPath + "/expertPaymentCount/html/sumfinancial",
                    params:{
                    	signId: vm.financial.signid
                    }
                };
                var httpSuccess = function success(response) {
                	vm.financial.stageCount = 0;
                	if(response.data){
                        vm.financial.stageCount = response.data;
                    }
                   $("#financialCount").html(common.htmlEscape(vm.financial.stageCount));
                };

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
               });   
       }
     //E 统计评审费用总和
       
       //S 保存报销记录
       function savefinancial(vm){
    		   var httpOptions = {
    				   method : 'post',
    				   url : rootPath + "/expertPaymentCount",
    				   headers:{
    					   "contentType":"application/json;charset=utf-8"  //设置请求头信息
    				   },
    				   traditional: true,
    				   dataType : "json",
    				   data : angular.toJson(vm.financials),//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
    		   }
    		   var httpSuccess = function success(response) {
    			   common.requestSuccess({
    				   vm : vm,
    				   response : response,
    				   fn : function() {
    					   common.alert({
    						   vm: vm,
    						   msg: "操作成功",
    						   fn: function () {
    							   myrefresh();
    						   }
    					   })
    				   }
    			   });
    		 
    	   }

    	   common.http({
    		   vm : vm,
    		   $http : $http,
    		   httpOptions : httpOptions,
    		   success : httpSuccess
    	   });
       }
       //E 保存报销记录
        //刷新页面
        function myrefresh(){
        	 window.location.reload();
        }

        // begin#deleteexpertPaymentCount
        function deleteexpertPaymentCount(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_expertPaymentCount,
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                    	common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog :true,
                            fn: function () {
                            	vm.isSubmit = false;
                            	myrefresh();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        // end#deleteexpertPaymentCount

        //S_初始化grid(过滤已签收和已经完成的项目)
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/expertReview/findByOData", $("#searchform")),
                schema: common.kendoGridConfig().schema({
                    id: "id"
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10
            });
            // End:dataSource
            //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.signid)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"

                },
                {
				    field: "rowNumber",
				    title: "序号",
				    width: 50,
				    filterable : false,
				    template: "<span class='row-number'></span>"
				 },
                {
                    field: "expretCount",
                    title: "姓名",
                    width: 100,
                    filterable: false
                },
               
                {
                    field: "expretCount",
                    title: "身份证号",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "expretCount",
                    title: "开户行",
                    width: 80,
                    filterable: false,
                },
                {
                    field: "expretCount",
                    title: "银行账号",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "reviewCost",
                    title: "评审费（元）",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "reviewTaxes",
                    title: "应缴税",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "reviewTitle",
                    title: "项目名称",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "reviewDate",
                    title: "评审时间",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "reviewDate",
                    title: "函评时间",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "reviewDate",
                    title: "负责人",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "",
                    title: "操作",
                    width: 100,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                             item.signid 
                            );
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound:dataBound,
                resizable: true
            };
        }//E_初始化grid

        //begin reportExcel
        function exportExcel(vm , businessId , fileName) {
            var fileName = escape(encodeURIComponent(fileName));
            window.open(rootPath + '/financialManager/costExportExcel?fileName=' + fileName + '&businessId=' + businessId)
        }
        //end reportExcel

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('proReviewConditionCtrl', proReviewCondition);

    proReviewCondition.$inject = ['$location', 'proReviewConditionSvc','$state','$http'];

    function proReviewCondition($location, proReviewConditionSvc,$state,$http) {
        var vm = this;
        vm.title = '项目评审情况统计';
        vm.model={};
        vm.total={};
         //项目评审情况统计
        vm.proReviewConCount = function () {
            //console.log(vm.model);
            if(vm.model.beginTime != null && vm.model.beginTime!=""){
                var timeArr =  vm.model.beginTime.split("-");
                vm.year = timeArr[0];
                vm.begMonth = timeArr[1];
                if(vm.begMonth.charAt(0)=='0'){
                    vm.begMonth = vm.begMonth.charAt(1);
                }
            }
            if(vm.model.endTime != null && vm.model.endTime != ""){
                var timeArr =  vm.model.endTime.split("-");
                vm.year = timeArr[0];
                vm.endMonth = timeArr[1];
                if(vm.endMonth.charAt(0)=='0'){
                    vm.endMonth = vm.endMonth.charAt(1);
                }
            }
            proReviewConditionSvc.proReviewConCount(vm,function(data){
                vm.protReviewConditionList = data.reObj.protReviewConditionList;
                calTotal();
            });
        }

        //重置查询表单
        vm.formReset = function(){
            vm.model = {};
        }

        //自定义加法运算
        function addNum (num1, num2) {
            var sq1,sq2,m;
            try {
                sq1 = num1.toString().split(".")[1].length;
            }
            catch (e) {
                sq1 = 0;
            }
            try {
                sq2 = num2.toString().split(".")[1].length;
            }
            catch (e) {
                sq2 = 0;
            }
            m = Math.pow(10,Math.max(sq1, sq2));
            return (num1 * m + num2 * m) / m;
        }

        function calTotal(){
            vm.total.projectcount = 0;
            vm.total.declarevalue = 0;
            vm.total.authorizevalue = 0;
            vm.total.ljhj = 0;
            vm.total.hjl = 0;
            vm.protReviewConditionList.forEach(function(p ,index){
                if(p.proCount != undefined){
                    vm.total.projectcount += p.proCount;
                }
                if(p.declareValue != undefined){
                    vm.total.declarevalue = addNum(vm.total.declarevalue ,p.declareValue);
                }
                if(p.authorizeValue != undefined){
                    vm.total.authorizevalue = addNum(vm.total.authorizevalue ,p.authorizeValue);
                }
                if(p.ljhj != undefined){
                    vm.total.ljhj = addNum(vm.total.ljhj ,p.ljhj);
                }
            });
            vm.total.hjl =   Math.round(vm.total.ljhj/vm.total.declarevalue  * 10000) / 100;
        }

        vm.isBeginTime=function () {
            vm.byear=vm.model.beginTime.split("-")[0];
            vm.begMonth=vm.model.beginTime.split("-")[1];
            vm.endMonth=vm.model.endTime.split("-")[1];
            vm.year=vm.model.endTime.split("-")[0];
        }
        
        activate();
        function activate() {
                var date=new Date;
                var year=date.getFullYear();
                var month=date.getMonth()+1;
                var day = date.getDate();
                month =(month<10 ? "0"+month:month);
                vm.model.beginTime = year.toString()+"-"+"01";
                vm.model.endTime = year.toString()+"-"+month.toString();
                vm.year = year;
                vm.begMonth = "1";
                vm.endMonth = month;
                vm.begDay = "31";
                vm.endDay = day;
                proReviewConditionSvc.proReviewConCount(vm,function(data){
                vm.protReviewConditionList = data.reObj.protReviewConditionList;
                calTotal();
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('proReviewConditionSvc', proReviewCondition);

    proReviewCondition.$inject = ['$http'];

    function proReviewCondition($http) {
        var service = {
            proReviewConCount:proReviewConCount                  //项目评审情况统计
        };
        return service;

        //项目评审情况统计
        function proReviewConCount(vm,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/expertSelected/proReviewConditionCount",
                data: vm.model
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_项目评审情况统计

    }
})();
(function () {
    'use strict';

    angular.module('app').factory('flowSvc', flow);

    flow.$inject = ['$http', '$state', 'bsWin'];

    function flow($http, $state, bsWin) {
        var service = {
            initFlowData: initFlowData,         // 初始化流程数据
            getFlowInfo: getFlowInfo,           // 获取流程信息
            commit: commit,                     // 提交
            rollBackToLast: rollBackToLast,     // 回退到上一环节
            rollBack: rollBack,                 // 回退到选定环节
            initBackNode: initBackNode,         // 初始化回退环节信息
            suspendFlow: suspendFlow,           // 流程挂起
            activeFlow: activeFlow,             // 重启流程
            deleteFlow: deleteFlow,             // 流程终止
            historyData: historyData,           // 获取流程处理数据
            transTask : transTask,              //任务转办
        };
        return service;

        function transTask(taskId,oldUserId,newUserId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/flow/taskTransferAssignee",
                params: {
                    taskId: taskId,
                    oldUserId:oldUserId,
                    newUserId:newUserId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // S_初始化流程数据
        function initFlowData(vm) {
            var dataSource={};
            if(vm.flow != undefined){
                var processInstanceId = vm.flow.processInstanceId;
                if (angular.isUndefined(vm.flow.hideFlowImg)|| vm.flow.hideFlowImg == false) {
                    vm.picture = rootPath + "/flow/processInstance/img/"+ processInstanceId;
                }
                dataSource = new kendo.data.DataSource({
                    type: 'odata',
                    transport: common.kendoGridConfig().transport(rootPath+ "/flow/processInstance/history/" + processInstanceId),
                    schema: common.kendoGridConfig().schema({
                        id: "id"
                    }),
                    rowNumber: true,
                    headerCenter: true
                });
            }
            var columns = [{
                field: "",
                title: "序号",
                template: "<span class='row-number'></span>",
                width: 50
            }, {
                field: "nodeNameValue",
                title: "环节名称",
                width: 120,
                filterable: false
            }, {
                field: "displayName",
                title: "处理人",
                width: 80,
                filterable: false
            }, {
                field: "startTime",
                title: "开始时间",
                width: 120,
                filterable: false,
                format: "{0: yyyy-MM-dd HH:mm:ss}"
            }, {
                field: "endTime",
                title: "结束时间",
                width: 120,
                filterable: false,
                format: "{0: yyyy-MM-dd HH:mm:ss}"
            }, {
                field: "durationStr",
                title: "处理时长",
                width: 120,
                filterable: false
            }, {
                field: "message",
                title: "处理信息",
                width: 300,
                filterable: false
            }];
            // End:column

            vm.historygrid = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                dataBound: function () {
                    var rows = this.items();
                    $(rows).each(function (i) {
                        if (i == rows.length - 1) {
                            initBackNode(vm);
                        }
                        $(this).find(".row-number").html(i + 1);
                    });
                }
            };
            // vm.historygrid.dataSource.read();
        }// E_初始化流程数据

        // S_获取流程处理记录
        function historyData(vm){
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath+ "/flow/processInstance/history/" + vm.instanceId),
                schema: common.kendoGridConfig().schema({
                    id: "hctId"
                }),
                rowNumber: true,
                headerCenter: true,
            });
            var columns = [{
                field: "",
                title: "序号",
                template: "<span class='row-number'></span>",
                width: 50
            }, {
                field: "nodeNameValue",
                title: "环节名称",
                width: "20%",
                filterable: false
            }, {
                field: "displayName",
                title: "处理人",
                width: "15%",
                filterable: false
            }, {
                field: "startTime",
                title: "开始时间",
                width: "15%",
                filterable: false,
                format: "{0: yyyy-MM-dd HH:mm:ss}"
            }, {
                field: "endTime",
                title: "结束时间",
                width: "15%",
                filterable: false,
                format: "{0: yyyy-MM-dd HH:mm:ss}"
            }, {
                field: "durationStr",
                title: "处理时长",
                width: "15%",
                filterable: false
            }, {
                field: "message",
                title: "处理信息",
                width: "20%",
                filterable: false
            }];
            // End:column

            vm.historygrid = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                dataBound: function () {
                    var rows = this.items();
                    $(rows).each(function (i) {
                        $(this).find(".row-number").html(i + 1);
                    });
                }
            };
        }// E_historyData

        // S_getFlowInfo
        function getFlowInfo(taskId,processInstanceId,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/flow/processInstance/flowNodeInfo",
                params: {
                    taskId: taskId,
                    processInstanceId:processInstanceId
                }
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }// E_getFlowInfo

        // S_提交下一步
        function commit(isCommit,flowObj,callBack) {
            common.initJqValidation($("#flow_form"));
            var isValid = $("#flow_form").valid();
            if (isValid) {
                isCommit = true;
                var httpOptions = {
                    method: 'post',
                    url: rootPath + "/flow/commit",
                    data: flowObj
                }
                var httpSuccess = function success(response) {
                    isCommit = false;
                    if (callBack != undefined && typeof callBack == 'function') {
                        callBack(response.data);
                    }
                }
                common.http({
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess,
                    onError: function (response) {
                        isCommit = false;
                    }
                });
            }
        }// E_提交下一步

        // S_回退到上一步
        function rollBackToLast(flowModel,isCommit,callBack) {
            isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/flow/rollbacklast",
                data: flowModel
            }
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {
                    isCommit = false;
                }
            });
        }// E_回退到上一步

        // S_回退到指定环节
        function rollBack(vm) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/flow/rollbacklast",
                data: vm.flow
            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        common.alert({
                            vm: vm,
                            msg: response.data.reMsg
                        })
                    }
                })
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }// E_回退到指定环节

        // S_初始化回退环节信息
        function initBackNode(vm) {
            vm.backNode = [];
            // 初始化可回退环节
            var datas = vm.historygrid.dataSource.data()
            var totalNumber = datas.length;
            for (var i = 0; i < totalNumber; i++) {
                if (datas[i].assignee && datas[i].endTime) {
                    vm.backNode.push({
                        "activitiId": datas[i].activityId,
                        "activitiName": datas[i].activityName,
                        "assignee": datas[i].assignee
                    });
                }
            }
        }// E_初始化回退环节信息

        // S_流程挂起
        function suspendFlow(vm, businessKey) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/flow/suspend/" + businessKey,
                data : vm.projectStop
            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        common.alert({
                            vm: vm,
                            msg: response.data.reMsg,
                            closeDialog: true,
                            fn: function () {
                                if (response.data.reCode == "error") {
                                    vm.isCommit = false;
                                } else {
                                    window.parent.$("#spwindow").data("kendoWindow").close();
                                    vm.gridOptions.dataSource.read();
                                }
                            }
                        })
                    }
                })
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function () {
                    vm.isCommit = false;
                }
            });
        }// E_流程挂起

        // S_流程激活
        function activeFlow(vm, businessKey) {
            vm.isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/flow/active/" + businessKey
            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        common.alert({
                            vm: vm,
                            msg: response.data.reMsg,
                            closeDialog: true,
                            fn: function () {
                                if (response.data.reCode == "error") {
                                    vm.isCommit = false;
                                } else {
                                    vm.gridOptions.dataSource.read();
                                }
                            }
                        })
                    }
                })
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function () {
                    vm.isCommit = false;
                }
            });
        }// E_流程激活

        // S_终止流程
        function deleteFlow(processId,comment,callBack) {
            if(!processId){
                bsWin.alert("获取流程实例失败！");
            }else{
                var httpOptions = {
                    method: 'post',
                    url: rootPath + "/flow/deleteFLow",
                    params: {
                        processInstanceId : processId,
                        comment : comment
                    }
                }
                var httpSuccess = function success(response) {
                    if (callBack != undefined && typeof callBack == 'function') {
                        callBack(response.data);
                    }
                }
                common.http({
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
            }
        }// E_终止流程

    }
})();

/**
 * Created by ldm on 2017/9/5 0005.
 */
(function () {
    'use strict';

    angular.module('app').controller('flowDealCtrl', flowDeal);

    flowDeal.$inject = ['$scope','ideaSvc','sysfileSvc', '$state', 'bsWin', 'topicSvc', 'flowSvc', 'bookBuyBusinessSvc',
        'expertReviewSvc','assertStorageBusinessSvc','pauseProjectSvc', 'archivesLibrarySvc','reviewProjectAppraiseSvc',
        'addSuppLetterSvc','monthlyMultiyearSvc','annountmentSvc','workprogramSvc'];

    function flowDeal($scope,ideaSvc,sysfileSvc, $state, bsWin, topicSvc, flowSvc, bookBuyBusinessSvc,expertReviewSvc,
                      assertStorageBusinessSvc,pauseProjectSvc, archivesLibrarySvc,reviewProjectAppraiseSvc,
                      addSuppLetterSvc,monthlyMultiyearSvc,annountmentSvc,workprogramSvc) {
        var vm = this;
        vm.title = '待办任务处理';
        vm.businessKey = $state.params.businessKey;            // 业务ID
        vm.processKey = $state.params.processKey;              // 流程定义值
        vm.taskId = $state.params.taskId;                      // 任务ID
        vm.instanceId = $state.params.instanceId;              // 流程实例ID
        vm.currentFlow;//当前流程信息
        vm.showFlag = {
            businessNext: false,                              //是否显示下一环节处理人tr
            businessTr: false,                                //是否显示业务处理tr
            tabSysFile:false,                                 //是否显示附件tab
        }

        activate();
        function activate() {
            $('#myTab li').click(function (e) {
                var aObj = $("a", this);
                e.preventDefault();
                aObj.tab('show');
                var showDiv = aObj.attr("for-div");
                $(".tab-pane").removeClass("active").removeClass("in");
                $("#" + showDiv).addClass("active").addClass("in").show(500);
            })
            //共用方法
            //1、显示流程图
            vm.picture = rootPath + "/flow/processInstance/img/" + vm.instanceId;
            //2、历史处理记录
            flowSvc.historyData(vm);
            //3、查询当前环节信息
            flowSvc.getFlowInfo(vm.taskId, vm.instanceId, function (data) {
                vm.flow = data;
                //有任务ID，说明任务还没办理
                if(vm.flow.taskId){
                    vm.currentFlow = data;
                    //如果是结束环节，则不显示下一环节信息
                    if (vm.flow.end) {
                        vm.showFlag.nodeNext = false;
                    } else {
                        //初始化环节信息
                        switch (vm.processKey) {
                            case flowcommon.getFlowDefinedKey().TOPIC_FLOW:
                                topicSvc.initFlowNode(vm.flow, vm.showFlag, vm);
                                break;
                        }
                    }
                }else{
                    bsWin.alert("该任务已处理！",function(){
                        $state.go('gtasks');
                    });
                }
            });
            //附件加载类型，0表示不加载，1表示根据mainId加载，2表示根据businessId加载
            var sysFileLoadType = 0;
            //4、各自显示模块
            switch (vm.processKey) {
                case flowcommon.getFlowDefinedKey().TOPIC_FLOW:     //课题研究流程
                    topicSvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().ASSERT_STORAGE_FLOW:    //资产入库流程
                    assertStorageBusinessSvc.initFlowDeal(vm);
                    sysFileLoadType = 2;
                    break;
                case flowcommon.getFlowDefinedKey().BOOKS_BUY_FLOW:         //图书采购流程
                    bookBuyBusinessSvc.initFlowDeal(vm);
                    sysFileLoadType = 2;
                    break;
                case flowcommon.getFlowDefinedKey().PROJECT_STOP_FLOW:      //项目暂停流程
                    pauseProjectSvc.initFlowDeal(vm);
                    sysFileLoadType = 2;
                    break;
                case flowcommon.getFlowDefinedKey().FLOW_ARCHIVES:          //档案借阅流程
                    vm.minDate = (new Date()).Format("yyyy-MM-dd")
                    archivesLibrarySvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().FLOW_APPRAISE_REPORT:   //优秀申请报告流程
                    reviewProjectAppraiseSvc.initFlowDeal(vm);
                    break;
                case flowcommon.getFlowDefinedKey().FLOW_SUPP_LETTER:       //拟补充资料函流程
                    addSuppLetterSvc.initFlowDeal(vm);
                    sysFileLoadType = 2;
                    break;
                case flowcommon.getFlowDefinedKey().MONTHLY_BULLETIN_FLOW:  //月报简报流程
                    monthlyMultiyearSvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().ANNOUNT_MENT_FLOW:       //通知公告
                    annountmentSvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().WORK_HIS_FLOW:          //重做工作方案
                    workprogramSvc.initFlowDeal(vm,$scope,true);
                    break;
            }
            // 初始化上传附件
            if(sysFileLoadType == 1){
                sysfileSvc.findByMianId(vm.businessKey,function(data){
                    if(data && data.length > 0){
                        vm.showFlag.tabSysFile = true;
                        vm.sysFileList = data;
                        sysfileSvc.initZtreeClient(vm,$scope);//树形图
                    }
                });
            }else if(sysFileLoadType == 2){
                sysfileSvc.findByBusinessId(vm.businessKey,function(data){
                    if(data && data.length > 0){
                        vm.showFlag.tabSysFile = true;
                        vm.sysFileList = data;
                        sysfileSvc.initZtreeClient(vm,$scope);//树形图
                    }
                });
            }
            //5、初始化个人常用意见
            ideaSvc.initIdea(vm);
        }

        /***************  S_初始化附件上传控件  ***************/
        vm.initFileUpload = function (mainType, sysfileType, sysBusiType) {
            vm.sysFile = {
                businessId: vm.businessKey,
                mainId: vm.businessKey,
                mainType: mainType,
                sysfileType: sysfileType,
                sysBusiType: sysBusiType,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm
            });
        }
        //附件下载
        vm.commonDownloadSysFile = function (sysFileId) {
            sysfileSvc.downloadFile(sysFileId);
        }
        /***************  E_初始化附件上传控件  ***************/

        /***************  S_个人意见  ***************/
        vm.ideaEdit = function (options) {
            if (!angular.isObject(options)) {
                options = {};
            }
            ideaSvc.initIdeaData(vm, options);
        }
        vm.selectedIdea = function () {
            vm.flow.dealOption = vm.chooseIdea;
        }
        /***************  E_个人意见  ***************/

        /***************  S_流程处理  ***************/
        vm.commitFlow = function () {
            if (vm.flow.isSuspended) {
                bsWin.error("该流程目前为暂停状态，不能进行流转操作！");
                return;
            }
            flowSvc.commit(vm.isCommit, vm.flow, function (data) {
                if (data.flag || data.reCode == "ok") {
                    bsWin.success("操作成功！", function () {
                        $state.go('agendaTasks');
                    })
                } else {
                    bsWin.alert(data.reMsg);
                }
            });
        }

        //S_流程回退
        vm.backFlow = function () {
            common.initJqValidation($("#flow_form"));
            var isValid = $("#flow_form").valid();
            if (isValid) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "确认回退吗？",
                    onOk: function () {
                        flowSvc.rollBackToLast(vm.flow, vm.isCommit, function (data) {
                            vm.isCommit = false;
                            if (data.flag || data.reCode == "ok") {
                                bsWin.alert("回退成功！", function () {
                                    $state.go('agendaTasks');
                                });
                            } else {
                                bsWin.alert(data.reMsg);
                            }
                        }); // 回退到上一个环节
                    }
                });
            }
        }
        /***************  E_流程处理  ***************/

        /***************  S_专家评分，评审费发放  ***************/
        // 编辑专家评分
        vm.editSelectExpert = function (id) {
            vm.scoreExpert = {};
            $.each(vm.model.expertReviewDto.expertSelectedDtoList,function (i,scopeEP) {
                if(scopeEP.id == id){
                    vm.scoreExpert = angular.copy(scopeEP);
                    return ;
                }
            })

            $("#star_"+vm.scoreExpert.id).raty({
                number:5,
                score: function () {
                    $(this).attr("data-num", angular.isUndefined(vm.scoreExpert.score)?0:vm.scoreExpert.score);
                    return $(this).attr("data-num");
                },
                starOn: '../contents/libs/raty/lib/images/star-on.png',
                starOff: '../contents/libs/raty/lib/images/star-off.png',
                starHalf: '../contents/libs/raty/lib/images/star-half.png',
                readOnly: false,
                halfShow: true,
                hints   : ['不合格','合格','中等','良好','优秀'],
                size: 34,
                click: function (score, evt) {
                    vm.scoreExpert.score = score;
                }
            });

            $("#score_win").kendoWindow({
                width: "820px",
                height: "365px",
                title: "编辑-专家星级",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Close"]
            }).data("kendoWindow").center().open();
        }

        // 关闭专家评分
        vm.closeEditMark = function () {
            window.parent.$("#score_win").data("kendoWindow").close();
        }

        // 保存专家评分
        vm.saveMark = function () {
            if(!vm.scoreExpert.score || vm.scoreExpert.score == 0){
                bsWin.alert("请对专家进行评分！");
            }else{
                expertReviewSvc.saveMark(vm.scoreExpert,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        angular.forEach(vm.model.expertReviewDto.expertSelectedDtoList,function (scopeEP,index) {
                            if(scopeEP.id == vm.scoreExpert.id){
                                scopeEP.score = vm.scoreExpert.score;
                                scopeEP.describes = vm.scoreExpert.describes;
                            }
                        })
                        bsWin.success("保存成功！",function(){
                            vm.closeEditMark();
                        });
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            }
        }

        //确定实际参加会议的专家
        vm.affirmJoinExpert = function () {
            if(vm.model.expertReviewDto && vm.model.expertReviewDto.expertSelectedDtoList){
                vm.confirmEPList = vm.model.expertReviewDto.expertSelectedDtoList;
                $("#confirmJoinExpert").kendoWindow({
                    width: "75%",
                    height: "600px",
                    title: "参加评审会专家确认",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            }else{
                bsWin.alert("该项目没有评审专家！");
            }
        }

        //未参加改为参加
        vm.updateToJoin = function () {
            var isCheck = $("#notJoinExpertTable input[name='notJoinExpert']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择要改为参加会议的专家");
            } else {
                var ids = [];
                for (var i = 0; i < isCheck.length; i++) {
                    ids.push(isCheck[i].value);
                }
                expertReviewSvc.updateJoinState(vm.expertReviewDto.id,"","", ids.join(','), '9',vm.isCommit,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        //1、更改专家评分和评审费发放的专家
                        vm.reFleshJoinState(ids,'9');
                        bsWin.success("操作成功！");
                    }else{
                        bsWin.success(data.reMsg);
                    }
                });
            }
        }

        //参加改为未参加
        vm.updateToNotJoin = function () {
            var isCheck = $("#joinExpertTable input[name='joinExpert']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择未参加会议的专家");
            } else {
                var ids = [];
                for (var i = 0; i < isCheck.length; i++) {
                    ids.push(isCheck[i].value);
                }
                expertReviewSvc.updateJoinState(vm.expertReviewDto.id,"","", ids.join(','), '0',vm.isCommit,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        vm.reFleshJoinState(ids,'0');
                        bsWin.success("操作成功！");
                    }else{
                        bsWin.success(data.reMsg);
                    }
                });
            }
        }

        //更新参加未参加状态
        vm.reFleshJoinState = function(ids,state){
            $.each(ids,function(i, obj){
                //1、删除已确认的专家
                $.each(vm.confirmEPList,function(index, epObj){
                    if(obj == epObj.id){
                        epObj.isJoin = state;
                    }
                })
            })
            expertReviewSvc.refleshBusinessEP(vm.model.workPlanDto.id,function(data){
                vm.model.workPlanDto.expertDtoList = data;
            });
        }

        // 计算应纳税额
        vm.countTaxes = function (expertReview) {
            if(expertReview == undefined){
                return ;
            }
            if(expertReview.payDate == undefined){
                bsWin.alert("请选择评审费发放日期");
                return ;
            }
            var reg = /^(\d{4}-\d{1,2}-\d{1,2})$/;
            if(!reg.exec(expertReview.payDate)){
                bsWin.alert("请输入正确的日期格式");
                return ;
            }
            if (expertReview.expertSelectedDtoList == undefined || expertReview.expertSelectedDtoList.length == 0) {
                bsWin.alert("该方案还没评审专家");
                return;
            }
            common.initJqValidation($('#payform'));
            var isValid = $('#payform').valid();
            if(isValid){
                bsWin.confirm({
                    title: "询问提示",
                    message: "确认提交么？提交之后不可修改，请核对正确。",
                    onOk: function () {
                        //自动保存
                        expertReviewSvc.savePayment(expertReview, vm.isCommit,true, function (data) {
                            if (data.flag || data.reCode == "ok") {
                                var resultMap = data.reObj, totalCost = 0, totaoTaxes = 0;
                                for (var k = 0, lk = expertReview.expertSelectedDtoList.length; k < lk; k++) {
                                    var v = expertReview.expertSelectedDtoList[k];
                                    if ((v.isConfrim == '9' || v.isConfrim == 9) && (v.isJoin == '9' || v.isJoin == 9)) {
                                        for (var i = 0, l = resultMap.length; i < l; i++) {
                                            var epId = resultMap[i].EXPERTID;
                                            if (v.expertDto.expertID == epId) {
                                                v.reviewTaxes = parseFloat(resultMap[i].MONTAXES == undefined ? 0 : resultMap[i].MONTAXES).toFixed(2);
                                                v.totalCost = (parseFloat(v.reviewCost) + parseFloat(v.reviewTaxes)).toFixed(2);
                                                totalCost = parseFloat(totalCost) + parseFloat(v.reviewCost);
                                                totaoTaxes = parseFloat(totaoTaxes) + parseFloat(v.reviewTaxes);
                                            }
                                        }
                                    }
                                }

                                expertReview.reviewCost = parseFloat(totalCost).toFixed(2);
                                expertReview.reviewTaxes = parseFloat(totaoTaxes).toFixed(2);
                                expertReview.totalCost = (parseFloat(totalCost) + parseFloat(totaoTaxes)).toFixed(2);
                                bsWin.alert("操作成功！", function () {
                                    vm.isCommit = false;
                                    expertReview.state = '9';
                                });
                            } else {
                                bsWin.alert(data.reMsg);
                            }
                        });
                    }
                });
            }else{
                bsWin.alert("请正确填写专家评审费信息！");
            }

        }

        /**
         * 保存评审费，不包括计税
         * @param expertReview
         */
        vm.savePayment = function(expertReview){
            if (expertReview == undefined) {
                return;
            }
            if (expertReview.expertSelectedDtoList == undefined || expertReview.expertSelectedDtoList.length == 0) {
                bsWin.alert("该方案还没有选择评审专家，请先选取评审专家！");
                return;
            }
            common.initJqValidation($('#payform'));
            var isValid = $('#payform').valid();
            if (isValid) {
                //自动保存
                expertReviewSvc.savePayment(expertReview, vm.isCommit,false, function (data) {
                    if (data.flag || data.reCode == "ok") {
                        var resultMap = data.reObj, totalCost = 0, totaoTaxes = 0;
                        for (var k = 0, lk = expertReview.expertSelectedDtoList.length; k < lk; k++) {
                            var v = expertReview.expertSelectedDtoList[k];
                            if ((v.isConfrim == '9' || v.isConfrim == 9) && (v.isJoin == '9' || v.isJoin == 9)) {
                                for (var i = 0, l = resultMap.length; i < l; i++) {
                                    var epId = resultMap[i].EXPERTID;
                                    if (v.expertDto.expertID == epId) {
                                        v.reviewTaxes = parseFloat(resultMap[i].MONTAXES == undefined ? 0 : resultMap[i].MONTAXES).toFixed(2);
                                        v.totalCost = (parseFloat(v.reviewCost) + parseFloat(v.reviewTaxes)).toFixed(2);
                                        totalCost = parseFloat(totalCost) + parseFloat(v.reviewCost);
                                        totaoTaxes = parseFloat(totaoTaxes) + parseFloat(v.reviewTaxes);
                                    }
                                }
                            }
                        }

                        expertReview.reviewCost = parseFloat(totalCost).toFixed(2);
                        expertReview.reviewTaxes = parseFloat(totaoTaxes).toFixed(2);
                        expertReview.totalCost = (parseFloat(totalCost) + parseFloat(totaoTaxes)).toFixed(2);
                        bsWin.alert("操作成功！", function () {
                            vm.isCommit = false;
                        });
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("请正确填写专家评审费信息！");
            }
        }

        // 关闭专家费用
        vm.closeEditPay = function () {
            window.parent.$("#payment").data("kendoWindow").close();
        }

        /*****************S_单位评分******************/
        vm.editUnitScore = function (id) {
            $("#star").raty({
                number: 5,
                score: function () {
                    $(this).attr("data-num", angular.isUndefined(vm.model.unitScoreDto.score) ? 0 : vm.model.unitScoreDto.score);
                    return $(this).attr("data-num");
                },
                starOn: '../contents/libs/raty/lib/images/star-on.png',
                starOff: '../contents/libs/raty/lib/images/star-off.png',
                starHalf: '../contents/libs/raty/lib/images/star-half.png',
                readOnly: false,
                halfShow: true,
                hints: ['不合格', '合格', '中等', '良好', '优秀'],
                size: 34,
                click: function (score, evt) {
                    vm.model.unitScoreDto.score = score;
                }
            });

            $("#unitscore_win").kendoWindow({
                width: "820px",
                height: "365px",
                title: "编辑-单位星级",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Close"]
            }).data("kendoWindow").center().open();

        }
        //保存单位评分
        vm.saveUnit=function () {
            if (!vm.model.unitScoreDto.score || vm.model.unitScoreDto.score == 0) {
                bsWin.alert("请对单位进行评分！");
            } else {
                companySvc.saveUnit(vm.model.unitScoreDto, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        bsWin.success("保存成功！", function () {
                            vm.closeEditUnit();
                        });
                    } else {
                        bsWin.alert(data.reMsg);
                    }

                });
            }

        }
        // 关闭单位评分
        vm.closeEditUnit = function () {
            window.parent.$("#unitscore_win").data("kendoWindow").close();
        }

        /*****************E_单位评分******************/



        /***************  s_月报简报  ***************/
        vm.updateFlow=function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if(isValid){
                monthlyMultiyearSvc.updatemonthlyMultiyear(vm.suppletter,function(data){
                    if (data.flag || data.reCode == "ok") {
                        vm.commitFlow();
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("缺少部分没有填写，请仔细检查");
            }

        }

        /***************  E_月报简报  ***************/

        /***************  s_档案借阅  ***************/
        vm.isTime=function(){
            if(vm.model.readDate!="" && vm.model.readDate!=undefined ){
                if(vm.flow.businessMap.RETURNDATE<vm.model.readDate){
                    bsWin.alert("归还时间不能小于查阅时间",function () {
                        vm.flow.businessMap.RETURNDATE=vm.model.readDate;
                        $scope.$apply();
                    })
                }
            }
        }
        /***************  E_档案借阅  ***************/

    }
})();


/**
 * Created by ldm on 2017/9/5 0005.
 */
(function () {
    'use strict';

    angular.module('app').controller('flowDetailCtrl', flowDetail);

    flowDetail.$inject = ['$scope','$state','topicSvc','flowSvc','sysfileSvc','bookBuyBusinessSvc',
        'assertStorageBusinessSvc','pauseProjectSvc','archivesLibrarySvc','reviewProjectAppraiseSvc',
        'addSuppLetterSvc','monthlyMultiyearSvc','annountmentSvc','workprogramSvc'];

    function flowDetail($scope,$state,topicSvc,flowSvc,sysfileSvc,bookBuyBusinessSvc,
                        assertStorageBusinessSvc,pauseProjectSvc,archivesLibrarySvc,
                        reviewProjectAppraiseSvc,addSuppLetterSvc,monthlyMultiyearSvc,annountmentSvc,workprogramSvc) {
        var vm = this;
        vm.title = '在办任务详情页';
        vm.businessKey = $state.params.businessKey;            // 业务ID
        vm.processKey = $state.params.processKey;              // 流程定义值
        vm.taskId = $state.params.taskId;                      // 任务ID
        vm.instanceId = $state.params.instanceId;              // 流程实例ID

        vm.showFlag={
            businessNext : false,                              //是否显示下一环节处理人tr
            businessTr : false,                                //是否显示业务处理tr
            tabSysFile : false,                                //显示附件
            buttBack : false,                                  //显示回退按钮
        }
        activate();
        function activate() {
            $('#myTab li').click(function (e) {
                var aObj = $("a", this);
                e.preventDefault();
                aObj.tab('show');
                var showDiv = aObj.attr("for-div");
                $(".tab-pane").removeClass("active").removeClass("in");
                $("#" + showDiv).addClass("active").addClass("in").show(500);
            })
            //共用方法
            //1、显示流程图
            if(vm.taskId){
                vm.picture = rootPath + "/flow/processInstance/img/"+ vm.instanceId;
            }
            //2、历史处理记录
            flowSvc.historyData(vm);

            var sysFileLoadType = 0;
            //2、各自显示模块
            switch (vm.processKey){
                case flowcommon.getFlowDefinedKey().TOPIC_FLOW:     //课题研究流程
                    //3、查询当前环节信息
                    flowSvc.getFlowInfo(vm.taskId, vm.instanceId, function (data) {
                        vm.flow = data;
                        //有任务ID，说明任务还没办理
                        if(vm.flow.taskId){
                            vm.currentFlow = data;
                            //如果是结束环节，则不显示下一环节信息
                            if (vm.flow.end) {
                                vm.showFlag.nodeNext = false;
                            } else {
                                //初始化环节信息
                                switch (vm.processKey) {
                                    case flowcommon.getFlowDefinedKey().TOPIC_FLOW:
                                        topicSvc.initFlowNode(vm.flow, vm.showFlag, vm);
                                        break;
                                }
                            }
                        }
                    });
                    topicSvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().BOOKS_BUY_FLOW:     //图书采购流程
                    bookBuyBusinessSvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().ASSERT_STORAGE_FLOW:
                    assertStorageBusinessSvc.initFlowDeal(vm);
                    break;
                case flowcommon.getFlowDefinedKey().PROJECT_STOP_FLOW:      //项目暂停流程
                    pauseProjectSvc.initFlowDeal(vm );
                    sysFileLoadType = 2;
                    break;
                case flowcommon.getFlowDefinedKey().FLOW_ARCHIVES:          //档案借阅流程
                    archivesLibrarySvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().FLOW_APPRAISE_REPORT:   //优秀申请报告流程
                    reviewProjectAppraiseSvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().FLOW_SUPP_LETTER:       //拟补充资料函流程
                    addSuppLetterSvc.initFlowDeal(vm);
                    sysFileLoadType = 2;
                    break;
                case flowcommon.getFlowDefinedKey().MONTHLY_BULLETIN_FLOW:       //月报简报流程
                    monthlyMultiyearSvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().ANNOUNT_MENT_FLOW:       //通知公告
                    annountmentSvc.initFlowDeal(vm);
                    vm.parentLink = "#annountment";
                    vm.parentName="通知公告管理";
                    vm.title = "通知公告审批信息";
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().WORK_HIS_FLOW:          //重做工作方案
                    workprogramSvc.initFlowDeal(vm,$scope,false);
                    break;
            }
            // 初始化上传附件
            if(sysFileLoadType == 1){
                sysfileSvc.findByMianId(vm.businessKey,function(data){
                    if(data && data.length > 0){
                        vm.showFlag.tabSysFile = true;
                        vm.sysFileList = data;
                        sysfileSvc.initZtreeClient(vm,$scope);//树形图
                    }
                });
            }else if(sysFileLoadType == 2){
                sysfileSvc.findByBusinessId(vm.businessKey,function(data){
                    if(data && data.length > 0){
                        vm.showFlag.tabSysFile = true;
                        vm.sysFileList = data;
                        sysfileSvc.initZtreeClient(vm,$scope);//树形图
                    }
                });
            }
        }

    }
})();


/**
 * Created by ldm on 2017/9/5 0005.
 */
(function () {
    'use strict';

    angular.module('app').controller('flowEndCtrl', flowEnd);

    flowEnd.$inject = ['$scope','$state','topicSvc','flowSvc','sysfileSvc','bookBuyBusinessSvc',
        'assertStorageBusinessSvc','pauseProjectSvc','archivesLibrarySvc','reviewProjectAppraiseSvc',
        'addSuppLetterSvc','monthlyMultiyearSvc','annountmentSvc','workprogramSvc'];

    function flowEnd($scope,$state,topicSvc,flowSvc,sysfileSvc,bookBuyBusinessSvc,assertStorageBusinessSvc,
                     pauseProjectSvc,archivesLibrarySvc,reviewProjectAppraiseSvc,addSuppLetterSvc,
                     monthlyMultiyearSvc,annountmentSvc,workprogramSvc) {
        var vm = this;
        vm.title = '待办任务处理';
        vm.businessKey = $state.params.businessKey;            // 业务ID
        vm.processKey = $state.params.processKey;              // 流程定义值
        vm.instanceId = $state.params.instanceId;              // 流程实例ID

        vm.showFlag={
            businessNext : false,                              //是否显示下一环节处理人tr
            businessTr : false,                                //是否显示业务处理tr
            tabSysFile : false,                                //显示附件
            buttBack : false,                                  //显示回退按钮
        }
        activate();
        function activate() {
            $('#myTab li').click(function (e) {
                var aObj = $("a", this);
                e.preventDefault();
                aObj.tab('show');
                var showDiv = aObj.attr("for-div");
                $(".tab-pane").removeClass("active").removeClass("in");
                $("#" + showDiv).addClass("active").addClass("in").show(500);
            })
            //共用方法
            //1、历史处理记录
            flowSvc.historyData(vm);
            var sysFileLoadType = 0;
            //2、各自显示模块
            switch (vm.processKey){
                case flowcommon.getFlowDefinedKey().TOPIC_FLOW:             //课题研究流程
                    topicSvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().BOOKS_BUY_FLOW:         //图书采购流程
                    bookBuyBusinessSvc.initFlowDeal(vm);
                    sysFileLoadType = 2;
                    break;
                case flowcommon.getFlowDefinedKey().ASSERT_STORAGE_FLOW:    //资产入库流程
                    assertStorageBusinessSvc.initFlowDeal(vm);
                    sysFileLoadType = 2;
                    break;
                case flowcommon.getFlowDefinedKey().PROJECT_STOP_FLOW:      //项目暂停流程
                    pauseProjectSvc.initFlowDeal(vm);
                    sysFileLoadType = 2;
                    break;
                case flowcommon.getFlowDefinedKey().FLOW_ARCHIVES:          //档案借阅流程
                    archivesLibrarySvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().FLOW_APPRAISE_REPORT:   //优秀申请报告流程
                    reviewProjectAppraiseSvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().FLOW_SUPP_LETTER:       //拟补充资料函流程
                    addSuppLetterSvc.initFlowDeal(vm);
                    sysFileLoadType = 2;
                    break;
                case flowcommon.getFlowDefinedKey().MONTHLY_BULLETIN_FLOW:  //月报简报流程
                    monthlyMultiyearSvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().ANNOUNT_MENT_FLOW:       //通知公告
                    annountmentSvc.initFlowDeal(vm);
                    sysFileLoadType = 1;
                    break;
                case flowcommon.getFlowDefinedKey().WORK_HIS_FLOW:          //重做工作方案
                    workprogramSvc.initFlowDeal(vm,$scope,true);
                    break;
            }
            //5、附件
            // 初始化上传附件
            if(sysFileLoadType == 1){
                sysfileSvc.findByMianId(vm.businessKey,function(data){
                    if(data && data.length > 0){
                        vm.showFlag.tabSysFile = true;
                        vm.sysFileList = data;
                        sysfileSvc.initZtreeClient(vm,$scope);//树形图
                    }
                });
            }else if(sysFileLoadType == 2){
                sysfileSvc.findByBusinessId(vm.businessKey,function(data){
                    if(data && data.length > 0){
                        vm.showFlag.tabSysFile = true;
                        vm.sysFileList = data;
                        sysfileSvc.initZtreeClient(vm,$scope);//树形图
                    }
                });
            }
        }

    }
})();


(function () {
    'use strict';

    /**
     * 流程通用基础类
     */
    var signNode = {
        SIGN_ZR: "SIGN_ZR",                //填报
        SIGN_QS: "SIGN_QS",                //签收
        SIGN_ZHB: "SIGN_ZHB",              //综合部审批
        SIGN_FGLD_FB: "SIGN_FGLD_FB",      //分管副主任审批
        SIGN_BMFB1: "SIGN_BMFB1",          //部门分办1
        SIGN_BMFB2: "SIGN_BMFB2",          //部门分办2
        SIGN_BMFB3: "SIGN_BMFB3",          //部门分办3
        SIGN_BMFB4: "SIGN_BMFB4",          //部门分办4
        SIGN_XMFZR1: "SIGN_XMFZR1",        //项目负责人办理1
        SIGN_XMFZR2: "SIGN_XMFZR2",        //项目负责人办理2
        SIGN_XMFZR3: "SIGN_XMFZR3",        //项目负责人办理3
        SIGN_XMFZR4: "SIGN_XMFZR4",        //项目负责人办理4
        SIGN_BMLD_SPW1: "SIGN_BMLD_SPW1",  //部长审批1
        SIGN_BMLD_SPW2: "SIGN_BMLD_SPW2",  //部长审批2
        SIGN_BMLD_SPW3: "SIGN_BMLD_SPW3",  //部长审批3
        SIGN_BMLD_SPW4: "SIGN_BMLD_SPW4",  //部长审批4
        SIGN_FGLD_SPW1: "SIGN_FGLD_SPW1",  //分管副主任审批1
        SIGN_FGLD_SPW2: "SIGN_FGLD_SPW2",  //分管副主任审批2
        SIGN_FGLD_SPW3: "SIGN_FGLD_SPW3",  //分管副主任审批3
        SIGN_FGLD_SPW4: "SIGN_FGLD_SPW4",  //分管副主任审批4
        SIGN_FW: "SIGN_FW",                //发文申请
        SIGN_QRFW: "SIGN_QRFW",            //项目负责人确认发文
        SIGN_BMLD_QRFW_XB:"SIGN_BMLD_QRFW_XB",  //协办部长审批发文
        SIGN_BMLD_QRFW: "SIGN_BMLD_QRFW",  //部长审批发文
        SIGN_FGLD_QRFW_XB : "SIGN_FGLD_QRFW_XB", //协办分管领导审批发文
        SIGN_FGLD_QRFW: "SIGN_FGLD_QRFW",  //分管领导审批发文
        SIGN_ZR_QRFW: "SIGN_ZR_QRFW",      //主任审批发文
        SIGN_FWBH: "SIGN_FWBH",            //生成发文编号
        SIGN_CWBL: "SIGN_CWBL",            //财务办理
        SIGN_GD: "SIGN_GD",                //归档
        SIGN_DSFZR_QRGD: "SIGN_DSFZR_QRGD",//第二负责人确认
        SIGN_QRGD: "SIGN_QRGD"              //最终归档
    };

    /**
     * 课题研究流程环节参数
     */
    var topicNode ={
        TOPIC_JHTC : "TOPIC_JHTC",                //计划提出
        TOPIC_BZSH_JH : "TOPIC_BZSH_JH",          //部长审核
        TOPIC_FGLD_JH : "TOPIC_FGLD_JH",          //副主任审核
        TOPIC_ZRSH_JH : "TOPIC_ZRSH_JH",          //主任审定
        TOPIC_BFGW : "TOPIC_BFGW",                //报发改委审批
        TOPIC_LXDW : "TOPIC_LXDW",                //联系合作单位
        TOPIC_QDHT : "TOPIC_QDHT",                //签订合同
        TOPIC_YJSS : "TOPIC_YJSS",                //课题研究实施
        TOPIC_NBCS : "TOPIC_NBCS",                //内部初审
        TOPIC_GZFA : "TOPIC_GZFA",                //提出成果鉴定会（或论证会）方案
        TOPIC_BZSH_FA : "TOPIC_BZSH_FA",          //部长审核
        TOPIC_FGLD_FA : "TOPIC_FGLD_FA",          //副主任审核
        TOPIC_ZRSH_FA : "TOPIC_ZRSH_FA",          //主任审定
        TOPIC_CGJD : "TOPIC_CGJD",                //召开成果鉴定会
        TOPIC_KTBG : "TOPIC_KTBG",                //完成课题报告
        TOPIC_BZSH_BG : "TOPIC_BZSH_BG",          //部长审核
        TOPIC_FGLD_BG : "TOPIC_FGLD_BG",          //副主任审核
        TOPIC_ZRSH_BG : "TOPIC_ZRSH_BG",          //主任审定
        TOPIC_KTJT : "TOPIC_KTJT",                //课题结题
        TOPIC_BZSH_JT : "TOPIC_BZSH_JT",          //部长审核
        TOPIC_FGLD_JT : "TOPIC_FGLD_JT",          //副主任审核
        TOPIC_ZRSH_JT : "TOPIC_ZRSH_JT",          //主任审定
        TOPIC_YFZL : "TOPIC_YFZL",                //印发资料
        TOPIC_ZLGD : "TOPIC_ZLGD",                //资料归档
    }

    /**
     * 资产入库流程环节参数
     */
    var assertStorageNode ={
            ASSERT_STORAGE_APPLY : "ASSERT_STORAGE_APPLY",    //资产入库申请
        ASSERT_STORAGE_BZSH : "ASSERT_STORAGE_BZSH",          //部长审批
        ASSERT_STORAGE_ZHBSH : "ASSERT_STORAGE_ZHBSH",        //综合部意见
        ASSERT_STORAGE_ZXLDSH : "ASSERT_STORAGE_ZXLDSH"       //中心领导审批
        }

    /**
     * 图书采购流程环节参数
     */
    var booksBuyNode ={
        BOOK_LEADER_CGQQ : "BOOK_LEADER_CGQQ",    //各项目负责人/部门提出购买图书请求
        BOOK_BZSP : "BOOK_BZSP",                 //部长审核
        BOOK_FGFZRSP : "BOOK_FGFZRSP",          //分管副主任审批
        BOOK_ZXZRSP : "BOOK_ZXZRSP",            //中心主任审批
        BOOK_YSRK : "BOOK_YSRK"                 //中心主任审批
    }

    //流程定义值
    var flowDefinedKey = {
        FINAL_SIGN_FLOW : "FINAL_SIGN_FLOW",            //项目签收流程
        TOPIC_FLOW : "TOPIC_FLOW",                      //课题研究流程
        BOOKS_BUY_FLOW : "BOOKS_BUY_FLOW",              //图书采购流程
        ASSERT_STORAGE_FLOW : "ASSERT_STORAGE_FLOW",    //资产入库流程
        PROJECT_STOP_FLOW : "PROJECT_STOP_FLOW",        //项目暂停流程
        FLOW_ARCHIVES : "FLOW_ARCHIVES",                //档案归档流程
        FLOW_APPRAISE_REPORT : "FLOW_APPRAISE_REPORT",  //优秀评审报告申报流程
        FLOW_SUPP_LETTER : "FLOW_SUPP_LETTER",          //拟补充资料函流程
        MONTHLY_BULLETIN_FLOW : "MONTHLY_BULLETIN_FLOW",//月报简报流程
        ANNOUNT_MENT_FLOW : "ANNOUNT_MENT_FLOW",        //通知公告流程
        WORK_HIS_FLOW : "WORK_HIS_FLOW",                //重做工作方案
    }

    var service = {
        getFlowDefinedKey : function(){
            return flowDefinedKey;               //流程定义值
        },
        getSignFlowNode: function(){
            return signNode;
        },                                        //项目签收流程环节
        getTopicFlowNode: function(){
            return topicNode;
        },                                        //课题研究流程
        getBooksBuyFlowNode: function(){
            return booksBuyNode;                 //图书采购流程环节
        },
        getAssertStorageFlowNode: function(){
            return booksBuyNode;                 //资产入库流程环节
        }
    };
    window.flowcommon = service;

})();

(function(){
    'use strict';
    angular.module('app').controller('headerCtrl' , header);
    header.$inject=['headerSvc','bsWin'];
    function header(headerSvc , bsWin){
        var vm = this;
        vm.header ={};
        vm.id ="";
        //新增表头窗口
        vm.create = function(id){
            if(id){
                vm.header.id = id;
                vm.isUpdate = true;
                headerSvc.getHeaderById(vm,id);
            }
            vm.header={};
            $("#addHeaderWindow").kendoWindow({
                width: "500px",
                height: "300px",
                title: "新建表字段",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "close"]
            }).data("kendoWindow").center().open();
        }

        //保存新增表头
        vm.save = function () {
            headerSvc.createHeader(vm);
        }


        vm.queryUser = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        vm.del = function (id){
            headerSvc.deleteHeader(vm, id);
        }

        vm.dels = function(){
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm:vm,
                    msg:'请选择数据'

                });
            } else {
                var ids=[];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr=ids.join(',');
                vm.del(idStr);
            }
        }

        vm.update = function (){
            headerSvc.updateHeader(vm);
        }
        activate();
        function activate(){
            headerSvc.headerGrid(vm);
        }
    }
})();
(function(){
    'use strict';
    angular.module('app').factory('headerSvc' , header);
    header.$inject=['$http','bsWin'];

    function header($http , bsWin){

        var service={
            headerGrid : headerGrid,
            createHeader : createHeader ,//创建表头
            findHeaderListNoSelected : findHeaderListNoSelected ,//获取表头列表
            updateSelectedHeader : updateSelectedHeader ,//改变表头状态（改为选中）
            updateCancelHeader : updateCancelHeader , //改变表头状态（改为未选中）
            findHeaderListSelected : findHeaderListSelected,//查询已选的表头
            deleteHeader : deleteHeader , //删除表头
            getHeaderById : getHeaderById ,//通过id获取表头信息
            updateHeader : updateHeader ,//更新表头信息
            selectHeaderWindow : selectHeaderWindow,//自定义筛选表字段

        }

        return service;

        //begin updateHeader
        function updateHeader(vm){
            common.initJqValidation();
            var isValid = $('form').valid();
            if ( vm.header.headerKey!=undefined && vm.header.headerName!=undefined && vm.header.headerType!=undefined) {
                var httpOptions = {
                    method: 'put',
                    url: rootPath + "/header/updateHeader",
                    data: vm.header
                }

                var httpSuccess = function success(response) {
                    if (response.data.flag || response.data.reCode == 'ok') {
                        bsWin.success("修改成功!",function () {
                            window.parent.$("#addHeaderWindow").data("kendoWindow").close();
                            vm.gridOptions.dataSource.read();
                        });
                    } else {
                        bsWin.error(response.data.reMsg);
                    }

                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
            }
        }
        //end updateHeader

        //begin deleteHeader
        function deleteHeader(vm, id){
            var httpOptions ={
                method : 'delete',
                url : rootPath + "/header",
                params : {id : id}
            }
            var httpSuccess = function success(response){
                bsWin.success("删除成功！");
                vm.gridOptions.dataSource.read();
            }

            common.http({
                vm : vm,
                $http : $http ,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }
        //end deleteHeader

        //begin getHeaderById
        function getHeaderById(vm,id){
            var httpOptions ={
                method : 'get',
                url : rootPath + "/header/getHeaderById",
                params : {id : id}
            }
            var httpSuccess = function success(response){
                vm.header = response.data;
            }

            common.http({
                vm : vm,
                $http : $http ,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }
        //end getHeaderById

        //begin updateHeader
        function updateSelectedHeader(vm,idStr){
            var httpOptions ={
                method : 'put',
                url : rootPath + '/header/updateSelectedHeader',
                params : {idStr : idStr}
            }
            var httpSuccess = function success(response){
                // if (callBack != undefined && typeof callBack == 'function') {
                //     callBack();
                // }
            }

            common.http({
                vm : vm,
                $http : $http,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end updateHeader


        //begin updateCancelHeader
        function updateCancelHeader(vm , idStr){
            var httpOptions ={
                method : 'put',
                url : rootPath + '/header/updateCancelHeader',
                params : {idStr : idStr}
            }
            var httpSuccess = function success(response){
            }

            common.http({
                vm : vm,
                $http : $http,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end updateCancelHeader

        //begin createHeader
        function createHeader(vm){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (vm.header.headerKey!=undefined && vm.header.headerName!=undefined && vm.header.headerType!=undefined) {
                var httpOptions = {
                    method: 'post',
                    url: rootPath + '/header/createHeader',
                    data: vm.header
                }
                var httpSuccess = function success(response) {
                    if(response.data.flag || response.data.reCode == 'ok'){
                        bsWin.success("操作成功！",function(){
                            window.parent.$("#addHeaderWindow").data("kendoWindow").close();
                            vm.gridOptions.dataSource.read();
                        });
                    }else{
                        bsWin.error(response.data.reMsg);
                    }

                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess

                });
            }

        }//end createHeader


        //begin getHeaderList
        function findHeaderListNoSelected(vm){
            vm.header = {};
            vm.header.headerType = vm.headerType;
            var httpOptions ={
                method : 'post',
                url : rootPath + '/header/findHeaderListNoSelected',
                data : vm.header
                // params : {headerType : encodeURIComponent(vm.headerType)},
            }
            var httpSuccess = function success(response){
                vm.allHeaderList = response.data;
            }
            common.http({
                vm : vm,
                $http : $http,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end getHeaderList

        //begin findHeaderListByState
        function findHeaderListSelected(vm , callBack){
            vm.header = {};
            vm.header.headerType = vm.headerType;
            var httpOptions={
                method : 'post',
                url : rootPath + "/header/findHeaderListSelected",
                data : vm.header
                //params : {headerType : encodeURIComponent(vm.headerType)},      //中文会乱码
            }
            var httpSuccess = function success(response){
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                vm : vm,
                $http :$http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end findHeaderListByState

        //begin headerGrid
        function headerGrid(vm){
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/header/findAllHeader", $("#headerForm")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        },
                        modifiedDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

            //S_序号
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo
                            .format(
                                "<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                                item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"

                },
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                }
                ,
                {
                    field: "headerName",
                    title: "列名",
                    width: 100,
                    filterable: false
                },
                {
                    field: "headerKey",
                    title: "key值",
                    width: 100,
                    filterable: false
                },
                {
                    field: "headerType",
                    title: "类型",
                    width: 100,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                            "vm.del('" + item.id + "')", "vm.create('" + item.id +"')");

                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };
        }
        //end headerGrid

        /**
         * 设置选中表头顺序
         */
        function setSelectHeadOrder(paramList){
            var httpOptions = {
                method : 'post',
                url : rootPath + '/header/headOrder',
                headers:{
                    "contentType":"application/json;charset=utf-8"  //设置请求头信息
                },
                traditional: true,
                dataType : "json",
                data : angular.toJson(paramList)//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
            }
            var httpSuccess = function success(response) {
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess,
            })
        }

        /**
         * 查询
         * @param vm
         * @param headerType
         */
        function selectHeaderWindow(vm,headerType){
            findHeaderListNoSelected(vm);
            findHeaderListSelected(vm , function(data){
                vm.selectedHeaderList = data;
                vm.header = true;
            });

            $("#selectHeaderWindow").kendoWindow({
                width: "860px",
                height: "500px",
                title: "自定义报表",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "close"]
            }).data("kendoWindow").center().open();
            vm.headerType= headerType;
            vm.allChecked =function(){
                var tab = $('#selectHeaderForm').find('input');
                $.each(tab , function(i , obj){
                    obj.checked = true;
                });
            }

            //全取消
            vm.allCancel = function(){
                var tab = $('#selectHeaderForm').find('input');
                $.each(tab , function(i , obj) {
                    obj.checked = false;
                    // $('input:checkbox').attr('checked', false);
                });
            }

            /**
             * 左添加
             */
            vm.addHeader = function(){
                var ids =[];
                for(var i=0 ; i<vm.allHeaderList.length ; i++){
                    var s = {};
                    if(vm.allHeaderList[0].checkbox){
                        i=0;
                    }
                    s = vm.allHeaderList[i];
                    if(s.checkbox){
                        ids.push(s.id);
                        vm.selectedHeaderList.push(s);
                        vm.allHeaderList.splice(i,1);
                        i=0;
                        s.checkbox = false;
                    }
                }

                var idStr = ids.join(",");
                updateSelectedHeader(vm,idStr);

            }

            /**
             * 右取消
             */
            vm.cancelHeader = function (){
                var ids =[];
                for(var i=0 ; i< vm.selectedHeaderList.length ; i++){
                    var s = {};
                    if(vm.selectedHeaderList[0].checkbox){
                        i=0;
                    }
                    s = vm.selectedHeaderList[i];
                    if(s.checkbox){
                        ids.push(s.id);
                        vm.allHeaderList.push(s);
                        vm.selectedHeaderList.splice(i,1);
                        i=0;
                        s.checkbox = false;
                    }
                }

                var idStr = ids.join(",");
                updateCancelHeader(vm,idStr);
            }

            // 上移
            vm.moveUp = function ($index) {
                if ($index == 0) {
                    return;
                }
                vm.selectedHeaderList = swapItems(vm.selectedHeaderList, $index, $index - 1);
            };

            // 下移
            vm.moveDown = function ($index) {
                if ($index == vm.selectedHeaderList.length - 1) {
                    return;
                }
                vm.selectedHeaderList  = swapItems(vm.selectedHeaderList, $index, $index + 1);
            };


            // 交换数组元素
            var swapItems = function (arr, index1, index2) {
                arr[index1] = arr.splice(index2, 1, arr[index1])[0];
                return arr;
            };

            vm.changeType = function(){
                findHeaderListNoSelected(vm);
                vm.selectedHeaderList=[];
            }

            //自定义关闭保存
            $("#selectHeaderWindow").data("kendoWindow").center().wrapper.find(".k-i-close").click(function (e) {
                setSelectHeadOrder(vm.selectedHeaderList);
            });
        }
    }
})();
(function(){
    'use strict';
    angular.module('app').controller('headerEditCtrl' , headerEdit);
    headerEdit.$inject=['headerSvc','$state'];

    function headerEdit(headerSvc,$state){
        var vm = this;
        vm.selectedHeaderList=[];
        vm.selectList={};
        vm.headerType= $state.params.headerType;

        //全选
        vm.allChecked =function(){
            var tab = $('#selectHeaderForm').find('input');
            $.each(tab , function(i , obj){
                obj.checked = true;
            });

        }

        //全取消
        vm.allCancel = function(){
            var tab = $('#selectHeaderForm').find('input');
            $.each(tab , function(i , obj) {
                obj.checked = false;
                // $('input:checkbox').attr('checked', false);
            });
        }

        /**
         * 左添加
         */
        vm.addHeader = function(){
            var ids =[];
            for(var i=0 ; i<vm.allHeaderList.length ; i++){
                var s = vm.allHeaderList[i];
                if(s.checkbox){
                    ids.push(s.id);
                    vm.selectedHeaderList.push(s);
                    vm.allHeaderList.splice(i,1);
                    i=0;
                    s.checkbox = false;
                }
            }

            var idStr = ids.join(",");
            headerSvc.updateSelectedHeader(vm,idStr);

        }

        /**
         * 右取消
         */
        vm.cancelHeader = function (){
            var ids =[];
            for(var i=0 ; i< vm.selectedHeaderList.length ; i++){
                var s = vm.selectedHeaderList[i];
                if(s.checkbox){
                    ids.push(s.id);
                    vm.allHeaderList.push(s);
                    vm.selectedHeaderList.splice(i,1);
                    i=0;
                    s.checkbox = false;
                }
            }

            var idStr = ids.join(",");
            headerSvc.updateCancelHeader(vm,idStr);
        }


      /*  vm.createTable = function(){
            headerSvc.findHeaderListByState(vm);
            var ids =[];
            for(var i=0; i<vm.selectedHeaderList.length; i++){
                ids.push(vm.selectedHeaderList[i].id);
            }
            var idStr = ids.join(",");
            headerSvc.updateHeader(idStr , function(){
                $state.go('statisticalList',{selectHeaderList : vm.selectList});
            })

        }*/

        vm.changeType = function(){
            headerSvc.findHeaderListNoSelected(vm);
            vm.selectedHeaderList=[];
        }

        activate();
        function activate(){
            headerSvc.findHeaderListNoSelected(vm);
            headerSvc.findHeaderListSelected(vm , function(data){
                vm.selectedHeaderList = data;
                vm.header = true;
            });
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app')
        .controller('homeCtrl', home);

    home.$inject = ['$location','homeSvc']; 

    function home($location, homeSvc) {
        /* jshint validthis:true */
    	var vm = this;
        vm.title = '';
        

        vm.changePwd = function () {        	
        	 homeSvc.changePwd(vm);
          
        }
       
        activate();
        function activate() {
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('homeSvc', home);

    home.$inject = ['$http'];

    function home($http) {
        var url_account_password = rootPath + "/account/password";

        var service = {
            changePwd: changePwd
        };

        return service;

        // begin#updatehome
        function changePwd(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;

                var httpOptions = {
                    method: 'put',
                    url: url_account_password,
                    params:{password : vm.model.password}
                }

                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                }
                            })
                        }
                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } else {
                // common.alert({
                // vm:vm,
                // msg:"您填写的信息不正确,请核对后提交!"
                // })
            }

        }

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('logCtrl', log);

    log.$inject = ['$location','logSvc']; 

    function log($location, logSvc) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '日志列表';

        activate();
        function activate() {
            logSvc.grid(vm);
        }

        vm.queryLog = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        /**
         * 重置
         */
        vm.formReset = function(){
            var tab = $("#logform").find('input,select');
            $.each(tab, function(i, obj) {
                obj.value = "";
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('logSvc', log);

    log.$inject = ['$http', '$compile'];
    function log($http, $compile) {
        var service = {
            grid: grid,
            gridFgw:gridFgw
        };
        return service;

        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath +"/log/fingByOData",$("#logform")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource

            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }

            // Begin:column
            var columns = [
                {
                    field: "",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                }, {
                    field: "",
                    title: "级别",
                    width: 60,
                    filterable: false,
                    template:function(item){
                        if(item.logLevel){
                            if(item.logLevel == "1"){
                                return "高"
                            }else if(item.logLevel == "2"){
                                return "中"
                            }else if(item.logLevel == "3"){
                                return "低"
                            }
                        }else{
                            return "低";
                        }
                    },
                }, {
                    field: "userName",
                    title: "操作者",
                    width: 80,
                    filterable: false
                }, {
                    field: "createdDate",
                    title: "操作时间",
                    width: 170,
                    filterable: false,
                    format: "{0:yyyy/MM/dd HH:mm:ss}"
                } ,{
                    field: "ipAdd",
                    title: "IP地址",
                    filterable: false,
                    width: 130,
                }, {
                    field: "browserInfo",
                    title: "浏览器",
                    filterable: false,
                    width: 120,
                }, {
                    field: "module",
                    title: "操作描述",
                    filterable: false,
                    width: 200,
                }, {
                    field: "",
                    title: "结果",
                    filterable: false,
                    width: 80,
                    template:function(item){
                        if(item.result){
                            if(item.result == "9"){
                                return '<span class="label label-success">成功</span>';
                            }else {
                                return '<span class="label label-danger">失败</span>';
                            }
                        }else{
                            return "";
                        }
                    },
                },{
                    field: "",
                    title: "日志内容",
                    filterable: false,
                    width: 400,
                    template:function(item){
                        return "<textarea rows='4' style='width:100%;'>"+item.message+"</textarea>";
                    },
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };

        }// end fun grid

        function gridFgw(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath +"/log/findFgwSignLog",$("#logform")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource

            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }

            // Begin:column
            var columns = [
                {
                    field: "",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                }, {
                    field: "",
                    title: "级别",
                    width: 60,
                    filterable: false,
                    template:function(item){
                        if(item.logLevel){
                            if(item.logLevel == "1"){
                                return "高"
                            }else if(item.logLevel == "2"){
                                return "中"
                            }else if(item.logLevel == "3"){
                                return "低"
                            }
                        }else{
                            return "低";
                        }
                    },
                }, {
                    field: "userName",
                    title: "操作者",
                    width: 80,
                    filterable: false
                }, {
                    field: "createdDate",
                    title: "操作时间",
                    width: 170,
                    filterable: false,
                    format: "{0:yyyy/MM/dd HH:mm:ss}"
                } ,{
                    field: "ipAdd",
                    title: "IP地址",
                    filterable: false,
                    width: 130,
                }, {
                    field: "browserInfo",
                    title: "浏览器",
                    filterable: false,
                    width: 120,
                }, {
                    field: "module",
                    title: "操作描述",
                    filterable: false,
                    width: 200,
                }, {
                    field: "",
                    title: "结果",
                    filterable: false,
                    width: 80,
                    template:function(item){
                        if(item.result){
                            if(item.result == "9"){
                                return '<span class="label label-success">成功</span>';
                            }else {
                                return '<span class="label label-danger">失败</span>';
                            }
                        }else{
                            return "";
                        }
                    },
                },{
                    field: "",
                    title: "日志内容",
                    filterable: false,
                    width: 400,
                    template:function(item){
                        return "<textarea rows='4' style='width:100%;'>"+item.message+"</textarea>";
                    },
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };

        }// end fun grid

        function gridFgw(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath +"/log/findFgwSignLog",$("#logform")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource

            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }

            // Begin:column
            var columns = [
                {
                    field: "",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                }, {
                    field: "",
                    title: "级别",
                    width: 60,
                    filterable: false,
                    template:function(item){
                        if(item.logLevel){
                            if(item.logLevel == "1"){
                                return "高"
                            }else if(item.logLevel == "2"){
                                return "中"
                            }else if(item.logLevel == "3"){
                                return "低"
                            }
                        }else{
                            return "低";
                        }
                    },
                }, {
                    field: "userName",
                    title: "操作者",
                    width: 80,
                    filterable: false
                }, {
                    field: "createdDate",
                    title: "操作时间",
                    width: 170,
                    filterable: false,
                    format: "{0:yyyy/MM/dd HH:mm:ss}"
                } ,{
                    field: "ipAdd",
                    title: "IP地址",
                    filterable: false,
                    width: 130,
                }, {
                    field: "browserInfo",
                    title: "浏览器",
                    filterable: false,
                    width: 120,
                }, {
                    field: "module",
                    title: "操作描述",
                    filterable: false,
                    width: 200,
                }, {
                    field: "",
                    title: "结果",
                    filterable: false,
                    width: 80,
                    template:function(item){
                        if(item.result){
                            if(item.result == "9"){
                                return '<span class="label label-success">成功</span>';
                            }else {
                                return '<span class="label label-danger">失败</span>';
                            }
                        }else{
                            return "";
                        }
                    },
                },{
                    field: "",
                    title: "日志内容",
                    filterable: false,
                    width: 400,
                    template:function(item){
                        return "<textarea rows='4' style='width:100%;'>"+item.message+"</textarea>";
                    },
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };

        }// end fun grid


    }


})();
(function () {
    'use strict';

    angular.module('app').controller('logFgwCtrl', log);

    log.$inject = ['$location','logSvc','reserveSignSvc','bsWin'];

    function log($location, logSvc,reserveSignSvc,bsWin) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '委里日志列表';

        activate();
        function activate() {
            logSvc.gridFgw(vm);
        }

        vm.queryLog = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        /**
         * 重置
         */
        vm.formReset = function(){
            var tab = $("#logform").find('input,select');
            $.each(tab, function(i, obj) {
                obj.value = "";
            });
        }

        vm.getSignInfo = function (){
            var filecode = $("#filecode").val();
            if(filecode == "" || filecode == null){
                bsWin.alert("收文编号不能为空!");
                return ;
            }
            reserveSignSvc.getPreSignInfo(filecode,'0',function(data){
                if(data.flag || data.reCode == 'ok'){
                    if(data.reMsg!='保存成功！'){
                        bsWin.alert(data.reMsg);
                        return ;
                    }else{
                        bsWin.alert("委项目获取成功！");
                        //vm.gridOptions.dataSource.read();
                    }
                }else{
                    bsWin.alert(data.reMsg);
                }
            });
        }
    }
})();

(function(){
    'use strict';
    angular.module('app').controller('maintainExpertConfirmCtrl' , maintainExpertConfirm);
    maintainExpertConfirm.$inject = ['$state' , 'expertReviewSvc' , 'bsWin' , 'signSvc'];
     function maintainExpertConfirm($state , expertReviewSvc , bsWin , signSvc){
         var vm = this;
         vm.signid = $state.params.signid;
         vm.showExpertConfirm = true;

         activate();
         function activate(){
             expertReviewSvc.initReview(vm.signid,"", function (data) {
                 if(data){
                     vm.expertReviewDto = data;
                     if (vm.expertReviewDto && vm.expertReviewDto.expertSelectedDtoList) {
                         vm.confirmEPList = vm.expertReviewDto.expertSelectedDtoList;
                     }
                 }else{
                     vm.expertReviewDto = {};
                 }
             });
         }

         //未参加改为参加
         vm.updateToJoin = function () {
             var isCheck = $("#notJoinExpertTable input[name='notJoinExpert']:checked");
             if (isCheck.length < 1) {
                 bsWin.alert("请选择要改为参加会议的专家");
             } else {
                 var ids = [];
                 for (var i = 0; i < isCheck.length; i++) {
                     ids.push(isCheck[i].value);
                 }
                 expertReviewSvc.updateJoinState(vm.expertReviewDto.id,"", "", ids.join(','), '9', vm.isCommit, function (data) {
                     if(data.flag || data.reCode == 'ok'){
                         vm.reFleshJoinState(ids, '9');
                         bsWin.success("操作成功！");
                     }else{
                         bsWin.success(data.reMsg);
                     }
                 });
             }
         }

         //参加改为未参加
         vm.updateToNotJoin = function () {
             var isCheck = $("#joinExpertTable input[name='joinExpert']:checked");
             if (isCheck.length < 1) {
                 bsWin.alert("请选择未参加会议的专家");
             } else {
                 var ids = [];
                 for (var i = 0; i < isCheck.length; i++) {
                     ids.push(isCheck[i].value);
                 }
                 expertReviewSvc.updateJoinState(vm.expertReviewDto.id,"", "", ids.join(','), '0', vm.isCommit, function (data) {
                     if(data.flag || data.reCode == 'ok'){
                         //1、更改专家评分和评审费发放的专家
                         vm.reFleshJoinState(ids, '0');
                         bsWin.success("操作成功！");
                     }else{
                         bsWin.success(data.reMsg);
                     }

                 });
             }
         }

         //更新参加未参加状态
         vm.reFleshJoinState = function (ids, state) {
             $.each(ids, function (i, obj) {
                 //1、删除已确认的专家
                 $.each(vm.confirmEPList, function (index, epObj) {
                     if (obj == epObj.id) {
                         epObj.isJoin = state;
                     }
                 })
             })
         }
     }
})();
(function () {
    'use strict';
    angular.module('app').controller('maintainExpertPaymentCtrl', maintainExpertPayment);
    maintainExpertPayment.$inject = ['signSvc', '$state', 'bsWin', 'expertReviewSvc'];
    function maintainExpertPayment(signSvc, $state, bsWin, expertReviewSvc) {
        var vm = this;
        vm.signid = $state.params.signid;
        vm.showExpertPayment = true;

        activate();
        function activate() {
            expertReviewSvc.initReview(vm.signid,"", function (data) {
                if(data){
                    vm.expertReviewDto = data;
                }else{
                    vm.expertReviewDto = {};
                }
            });
        }

        // 计算应纳税额
        vm.countTaxes = function (expertReview) {
            if (expertReview == undefined) {
                return;
            }
            if (expertReview.expertSelectedDtoList == undefined || expertReview.expertSelectedDtoList.length == 0) {
                bsWin.alert("该方案还没有选择评审专家，请先选取评审专家！");
                return;
            }
            if (expertReview.reviewDate == undefined) {
                bsWin.alert("(函评/评审会)日期为空，无法进行专家纳税计算，请联系系统管理员处理！");
                return;
            }
            var reg = /^(\d{4}-\d{1,2}-\d{1,2})$/;
            if (!reg.exec(expertReview.reviewDate)) {
                bsWin.alert("请输入正确的日期格式");
                return;
            }
            //设置一个评审费发放日期默认值
            if (!expertReview.payDate) {
                expertReview.payDate = vm.curDate;
            }
            common.initJqValidation($('#payform'));
            var isValid = $('#payform').valid();
            if (isValid) {
                //自动保存
                expertReviewSvc.savePayment(expertReview, vm.isCommit, true,function (data) {
                    if (data.flag || data.reCode == "ok") {
                        var resultMap = data.reObj, totalCost = 0, totaoTaxes = 0;
                        for (var k = 0, lk = expertReview.expertSelectedDtoList.length; k < lk; k++) {
                            var v = expertReview.expertSelectedDtoList[k];
                            if ((v.isConfrim == '9' || v.isConfrim == 9) && (v.isJoin == '9' || v.isJoin == 9)) {
                                for (var i = 0, l = resultMap.length; i < l; i++) {
                                    var epId = resultMap[i].EXPERTID;
                                    if (v.expertDto.expertID == epId) {
                                        v.reviewTaxes = parseFloat(resultMap[i].MONTAXES == undefined ? 0 : resultMap[i].MONTAXES).toFixed(2);
                                        v.totalCost = (parseFloat(v.reviewCost) + parseFloat(v.reviewTaxes)).toFixed(2);
                                        totalCost = parseFloat(totalCost) + parseFloat(v.reviewCost);
                                        totaoTaxes = parseFloat(totaoTaxes) + parseFloat(v.reviewTaxes);
                                    }
                                }
                            }
                        }

                        expertReview.reviewCost = parseFloat(totalCost).toFixed(2);
                        expertReview.reviewTaxes = parseFloat(totaoTaxes).toFixed(2);
                        expertReview.totalCost = (parseFloat(totalCost) + parseFloat(totaoTaxes)).toFixed(2);
                        bsWin.alert("操作成功！", function () {
                            vm.isCommit = false;
                            expertReview.state = '9';
                        });
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("请正确填写专家评审费信息！");
            }
        }

        // 关闭专家费用
        vm.closeEditPay = function () {
            window.parent.$("#payment").data("kendoWindow").close();
        }

        /**
         * 保存评审费，不包括计税
         * @param expertReview
         */
        vm.savePayment = function(expertReview){
            if (expertReview == undefined) {
                return;
            }
            if (expertReview.expertSelectedDtoList == undefined || expertReview.expertSelectedDtoList.length == 0) {
                bsWin.alert("该方案还没有选择评审专家，请先选取评审专家！");
                return;
            }
            common.initJqValidation($('#payform'));
            var isValid = $('#payform').valid();
            if (isValid) {
                //自动保存
                expertReviewSvc.savePayment(expertReview, vm.isCommit,false, function (data) {
                    if (data.flag || data.reCode == "ok") {
                        var resultMap = data.reObj, totalCost = 0, totaoTaxes = 0;
                        for (var k = 0, lk = expertReview.expertSelectedDtoList.length; k < lk; k++) {
                            var v = expertReview.expertSelectedDtoList[k];
                            if ((v.isConfrim == '9' || v.isConfrim == 9) && (v.isJoin == '9' || v.isJoin == 9)) {
                                for (var i = 0, l = resultMap.length; i < l; i++) {
                                    var epId = resultMap[i].EXPERTID;
                                    if (v.expertDto.expertID == epId) {
                                        v.reviewTaxes = parseFloat(resultMap[i].MONTAXES == undefined ? 0 : resultMap[i].MONTAXES).toFixed(2);
                                        v.totalCost = (parseFloat(v.reviewCost) + parseFloat(v.reviewTaxes)).toFixed(2);
                                        totalCost = parseFloat(totalCost) + parseFloat(v.reviewCost);
                                        totaoTaxes = parseFloat(totaoTaxes) + parseFloat(v.reviewTaxes);
                                    }
                                }
                            }
                        }

                        expertReview.reviewCost = parseFloat(totalCost).toFixed(2);
                        expertReview.reviewTaxes = parseFloat(totaoTaxes).toFixed(2);
                        expertReview.totalCost = (parseFloat(totalCost) + parseFloat(totaoTaxes)).toFixed(2);
                        bsWin.alert("操作成功！", function () {
                            vm.isCommit = false;
                        });
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("请正确填写专家评审费信息！");
            }
        }
    }
})();
(function(){
    'use strict';
    angular.module('app').controller('maintainExpertScoreCtrl' , maintainExpertScore);
    maintainExpertScore.$inject = ['expertReviewSvc' , 'bsWin' , 'signSvc' , '$state','companySvc'];
    function maintainExpertScore(expertReviewSvc , bsWin , signSvc , $state,companySvc){
        var vm = this;
        vm.signid = $state.params.signid;
        vm.showExpertScore = true;
        vm.showFlag ={};
        vm.showFlag.isMainPrinUser = true;
        activate();
        function activate(){
            expertReviewSvc.initReview(vm.signid,"", function (data) {
                if(data){
                    vm.expertReviewDto = data;
                }else{
                    vm.expertReviewDto = {};
                }
            });

            signSvc.findSignUnitScore(vm.signid, function (data) {
                if(data){
                    vm.unitScoreDto = data;
                }
            });
        }

        // 编辑专家评分
        vm.editSelectExpert = function (id) {
            vm.scoreExpert = {};
            $.each(vm.expertReviewDto.expertSelectedDtoList, function (i, scopeEP) {
                if (scopeEP.id == id) {
                    vm.scoreExpert = angular.copy(scopeEP);
                    return;
                }
            })

            $("#star_" + vm.scoreExpert.id).raty({
                number: 5,
                score: function () {
                    $(this).attr("data-num", angular.isUndefined(vm.scoreExpert.score) ? 0 : vm.scoreExpert.score);
                    return $(this).attr("data-num");
                },
                starOn: '../contents/libs/raty/lib/images/star-on.png',
                starOff: '../contents/libs/raty/lib/images/star-off.png',
                starHalf: '../contents/libs/raty/lib/images/star-half.png',
                readOnly: false,
                halfShow: true,
                hints   : ['不合格','合格','中等','良好','优秀'],
                size: 34,
                click: function (score, evt) {
                    vm.scoreExpert.score = score;
                }
            });

            $("#score_win").kendoWindow({
                width: "820px",
                height: "365px",
                title: "编辑-专家星级",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Close"]
            }).data("kendoWindow").center().open();
        }

        // 关闭专家评分
        vm.closeEditMark = function () {
            window.parent.$("#score_win").data("kendoWindow").close();
        }

        // 保存专家评分
        vm.saveMark = function () {
            if (!vm.scoreExpert.score || vm.scoreExpert.score == 0) {
                bsWin.alert("请对专家进行评分！");
            }  else {
                expertReviewSvc.saveMark(vm.scoreExpert, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        angular.forEach(vm.expertReviewDto.expertSelectedDtoList, function (scopeEP, index) {
                            if (scopeEP.id == vm.scoreExpert.id) {
                                scopeEP.score = vm.scoreExpert.score;
                                scopeEP.describes = vm.scoreExpert.describes;
                            }
                        })
                        bsWin.success("保存成功！", function () {
                            vm.closeEditMark();
                        });
                    } else {
                        bsWin.alert(data.reMsg);
                    }

                });
            }
        }

        /*****************S_单位评分******************/
        vm.editUnitScore = function (id) {
            $("#star").raty({
                number: 5,
                score: function () {
                    $(this).attr("data-num", angular.isUndefined(vm.unitScoreDto.score) ? 0 : vm.unitScoreDto.score);
                    return $(this).attr("data-num");
                },
                starOn: '../contents/libs/raty/lib/images/star-on.png',
                starOff: '../contents/libs/raty/lib/images/star-off.png',
                starHalf: '../contents/libs/raty/lib/images/star-half.png',
                readOnly: false,
                halfShow: true,
                hints: ['不合格', '合格', '中等', '良好', '优秀'],
                size: 34,
                click: function (score, evt) {
                    vm.unitScoreDto.score = score;
                }
            });

            $("#unitscore_win").kendoWindow({
                width: "820px",
                height: "365px",
                title: "编辑-单位星级",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Close"]
            }).data("kendoWindow").center().open();

        }
        //保存单位评分
        vm.saveUnit=function () {
            if (!vm.unitScoreDto.score || vm.unitScoreDto.score == 0) {
                bsWin.alert("请对单位进行评分！");
            }else {
                companySvc.saveUnit(vm.unitScoreDto, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        bsWin.success("保存成功！", function () {
                            vm.closeEditUnit();
                        });
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            }

        }
        // 关闭单位评分
        vm.closeEditUnit = function () {
            window.parent.$("#unitscore_win").data("kendoWindow").close();
        }

        /*****************E_单位评分******************/


    }
})();
(function () {
    'use strict';

    angular.module('app').controller('maintWorkprogramEditCtrl', mainworkprogram);

    mainworkprogram.$inject = ['workprogramSvc', '$state', 'bsWin', 'sysfileSvc', '$scope', '$window', '$rootScope', 'signSvc' , 'expertSvc'];

    function mainworkprogram(workprogramSvc, $state, bsWin, sysfileSvc, $scope, $window, $rootScope, signSvc , expertSvc) {
        var vm = this;
        vm.work = {};						//创建一个form对象
        vm.model = {};                      //项目对象
        vm.title = '评审方案编辑';        	//标题
        vm.startDateTime = new Date("2006/6/1 08:00");
        vm.endDateTime = new Date("2030/6/1 21:00");
        vm.work.signId = $state.params.signid;		//收文ID
        vm.work.id = "";

        vm.sign = {};						//创建收文对象
        vm.unSeledWork = {};                //未选择的工作方案
        vm.searchSign = {};                 //用于过滤

        vm.businessFlag = {
            isSelfReview: false,            //是否自评
            isSingleReview: true,           //是否单个评审
            isMainWorkProj: false,          //是否是合并评审主项目
            isLoadMeetRoom: false,          //是否已经加载了会议室
            isReveiwAWP: false,             //是否是合并评审次项目，如果是，则不允许修改，由主项目控制
        }
        vm.expertList = new Array(15);     //用于打印页面的专家列表，控制行数
        //页面初始化
        activate();
        function activate() {
            vm.showAll = true;
            workprogramSvc.workMaintainList(vm, function (data) {
                vm.workProgramDtoList = data.WPList;
                //如果存在多个分支的情况，则显示项目总投资
                if (data.showTotalInvestment == '9' || data.showTotalInvestment == 9) {
                    vm.showTotalInvestment = true;
                } else {
                    vm.showTotalInvestment = false;
                }
                if (vm.workProgramDtoList && vm.workProgramDtoList.length > 0) {
                    angular.forEach(vm.workProgramDtoList, function (wp, index) {
                        wp.projectTypeDicts = $rootScope.topSelectChange(wp.projectType, $rootScope.DICT.PROJECTTYPE.dicts)
                    })
                }
            });
        }

        vm.goBackMain = function () {
            $state.go('MaintainProjectEdit', {signid: $state.params.signid, processInstanceId: null});
        }

        //评审方式修改
        vm.reviewTypeChange = function (wp) {
            workprogramSvc.findById(wp.id, function (data) {
                if (data.expertCost) {
                    wp.expertCost = data.expertCost;
                }
                //1、由合并评审改为单个评审
                if (data.isSigle == '合并评审' && data.isMainProject == "9" && "单个评审" == wp.isSigle) {
                    bsWin.confirm({
                        title: "询问提示",
                        message: "该项目已关联其他项目，您确定要改为单个评审吗？",
                        onOk: function () {
                            workprogramSvc.deleteAllMerge($state.params.signid, wp.id, function (data) {
                                if (data.flag || data.reCode == 'ok') {
                                    bsWin.alert("操作成功！", function () {
                                        $state.reload('maintWorkprogramEdit',{signid:$state.params.signid});
                                    });
                                } else {
                                    bsWin.error("操作失败！");
                                }
                            });
                        },
                        onCancel: function () {
                            $state.reload('maintWorkprogramEdit',{signid:$state.params.signid});
                        }
                    });
                    //由专家评审会改成专家函评，并且已经预定了会议室
                } else if (data.reviewType == '专家评审会' && wp.reviewType == '专家函评' && wp.roomBookingDtos && wp.roomBookingDtos.length > 0) {
                    bsWin.confirm({
                        title: "询问提示",
                        message: "改成专家函评，预定会议室将会删除，确定修改么？",
                        onOk: function () {
                            workprogramSvc.updateReviewType($state.params.signid, wp.id, wp.reviewType, function (data) {
                                if (data.flag || data.reCode == 'ok') {
                                    bsWin.alert("操作成功！",function(){
                                        $state.reload('maintWorkprogramEdit',{signid:$state.params.signid});
                                    });
                                } else {
                                    bsWin.error("操作失败！");
                                }
                            });
                        },
                        onCancel: function () {
                            $state.reload('maintWorkprogramEdit',{signid:$state.params.signid});
                        }
                    });

                } else if ((data.reviewType == '专家评审会' || data.reviewType == '专家函评') && wp.reviewType == '自评') {
                    var isNeedUpdate = false;
                    if (wp.roomBookingDtos && wp.roomBookingDtos.length > 0) {
                        isNeedUpdate = true;
                    }
                    if (wp.expertSelectedDtoList && wp.expertSelectedDtoList.length > 0) {
                        isNeedUpdate = true;
                    }
                    if (isNeedUpdate) {
                        bsWin.confirm({
                            title: "询问提示",
                            message: "评审方式改成自评，预定会议室和抽取专家将会删除，确定修改么？",
                            onOk: function () {
                                workprogramSvc.updateReviewType($state.params.signid, wp.id, wp.reviewType, function (data) {
                                    if (data.flag || data.reCode == 'ok') {
                                        bsWin.alert("操作成功！",function(){
                                            $state.reload('maintWorkprogramEdit',{signid:$state.params.signid});
                                        });
                                    } else {
                                        bsWin.error("操作失败！");
                                    }
                                });
                            },
                            onCancel: function () {
                                $state.reload('maintWorkprogramEdit',{signid:$state.params.signid});
                            }
                        });
                    }
                }
            });
        }

        //关闭窗口
        vm.onWorkClose = function () {
            window.parent.$(".workPro").data("kendoWindow").close();
        }

        //重置合并发文
        vm.formReset = function () {
            vm.searchSign = {};
        }

        //过滤器
        vm.filterSign = function (item) {
            var isMatch = true;
            if (vm.searchSign.projectname && (item.projectname).indexOf(vm.searchSign.projectname) == -1) {
                isMatch = false;
            }
            if (isMatch && vm.searchSign.reviewstage && (item.reviewstage).indexOf(vm.searchSign.reviewstage) == -1) {
                isMatch = false;
            }
            if (isMatch) {
                return item;
            }
        }

        //初始化合并评审弹框
        vm.initMergeWP = function (wp) {
            //1、先判断该工作方案是否已经保存
            workprogramSvc.findById(wp.id, function (data) {
                //2、如果已经保存，则弹框
                if (data.isSigle == '合并评审' && data.isMainProject == "9") {
                    //初始化合并评审信息
                    workprogramSvc.initMergeInfo(vm, wp.signId);
                    $("#mergeSign").kendoWindow({
                        width: "75%",
                        height: "700px",
                        title: "合并评审",
                        visible: false,
                        modal: true,
                        closable: true,
                        actions: ["Pin", "Minimize", "Maximize", "Close"]
                    }).data("kendoWindow").center().open();
                } else {
                    bsWin.alert("请先保存工作方案！");
                }
            });
        }

        //选择项目
        vm.chooseSign = function () {
            var selIds = $("input[name='mergeSign']:checked");
            if (selIds.length == 0) {
                bsWin.alert("请选择要合并评审的项目！");
            } else {
                var signIdArr = [];
                $.each(selIds, function (i, obj) {
                    signIdArr.push(obj.value);
                });
                workprogramSvc.chooseSign(vm.work.signId, signIdArr.join(","), function (data) {
                    if (data.flag || data.reCode == "ok") {
                        workprogramSvc.initMergeInfo(vm, vm.work.signId);
                    }
                    bsWin.alert(data.reMsg);
                });
            }
        }

        //取消项目
        vm.cancelSign = function () {
            var selIds = $("input[name='cancelMergeSignid']:checked");
            if (selIds.length == 0) {
                bsWin.alert("请选择要取消合并评审的项目！");
            } else {
                var selSignIdArr = [];
                $.each(selIds, function (i, obj) {
                    selSignIdArr.push(obj.value);
                });
            }
            workprogramSvc.cancelMergeSign(vm.work.signId, selSignIdArr.join(","), function (data) {
                if (data.flag || data.reCode == "ok") {
                    workprogramSvc.initMergeInfo(vm, vm.work.signId);
                }
                bsWin.alert(data.reMsg);
            });
        }

        /*********************  S_会议室模块   *************************/
        //会议预定添加弹窗
        vm.addTimeStage = function (id) {
            if (id) {
                workprogramSvc.findById(id, function (data) {
                    //2、如果已经保存，则弹框
                    if (data.reviewType == '专家评审会') {
                        $state.go('room', {businessId: id, businessType: "SIGN_WP"});
                    } else {
                        bsWin.alert("请先保存工作方案！");
                    }
                });
            } else {
                bsWin.alert("请先保存！");
            }
        }
        //会议预定添加弹窗维维护管理模块
        /*        vm.addTimeStageMain = function () {
         if (vm.work.id) {
         workprogramSvc.findById(vm.work.id,function(data){
         //2、如果已经保存，则弹框
         if(data.reviewType == '专家评审会'){
         $state.go('room', {businessId: vm.work.id, businessType: "SIGN_WP",mainFlag:"1"});
         }else{
         bsWin.alert("请先保存工作方案！");
         }
         });
         } else {
         bsWin.alert("请先保存！");
         }
         }*/
        /*********************  E_会议室模块   *************************/

        //查询评估部门
        vm.findUsersByOrgId = function (type) {
            workprogramSvc.findUsersByOrgId(vm, type);
        }

        //判断调研时间的结束时间是否小于开始时间
        vm.compare = function (studyBeginTimeStr1, studyEndTimeStr1) {
            var studyBeginTimeStr = parseInt(studyBeginTimeStr1.split(":")[0]);
            var studyEndTimeStr = parseInt(studyEndTimeStr1.split(":")[0]);
            if (studyBeginTimeStr == studyEndTimeStr) {//当“时”想等时，判断“分”
                var beginTime = parseInt(studyBeginTimeStr1.split(":")[1]);
                var endTime = parseInt(studyEndTimeStr1.split(":")[1]);
                if (beginTime > endTime) { //判断“分”
                    vm.isTime = true;
                } else {
                    vm.isTime = false;
                }

            } else {
                if (studyBeginTimeStr > studyEndTimeStr) { //判断"时"
                    vm.isTime = true;
                } else {
                    vm.isTime = false;
                }
            }

        }

        //拟聘请专家
        vm.selectExpert = function (id, reviewType, roomBookingDtos) {
            if (id) {
                //2、如果已经保存，则弹框
                workprogramSvc.findById(id, function (data) {
                    if (data.reviewType == '专家评审会' || data.reviewType == '专家函评') {
                        //先让用户选择会议时间
                        if (reviewType == '专家评审会' && (!roomBookingDtos || roomBookingDtos.length == 0)) {
                            bsWin.alert("请先预定评审会日期！");
                        } else if (reviewType == '专家函评' && !data.letterDate) {
                            bsWin.alert("请先选择函评日期并保存！");
                        } else {
                            $state.go('expertReviewEdit', {
                                businessId: vm.work.signId,
                                minBusinessId: id,
                                businessType: "SIGN",
                                reviewType: reviewType,
                                isback: true
                            });
                        }
                    } else {
                        bsWin.alert("请先保存工作方案！");
                    }
                });
            } else {
                bsWin.alert("请先保存当前信息，再继续操作！");
            }
        }

        //签收模板打印
        vm.printpage = function ($event) {
            var id = $($event.target).attr("id");
            signSvc.workProgramPrint(id);
        }

        //维护项目时的工作方案的保存
        vm.createMaintain = function (wp,formId) {
            common.initJqValidation($("#"+formId));
           var isValid = $($("#"+formId)).valid();
            if (isValid) {
                if(!vm.isTime){
                    if(wp.studyQuantum=="全天") {
                        wp.studyBeginTime="";
                        wp.studyEndTime="";
                    }else{
                        if($("#studyAllDay").val() && wp.studyBeginTimeStr){
                            wp.studyBeginTime = $("#studyAllDay").val() + " " + wp.studyBeginTimeStr + ":00";

                        }
                        if ($("#studyAllDay").val() && wp.studyEndTimeStr) {
                            wp.studyEndTime = $("#studyAllDay").val() + " " + wp.studyEndTimeStr + ":00";
                        }
                    }
                   workprogramSvc.createWP(wp, false, vm.iscommit, function (data) {
                        bsWin.alert("操作成功");
                    });
                }else{
                    bsWin.alert("结束时间必须大于开始时间！");
                }

            } else {
                bsWin.alert("操作失败，有红色*号的选项为必填项，请按要求填写！");
            }
        }

        /**
         * 查看专家信息
         * @param expertId
         */
        vm.checkExpertDetail = function(expertId){

            console.log(4);
            vm.expert = [];
            vm.id = expertId;
            expertSvc.getExpertById(vm.id, function (data) {
                vm.expert = data;
                $("#queryExportDetailsMWP").kendoWindow({
                    width: "80%",
                    height: "620px",
                    title: "专家详细信息",
                    visible: false,
                    modal: true,
                    open:function(){
                        $("#expertPhotoSrc").attr("src", rootPath + "/expert/transportImg?expertId=" + vm.expert.expertID + "&t=" + Math.random());
                        //tab标签
                        $("#busi_baseinfoMWP").addClass("active").addClass("in").show(500);
                        $('#myTabExpertMWP li').click(function (e) {
                            $("#busi_baseinfoMWP").removeClass("active").removeClass("in");
                            $("#busi_workplanMWP").removeClass("active").removeClass("in");
                            var aObj = $("a", this);
                            e.preventDefault();
                            aObj.tab('show');
                            var showDiv = aObj.attr("for-div");
                            // $("#" + showDiv).removeClass("active").removeClass("in");
                            $("#" + showDiv).addClass("active").addClass("in").show(500);
                        })
                        //评审过项目
                        vm.reviewProjectList2 = [];
                        expertSvc.reviewProjectGrid(vm.id,function(data){
                            vm.isLoading = false;
                            if(data && data.length > 0){
                                vm.reviewProjectList2 = data;
                                vm.noData = false;
                            }else{
                                vm.noData = true;
                            }

                        });
                    },
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('reviewOpinionCtrl', reviewOpinion);

    reviewOpinion.$inject = ['bsWin', 'signSvc','$state','dispatchSvc','workprogramSvc'];

    function reviewOpinion(bsWin, signSvc,$state,dispatchSvc,workprogramSvc) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '修改意见';
        vm.model = {};
        vm.dispatchDoc={};
        vm.model.signid = $state.params.signid;   //业务ID
        vm.model.processInstanceId = $state.params.processInstanceId;	//流程实例ID
        activate();
        function activate() {
            // 初始化业务信息
            signSvc.initFlowPageData(vm.model.signid, function (data) {
                vm.model = data;
                //审批表，部长意见的转换
                vm.model.ministerhandlesug=vm.model.ministerhandlesug.replace(/<br>/g,"\n");
                vm.dispatchDoc=vm.model.dispatchDocDto;
                if(vm.dispatchDoc){
                    //有发文时在转换
                    if(vm.dispatchDoc.ministerSuggesttion){
                        vm.dispatchDoc.ministerSuggesttion=vm.dispatchDoc.ministerSuggesttion.replace(/<br>/g,"\n");; //IE7-8
                    }
                   if(vm.dispatchDoc.viceDirectorSuggesttion){
                       vm.dispatchDoc.viceDirectorSuggesttion=vm.dispatchDoc.viceDirectorSuggesttion.replace(/<br>/g,"\n");; //IE7-8
                   }

                }
                if(vm.model.workProgramDtoList){
                    vm.workList=vm.model.workProgramDtoList;
                    //找出主方案，取出部门
                    for(var i=0;i<vm.model.workProgramDtoList.length;i++){
                        if(vm.model.workProgramDtoList[i].branchId=="1"){
                            vm.work=vm.model.workProgramDtoList[i];//主的工作方案
                            //初始化部门，得到数组
                            if(vm.work.reviewOrgName){
                                vm.reviewOrgName=vm.work.reviewOrgName.split(",")
                            }
                        }
                    }
                     //重新赋值个各个工作方案的所属部门
                    for(var i=0;i< vm.workList.length;i++){
                            vm.workList[i].orgName=vm.reviewOrgName[vm.model.workProgramDtoList[i].branchId-1];
                    }
                }
            });

        }

        vm.goBackMain = function(){
            $state.go('MaintainProjectEdit',{
                signid: vm.model.signid,
                processInstanceId:vm.model.processInstanceId
            });
        }
         //保存
        vm.create=function () {
            //项目登记表意见部长意见
            vm.model.ministerhandlesug=vm.model.ministerhandlesug.replace(/\n/g, '<br>'); //IE7-8
         //保存项目登记表意见
            signSvc.updateFillin(vm.model, function (data) {
                vm.model.ministerhandlesug=vm.model.ministerhandlesug.replace(/<br>/g,"\n");
            });
            //保存工作方案的意见
            if(vm.workList!=undefined && vm.workList.length!=0){
                for (var i=0;i<vm.workList.length;i++){
                    workprogramSvc.createWP(vm.workList[i], false, vm.iscommit);
                }
            }
             if(vm.dispatchDoc){
                 //保存发文意见
                 vm.dispatchDoc.signid=vm.model.signid;
                 //保存时对格式的转换
                 if(vm.dispatchDoc.ministerSuggesttion) {
                     vm.dispatchDoc.ministerSuggesttion = vm.dispatchDoc.ministerSuggesttion.replace(/\n/g, '<br>'); //IE7-8
                 }
                 if(vm.dispatchDoc.viceDirectorSuggesttion) {
                     vm.dispatchDoc.viceDirectorSuggesttion = vm.dispatchDoc.viceDirectorSuggesttion.replace(/\n/g, '<br>'); //IE7-8
                 }
                 dispatchSvc.saveDispatch(vm,function(data){
                     //更新完后再重新转换
                     if(vm.dispatchDoc.ministerSuggesttion) {
                         vm.dispatchDoc.ministerSuggesttion = vm.dispatchDoc.ministerSuggesttion.replace(/<br>/g, "\n");
                         ; //IE7-8
                     }
                     if(vm.dispatchDoc.viceDirectorSuggesttion) {
                         vm.dispatchDoc.viceDirectorSuggesttion = vm.dispatchDoc.viceDirectorSuggesttion.replace(/<br>/g, "\n");
                         ; //IE7-8
                     }
                     bsWin.alert(data.reMsg);
                 });
             }else{
                 bsWin.alert("操作成功")
             }


        }
    }
})();

(function(){
    'use strict';

    angular.module('app').controller('reviewWorkdayCtrl', reviewWorkday);

    reviewWorkday.$inject = ['$state' , 'reviewWorkdaysSvc' , 'bsWin'];

    function reviewWorkday($state , reviewWorkdaysSvc , bsWin){

        var vm = this ;
        vm.signId = $state.params.signid;
        vm.sign = {};

        vm.totalReviewDays = 0;//记录上次的总评审天数
        vm.lengthenDays = 0 ;//记录上次的延长天数
        activate();
        function activate(){
            reviewWorkdaysSvc.initReviewWorkDays(vm , function(data){
                vm.sign = data;

                //记录收文日期
                vm.oldSignDate = vm.sign.signdate;
                //记录上一次总评审天数
                vm.totalReviewDays = vm.sign.totalReviewdays;

                //记录上一次延长的天数
                vm.lengthenDays = vm.sign.lengthenDays;

                //计算已逝工作日  已逝工作日 = 总评审天数 - 剩余工作日
                vm.sign.reviewdays = vm.totalReviewDays - vm.sign.surplusdays;
            });
        }

        vm.saveReview = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                reviewWorkdaysSvc.saveReview(vm , function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.success("操作成功！");
                    }
                });
            }
        }

        /**
         * 改变评审时限时，剩余工作日、延长工作日自动更新
         */
        vm.changeTotalReviewDays = function(){

            //1、计算中实际延长工作日   实际延长工作日 =（现总评审天数 - 上次总评审天数 + 上次延长天数）
            vm.sign.lengthenDays = vm.sign.totalReviewdays - vm.totalReviewDays + vm.lengthenDays;

            //2、计算剩余工作日  剩余工作日 = 总评审天数 - 已逝工作日
            vm.sign.surplusdays = vm.sign.totalReviewdays - vm.sign.reviewdays;

        }

        /**
         * 改变延长工作日时，计算评审天数和剩余工作日
         */
        vm.changeLengthenDays = function(){
            //原来的评审天数 + 延长天数
            vm.sign.surplusdays +=  vm.sign.lengthenDays;

            //原来的剩余工作日 + 延长天数
            vm.sign.totalReviewdays +=  vm.sign.lengthenDays;
        }

        /**
         * 修改收文日期时，重新计算剩余工作日 ，已逝工作日
         * 通过原来的收文日期，与修改后新的收文日期来计算剩余工作日和已逝工作日 ，
         * 按原来日期和现在日期之间有多少个工作日进行加减
         * 如果现在的日期大于原来的日期，则剩余工作日增加，否则减少
         *
         */
        vm.changeSignDate = function(){
            reviewWorkdaysSvc.countWeekDays(vm.oldSignDate , vm.sign.signdate , function(data){
                vm.sign.surplusdays += data.reObj;
                vm.sign.reviewdays -= data.reObj;
            });


        }
    }
})();
(function(){
    'use strict';
    angular.module('app').factory("reviewWorkdaysSvc" , reviewWorkdays);
    reviewWorkdays.$inject = ['$http'];

    function reviewWorkdays($http){

        var service = {
            initReviewWorkDays : initReviewWorkDays ,//初始化评审工作日维护
            saveReview : saveReview , //保存维护的信息
            countWeekDays : countWeekDays , //计算剩余工作日
        };

        return service ;

        function countWeekDays(oldSignDate , signDate , callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/signView/admin/countWeekDays",
                params : {oldSignDate : oldSignDate , signDate : signDate}
            }

            var httpSuccess = function success(response){

                if(callBack != undefined && typeof  callBack == 'function'){
                    return callBack(response.data);
                }
            }
            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function initReviewWorkDays(vm , callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/maintainProject/initReviewDays",
                params : {signId : vm.signId}
            }

            var httpSuccess = function success(response){

                if(callBack != undefined && typeof  callBack == 'function'){
                    return callBack(response.data);
                }
            }
            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function saveReview(vm , callBack){
            var httpOptions  = {
                method : 'put',
                url : rootPath + "/maintainProject/saveReview",
                data : vm.sign
            }

            var httpSuccess = function(response){
                if(callBack != undefined && typeof callBack == 'function'){
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http ,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('meetingCtrl', meeting);

    meeting.$inject = ['bsWin', 'meetingSvc'];

    function meeting(bsWin, meetingSvc) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '会议室列表';
        vm.model = {};
        vm.del = function (id) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认删除数据吗？",
                onOk: function () {
                    meetingSvc.deleteMeeting(id, vm.isSubmit, function (data) {
                        vm.isSubmit = false;
                        if (data.flag || data.reCode == "ok") {
                            bsWin.alert("消息提示", "操作成功！", function () {
                                vm.gridOptions.dataSource.read();
                            });
                        } else {
                            bsWin.alert(data.reMsg);
                        }
                    });
                }
            });
        }

        vm.used = function (id) {
            vm.model.id = id;
            vm.model.mrStatus = "1";//显示停用标志
            meetingSvc.roomUseState(vm.model,function(data){
                bsWin.alert("操作成功！",function(){
                    vm.gridOptions.dataSource.read();
                });
            });
        }

        //停用会议室
        vm.stoped = function (id) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认停用么？",
                onOk: function () {
                    vm.model.id = id;
                    vm.model.mrStatus = "2";//显示启用标志
                    meetingSvc.roomUseState(vm.model,function(data){
                        bsWin.alert("操作成功！",function(){
                            vm.gridOptions.dataSource.read();
                        });
                    });
                }
            });
        }

        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                bsWin.alert("请选择数据");
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        }

        //会议室查询
        vm.queryMeeting = function () {
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        /**
         * 重置
         */
        vm.formReset = function(){
            var tab = $("#meetingForm").find('input,select');
            $.each(tab, function (i, obj) {
                obj.value = "";
            });
        }

        activate();
        function activate() {
            meetingSvc.grid(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('meetingEditCtrl', meeting);

    meeting.$inject = ['bsWin', 'meetingSvc', '$state'];

    function meeting(bsWin, meetingSvc, $state) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '添加会议室';
        vm.isuserExist = false;
        vm.id = $state.params.id;
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '更新会议室';
        }

        /**
         * 创建会议室
         */
        vm.create = function () {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                meetingSvc.createMeeting(vm.model, vm.isSubmit,function(data){
                    if (data.flag || data.reCode == "ok") {
                        bsWin.alert("消息提示", "操作成功！", function () {
                            location.href = '#/meeting';
                        });
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("信息没填写正确！");
            }

        };

        /**
         * 更改
         */
        vm.update = function () {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.model.id = vm.id;
                meetingSvc.updateMeeting(vm.model, vm.isSubmit,function(data) {
                    if (data.flag || data.reCode == "ok") {
                        bsWin.alert("操作成功");
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("信息没填写正确！");
            }
        };

        activate();
        function activate() {
            if (vm.isUpdate) {
                meetingSvc.getMeetingById(vm);
            } else {

            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('meetingSvc', meeting);

    meeting.$inject = ['$http'];

    function meeting($http) {
        var url_meeting = rootPath + "/meeting";
        var url_back = '#/meeting';
        var service = {
            grid: grid,
            getMeetingById: getMeetingById,
            createMeeting: createMeeting,               //创建会议室
            deleteMeeting: deleteMeeting,               //删除会议室
            updateMeeting: updateMeeting,               //更新会议室
            roomUseState: roomUseState,                 //更改会议室状态
            findAllMeeting:findAllMeeting,              //查询所有的会议室
        };
        return service;


        // begin#updateUser
        function updateMeeting(model,isSubmit,callBack) {
            isSubmit = true;
            var httpOptions = {
                method: 'put',
                url: url_meeting,
                data: model
            }

            var httpSuccess = function success(response) {
                isSubmit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#deleteUser
        function deleteMeeting(id,isSubmit,callBack) {
            isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_meeting,
                params: {id: id}
            }
            var httpSuccess = function success(response) {
                isSubmit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        function roomUseState(model,callBack) {
            var httpOptions = {
                method: 'put',
                url: url_meeting + "/roomUseState",
                data: model
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#createUser
        function createMeeting(model,iscommit,callBack) {
            iscommit = true;
            var httpOptions = {
                method: 'post',
                url: url_meeting,
                data: model
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {
                    iscommit = false;
                }
            });
        }

        // begin#getUserById
        function getMeetingById(vm) {
            var httpOptions = {
                method: 'get',
                url: url_meeting + "/html/findByIdMeeting",
                params: {id: vm.id}
            }
            var httpSuccess = function success(response) {
                vm.model = response.data;
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#grid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_meeting + "/fingByOData", $("#meetingForm")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSourc

            //S_序号
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                }
                ,
                {
                    field: "num",
                    title: "编号",
                    width: "8%",
                    filterable: false
                },
                {
                    field: "mrName",
                    title: "会议室名称",
                    width: "25%",
                    filterable: false
                },
                {
                    field: "mrType",
                    title: "类型",
                    width: "10%",
                    filterable: false
                },
                {
                    field: "addr",
                    title: "会议室地点",
                    width: "25%",
                    filterable: false
                },
                {
                    field: "capacity",
                    title: "容量",
                    width: "10%",
                    filterable: false
                },
                /*  {
                 field: "userName",
                 title: "负责人",
                 width: 70,
                 filterable: false
                 },
                 {
                 field: "userPhone",
                 title: "负责人电话",
                 width: 120,
                 filterable: false
                 },*/
                {
                    field: "",
                    title: "状态",
                    width: "8%",
                    template: function (item) {
                        if (item.mrStatus == "2") {
                            return "停用";
                        } else {
                            return "正常";
                        }
                    }
                },
                {
                    field: "",
                    title: "操作",
                    width: "14%",
                    template: function (item) {
                        var isUse = false;
                        if (item.mrStatus == "2") {
                            isUse = true;//会议室可用
                        } else {
                            isUse = false;//会议室不可用
                        }
                        //return common.format($('#columnBtns').html(),"vm.stoped('" + item.id + "')",isUse,"vm.used('" + item.id + "')",isUse, item.id,"vm.del('" + item.id + "')");
                        return common.format($('#columnBtns').html(), "vm.stoped('" + item.id + "')", isUse, "vm.used('" + item.id + "')", isUse, item.id);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };
        }// end fun grid


        //S_查询所有的会议室
        function findAllMeeting(callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/meeting/findAll",
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){}
            });
        }

    }
})();
/**
 * Created by Administrator on 2018/5/8 0008.
 */
(function () {
    'use strict';

    angular.module('app').controller('msgCtrl', msgFc);

    msgFc.$inject = ['$location','msgSvc','$state','$http'];

    function msgFc($location, msgSvc,$state,$http) {
        var vm = this;
        vm.title = '短信列表';
        vm.model={};
        activate();
        function activate() {

        }
    }
})();

/**
 * Created by Administrator on 2018/5/8 0008.
 */
(function() {
    'use strict';

    angular.module('app').factory('msgSvc', msgSvcFc);

    msgSvcFc.$inject = ['$rootScope', '$http'];

    function msgSvcFc($rootScope, $http) {

        return {
            initGrid : initGrid,                        //短信发送表格
            initOrgAndUser : initOrgAndUser,            //初始化部门和用户列表
            saveMsgInfo : saveMsgInfo,                  //保存用户信息
        };

        function initGrid(){

        }

        /**
         * 初始化部门和用户信息
         * @param callBack
         */
        function initOrgAndUser(callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/sharingPlatlform/initOrgAndUser",
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        /**
         * 保存用户信息
         * @param vm
         * @param callBack
         */
        function saveMsgInfo(vm,callBack){

        }

    }
})();

/**
 * Created by Administrator on 2018/5/8 0008.
 */
(function () {
    'use strict';

    angular.module('app').controller('msgEditCtrl', msgEditFc);

    msgEditFc.$inject = ['$location','msgSvc','sharingPlatlformSvc','$http'];

    function msgEditFc($location, msgSvc,sharingPlatlformSvc,$http) {
        var vm = this;
        vm.title = '短信编辑';
        vm.model={};
        vm.businessFlag = {
            isLoadOrgUser : false
        };

        activate();
        function activate() {
            msgSvc.initOrgAndUser(function(data){
                vm.shareOrgList = data.orgDtoList;
                vm.noOrgUsetList = data.noOrgUserList;
                vm.businessFlag.isLoadOrgUser = true;
            });
        }

        /**
         * 保存发布信息
         */
        vm.create = function () {
            msgSvc.saveMsgInfo(vm);
        };
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('registerFileCtrl', registerFile);

    registerFile.$inject = ['$location','registerFileSvc','$state','$http']; 

    function registerFile($location, registerFileSvc,$state,$http) {
        var vm = this;
        vm.title = '待办事项';
        vm.addregister={};
        vm.model={};
        vm.model.signid=$state.params.signid;
        activate();
        function activate() {
        	vm.showPrint=false;
        	registerFileSvc.grid(vm);
        }
        vm.print = function(){
        	//vm.registerFileList={};
    		//vm.signdto={};
            signcommon.registerFilePrint(vm,{$http: $http});
        }
        vm.findbySuppleDate = function(e){
        	
        }
    }
})();

(function() {
	'use strict';

	angular.module('app').factory('registerFileSvc', registerFile);

	registerFile.$inject = ['$rootScope', '$http'];

	function registerFile($rootScope, $http) {
		var addregister_url = rootPath + "/addRegisterFile";
		
		return {
			grid : grid
		};

		// begin#grid
		function grid(vm) {
			
			// Begin:dataSource
			var dataSource = new kendo.data.DataSource({
						type : 'odata',
						transport : common.kendoGridinlineConfig().transport(
								vm, {
									readUrl : addregister_url
											+ "/findByOData",
									updateUrl : addregister_url + "/update",
									destroyUrl : addregister_url + "/delete",
									createUrl : addregister_url + "/create/"+vm.model.signid},
									{filter: "signid eq '"+vm.model.signid+"'"}),
						schema : common.kendoGridConfig().schema({
									id : "id",
									fields : {
										fileName : {
											validation: { required: true },
											type : "String"
										},
										totalNum : {
											type : "number",
											validation: { required: true, min: 1}
										},
										isHasOriginfile : {
											type : "boolean"
										},
										isHasCopyfile : {
											type : "boolean"
										},
										suppleDeclare : {
											type : "string"
										},
										suppleDate : {
											type : "date"
										},
										createdDate : {
											type : "date"
										},
										modifiedDate : {
											type : "date"
										}
									}
								}),
						batch : true,
						pageSize : 10,
						serverPaging : true,
						serverSorting : true,
						serverFiltering : true,
						sort : {
							field : "createdDate",
							dir : "desc"
						}
					});

			// End:dataSource

			// S_序号
			var dataBound = function() {
				var rows = this.items();
				var page = this.pager.page() - 1;
				var pagesize = this.pager.pageSize();
				$(rows).each(function() {
							var index = $(this).index() + 1 + page * pagesize;
							var rowLabel = $(this).find(".row-number");
							$(rowLabel).html(index);
						});
			}
			// S_序号
			// Begin:column
			var columns = [{
						field : "",
						title : "序号",
						width : 50,
						filterable : false,
						template : "<span class='row-number'></span>"
					}, {
						field : "fileName",
						title : "资料名称",
						width : "120px",
						filterable : false
					}, {
						field : "totalNum",
						title : "份数",
						width : "120px",
						filterable : false
					}, {
						field : "isHasOriginfile",
						title : "原件",
						width : "120px",
						filterable : false,
						template : function(item) {
							if (item.isHasOriginfile) {
								return "是";
							} else {
								return "否";
							}
						}
					}, {
						field : "isHasCopyfile",
						title : "复印件",
						width : "120px",
						filterable : false,
						template : function(item) {
							if (item.isHasCopyfile) {
								return "是";
							} else {
								return "否";
							}
						}
					}, {
						field : "suppleDeclare",
						title : "补充说明",
						width : "120px",
						filterable : false
					}, {
						field : "suppleDate",
						title : "补充日期",
						width : "120px",
						format : "{0:yyyy-MM-dd}",
						filterable : false
					}, {
						command : ["destroy"],
						title : "&nbsp;",
						width : "250px"
					}];// 列
			// End:column

			vm.gridOptions = {
				dataSource : common.gridDataSource(dataSource),
				filterable : common.kendoGridinlineConfig().filterable,
				pageable : common.kendoGridinlineConfig().pageable,
				noRecords : common.kendoGridConfig().noRecordMessage,
				columns : columns,
				toolbar : ["create", "save", "cancel"],
				dataBound : dataBound,
				editable : true,
				navigatable : true,
				resizable : true
			};

		}// end fun grid

	}
})();
(function () {
    'use strict';

    angular.module('app').controller('suppletterCtrls', suppletter);

    suppletter.$inject = ['$location','suppletterSvc','$state','$http']; 

    function suppletter($location, suppletterSvc,$state,$http) {
        var vm = this;
        vm.showsupp=false;
        vm.title = '拟补资料函';
        vm.suppletter={};
        vm.model = {};
        vm.model.signid=$state.params.signid;
        vm.suppletter.id=$state.params.id;
        activate();
        function activate() {
        	//signcommon.initSuppData(vm,{$http:$http,$state:$state});
        }
        vm.addSuppContent=function(){
        	vm.showsupp=true;
        	 var ideaEditWindow = $("#addsuppContent");
       		 ideaEditWindow.kendoWindow({
	            width: "50%",
	            height: "80%",
	            title: "拟补资料函正文",
	            visible: false,
	            modal: true,
	            closable: true,
	            actions: ["Pin", "Minimize", "Maximize", "close"]
	        }).data("kendoWindow").center().open();

        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('suppletterSvc', suppletter);

    suppletter.$inject = ['$rootScope', '$http'];

    function suppletter($rootScope, $http) {

        var service = {
        }
        return service;
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('monthlyHistoryCtrl', monthlyHistory);

    monthlyHistory.$inject = ['$location', 'monthlyHistorySvc'];

    function monthlyHistory($location, monthlyHistorySvc) {
        var vm = this;
        vm.title = '月报简报历史数据管理';

        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    monthlyHistorySvc.deletemonthlyHistory(vm, id);
                }
            });
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };

        activate();
        function activate() {
        	monthlyHistorySvc.monthlyHistoryGrid(vm);
            monthlyHistorySvc.deleteGridOptions(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('monthlyHistoryEditCtrl', monthlyHistory);

    monthlyHistory.$inject = ['$location', 'monthlyHistorySvc', '$state','bsWin'];

    function monthlyHistory($location, monthlyHistorySvc, $state,bsWin) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '添加月报简报历史数据';
        vm.isuserExist = false;
        vm.id = $state.params.id;
        vm.monthly = {};
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '更新月报简报';
        }

        //创建月报简报历史数据
        vm.createHistory = function () {
            common.initJqValidation();
            var isValid = $('form').valid();
	          if(isValid){
	        	  monthlyHistorySvc.createmonthlyHistory(vm.monthly,function(data){
	                   if (data.flag || data.reCode == "ok") {
                              vm.monthly = data.reObj;
	                           bsWin.alert("操作成功！");
	                   }else{
	                       bsWin.error(data.reMsg);
	                   }
	               });
	           }else{
	        	   bsWin.alert("缺少部分没有填写，请仔细检查");
	           }
        };
        vm.updateMonthly = function () {
            monthlyHistorySvc.updatemonthlyHistory(vm);
        };

        activate();
        function activate() {
            if (vm.isUpdate) {
                monthlyHistorySvc.getmonthlyHistoryById(vm);
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('monthlyHistorySvc', monthlyHistory);

    monthlyHistory.$inject = ['$http'];

    function monthlyHistory($http) {
        var url_monthlyHistory = rootPath + "/monthlyNewsletter", url_back = '#/monthlyNewsletterList';
        var service = {
            monthlyHistoryGrid: monthlyHistoryGrid,//月报简报管理列表
            deleteGridOptions:deleteGridOptions,//已删除月报简报列表
            createmonthlyHistory: createmonthlyHistory,//添加月报简报历史数据
            deletemonthlyHistory: deletemonthlyHistory,//删除月报简报记录
            getmonthlyHistoryById: getmonthlyHistoryById,//根据ID查询
            updatemonthlyHistory: updatemonthlyHistory//编辑月报简报
        };

        return service;

        // begin#updatemonthlyHistory
        function updatemonthlyHistory(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;
                vm.monthly.id = vm.id;// id
                var httpOptions = {
                    method: 'put',
                    url: url_monthlyHistory+"/monthlyEdit",
                    data: vm.monthly
                }
                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                }
                            })
                        }

                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } else {
                // common.alert({
                // vm:vm,
                // msg:"您填写的信息不正确,请核对后提交!"
                // })
            }

        }

        // begin#删除月报简报记录
        function deletemonthlyHistory(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_monthlyHistory+"/deleteHistory",
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                    	common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog :true,
                            fn: function () {
                            	vm.isSubmit = false;
                                vm.gridOptions.dataSource.read();
                                refresh();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //刷新页面
        function refresh(){
            window.location.reload();
        }
        // begin#添加月报简报历史数据
        function createmonthlyHistory(monthly,callBack) {
                var httpOptions = {
                    method: 'post',
                    url: url_monthlyHistory+"/savaHistory",
                    data:monthly
                };
                var httpSuccess = function success(response) {
                	 if (callBack != undefined && typeof callBack == 'function') {
                         callBack(response.data);
                     }
                };

                common.http({
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

        }
      //end#添加月报简报历史数据

        // begin#getmonthlyHistoryById
        function getmonthlyHistoryById(vm) {
        	var httpOptions = {
                method: 'get',
                url: rootPath + "/monthlyNewsletter/html/findById",
                params:{id:vm.id}
            };
            var httpSuccess = function success(response) {
                vm.monthly = response.data;
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });                       
        }

        // begin#grid
        function monthlyHistoryGrid(vm) {

            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_monthlyHistory+"/mothlyHistoryList"),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

          //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
				    field: "rowNumber",
				    title: "序号",
				    width: 50,
				    filterable : false,
				    template: "<span class='row-number'></span>"
				 },
                {
                    field: "startDay",
                    title: "开始时间",
                    width: 100,
                    filterable: false,
                    format: "{0: yyyy-MM-dd HH:mm:ss}"
                },
                {
                    field: "startDay",
                    title: "结束时间",
                    width: 100,
                    filterable: false,
                    format: "{0: yyyy-MM-dd HH:mm:ss}"
                },
                {
                    field: "stageMunber",
                    title: "已评审项目数",
                    width: 120,
                    filterable: false
                },
                
                {
                    field: "declarationSum",
                    title: "报审总投资",
                    width: 100,
                    filterable: false
                },
                {
                    field: "assessorSum",
                    title: "审核总投资",
                    width: 100,
                    filterable: false
                },
            
                {
                    field: "authorizedUser",
                    title: "录入人",
                    width: 100,
                    filterable: false
                },
                {
                    field: "authorizedTime",
                    title: "录入时间",
                    width: 100,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 100,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                            item.id,"vm.del('" + item.id + "')");
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                dataBound:dataBound,
                columns: columns,
                resizable: true
            };

        }// end fun grid
        
        // begin#grid
        function deleteGridOptions(vm) {
            /// Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_monthlyHistory+"/deleteHistoryList"),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

          //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
				    field: "rowNumber",
				    title: "序号",
				    width: 50,
				    filterable : false,
				    template: "<span class='row-number'></span>"
				 },
                {
                    field: "startDay",
                    title: "开始时间",
                    width: 100,
                    filterable: false,
                    format: "{0: yyyy-MM-dd HH:mm:ss}"
                },
                {
                    field: "startDay",
                    title: "结束时间",
                    width: 100,
                    filterable: false,
                    format: "{0: yyyy-MM-dd HH:mm:ss}"
                },
                {
                    field: "stageMunber",
                    title: "已评审项目数",
                    width: 120,
                    filterable: false
                },
                
                {
                    field: "declarationSum",
                    title: "报审总投资",
                    width: 100,
                    filterable: false
                },
                {
                    field: "assessorSum",
                    title: "审核总投资",
                    width: 100,
                    filterable: false
                },
            
                {
                    field: "authorizedUser",
                    title: "录入人",
                    width: 100,
                    filterable: false
                },
                {
                    field: "authorizedTime",
                    title: "录入时间",
                    width: 100,
                    filterable: false
                },
                
            ];
            // End:column

            vm.deleteGridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                dataBound:dataBound,
                columns: columns,
                resizable: true
            };

        }// end fun grid

        
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('monthlyMultiFileCtrl', monthlyMultiFile);

    monthlyMultiFile.$inject = ['$location', 'monthlyMultiyearSvc','$state','bsWin','$rootScope'];

    function monthlyMultiFile($location, monthlyMultiyearSvc,$state,bsWin,$rootScope) {
        var vm = this;
        vm.title = '月报简报查询';

        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.multiyearGrid.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }

        activate();
        function activate() {


            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                monthlyMultiyearSvc.monthlyMultiyearGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                monthlyMultiyearSvc.monthlyMultiyearGrid(vm);
            }

        }

        //查询
         vm.addSuppQuery = function(){
             vm.multiyearGrid.dataSource._skip=0;
             vm.multiyearGrid.dataSource.read();
         }
         //重置
         vm.resetAddSupp = function(){
        	 var tab = $("#form").find('input,select');
 			$.each(tab, function(i, obj) {
 				obj.value = "";
 			});
         }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('monthlyMultiyearCtrl', monthlyMultiyear);

    monthlyMultiyear.$inject = ['$location', 'monthlyMultiyearSvc','$state','bsWin','$rootScope'];

    function monthlyMultiyear($location, monthlyMultiyearSvc,$state,bsWin,$rootScope) {
        var vm = this;
        vm.title = '年度月报简报';
        vm.suppletter = {};
        vm.suppletter.fileYear = $state.params.year;
      //给年份赋值
        $("#fileYear").val(vm.suppletter.fileYear);
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.monthlyYearGrid.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }

        activate();
        function activate() {
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                monthlyMultiyearSvc.monthlyYearGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                monthlyMultiyearSvc.monthlyYearGrid(vm);
            }

            monthlyMultiyearSvc.findAllOrg(vm);
        }

        //查询
         vm.addSuppQuery = function(){
         	 monthlyMultiyearSvc.addSuppQuery(vm);
         }
         //重置
         vm.resetAddSupp = function(){
        	 var tab = $("#form_monthly").find('input,select');
 			$.each(tab, function(i, obj) {
 				obj.value = "";
 			});
         }
         
        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    monthlyMultiyearSvc.deletemonthlyMultiyear(vm, id);
                }
            });
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('monthlyMultiyearEditCtrl', monthlyMultiyear);

    monthlyMultiyear.$inject = ['monthlyMultiyearSvc', 'sysfileSvc', '$state', 'bsWin', '$scope'];

    function monthlyMultiyear(monthlyMultiyearSvc, sysfileSvc, $state, bsWin, $scope) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '添加月报简报稿纸';
        vm.isuserExist = false;
        vm.isSubmit = true;
        vm.suppletter = {};//文件稿纸对象
        vm.id = $state.params.id;
        vm.type = $state.params.type;
        vm.suppletter.id = $state.params.id;
        vm.suppletter.fileYear = $state.params.year;

        if (vm.id) {
            vm.isUpdate = true;
            vm.isflow = true;//显示发起流程的按钮
            vm.title = '更新月报简报稿纸';
        }

        vm.businessFlag = {
            isInitFileOption: false,   //是否已经初始化附件上传控件
        }

        activate();
        function activate() {
            if (vm.isUpdate) {
                monthlyMultiyearSvc.getmonthlyMultiyearById(vm.id, function (data) {
                    vm.suppletter = data;
                    vm.initFileUpload();
                });
            }else{
                monthlyMultiyearSvc.initMonthlyMultiyear(function(data){
                    vm.suppletter = data;
                    vm.suppletter.fileYear = $state.params.year;
                    vm.initFileUpload();
                });
            }
        }

        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.suppletter.id) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.suppletter.id", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }
            vm.sysFile = {
                businessId: vm.suppletter.id,
                mainId: vm.suppletter.id,
                mainType: sysfileSvc.mainTypeValue().SIGN,
                sysfileType: sysfileSvc.mainTypeValue().MONTH_FILE,
                sysBusiType: sysfileSvc.mainTypeValue().MONTH_FILE,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm
            });
        }

        //保存中心文件（稿纸）
        vm.saveAddSuppletter = function () {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.suppletter.fileType = "2";//区分是不是简报
                monthlyMultiyearSvc.createmonthlyMultiyear(vm.suppletter, function (data) {
                    if (data.flag || data.reCode == "ok") {
                        vm.suppletter = data.reObj;
                        vm.id = data.reObj.id;//保存后取得id,流程发起需要
                        bsWin.alert("操作成功！");
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("缺少部分没有填写，请仔细检查");
            }
        };
        //更新中心文件（稿纸）
        vm.updateAddSuppletter = function () {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                monthlyMultiyearSvc.updatemonthlyMultiyear(vm.suppletter, function (data) {
                    //console.log(data);
                    if (data.flag || data.reCode == "ok") {
                        bsWin.alert("操作成功！");
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("缺少部分没有填写，请仔细检查");
            }
        };
        //************************** S 以下是新流程处理js **************************//
        vm.startNewFlow = function (id) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认已经完成填写，并且发起流程么？",
                onOk: function () {
                    $('.confirmDialog').modal('hide');
                    if (id) {//当是更新提交时，先更新在提交
                        monthlyMultiyearSvc.updatemonthlyMultiyear(vm.suppletter, function (data) {//提交时先更新在提交
                            if (data.flag || data.reCode == "ok") {
                                monthlyMultiyearSvc.startFlow(id, function (data) {//更新的提交
                                    if (data.flag || data.reCode == 'ok') {
                                        bsWin.success("操作成功！", function () {
                                            location.href = "#/theMonthsList";//保存成功后跳转到列表
                                        });
                                    } else {
                                        bsWin.error(data.reMsg);
                                    }
                                });
                            } else {
                                bsWin.error(data.reMsg);
                            }
                        });
                    } else {//当是保存时提交就先保存
                        vm.suppletter.fileType = "2";//区分是不是简报
                        monthlyMultiyearSvc.createmonthlyMultiyear(vm.suppletter, function (data) {
                            if (data.flag || data.reCode == "ok") {
                                vm.suppletter = data.reObj;
                                vm.id = data.reObj.id;                            //保存后取得id,流程发起需要
                                monthlyMultiyearSvc.startFlow(vm.id, function (data) {//更新的提交
                                    if (data.flag || data.reCode == 'ok') {
                                        bsWin.success("操作成功！", function () {
                                            location.href = "#/theMonthsList";//保存成功后跳转到列表
                                        });
                                    } else {
                                        bsWin.error(data.reMsg);
                                    }
                                });
                            } else {
                                bsWin.error(data.reMsg);
                            }
                        });
                    }
                }
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('monthlyMultiyearSvc', monthlyMultiyear);

    monthlyMultiyear.$inject = ['$http', 'bsWin'];

    function monthlyMultiyear($http, bsWin) {
        var url_monthlyMultiyear = rootPath + "/monthlyNewsletter", url_back = '#/monthlyNewsletterList';
        var url_user = rootPath + "/user";
        var service = {
            createmonthlyMultiyear: createmonthlyMultiyear, //添加中心文件稿纸
            initMonthlyMultiyear: initMonthlyMultiyear,     //初始化中心文件稿纸
            monthlyMultiyearGrid: monthlyMultiyearGrid,     //月报简报文件查询列表
            monthlyYearGrid: monthlyYearGrid,  			    //月报简报详情列表（跟拟补充资料函一个表）
            getmonthlyMultiyearById: getmonthlyMultiyearById,//根据ID查找中心文件稿纸
            updatemonthlyMultiyear: updatemonthlyMultiyear,	//更新中心文件稿纸
            //updateApprove: updateApprove,					//领导审批中心文件
            addSuppQuery: addSuppQuery,						//查询
            findAllOrg: findAllOrg,							//查询部门
            findAllUser: findAllUser,  						//查询用户
            deletemonthlyMultiyear: deletemonthlyMultiyear, //删除年度（中心）月报简报记录
            startFlow: startFlow,                           //启动流程
            initFlowDeal: initFlowDeal                      //初始化流程数据
        };

        return service;

        //S_查询用户
        function findAllUser(vm) {
            var httpOptions = {
                method: 'get',
                url: common.format(url_user + "/findAllUsers")
            }
            var httpSuccess = function success(response) {
                vm.userlist = {};
                vm.userlist = response.data;
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //E_查询用户

        //S_查询部门列表
        function findAllOrg(vm) {
            var httpOptions = {
                method: 'get',
                url: common.format(url_user + "/getOrg")
            }
            var httpSuccess = function success(response) {
                vm.orglist = {};
                vm.orglist = response.data;
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //E_查询部门列表

        //查询
        function addSuppQuery(vm) {
            vm.monthlyYearGrid.dataSource._skip=0;
            vm.monthlyYearGrid.dataSource.read();
        }

        //S 领导审批中心文件处理
       /* function updateApprove(vm) {
            var httpOptions = {
                method: 'post',
                url: url_monthlyMultiyear + "/updateApprove",
                data: vm.suppletter
            };
            var httpSuccess = function success(response) {
                bsWin.success("操作成功！")
            };
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }*/
        //E 领导审批中心文件处理

        //S 初始化中心文件稿纸
        function initMonthlyMultiyear(callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/monthlyNewsletter/initMonthlyMultiyear",
            };

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //E 初始化中心文件稿纸

        // begin#updatemonthlyMultiyear
        function updatemonthlyMultiyear(suppletter, callBack) {
            var httpOptions = {
                method: 'post',
                url: url_monthlyMultiyear + "/saveMonthlyMultiyear",
                data: suppletter
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#删除年度(中心)月报简报记录
        function deletemonthlyMultiyear(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_monthlyMultiyear + "/deleteMutiyear",
                data: id
            };

            var httpSuccess = function success(response) {
                bsWin.alert("操作成功",function () {
                    vm.isSubmit = false;
                    vm.monthlyYearGrid.dataSource.read();
                })

            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#添加中心文件稿纸
        function createmonthlyMultiyear(suppletter, callBack) {
            var httpOptions = {
                method: 'post',
                url: url_monthlyMultiyear + "/saveMonthlyMultiyear",
                data: suppletter
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        //end#添加月报简报历史数据

        // begin#getmonthlyMultiyearById
        function getmonthlyMultiyearById(id, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/addSuppLetter/findById",
                params: {id: id}
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //S 年度月报简报列表
        function monthlyYearGrid(vm) {
     /*       var dataSource = new kendo.data.DataSource({
                type : 'odata',
                transport : common.kendoGridConfig().transport(rootPath + "/addSuppLetter/monthlyMultiyearList", $("#form_monthly"), {filter:"fileYear eq '"+vm.suppletter.fileYear+"' and fileType eq '2' and monthlyType eq '月报简报'"}),
                schema : common.kendoGridConfig().schema({
                    id : "id",
                    fields : {
                        createdDate : {
                            type : "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: false,
                pageSize: 10,
                sort : {
                    field : "createdDate",
                    dir : "desc"
                }
            });*/
            var dataSource = common.kendoGridDataSource(rootPath + "/addSuppLetter/monthlyMultiyearList",$("#form_monthly"),vm.queryParams.page,vm.queryParams.pageSize,vm.gridParams);
        /*    //S_序号
            var dataBound = function () {
                var rows = this.items();
                $(rows).each(function () {
                    var index = $(this).index() + 1;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号*/
            // Begin:column
            var columns = [
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },{
                    field: "title",
                    title: "文件标题",
                    width: 180,
                    filterable: false,
                    template: function (item) {
                        if(!item.processInstanceId){
                            return '<a ng-click="vm.saveView()" href="#/monthlyMultiyearEdit/'+vm.suppletter.fileYear+'/' + item.id + '" >' + item.title + '</a>';
                        }else{
                            return '<a ng-click="vm.saveView()" href="#/monthlyMultiyView/' + item.id + '" >' + item.title + '</a>';
                        }

                    }
                },
                {
                    field: "orgName",
                    title: "拟办部门",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "userName",
                    title: "拟稿人",
                    width: 120,
                    filterable: false
                },

                {
                    field: "suppLetterTime",
                    title: "拟稿时间",
                    width: 100,
                    filterable: false
                },
                {
                    field: "secretLevel",
                    title: "秘密等级",
                    width: 100,
                    filterable: false
                },

                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        var isStartFlow = true;
                        if(angular.isUndefined(item.processInstanceId) || item.processInstanceId == ''){
                            isStartFlow = false;
                        }
                        return common.format($('#columnBtns').html(),vm.suppletter.fileYear, item.id, isStartFlow,item.createdBy,item.id,"vm.del('" + item.id + "')");
                    }
                }
            ];
            // End:column
            vm.monthlyYearGrid = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
              /*  pageable: common.kendoGridConfig().pageable,*/
                noRecords: common.kendoGridConfig().noRecordMessage,
                pageable : common.kendoGridConfig(vm.queryParams).pageable,
                dataBound:common.kendoGridConfig(vm.queryParams).dataBound,
                columns: columns,
                resizable: true
            };
        }
        //E 年度月报简报列表

        // begin#中心文件查询列表
        function monthlyMultiyearGrid(vm) {

            var dataSource = common.kendoGridDataSource(rootPath + "/addSuppLetter/monthlyMultiyearList",$("#form"),vm.queryParams.page,vm.queryParams.pageSize,vm.gridParams);
            // End:dataSource


            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "title",
                    title: "文件标题",
                    width: "30%",
                    filterable: false,
                    template: function (item) {
                        return '<a ng-click="vm.saveView()" href="#/monthlyMultiyView/' + item.id + '" >' + item.title + '</a>';
                    }
                },
                {
                    field: "orgName",
                    title: "拟办部门",
                    width: "10%",
                    filterable: false,
                },
                {
                    field: "userName",
                    title: "拟稿人",
                    width: "10%",
                    filterable: false
                },

                {
                    field: "suppLetterTime",
                    title: "拟稿时间",
                    width: "10%",
                    filterable: false
                },
                {
                    field: "secretLevel",
                    title: "秘密等级",
                    width: "10%",
                    filterable: false
                },

                {
                    field: "",
                    title: "操作",
                    width: 80,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),item.id, item.appoveStatus);
                    }
                }
            ];
            // End:column
            vm.multiyearGrid = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                pageable : common.kendoGridConfig(vm.queryParams).pageable,
                dataBound:common.kendoGridConfig(vm.queryParams).dataBound,
                columns: columns,
                resizable: true
            };
        }// end#中心文件查询列表


        //S_startFlow
        function startFlow(id, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/monthlyNewsletter/startFlow",
                params: {
                    id: id
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_startFlow

        //S_初始化流程数据
        function initFlowDeal(vm) {
            getmonthlyMultiyearById(vm.businessKey, function (data) {
                vm.suppletter = data;
            })
        }//E_initFlowDeal

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('monthlyMultiyViewCtrl', monthlyMultiyView);

    monthlyMultiyView.$inject = ['monthlyMultiyearSvc', 'sysfileSvc', '$state', 'bsWin', '$scope'];

    function monthlyMultiyView(monthlyMultiyearSvc, sysfileSvc, $state, bsWin, $scope) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '月报详情页面';
        vm.suppletter = {};//文件稿纸对象
        vm.id = $state.params.id;

        activate();
        function activate() {
            monthlyMultiyearSvc.getmonthlyMultiyearById(vm.id, function (data) {
                vm.suppletter = data;
                //初始化附件
                sysfileSvc.findByBusinessId(vm.id , function(data){
                    vm.sysFilelists = data;
                    vm.initFileUpload();
                });

            });
        }

        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.suppletter.id) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.suppletter.id", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        console.log(newValue);
                        console.log(oldValue);
                        vm.initFileUpload();
                    }
                });
            }
            vm.sysFile = {
                businessId: vm.suppletter.id,
                mainId: vm.suppletter.id,
                mainType: sysfileSvc.mainTypeValue().SIGN,
                sysfileType: sysfileSvc.mainTypeValue().MONTH_FILE,
                sysBusiType: sysfileSvc.mainTypeValue().MONTH_FILE,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm
            });
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('monthlyNewsletterCtrl', monthlyNewsletter);

    monthlyNewsletter.$inject = ['bsWin', 'monthlyNewsletterSvc'];

    function monthlyNewsletter(bsWin, monthlyNewsletterSvc) {
        var vm = this;
        vm.title = '月报简报列表';

        activate();
        function activate() {
            monthlyNewsletterSvc.monthlyNewsletterGrid(vm);
            monthlyNewsletterSvc.monthlyDeleteGrid(vm);
        }
      
        vm.del = function (id) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认删除数据吗？",
                onOk: function () {
                    monthlyNewsletterSvc.deleteMonthlyNewsletter(id,function(data){
                        if(data.flag || data.reCode=='ok'){
                            bsWin.alert("操作成功！",function(){
                                vm.gridOptions.dataSource.read();
                                vm.monthlyDeleteGridOptions.dataSource.read();
                            })
                        }
                    });
                }
            });
        }

        vm.restore = function (id) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认恢复数据吗？",
                onOk: function () {
                    monthlyNewsletterSvc.restoreMonthlyNewsletter(id,function(data){
                        if(data.flag || data.reCode=='ok'){
                            bsWin.alert("操作成功！",function(){
                                vm.gridOptions.dataSource.read();
                                vm.monthlyDeleteGridOptions.dataSource.read();
                            })
                        }
                    });
                }
            });
        }

        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                bsWin.alert("请选择要删除的数据！");
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };


        vm.restorePatch = function () {
            var selectIds = common.getKendoCheckId('.gridR');
            if (selectIds.length == 0) {
                bsWin.alert("请选择要恢复的数据！");
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.restore(idStr);
            }
        };

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('monthlyNewsletterEditCtrl', monthlyNewsletter);

    monthlyNewsletter.$inject = ['$location', 'monthlyNewsletterSvc', '$state', 'bsWin'];

    function monthlyNewsletter($location, monthlyNewsletterSvc, $state, bsWin) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '添加月报简报';
        vm.isuserExist = false;
        vm.id = $state.params.id;
        vm.monthly = {};

        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '更新月报简报';
        }
        //报告月份
        vm.selectMonthly = function () {
            vm.monthly.endTheMonths = vm.monthly.theMonths;
            vm.monthly.staerTheMonths = "1";

        }
        //报告年度
        vm.reportYear = function () {
            var reportMultiyear = vm.monthly.reportMultiyear;
            vm.monthly.startMoultiyear = reportMultiyear;
            vm.monthly.endMoultiyear = reportMultiyear;
            vm.monthly.monthlyNewsletterName = vm.monthly.reportMultiyear+"年度月报简报数据"
        }
        //开始月份
        vm.startMonthly = function () {
            var end = parseInt(vm.monthly.endTheMonths);
            var start = parseInt(vm.monthly.staerTheMonths);
            if (end < start) {
                bsWin.alert("开始月份不能大于结束月份");
                vm.monthly.staerTheMonths = " ";
            }
        }

        /**
         * 新增月报简报
         */
        vm.createMothlyNewsletter = function () {
            common.initJqValidation();
            var isValid = $('#form').valid();
            if (isValid) {
                monthlyNewsletterSvc.createMonthlyNewsletter(vm.monthly, function (data) {
                    if (data.flag) {
                        vm.monthly = data.reObj;
                        bsWin.alert("操作成功！");
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("缺少部分没有填写，请仔细检查");
            }
        };

        /**
         * 编辑月报简报
         */
        vm.updateMonthly = function () {
            monthlyNewsletterSvc.updateMonthlyNewsletter(vm);
        };

        /**
         * 生成月报简报
         */
        vm.createMonthReport = function () {
            monthlyNewsletterSvc.createMonthReport(vm);
        }

        /**
         * 初始化月报简报默认生成上个月数据
         */
        function initRepData() {
            var date = new Date();
            var year = date.getFullYear();
            var month = date.getMonth() + 1;
            if(month == 1){
                vm.monthly.reportMultiyear = (year - 1)+"";
                vm.monthly.startMoultiyear = (year - 1)+"";
                vm.monthly.endMoultiyear = (year - 1)+"";
                vm.monthly.theMonths = "12";
                vm.monthly.staerTheMonths = "1";
                vm.monthly.endTheMonths = "12";
            }else{
                vm.monthly.reportMultiyear = year + "";
                vm.monthly.startMoultiyear = year + "";
                vm.monthly.endMoultiyear = year + "";
                vm.monthly.theMonths = (month - 1) + "";
                vm.monthly.staerTheMonths = "1";
                vm.monthly.endTheMonths = (month - 1) + "";
            }
        }

        activate();
        function activate() {
            if (vm.isUpdate) {
                monthlyNewsletterSvc.getMonthlyNewsletterById(vm);
            }else{
                initRepData();
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('monthlyNewsletterSvc', monthlyNewsletter);

    monthlyNewsletter.$inject = ['$http'];

    function monthlyNewsletter($http) {
        var url_monthlyNewsletter = rootPath + "/monthlyNewsletter";
        var service = {
            monthlyNewsletterGrid: monthlyNewsletterGrid,       //月报简报管理列表
            monthlyDeleteGrid:monthlyDeleteGrid,                //已删除月报简报列表
            theMonthGrid:theMonthGrid,                          //年度月报简报列表
            createMonthlyNewsletter: createMonthlyNewsletter,   //保存月报简报
            updateMonthlyNewsletter: updateMonthlyNewsletter,   //月报简报编辑
            deleteMonthlyNewsletter: deleteMonthlyNewsletter,   //删除月报简报记录
            restoreMonthlyNewsletter: restoreMonthlyNewsletter, // 恢复月报简报
            getMonthlyNewsletterById: getMonthlyNewsletterById,
            createMonthReport: createMonthReport //生成月报简报
        };

        return service;

        // begin#updateMonthlyNewsletter
        function updateMonthlyNewsletter(vm) {
        	 common.initJqValidation();
             var isValid = $('form').valid();
             if (isValid) {
                 vm.isSubmit = true;
                 vm.monthly.id = vm.id;// id
                 var httpOptions = {
                     method: 'put',
                     url: url_monthlyNewsletter+"/monthlyEdit",
                     data: vm.monthly
                 }
                 var httpSuccess = function success(response) {
                     common.requestSuccess({
                         vm: vm,
                         response: response,
                         fn: function () {
                             common.alert({
                                 vm: vm,
                                 msg: "操作成功",
                                 fn: function () {
                                     vm.isSubmit = false;
                                     $('.alertDialog').modal('hide');
                                 }
                             })
                         }

                     })
                 }

                 common.http({
                     vm: vm,
                     $http: $http,
                     httpOptions: httpOptions,
                     success: httpSuccess
                 });

             } else {
                 // common.alert({
                 // vm:vm,
                 // msg:"您填写的信息不正确,请核对后提交!"
                 // })
             }
        }

        // begin#deleteMonthlyNewsletter
        function deleteMonthlyNewsletter(id,callBack) {
            var httpOptions = {
                method: 'delete',
                url: url_monthlyNewsletter+"/deleteMonthlyData",
                params: {
                    id:id
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        function restoreMonthlyNewsletter(id,callBack) {
            var httpOptions = {
                method: 'get',
                url: url_monthlyNewsletter+"/restoreMonthlyData",
                params: {
                    id:id
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //刷新页面
        function refresh(){
            window.location.reload();
        }

        // begin#保存月报简报
        function createMonthlyNewsletter(monthly,callBack) {
                var httpOptions = {
                    method: 'post',
                    url: url_monthlyNewsletter+"/savaMonthlyNewsletter",
                    data: monthly
                };
                var httpSuccess = function success(response) {
                	 if (callBack != undefined && typeof callBack == 'function') {
                         callBack(response.data);
                     }
                };
                common.http({
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

        }
        //end#保存月报简报

        // begin#生成月报简报
        function createMonthReport(vm) {
            if(vm.monthly.reportMultiyear == undefined){
                vm.monthly.reportMultiyear = "";
            }
            if(vm.monthly.theMonths == undefined){
                vm.monthly.theMonths = "";
            }
            if(vm.monthly.startMoultiyear == undefined){
                vm.monthly.startMoultiyear ="";
            }
            if(vm.monthly.endMoultiyear== undefined){
                vm.monthly.endMoultiyear = "";
            }
            if(vm.monthly.staerTheMonths== undefined){
                vm.monthly.staerTheMonths = "";
            }
            if(vm.monthly.endTheMonths == undefined){
                vm.monthly.endTheMonths = "";
            }
            window.open(rootPath + "/monthlyNewsletter/createMonthReport?reportMultiyear=" + vm.monthly.reportMultiyear + "&theMonths="
                + vm.monthly.theMonths + "&startMoultiyear=" + vm.monthly.startMoultiyear + "&endMoultiyear=" + vm.monthly.endMoultiyear+ "&staerTheMonths=" + vm.monthly.staerTheMonths+ "&endTheMonths=" + vm.monthly.endTheMonths);
        /*    var httpOptions = {
                method: 'post',
                url: rootPath + "/monthlyNewsletter/createMonthReport",
                data: vm.monthly
            }
            var httpSuccess = function success(response) {
                if(vm.monthly.theMonths != null){
                    var fileName = vm.monthly.theMonths+"月月报.doc";
                }else{
                    var date=new Date;
                    var month=date.getMonth()+1;
                    var fileName = month+"月报简报.doc";
                }
                var fileType ="msword";
                common.downloadReport(response.data , fileName , fileType);
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });*/
        }//E_生成月报简报

        // begin#getMonthlyNewsletterById
        function getMonthlyNewsletterById(vm) {
        	var httpOptions = {
                method: 'get',
                url: rootPath + "/monthlyNewsletter/html/findById",
                params:{id:vm.id}
            };
            var httpSuccess = function success(response) {
                vm.monthly = response.data;
            };
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });                       
        }

        // begin#月报简报管理列表
        function monthlyNewsletterGrid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_monthlyNewsletter+"/findByOData",$("#monthlyForm"),{$filter:"monthlyType eq '1'"}),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

          //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
				    field: "rowNumber",
				    title: "序号",
				    width: 50,
				    filterable : false,
				    template: "<span class='row-number'></span>"
				 },
                {
                    field: "reportMultiyear",
                    title: "报告年度",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "theMonths",
                    title: "报告月份",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "remark",
                    title: "报告说明",
                    width: 100,
                    filterable: false
                },
                {
                    field: "authorizedUser",
                    title: "编制人",
                    width: 100,
                    filterable: false
                },
                {
                    field: "authorizedTime",
                    title: "编制时间",
                    width: 100,
                    filterable: false,
                    format: "{0: yyyy-MM-dd HH:mm:ss}"
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                             item.id,"vm.del('" + item.id + "')");
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                dataBound:dataBound,
                columns: columns,
                resizable: true
            };

        }// end fun grid
        
        // begin#删除月报简报列表
        function monthlyDeleteGrid(vm) {
            // Begin:dataSource11
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_monthlyNewsletter+"/findByOData",$("#delMonthlyForm"),{$filter:"monthlyType eq '2'"}),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

          //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
				    field: "rowNumber",
				    title: "序号",
				    width: 50,
				    filterable : false,
				    template: "<span class='row-number'></span>"
				 },
                {
                    field: "reportMultiyear",
                    title: "报告年度",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "theMonths",
                    title: "报告月份",
                    width: 100,
                    filterable: false,
                },
                {
                    field: "remark",
                    title: "报告说明",
                    width: 100,
                    filterable: false
                },
                {
                    field: "authorizedUser",
                    title: "编制人",
                    width: 100,
                    filterable: false
                },
                {
                    field: "authorizedTime",
                    title: "编制时间",
                    width: 100,
                    filterable: false,
                    format: "{0: yyyy-MM-dd HH:mm:ss}"
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        return common.format($('#columnBtns1').html(),
                         "vm.restore('" + item.id + "')");
                    }
                }
               
            ];
            // End:column

            vm.monthlyDeleteGridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                dataBound:dataBound,
                columns: columns,
                resizable: true
            };

        }// end fun 删除月报简报列表

        // begin#年度月报简报列表
        function theMonthGrid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath+"/monthlyNewsletter/getMonthlyList"),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                })
            });
            // End:dataSource

          //S_序号
            var  dataBound=function () {
                var rows = this.items();
                $(rows).each(function () {
                    var index = $(this).index() + 1;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
				    field: "rowNumber",
				    title: "序号",
				    width: 50,
				    filterable : false,
				    template: "<span class='row-number'></span>"
				 },
                {
                    field: "monthlyNewsletterName",
                    title: "名称",
                    width: "30%",
                    filterable: false,
                    template:function(item){
                    	return '<a href="#/monthlyFindByMultiyear/'+item.reportMultiyear+'" >'+item.monthlyNewsletterName+'</a>';
                    }
                },
                {
                    field: "reportMultiyear",
                    title: "年份",
                    width: "15%",
                    filterable: false,
                },
                {
                    field: "remark",
                    title: "备注",
                    width: "40%",
                    filterable: false
                },
                {
                    field: "authorizedTime",
                    title: "添加时间",
                    width: "15%",
                    filterable: false
                },
                
            ];
            // End:column

            vm.theMonthGridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                dataBound:dataBound,
                columns: columns,
                resizable: true
            };

        }// end fun 月报简报列表

        
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('yearMonthlyNewsletterCtrl', yearMonthlyNewsletter);

    yearMonthlyNewsletter.$inject = ['$location', 'monthlyNewsletterSvc'];

    function yearMonthlyNewsletter($location, monthlyNewsletterSvc) {
        var vm = this;
        vm.title = '年度月报简报列表';

        activate();
        function activate() {
            monthlyNewsletterSvc.theMonthGrid(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('officeUserCtrl', officeUser);

    officeUser.$inject = ['$location', 'officeUserSvc','$state','$rootScope'];

    function officeUser($location, officeUserSvc,$state,$rootScope) {
        var vm = this;
        vm.title = '处室人员管理';
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }

        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    officeUserSvc.deleteOfficeUser(vm, id);
                }
            });
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };
        
        vm.queryOffice = function(){
        	officeUserSvc.queryOffice(vm);
        }
        activate();
        function activate() {

            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                officeUserSvc.grid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                officeUserSvc.grid(vm);
            }

        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('officeUserEditCtrl', officeUser);

    officeUser.$inject = ['$location', 'officeUserSvc', '$state'];

    function officeUser($location, officeUserSvc, $state) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '添加人员';
        vm.isuserExist = false;
        vm.officeID = $state.params.officeID;
        if (vm.officeID) {
            vm.isUpdate = true;
            vm.title = '更新人员';
        }

        vm.create = function () {
            officeUserSvc.createOfficeUser(vm);
        };
        vm.update = function () {
            officeUserSvc.updateOfficeUser(vm);
        };

        activate();
        function activate() {
            if (vm.isUpdate) {
                officeUserSvc.getOfficeUserById(vm);
            }
            officeUserSvc.getDepts(vm);//获取所有办事处
           
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('officeUserSvc', officeUser);

    officeUser.$inject = ['$http','bsWin'];

    function officeUser($http,bsWin) {
        var url_officeUser = rootPath + "/officeUser", url_back = '#/officeUserList';
        var service = {
            grid: grid,
            getOfficeUserById: getOfficeUserById,
            createOfficeUser: createOfficeUser,
            deleteOfficeUser: deleteOfficeUser,
            updateOfficeUser: updateOfficeUser,
            getDepts:getDepts,						//获取所有办事处
            queryOffice:queryOffice,
        };

        return service;
        
        function queryOffice(vm){
            vm.gridOptions.dataSource._skip=0;
        	vm.gridOptions.dataSource.read();	
        }
        //start 获取所有办事处
        function getDepts(vm){
        	var httpOptions = {
                    method: 'get',
                    url: common.format(url_officeUser + "/getDepts")
                }
                var httpSuccess = function success(response) {
                    vm.depts = {};
                    vm.depts = response.data;
                    
                }
                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
        	
        }
        //end 获取所有办事处
        
        // begin#updateOfficeUser
        function updateOfficeUser(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;
                vm.model.id = vm.id;// id
                var httpOptions = {
                    method: 'put',
                    url: url_officeUser,
                    data: vm.model
                }

                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            bsWin.alert("操作成功");
                            vm.isSubmit = false;
                        }
                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } else {
                // common.alert({
                // vm:vm,
                // msg:"您填写的信息不正确,请核对后提交!"
                // })
            }

        }

        // begin#deleteOfficeUser
        function deleteOfficeUser(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_officeUser,
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        bsWin.alert("操作成功");
                        vm.isSubmit = false;
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#createOfficeUser
        function createOfficeUser(vm) {
            common.initJqValidation();
            var isValid = $('#form').valid();
            if (isValid) {
                vm.isSubmit = true;
                var httpOptions = {
                    method: 'post',
                    url: url_officeUser,
                    data: vm.model
                };
                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            bsWin.alert("操作成功");
                            vm.isSubmit = false;
                        }
                    });
                };

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            }
        }

        // begin#getOfficeUserById
        function getOfficeUserById(vm) {
        	var httpOptions = {
                method: 'get',
                url: rootPath + "/officeUser/html/findById",
                params:{officeID:vm.officeID}
            };
            var httpSuccess = function success(response) {
            	if(response.data.dept){
				}
                vm.model = response.data;
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });                       
        }

        // begin#grid
        function grid(vm) {

            // Begin:dataSource
            var dataSource = common.kendoGridDataSource(url_officeUser + "/fingByOData",$("#formOffice"),vm.queryParams.page,vm.queryParams.pageSize,vm.gridParams);
            // End:dataSource

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.officeID)
                    },
                    filterable: false,
                    width: 20,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {  
 				    field: "rowNumber",  
 				    title: "序号",  
 				    width: 30,
 				    filterable : false,
 				    template: "<span class='row-number'></span>"  
 				 }
 				,
                {
                    field: "officeUserName",
                    title: "负责人",
                    width: 100,
                    filterable: false
                },
                {
                    field: "deptName",
                    title: "所在办事处",
                    width: 100,
                    filterable: false
                },
               
                {
                    field: "officePhone",
                    title: "电话",
                    width: 100,
                    filterable: false
                },
                {
                    field: "officeEmail",
                    title: "邮件",
                    width: 100,
                    filterable: false
                },
                {
                    field: "officeDesc",
                    title: "描述",
                    width: 100,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                            "vm.del('" + item.officeID + "')", item.officeID);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                pageable : common.kendoGridConfig(vm.queryParams).pageable,
                dataBound:common.kendoGridConfig(vm.queryParams).dataBound,
                resizable: true
            };

        }// end fun grid

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('orgCtrl', org);

    org.$inject = ['$location','orgSvc']; 

    function org($location, orgSvc) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '部门列表';
        
        vm.del = function (id) {        	       	 
             common.confirm({
            	 vm:vm,
            	 title:"",
            	 msg:"确认删除数据吗？",
            	 fn:function () {
                  	$('.confirmDialog').modal('hide');             	
                    orgSvc.deleteOrg(vm,id);
                 }
             })
        }
        vm.dels = function () {     
        	var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
            	common.alert({
                	vm:vm,
                	msg:'请选择数据'
                	
                });
            } else {
            	var ids=[];
                for (var i = 0; i < selectIds.length; i++) {
                	ids.push(selectIds[i].value);
				}  
                var idStr=ids.join(',');
                vm.del(idStr);
            }   
       }
        //查询
        vm.queryOrg = function(){
        	orgSvc.queryOrg(vm);
        }
        activate();
        function activate() {
            orgSvc.grid(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('orgEditCtrl', org);

    org.$inject = ['$location','orgSvc','$state','bsWin'];

    function org($location, orgSvc,$state,bsWin) {
        var vm = this;
        vm.model = {};
        vm.title = '新增部门';
        vm.isorgExist=false;
        vm.model.id = $state.params.id;
        if (vm.model.id) {
            vm.isUpdate = true;
            vm.title = '更新部门';
        }

        activate();
        function activate() {
            orgSvc.initRoleUsers(function(data){
                vm.orgMLeaderUsers = data.DIRECTOR;
                vm.orgSLeaderUser = data.VICE_DIRECTOR;
                vm.OrgDirectorUsers = data.DEPT_LEADER;
            });
            if (vm.isUpdate) {
                orgSvc.getOrgById(vm.model.id,function(data){
                    vm.model = data;
                });
            }
        }

        vm.create = function () {
            common.initJqValidation();
            var isValid = $('form').valid();
            if(isValid){
                $.each(vm.OrgDirectorUsers,function( number , u){
                    if(u.id == vm.model.orgDirector){
                        vm.model.orgDirectorName = u.displayName;
                    }
                })
                $.each(vm.orgMLeaderUsers,function( number , u){
                    if(u.id == vm.model.orgMLeader){
                        vm.model.orgMLeaderName = u.displayName;
                    }
                })
                $.each(vm.orgSLeaderUser,function( number , u){
                    if(u.id == vm.model.orgSLeader){
                        vm.model.orgSLeaderName = u.displayName;
                    }
                })
                orgSvc.createOrg(vm.model,vm.isSubmit,function(data){
                    vm.isSubmit = false;
                    if(data.flag || data.reCode == 'ok'){
                        if(!vm.model.id){
                            vm.model.id = data.idCode;
                        }
                        bsWin.success("操作成功！");
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("保存失败，有红色*号的选项是必填项，请按要求填写！");
            }

        };

        vm.update = function () {
            common.initJqValidation();
            var isValid = $('form').valid();
            if(isValid){
                $.each(vm.OrgDirectorUsers,function( number , u){
                    if(u.id == vm.model.orgDirector){
                        vm.model.orgDirectorName = u.displayName;
                    }
                })
                $.each(vm.orgMLeaderUsers,function( number , u){
                    if(u.id == vm.model.orgMLeader){
                        vm.model.orgMLeaderName = u.displayName;
                    }
                })
                $.each(vm.orgSLeaderUser,function( number , u){
                    if(u.id == vm.model.orgSLeader){
                        vm.model.orgSLeaderName = u.displayName;
                    }
                })
                orgSvc.updateOrg(vm.model,vm.isSubmit,function(data){
                    vm.isSubmit = false;
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.success("操作成功！");
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("保存失败，有红色*号的选项是必填项，请按要求填写！");
            }
        };

    }
})();

(function() {
	'use strict';

	angular.module('app').factory('orgSvc', org);

	org.$inject = [ '$http','$compile' ];	
	function org($http,$compile) {	
		var url_org = rootPath +"/org";
		var url_back = '#/org';
		var url_user=rootPath +'/user';
			
		var service = {
			grid : grid,
			createOrg : createOrg,			
			getOrgById : getOrgById,
			updateOrg:updateOrg,
			deleteOrg:deleteOrg	,
			getCompany : getCompany,
			initRoleUsers: initRoleUsers, //初始化角色数据
			queryOrg:queryOrg,
            queryOrgList:queryOrgList//查询部门列表
		};		
		return service;	
		
		//查询
		function queryOrg(vm){
            vm.gridOptions.dataSource._skip=0;
			vm.gridOptions.dataSource.read();
		}
				
		function grid(vm) {
			// Begin:dataSource
			var dataSource = new kendo.data.DataSource({
				type : 'odata',
				transport : common.kendoGridConfig().transport(url_org+"/fingByOData",$("#orgForm")),
				schema : common.kendoGridConfig().schema({
					id : "id",
					fields : {
						createdDate : {
							type : "date"
						}
					}
				}),
				serverPaging : true,
				serverSorting : true,
				serverFiltering : true,			
				pageSize: 10,
				sort : {
					field : "sort",
					dir : "asc"
				}
			});

			// End:dataSource
			
			 //S_序号
            var  dataBound=function () {  
                var rows = this.items();  
                var page = this.pager.page() - 1;  
                var pagesize = this.pager.pageSize();  
                $(rows).each(function () {  
                    var index = $(this).index() + 1 + page * pagesize;  
                    var rowLabel = $(this).find(".row-number");  
                    $(rowLabel).html(index);  
                });  
            } 
            //S_序号

			// Begin:column
			var columns = [
					{
						template : function(item) {
							return kendo
									.format(
											"<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
											item.id)
						},
						filterable : false,
						width : 40,
						title : "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
						
					}, 
					 {  
					    field: "rowNumber",  
					    title: "序号",  
					    width: 50,
					    filterable : false,
					    template: "<span class='row-number'></span>"  
					 },
					{
						field : "name",
						title : "部门名称",
						width : 130,						
						filterable : false
					},
					{
						field : "orgFunction",
						title : "职能",
						width :130,						
						filterable : false
					},
					{
						field : "orgDirectorName",
						title : "部门负责人",
						width : 100,						
						filterable : false
					},
					{
						field : "orgSLeaderName",
						title : "分管副领导",
						width : 100,						
						filterable : false
					},
					{
						field : "orgPhone",
						title : "电话",
						width : 130,						
						filterable : false
					},					
					{
						field : "",
						title : "操作",
						width : 200,
						template:function(item){							
							return common.format($('#columnBtns').html(),"vm.del('"+item.id+"')",item.id);							
						}						
					}
			];
			// End:column
		
			vm.gridOptions={
				dataSource : common.gridDataSource(dataSource),			
				filterable : common.kendoGridConfig().filterable,
				pageable : common.kendoGridConfig().pageable,
				noRecords:common.kendoGridConfig().noRecordMessage,
				columns : columns,
				dataBound:dataBound,
				resizable: true
			};
			
		}// end fun grid

		function createOrg(orgModel,isSubmit,callBack) {
            isSubmit = true;
            var httpOptions = {
                method : 'post',
                url : url_org,
                data : orgModel
            }
            var httpSuccess = function success(response) {
                isSubmit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http:$http,
                httpOptions:httpOptions,
                success:httpSuccess,
                onError:function(){
                    isSubmit = false;
                }
            });
		}// end fun createorg
		
		//获取单位信息
		function getCompany(vm){			
			var httpOptions = {
					method : 'get',
					url : common.format(url_org + "/getCompany")
				}
				var httpSuccess = function success(response) {
					vm.company ={};
					vm.company =response.data;
					//console.log(vm.company);
				}
				
				common.http({
					vm:vm,
					$http:$http,
					httpOptions:httpOptions,
					success:httpSuccess
				});
		}
		
		function getOrgById(id,callBack) {
			var httpOptions = {
				method : 'post',
				url : rootPath +"/org/getOrgById",
				params:{
				    id:id
				}
			}
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
			common.http({
				$http:$http,
				httpOptions:httpOptions,
				success:httpSuccess
			});
		}// end fun getorgById
		
		function updateOrg(orgModel,isSubmit,callBack){
            isSubmit = true;
            var httpOptions = {
                method : 'post',
                url : rootPath +"/org/updateOrg",
                data : orgModel
            }
            var httpSuccess = function success(response) {
                isSubmit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http:$http,
                httpOptions:httpOptions,
                success:httpSuccess,
                onError:function(){
                    isSubmit = false;
                }
            });
		}// end fun updateorg
		
		function deleteOrg(vm,id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url:url_org,
                data:id
                
            }
            var httpSuccess = function success(response) {                
                common.requestSuccess({
					vm:vm,
					response:response,
					fn:function () {
	                    vm.isSubmit = false;
	                    vm.gridOptions.dataSource.read();
	                }
					
				});

            }
            common.http({
				vm:vm,
				$http:$http,
				httpOptions:httpOptions,
				success:httpSuccess
			});
        }// end fun deleteorg
		
		//S_initRoleUsers
		function initRoleUsers(callBack){
			var httpOptions = {
                method: 'post',
                url:rootPath +'/user/initRoleUsers'               
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
				$http:$http,
				httpOptions:httpOptions,
				success:httpSuccess
			});
		}//E_initRoleUsers


        function queryOrgList(vm,callBack) {
            var httpOptions = {
                method : 'post',
                url : rootPath +"/org/queryOrgList",
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
				vm:vm,
                $http:$http,
                httpOptions:httpOptions,
                success:httpSuccess,
            });
        }// end fun queryOrgList

	}
	
	
	
})();
(function () {
    'use strict';

    angular
        .module('app')
        .controller('orgUserCtrl', org);

    org.$inject = ['$location','$state','orgSvc','orgUserSvc']; 

    function org($location,$state, orgSvc,orgUserSvc) {
        /* jshint validthis:true */
        var vm = this;
        vm.id = $state.params.id;

        vm.showAddUserDialog = function () {
        	$('.addUser').modal({
                backdrop: 'static',
                keyboard:false
            });
        	 vm.orgUserGrid.dataSource.read();
        };
        vm.closeAddUserDialog=function(){
        	$('.addUser').modal('hide');		
        	
        }
        vm.add = function (userId) {
        	orgUserSvc.add(vm,userId);
        };
        vm.remove = function (userId) {
        	orgUserSvc.remove(vm,userId);
        };
        vm.removes = function () {     
        	var selectIds = common.getKendoCheckId('.gird');
            if (selectIds.length == 0) {
                common.alert({
                	vm:vm,
                	msg:'请选择数据'
                	
                });
            } else {
            	var ids=[];
                for (var i = 0; i < selectIds.length; i++) {
                	ids.push(selectIds[i].value);
				}  
                var idStr=ids.join(',');
                vm.remove(idStr);
            }   
       }
       //查询
       vm.query=function () {
           vm.gridOptions.dataSource._skip= 0;
           vm.gridOptions.dataSource.read();
       }
       //重置
        vm.formReset=function () {
            var tab = $("#form").find('input,select').not(":submit, :reset, :image, :disabled,:hidden");
            $.each(tab, function (i, obj) {
                obj.value = "";
            });
        }

        activate();
        function activate() {
        	orgUserSvc.orgUserGrid(vm);
        	orgUserSvc.allUserGrid(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('orgUserSvc', org);

    org.$inject = ['$http', '$compile'];
    function org($http, $compile) {
        var user_userNotIn = rootPath + '/org/userNotIn';

        var service = {
            orgUserGrid: orgUserGrid,
            allUserGrid: allUserGrid,
            add: add,
            remove: remove
        };
        return service;

        //begin#remove
        function remove(vm, userId) {
            var httpOptions = {
                method: 'delete',
                url: rootPath + "/org/deleteUsers",
                params: {
                    orgId: vm.id,
                    userId: userId
                }
            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        vm.gridOptions.dataSource.read();
                    }
                });
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //begin#add
        function add(vm, userId) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/org/addUsers",
                params: {
                    orgId: vm.id,
                    userId: userId
                }
            }

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        vm.orgUserGrid.dataSource.read();
                        vm.gridOptions.dataSource.read();
                    }
                });
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //begin#allUserGrid
        function allUserGrid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(user_userNotIn + "?orgId=" + vm.id),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "jobState",
                    dir: "desc"
                }
            });

            // End:dataSource

            // Begin:column
            var columns = [

                {
                    field: "loginName",
                    title: "登录名",
                    width: 200,
                    filterable: true
                },
                {
                    field: "displayName",
                    title: "显示名",
                    width: 200,
                    filterable: true
                },
                {
                    field: "remark",
                    title: "描述",
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 80,
                    template: function (item) {
                        return common.format($('#allUserGridBtns').html(),
                            "vm.add('" + item.id + "')");

                    }

                }

            ];
            // End:column

            vm.orgUserGrid = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true
            };

        }

        //begin#orgUserGtid
        function orgUserGrid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/org/users?orgId=" + vm.id, $("#form")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: false,
                serverSorting: false,
                serverFiltering: false,
                pageSize: 10,
                sort: {
                    field: "jobState",
                    dir: "desc"
                }
            });

            // End:dataSource

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"

                },
                {
                    field: "loginName",
                    title: "登录名",
                    width: 200,
                    filterable: false
                },
                {
                    field: "displayName",
                    title: "显示名",
                    width: 200,
                    filterable: false
                },
                {
                    field: "",
                    title: "在职情况",
                    width: 160,
                    filterable: false,
                    template: function (item) {
                        if (item.jobState && item.jobState == "t") {
                            return "在职";
                        } else {
                            return "已撤销";
                        }
                    }
                },
                {
                    field: "remark",
                    title: "描述",
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 180,
                    template: function (item) {
                        return common.format($('#columnBtns').html(), "vm.remove('" + item.id + "')");
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true
            };
        }


    }


})();
(function () {
    'use strict';

    angular.module('app').factory('partySvc', party);

    party.$inject = ['$http', '$state' , 'bsWin' , '$rootScope'];

    function party($http, $state , bsWin , $rootScope) {

        var service = {
            createParty : createParty,  //保存党员信息
            partyGrid : partyGrid, //查询党员列表
            findById : findById , //通过id查询
            updateParty : updateParty , //更新党员信息
            exportPartyWord : exportPartyWord , //导出党务信息-word模板
            deleteParty : deleteParty , //删除党员信息
            exportSignInSheet : exportSignInSheet , //导出签到表
            exportPartyInfo : exportPartyInfo , //导出党员信息表
        }
        
        return service;

        //begin exportSignInSheet
        function exportSignInSheet(pmIds){
            /*var downForm = $("#partyform");
            downForm.attr("target", "");
            downForm.attr("method", "post");
            downForm.attr("action", rootPath + "/partyManager/exportSignInSheet");
            downForm.find("input[name='pmIds']").val(pmIds);
            downForm.submit();//表单提交*/

            var httpOptions = {
                method : "post",
                url : rootPath + "/partyManager/exportSignInSheet",
                // params : {pmIds : pmIds}
            }

            var httpSuccess = function success(response){
                var fileName =  "签到表.doc";
                var fileType ="msword";
                common.downloadReport(response.data , fileName , fileType);
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end exportSignInSheet

        //begin deleteParty
        function deleteParty(pmId , callBack){
            var httpOptions = {
                method : "put",
                url : rootPath + "/partyManager/deleteParty",
                params : {pmId : pmId}
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == "function"){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }
        //end deleteParty

        //begin exportPatryWord
        function exportPartyWord(vm , pmId){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/partyManager/exportPartyWord",
                params : {pmId : pmId}
            }
            var httpSuccess = function success(response){
                var fileName =  "党员基本信息采集表.doc";
                var fileType ="msword";
                common.downloadReport(response.data , fileName , fileType);
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end exportPatryWord

        //begin createParty
        function createParty(vm , cellBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + '/partyManager/createParty',
                data : vm.party
            }

            var httpSuccess = function success(response){
                if(cellBack != undefined && typeof  cellBack == 'function' ){
                    cellBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }
        //end createParty

        //begin findById
        function findById(pmId , cellback){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/partyManager/findById",
                params : {pmId : pmId}
            }

            var httpSuccess = function(response){
                if(cellback != undefined && typeof  cellback == 'function'){
                    cellback(response.data);
                }
            }
            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });

        }
        //end findById

        //begin updateParty
        function updateParty(vm , callBack){
            var httpOptions = {
                method : 'put',
                url : rootPath + "/partyManager/updateParty",
                data : vm.party
            }
            var httpSuccess = function success(response){
                if(callBack != undefined && typeof callBack == "function"){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end updateParty

        //begin partyGrid
        function partyGrid(vm){
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/partyManager/findByOData" , $("#partyform")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            //S_序号
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.pmId)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox' />"
                },
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "",
                    title: "名称",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        return '<a  ng-click="vm.partyDetail(\''+item.pmId+'\')">'+item.pmName+'</a>'
                    }
                },
                {
                    field: "pmSex",
                    title: "性别",
                    width: 50,
                    filterable: false,
                },
                {
                    field: "pmIDCard",
                    title: "身份证号",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "pmNation",
                    title: "民族",
                    width: 50,
                    filterable: false,
                   /* template :function(item){
                        var pmNation = "";
                        for(var i =0 ; i < $rootScope.DICT.NATION.dicts.length ; i++){
                            var v = $rootScope.DICT.NATION.dicts[i];
                            if(item.pmNation == v.dictKey){
                                pmNation =  v.dictName;
                                break;
                            }
                        }
                        return pmNation;
                    }*/
                },
                {
                    field: "pmEducation",
                    title: "学历",
                    width: 80,
                    filterable: false,
                   /* template :function(item){
                        var pmEducation = "";
                        for(var i =0 ; i < $rootScope.DICT.ADUCATION.dicts.length ; i++){
                            var v = $rootScope.DICT.ADUCATION.dicts[i];
                            if(item.pmEducation == v.dictKey){
                                pmEducation =  v.dictName;
                                break;
                            }
                        }
                        return pmEducation;
                    }*/
                },
                {
                    field: "pmPhone",
                    title: "手机号",
                    width: 80,
                    filterable: false
                },
                {
                    field: "pmTel",
                    title: "固定电话",
                    width: 80,
                    filterable: false
                },
                {
                    field: "",
                    title: "人员类别",
                    width: 80,
                    filterable: false,
                    template : function(item){
                        if(item.pmCategory == '1'){
                            return "正式党员";
                        }else if(item.pmCategory == '2'){
                            return "预备党员";
                        }else{
                            return "";
                        }
                    }
                },
                {
                    field: "pmJoinPartyDate",
                    title: "入党日期",
                    width: 80,
                    filterable: false
                },
                {
                    field: "pmTurnToPatryDate",
                    title: "转正日期",
                    width: 80,
                    filterable: false
                },
                {
                    field: "",
                    title: "在编情况",
                    width: 60,
                    filterable: false,
                    template : function(item){
                        if(item.isEnrolled && item.isEnrolled == '9'){
                            return "是";
                        }else{
                            return "否";
                        }
                    }
                },
                {
                    field: "",
                    title: "操作",
                    width: 120,
                    template: function (item) {
                        var canExecute = false;
                        if(item.curState == 9){
                            canExecute = true;
                        }
                        return common.format($('#columnBtns').html(),  "vm.partyDetail('" + item.pmId + "')" , item.pmId , "vm.deleteParty('" + item.pmId + "')");
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };
        }
        //end partyGrid

        //begin exportPartyInfo
        function exportPartyInfo(){

            var httpOptions = {
                method : "post",
                url : rootPath + "/partyManager/exportPartyInfo",
                headers : {
                    "contentType" : "application/json;charset=utf-8"
                },
                traditional : true,
                dataType : "json",
                responseType: 'arraybuffer',
            }

            var httpSuccess = function success(response){
                var fileName =  "党员信息表.xls";
                var fileType ="application/vnd.ms-excel";
                common.downloadReport(response.data , fileName , fileType);
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end exportPartyInfo

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('partyEditCtrl', partyEdit);

    partyEdit.$inject = ['partySvc' , 'bsWin' , '$state'];

    function partyEdit(partySvc , bsWin , $state) {
        var vm = this;
        vm.title = '党员信息录入';        		//标题
        vm.party = {};
        vm.patryId = $state.params.id;

        active();
        function active(){
            /*$('#myTab li').click(function (e) {
                var aObj = $("a",this);
                e.preventDefault();
                aObj.tab('show');
                var showDiv = aObj.attr("for-div");
                $(".tab-pane").removeClass("active").removeClass("in");
                $("#"+showDiv).addClass("active").addClass("in").show(500);
            })*/
            if(vm.patryId){
                vm.isShow = true;
                partySvc.findById(vm.patryId , function(data){
                    if(data.flag || data.reCode == 'ok'){
                        vm.party = data.reObj;
                    }

                });
            }
        }

        /**
         * 保存党员信息
         */
        vm.saveParty = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                partySvc.createParty(vm , function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.alert("保存成功！" , function(){
                            location.href = "#/partyList";
                        });

                    }
                });
            }

        }

        /**
         * 更新党员信息
         */
        vm.updateParty = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                partySvc.updateParty(vm , function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.alert("保存成功！");
                    }
                });
            }

        }


    }
})();

(function () {
    'use strict';

    angular.module('app').controller('partyListCtrl', partyList);

    partyList.$inject = ['partySvc', 'bsWin', '$state'];

    function partyList(partySvc, bsWin, $state) {
        var vm = this;
        vm.title = '党员信息查询';        		//标题

        active();
        function active() {
            partySvc.partyGrid(vm);
        }


        /**
         * 查看详情
         * @param pmId
         */
        vm.partyDetail = function (pmId) {
            /* $('#myTab li').click(function (e) {
             var aObj = $("a",this);
             e.preventDefault();
             aObj.tab('show');
             var showDiv = aObj.attr("for-div");
             $(".tab-pane").removeClass("active").removeClass("in");
             $("#"+showDiv).addClass("active").addClass("in").show(500);
             })*/

            $("#partyDetail").kendoWindow({
                width: "1000px",
                height: "600px",
                title: "党员信息表",
                visible: false,
                open: function () {
                    partySvc.findById(pmId, function (data) {
                        vm.party = data.reObj;
                    })
                },
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();

        }

        vm.formReset = function () {
            vm.party = {};
        }


        /**
         * 模糊查询
         */
        vm.queryParty = function () {
            vm.gridOptions.dataSource.read();
        }

        /**
         * 党务信息导出-word
         */
        vm.exportPartyWord = function (pmId) {
            partySvc.exportPartyWord(vm, pmId)
        }

        /**
         * 删除党员信息
         * @param pmId
         */
        vm.deleteParty = function (pmId) {
            bsWin.confirm("删除的数据无法恢复，确定删除？", function () {
                partySvc.deleteParty(pmId, function (data) {
                    bsWin.alert("删除成功！");
                    vm.gridOptions.dataSource.read();
                });
            })
        }

        /**
         * 导出签到表
         */
        vm.exportSignInSheet = function () {
            /*var selectIds = common.getKendoCheckId('.grid');
             if (selectIds.length == 0) {
             bsWin.alert("请选择要导出数据！");
             } else {
             var ids = [];
             for (var i = 0; i < selectIds.length; i++) {
             ids.push(selectIds[i].value);
             }
             var idStr = ids.join(',');
             partySvc.exportSignInSheet(idStr);
             }*/
            partySvc.exportSignInSheet();
        }

        /**
         * 批量导入弹框
         */
        vm.importExcel = function () {
            $("#importFile").val('');
            $("#importDiv").kendoWindow({
                width: "700px",
                height: "300px",
                title: "导入文件",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        /**
         * 重置按钮
         */
        vm.formReset = function () {
            var tab = $("#partyform").find('input,select');
            $.each(tab, function (i, obj) {
                obj.value = "";
            });
        }

        /**
         * 导入数据
         */
        vm.importFile = function () {
            var file = $("#importFile").val();
            if (file) {
                vm.isImport = true;
                var formData = new FormData();
                var file = document.querySelector('input[type=file]').files[0];
                formData.append("file", file);
                $.ajax({
                    type: "post",
                    url: rootPath + "/partyManager/importFile",
                    data: formData,
                    enctype: "multipart/form-data",
                    // headers: {'Content-Type':undefined},
                    contentType: false,
                    cache: false,
                    processData: false
                }).success(function (data) {
                    vm.isImport = false;
                    var msrg = data.reMsg;
                    bsWin.alert(msrg, function () {
                        window.parent.$("#importDiv").data("kendoWindow").close();
                        vm.gridOptions.dataSource.read();
                        // location.href = "#/partyList";
                    });
                })
            } else{
                bsWin.alert("请先上传导入文件！");
            }
        }

        /**
         * 导出党员信息表-excel
         */
        vm.exportPartyInfo = function () {
            partySvc.exportPartyInfo();
        }

    }
})();

(function(){
    'use strict';
    angular.module('app').factory('partyMeetSvc', partyMeet);
    partyMeet.$inject = ['$http', '$state' , 'bsWin' ];

    function partyMeet($http , $state , bsWin ){
        var service = {
            partyMeetGrid : partyMeetGrid ,
            createPartyMeet : createPartyMeet , //保存党务会议
            findMeetById : findMeetById , //通过ID获取会议信息
            updatePartyMeet : updatePartyMeet , //更新会议信息
            deletePartyMeet : deletePartyMeet  , //删除会议信息

        }

        return service;

        function deletePartyMeet(id , callBack){
            var httpOptions = {
                method : "delete",
                url : rootPath + "/partyMeet/deletePartyMeet",
                params : {"mId" : id}
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function updatePartyMeet(vm , callBack){
            var httpOptions = {
                method : "put",
                url : rootPath + "/partyMeet/updatePartyMeet",
                data : vm.partyMeet
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function findMeetById(id , callBack){
            var httpOptions = {
                method : "post",
                url : rootPath + "/partyMeet/findMeetById",
                params : {"mId" : id}
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof callBack =="function"){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function createPartyMeet(vm , callBack){
            var httpOptions = {
                method : "post",
                url : rootPath + "/partyMeet/createPartyMeet",
                data : vm.partyMeet
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function partyMeetGrid(vm){
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/partyMeet/findByDataList" ),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            //S_序号
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.mId)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox' />"
                },
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 20,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "",
                    title: "会议标题",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        return '<a  href="#/partyMeetDetail/' + item.mId + '">'+item.mTitle+'</a>'
                    }
                },
                {
                    field: "mDate",
                    title: "会议时间",
                    width: 50,
                    filterable: false,
                },
                {
                    field: "mAddress",
                    title: "会议地点",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "",
                    title: "操作",
                    width: 120,
                    template: function (item) {
                        var canExecute = false;
                        if(item.curState == 9){
                            canExecute = true;
                        }
                        return common.format($('#columnBtns').html(),   item.mId , "vm.deletePartyMeet('" + item.mId + "')");
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };
        }

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('partyMeetingCtrl', partyMeeting);

    partyMeeting.$inject = ['partyMeetSvc' , 'bsWin' , '$scope' , "$state" , 'sysfileSvc'];

    function partyMeeting(partyMeetSvc , bsWin , $scope , $state , sysfileSvc) {
        var vm = this;
        vm.title = '党员会议管理';        		//标题
        vm.party = {};
        vm.businessFlag = {};
        vm.id = $state.params.id;

        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.id) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.id", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }

            //创建附件对象
            vm.sysFile = {
                businessId: vm.id,
                mainId: vm.id,
                mainType: "党务会议附件",
                sysBusiType: "",
                showBusiType: false,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm,
                uploadSuccess: function () {
                    sysfileSvc.findByBusinessId(vm.id, function (data) {
                        vm.sysFilelists = data;
                    });
                }
            });
        }

        active();
        function active(){
            partyMeetSvc.partyMeetGrid(vm);
            // sharingPlatlformSvc.initOrgAndUser(vm);
            if(vm.id){
                vm.isShowUpdate = true;
                partyMeetSvc.findMeetById(vm.id , function(data){
                    vm.partyMeet = data;
                });
                //初始化附件
                sysfileSvc.findByBusinessId(vm.id , function(data){
                    vm.sysFilelists = data;
                });
            }

            vm.initFileUpload();
        }

        /**
         * 保存党务会议
         */
        vm.savePartyMeet = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                partyMeetSvc.createPartyMeet(vm, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        vm.id = data.reObj;
                        vm.isShowUpdate = true;
                        bsWin.alert("保存成功！");
                    }
                });
            }
        }

        /**
         * 更新会议信息
         * @constructor
         */
        vm.UpdatePartyMeet = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                partyMeetSvc.updatePartyMeet(vm, function (data) {
                    bsWin.alert("保存成功！");
                });
            }
        }

        /**
         * 删除会议信息
         * @param id
         */
        vm.deletePartyMeet = function(id){
            bsWin.confirm("确定删除？" , function(){
                partyMeetSvc.deletePartyMeet(id , function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.alert("删除成功！");
                        vm.gridOptions.dataSource.read();
                    }
                });
            });

        }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('pauseProjectCtrl', pauseProject);

    pauseProject.$inject = ['$location','pauseProjectSvc','$state',"adminSvc","ideaSvc"];

    function pauseProject($location, pauseProjectSvc,$state,adminSvc,ideaSvc) {
        var vm = this;
        vm.title = '项目暂停审批';        		//标题

        active();
        function active(){
            pauseProjectSvc.grid(vm);
            ideaSvc.initIdea(vm);	//初始化个人常用意见
        }

        /**
         * 暂停项目弹出框
         */
        vm.pauseProjectWindow=function(signid,stopid){
            pauseProjectSvc.pauseProjectWindow(vm,signid,stopid);
        }

        /**
         *更新暂停项目审批信息
         */
        vm.commitProjectStop = function () {
            pauseProjectSvc.updateProjectStop(vm);
        }

        /**
         * 取消
         */
        vm.closewin=function(){
            window.parent.$("#spwindow").data("kendoWindow").close()
        }

        /**
         * 选择部长意见
         */
        vm.selectMinisterIdea=function(){

            vm.projectStop.directorIdeaContent += vm.directorIdea;
        }

        /**
         * 选择分管副主任意见
         */
        vm.selectDirectorIdea=function(){
            vm.projectStop.leaderIdeaContent += vm.leaderIdea;
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('pauseProjectSvc', pauseProject);

    pauseProject.$inject = ['$http', '$state' , 'bsWin'];

    function pauseProject($http, $state , bsWin) {
        var service = {
            initProject : initProject,                  //初始化项目信息
            pauseProject: pauseProject,                 //保存发起暂停项目
            initFlowDeal : initFlowDeal,                //初始化流程信息
            grid : grid,
            getProjectStopByStopId : getProjectStopByStopId,    //通过id获取暂停项目
            updateProjectStop : updateProjectStop,  //更新暂停项目审批信息
            findPausingProject : findPausingProject, //查找正在申请暂停的项目
            getListInfo : getListInfo , //获取审批结果通过的项目列表
            getProjectStopBySignId : getProjectStopBySignId, //通过项目id获取暂停项目
            saveProjectStop :saveProjectStop, //保存暂停项目
        };
        return service;

        //begin getListInfo
        function getListInfo(signId , callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/projectStop/getListInfo",
                params : {signId : signId}
            }
            var httpSuccess = function success(response){
                if(callBack !=undefined && typeof  callBack == "function"){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });

        }
        //end getListInfo

        //beign findPausingProject
        function findPausingProject(vm,signId){
            var httpOptions={
                method : "post",
                url : rootPath + "/projectStop/findPausingProject",
                params :{signId : signId}
            }

            var httpSuccess=function success(response){
                var resultObj = response.data;
                if(resultObj.flag || resultObj.reCode == 'ok'){
                    $state.go("projectStopForm" , {signId : signId , stopId : ''} );
                }else{
                    bsWin.alert("该项目暂停申请正在处理");
                }
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //end findPausingProject

        //begin initProject
        function initProject(signId,callBack){
            var httpOptions={
                method : "post",
                url : rootPath + "/projectStop/initProjectBySignId",
                params :{
                    signId : signId
                }
            }

            var httpSuccess=function success(response){
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }//end initProject

        //S_保存发起流程项目暂停表信息
        function pauseProject(projectStop,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/projectStop/savePauseProject",
                data: projectStop
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        } //end_pauseProject

        //S_保存项目暂停表信息
        function saveProjectStop(projectStop,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/projectStop/saveProjectStop",
                data: projectStop
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        } //end_pauseProject



        //S_初始化项目暂停信息
        function initFlowDeal(vm){
            getProjectStopByStopId(vm.businessKey,function(data){
                vm.model = data;
                vm.sign = vm.model.signDispaWork;
            });
        }//E_initFlowDeal

        //begin getProjectStopByStopId
        function getProjectStopByStopId(stopId , callBack){
            var httpOptions={
                method : "post",
                url : rootPath + "/projectStop/getProjectStopByStopId",
                params : {
                    stopId : stopId
                }
            }

            var httpSuccess=function success(response){
                if( callBack != undefined && typeof  callBack == 'function'){
                    return callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end getProjectStopByStopId

        //begin getProjectStopBySignId
        function getProjectStopBySignId(signId , callBack){
            var httpOptions={
                method : "post",
                url : rootPath + "/projectStop/getProjectStopBySignId",
                params : {
                    signId : signId
                }
            }

            var httpSuccess=function success(response){
                if( callBack != undefined && typeof  callBack == 'function'){
                    return callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end getProjectStopBySignId


        //begin updataProjectStop
        function updateProjectStop(vm){
            common.initJqValidation();
            var isValid = $('#form').valid();
            if (isValid) {
                var httpOptions = {
                    method: "post",
                    url: rootPath + "/projectStop/updateProjectStop",
                    data: vm.projectStop
                }
                var httpSuccess = function success(response) {
                    bsWin.success("操作成功");
                    $state.go('pauseProject');

                }
                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
            }
        }
        //end updataProjectStop


        function grid(vm){
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/projectStop/findByOData"),
                schema: {
                    data: "value",
                    total: function (data) {
                        if (data['count']) {
                            $("#PAUSE_COUNT").html(data['count']);
                        } else {
                            $("#PAUSE_COUNT").html(0);
                        }
                        return data['count'];
                    },
                    model: {
                        id: "id",
                        fields: {
                            createdDate: {
                                type: "date"
                            },
                            modifiedDate: {
                                type: "date"
                            }
                        }
                    }
                },
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource

            var columns = [
                {
                    field: "",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>",
                },
                {
                    field: "",
                    title: "项目名称",
                    width: 200,
                    filterable: false,
                    template: function (item) {
                        return item.sign.projectname;
                    }
                },
                {
                    field: "",
                    title : "评审阶段",
                    width : 100,
                    filterable : false,
                    template : function(item){
                        return item.sign.reviewstage;
                    }
                },
                {
                    field : "createdDate",
                    title : "申请日期",
                    width : 100,
                    format : "{0:yyyy-MM-dd}",
                    filterable : false
                },
                {
                    field : "",
                    title : "操作",
                    width : 100,
                    filterable : false,
                    template : function(item){
                        return common.format($("#columnBtns").html(),item.sign.signid , item.stopid );
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                dataBound: function () {
                    var rows = this.items();
                    var page = this.pager.page() - 1;
                    var pagesize = this.pager.pageSize();
                    $(rows).each(function () {
                        var index = $(this).index() + 1 + page * pagesize;
                        var rowLabel = $(this).find(".row-number");
                        $(rowLabel).html(index);
                    });
                }
            };


        }


    }
})();
(function(){
    'use strict';
    angular.module('app').controller('projectStopFormCtrl' , projectStopForm);
    projectStopForm.$inject = ['$state' , 'pauseProjectSvc','bsWin','$scope','sysfileSvc'];
    function projectStopForm($state, pauseProjectSvc,bsWin,$scope,sysfileSvc){
        var vm = this;
        vm.sign = {};
        var signId = $state.params.signId;
        vm.projectStop = {};
        vm.projectStop.signid = signId;
        vm.projectStop.stopId = $state.params.stopId;
        vm.signId = signId;
        //用于控制发起流程，返回流程等按钮
        vm.showStartFlow = true;
        if(vm.projectStop.stopId != ""){
            vm.showStartFlow = false;
        }


        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.projectStop.stopid) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.projectStop.stopid", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }

            //创建附件对象
            vm.sysFile = {
                businessId: vm.projectStop.stopid,
                mainId: vm.signId,
                mainType: "暂停项目",
                sysBusiType: vm.projectStop.sysBusiType,
                showBusiType:false,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm,
                uploadSuccess: function () {
                    sysfileSvc.findByBusinessId(vm.projectStop.stopid, function (data) {
                        vm.sysFilelists = data;
                    });
                }
            });
        }

        activate();
        function activate(){
            pauseProjectSvc.initProject(signId,function(data){
                vm.sign = data;
                if(vm.sign.reviewstage == '可行性研究报告' || vm.sign.reviewstage == '项目概算'){
                    vm.sign.countUsedWorkday = 15-vm.sign.surplusdays;
                }else{
                    vm.sign.countUsedWorkday = 12-vm.sign.surplusdays;
                }
            });
            pauseProjectSvc.getProjectStopBySignId(signId,function (data) {
                if(data.length>0) {
                    vm.projectStop = data[0];
                    if (vm.projectStop.isSupplementMaterial == "9") {
                        vm.projectStop.sysBusiType = "中心发补充材料函";
                    }
                    if (vm.projectStop.isPuaseApprove == "9") {
                        vm.projectStop.sysBusiType = "申报单位要求暂停审核函";
                    }
                    sysfileSvc.findByBusinessId(vm.projectStop.stopid, function (data) {
                        vm.sysFilelists = data;
                    });
                }
                vm.initFileUpload();
            })

        }

        vm.Checked = function($event,isHasFile){
            var checkbox = $event.target;
            var checked = checkbox.checked;
            if(isHasFile){
                if(checked == 9 || checked == '9'){
                    vm.noFile = false;
                }else{
                    vm.noFile = true;
                }
            }else{
                if(vm.noFile){
                    vm.projectStop.isSupplementMaterial = 0;
                    vm.projectStop.isPuaseApprove = 0;
                }
            }
        }

        /**
         *更新暂停项目信息
         */
        vm.commitProjectStop = function () {
            common.initJqValidation();
            var isValid = $('#form').valid();
            if (isValid) {
                vm.projectStop.processName = "《"+vm.sign.projectname+"》暂停申请";
                if(!vm.projectStop.userDays){
                    vm.projectStop.userDays = vm.sign.countUsedWorkday;
                }
                vm.projectStop.signid=vm.sign.signid;
                pauseProjectSvc.pauseProject(vm.projectStop,function(data){
                    if(data.flag || data.reCode=="ok"){
                        bsWin.alert("操作成功！",function(){$state.go("personDtasks");})
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("项目暂停表填写不符合要求！");
            }
        }

        /**
         *保存更新暂停项目信息
         */
        vm.saveProjectStop = function () {
            common.initJqValidation();
            var isValid = $('#form').valid();
            if (isValid) {
                vm.projectStop.signid= vm.sign.signid;
                pauseProjectSvc.saveProjectStop(vm.projectStop,function(data){
                    if(data.flag || data.reCode=="ok"){
                        bsWin.alert("操作成功！")
                        vm.projectStop=data.reObj;
                        if (vm.projectStop.isSupplementMaterial == "9") {
                            vm.projectStop.sysBusiType = "中心发补充材料函";
                        }
                        if (vm.projectStop.isPuaseApprove == "9") {
                            vm.projectStop.sysBusiType = "申报单位要求暂停审核函";
                        }

                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("项目暂停表填写不符合要求！");
            }
        }

        /**
         * 选择部长意见
         */
        vm.selectMinisterIdea=function(){

            vm.projectStop.directorIdeaContent += vm.directorIdea;
        }

        /**
         * 选择分管副主任意见
         */
        vm.selectDirectorIdea=function(){
            vm.projectStop.leaderIdeaContent += vm.leaderIdea;
        }

    }
})();
(function(){
    'use strict';
    angular.module('app').controller('projectStopFormEditCtrl' , projectStopFormEdit);
    projectStopFormEdit.$inject = ['$state' , 'pauseProjectSvc','bsWin','$scope','sysfileSvc'];
    function projectStopFormEdit($state, pauseProjectSvc,bsWin,$scope,sysfileSvc){
        var vm = this;
        vm.stopId = $state.params.stopId;

        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.projectStop.stopid) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.projectStop.stopid", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }

            //创建附件对象
            vm.sysFile = {
                businessId: vm.projectStop.stopid,
                mainId: vm.projectStop.stopid,
                mainType: "暂停项目",
                sysBusiType: vm.projectStop.sysBusiType,
                showBusiType:true,      //是否显示业务类型
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm,
                uploadSuccess: function () {
                    sysfileSvc.findByBusinessId(vm.projectStop.stopid, function (data) {
                        vm.sysFilelists = data;
                    });
                }
            });
        }
        activate();
        function activate(){
            pauseProjectSvc.getProjectStopByStopId(vm.stopId,function(data){
                vm.projectStop = data;
                vm.sign = vm.projectStop.signDispaWork;
                //评审天数-剩余工作日
                vm.sign.countUsedWorkday = vm.sign.reviewdays-vm.sign.surplusdays;
                if (vm.projectStop.isSupplementMaterial == "9") {
                    vm.projectStop.sysBusiType = "中心发补充材料函";
                }
                if (vm.projectStop.isPuaseApprove == "9") {
                    vm.projectStop.sysBusiType = "申报单位要求暂停审核函";
                }
                sysfileSvc.findByBusinessId(vm.projectStop.stopid, function (data) {
                    vm.sysFilelists = data;
                });
                vm.initFileUpload();

            });
        }

        /**
         *保存更新暂停项目信息
         */
        vm.saveProjectStop = function () {
            common.initJqValidation();
            var isValid = $('#form').valid();
            if (isValid) {
                pauseProjectSvc.saveProjectStop(vm.projectStop,function(data){
                    if(data.flag || data.reCode=="ok"){
                        bsWin.alert("操作成功！")
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("项目暂停表填写不符合要求！");
            }
        }


    }
})();
(function(){
    'use strict';
    angular.module('app').controller('projectStopInfoCtrl' , projectStopInfo);
    projectStopInfo.$inject = ['$state' , 'pauseProjectSvc'];
    function projectStopInfo( $state , pauseProjectSvc){
        var vm = this ;
        var signId = $state.params.signId ;
        vm.sign = {};
        activate();
        function activate(){
            pauseProjectSvc.initProject(signId,function(data){
                vm.sign = data;
                //评审天数-剩余工作日
                vm.sign.countUsedWorkday = vm.sign.reviewdays-vm.sign.surplusdays;
            });
            pauseProjectSvc.getListInfo(signId , function(data){
                vm.projectStopList = data;
            });
        }
    }
})();
(function () {
    'use strict';
    angular.module('app').controller('takeUserCtrl', takeUser);

    takeUser.$inject = ['bsWin', 'takeUserSvc', 'userSvc', 'flowSvc', '$state','$rootScope'];

    function takeUser(bsWin, takeUserSvc, userSvc, flowSvc, $state,$rootScope) {
        var vm = this;
        vm.title = "个人代办";
        vm.model = {};

        activate();
        function activate() {
            takeUserSvc.getUser(function (data) {
                vm.model = data;
                takeUserSvc.initAllUser(function (data) {
                    vm.takeUserList = data;
                    vm.initTaskUser(vm.model.takeUserId);
                });

                //查询个人待办任务列表
                userSvc.getAllTaskList(vm.model.id, function (data) {
                    if (data.ruTaskList) {
                        vm.ruTaskList = data.ruTaskList;        //待办任务
                    }
                    if (data.ruProcessTaskList) {
                        vm.ruProcessTaskList = data.ruProcessTaskList;  //待办项目
                    }
                });
            });

            takeUserSvc.agentGrid(vm);
        }

        //查询
        vm.queryAgentList = function () {
            vm.agentGridOptions.dataSource._skip = 0;
            vm.agentGridOptions.dataSource.read();
        }

        vm.formReset = function(){
            vm.querymodel = {};
        }

        //  取消代办人
        vm.cancelTakeUser = function () {
            if (!vm.model.takeUserId) {
                bsWin.alert("你还没有设置代办人！");
            } else {
                bsWin.confirm({
                    title: "询问提示",
                    message: "确认取消代办人么？",
                    onOk: function () {
                        takeUserSvc.cancelTakeUser(function () {
                            vm.model.takeUserId = "";
                            vm.taskUserName = "";
                            bsWin.alert("操作成功!");
                        });
                    }
                });
            }
        }


        /**
         * 保存代办人
         * */
        vm.saveTakeUser = function () {
            if (vm.takeUserId) {
                takeUserSvc.saveTakeUser(vm.takeUserId, function (data) {
                    if(data.flag || data.reCode == 'ok'){
                        vm.model.takeUserId = vm.takeUserId;
                        vm.initTaskUser(vm.takeUserId);
                        bsWin.alert(data.reMsg);
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("请选择代办人！");
            }
        }

        vm.initTaskUser = function (userId) {
            angular.forEach(vm.takeUserList, function (u, index) {
                if (u.id == userId) {
                    vm.taskUserName = u.displayName;
                    vm.takeUserId = userId;
                }
            })
        }


        /**
         * 任务流转
         */
        vm.transTask = function (taskId) {
            if (!vm.takeUserId) {
                bsWin.alert("您还没设置代办人，不能进行任务转办");
                return;
            } else {
                if (vm.takeUserId != vm.model.takeUserId) {
                    bsWin.alert("您设置的待办人有更改，请保存后再操作！");
                    return;
                } else {
                    flowSvc.transTask(taskId, vm.model.id, vm.model.takeUserId, function (data) {
                        if (data.flag || data.reCode == 'ok') {
                            //查询个人待办任务列表
                            userSvc.getAllTaskList(vm.model.id, function (data) {
                                if (data.ruTaskList) {
                                    vm.ruTaskList = data.ruTaskList;        //待办任务
                                }
                                if (data.ruProcessTaskList) {
                                    vm.ruProcessTaskList = data.ruProcessTaskList;  //待办项目
                                }
                            });
                            bsWin.alert("操作成功！");
                        } else {
                            bsWin.alert(data.reMsg);
                        }
                    });
                }
            }
        }

    }

})();
(function(){
    'use strict';
    angular.module('app').factory("takeUserSvc" ,takeUser);

    takeUser.$inject=['$http'];
    function takeUser($http){

        var service={
            initAllUser : initAllUser ,         //初始化所有用户
            saveTakeUser : saveTakeUser ,       //保存代办人
            getUser : getUser ,                 //通过id查询个人信息
            cancelTakeUser : cancelTakeUser ,   //取消代办人
            initZtreeClient:initZtreeClient,
            updateZtree : updateZtree,
            agentGrid : agentGrid,              //个人代办记录
        }
        return service;

        //查询个人代办记录
        function agentGrid(vm){
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/personalCenter/findByOData",  $("#searchform")),
                schema: common.kendoGridConfig().schema({
                    id: "agentId",
                    fields: {
                        transDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize : 10,
                sort: {
                    field: "transDate",
                    dir: "desc"
                }
            });
            var columns = [
                {
                    field: "",
                    title: "序号",
                    width: 50,
                    attributes: {
                        style: "text-align: center;",
                    },
                    template: function () {
                        return "<span class='row-number'></span>";
                    }
                },
                {
                    field: "flowName",
                    title: "流程名称",
                    filterable: false,
                },
                {
                    field: "nodeNameValue",
                    title: "代办环节",
                    filterable: false,
                    width: 120
                },
                {
                    field: "transDate",
                    title: "转办时间",
                    filterable: false,
                    width: 220,
                    format: "{0: yyyy-MM-dd}"
                },
                {
                    field: "userName",
                    title: "原处理人",
                    width: 100,
                    filterable: false,
                }
            ];
            // End:column
            vm.agentGridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                dataBound: function () {
                    var rows = this.items();
                    var page = this.pager.page() - 1;
                    var pagesize = this.pager.pageSize();
                    $(rows).each(function () {
                        var index = $(this).index() + 1 + page * pagesize;
                        var rowLabel = $(this).find(".row-number");
                        $(rowLabel).html(index);
                    });
                }
            };
        }

        // begin#initZtreeClient
        function initZtreeClient(vm) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/role/findAllRoles"
            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        var zTreeObj;
                        var setting = {
                            check: {
                                chkboxType: {
                                    "Y": "ps",
                                    "N": "ps"
                                },
                                enable: true
                            }
                        };
                        var zNodes = $linq(response.data).select(
                            function (x) {
                                return {
                                    id: x.id,
                                    name: x.roleName
                                };
                            }).toArray();
                        var rootNode = {
                            id: '',
                            name: '角色集合',
                            children: zNodes
                        };
                        zTreeObj = $.fn.zTree.init($("#zTree"), setting, rootNode);
                        updateZtree(vm);
                    }
                });
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //begin initAllUser
        function  initAllUser(callBack){
            var httpOptions={
                method : "post",
                url : rootPath + "/user/getAllUserDisplayName",
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }
        //end initAllUser

        //begin saveTakeUser
        function saveTakeUser(takeUserId,callBack){
            var httpOptions = {
                method: "post",
                url: rootPath + "/user/saveTakeUser",
                params: {
                    takeUserId:takeUserId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //end saveTakeUser

        //begin getUser
        function getUser(callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/user/findCurrentUser",
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//end getUser

        //begin cancelTakeUser
        function cancelTakeUser(callBack){
            var httpOptions={
                method : "get",
                url : rootPath + "/user/cancelTakeUser"
            }

            var httpSuccess = function success(response){
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //end cancelTakeUser

        function updateZtree(vm) {
            var treeObj = $.fn.zTree.getZTreeObj("zTree");
            var checkedNodes = $linq(vm.model.roleDtoList).select(function (x) {
                return x.roleName;
            }).toArray();
            var allNodes = treeObj.getNodesByParam("level", 1, null);

            var nodes = $linq(allNodes).where(function (x) {
                return $linq(checkedNodes).contains(x.name);
            }).toArray();

            for (var i = 0, l = nodes.length; i < l; i++) {
                treeObj.checkNode(nodes[i], true, true);
            }
        }
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('postdoctoralBaseCtrl', postdoctoralBase);

    postdoctoralBase.$inject = ['postdoctoralBaseSvc' , 'bsWin' , '$scope' , "$state" , 'sysfileSvc'];

    function postdoctoralBase(postdoctoralBaseSvc , bsWin , $scope , $state , sysfileSvc) {
        var vm = this;
        vm.title = '博士后基地管理';  //标题
        vm.postdoctoralBase = {};
        vm.businessFlag = {};
        vm.id = $state.params.id;

        active();
        function active(){
            postdoctoralBaseSvc.postdoctoralBaseGrid(vm);
            if(vm.id){
                vm.isShowUpdate = true;
                postdoctoralBaseSvc.findPostdoctoralBaseById(vm.id , function(data){
                    vm.postdoctoralBase = data;
                });
            }
        }

        /**
         * 保存博士后基地
         */
        vm.createPostdoctoralBase = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                postdoctoralBaseSvc.createPostdoctoralBase(vm, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        vm.postdoctoralBase = data.reObj;
                        vm.isShowUpdate = true;
                        bsWin.alert("保存成功！");
                    }
                });
            }
        }

        /**
         * 更新博士后基地
         * @constructor
         */
        vm.updatePostdoctoralBase = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                postdoctoralBaseSvc.updatePostdoctoralBase(vm, function (data) {
                    bsWin.alert("保存成功！");
                });
            }
        }

        /**
         * 删除信息
         * @param id
         */
        vm.deletePostdoctoralBase = function(id){
            bsWin.confirm("确定删除？" , function(){
                postdoctoralBaseSvc.deletePostdoctoralBase(id , function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.alert("删除成功！");
                        vm.gridOptions.dataSource.read();
                    }
                });
            });

        }

    }
})();

(function(){
    'use strict';
    angular.module('app').factory('postdoctoralBaseSvc', postdoctoralBaseSvc);
    postdoctoralBaseSvc.$inject = ['$http', '$state' , 'bsWin' ];
    function postdoctoralBaseSvc($http , $state , bsWin ){
        var service = {
            postdoctoralBaseGrid : postdoctoralBaseGrid ,
            createPostdoctoralBase : createPostdoctoralBase , //保存
            findPostdoctoralBaseById : findPostdoctoralBaseById , //通过ID获取信息
            updatePostdoctoralBase : updatePostdoctoralBase , //更新信息
            deletePostdoctoralBase : deletePostdoctoralBase  , //删除信息

        }

        return service;

        function deletePostdoctoralBase(id , callBack){
            var httpOptions = {
                method : "delete",
                url : rootPath + "/postdoctoralBase/deletePostdoctoralBase",
                params : {"id" : id}
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function updatePostdoctoralBase(vm , callBack){
            var httpOptions = {
                method : "post",
                url : rootPath + "/postdoctoralBase/updatePostdoctoralBase",
                data : vm.postdoctoralBase
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function findPostdoctoralBaseById(id , callBack){
            var httpOptions = {
                method : "post",
                url : rootPath + "/postdoctoralBase/findById",
                params : {"id" : id}
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof callBack =="function"){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function createPostdoctoralBase(vm , callBack){
            var httpOptions = {
                method : "post",
                url : rootPath + "/postdoctoralBase/createPostdoctoralBase",
                data : vm.postdoctoralBase
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function postdoctoralBaseGrid(vm){
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/postdoctoralBase/findByOData" ),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            //S_序号
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.mId)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox' />"
                },
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 40,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "baseName",
                    title: "基地名称",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        return '<a  href="#/postdoctoralBaseAdd/' + item.id + '">'+item.baseName+'</a>'
                    }
                },
                {
                    field: "foundingTime",
                    title: "成立时间",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "principalBase",
                    title: "基地负责人",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "dailyMananger",
                    title: "日常管理人员",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "",
                    title: "操作",
                    width: 120,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),   item.id , "vm.deletePostdoctoralBase('" + item.id + "')");
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };
        }

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('postdoctoralPopStaffCtrl', postdoctoralPopStaffCtrl);

    postdoctoralPopStaffCtrl.$inject = ['postdoctoralStaffSvc' , 'bsWin' , '$scope' , "$state" , 'sysfileSvc'];

    function postdoctoralPopStaffCtrl(postdoctoralStaffSvc , bsWin , $scope , $state , sysfileSvc) {
        var vm = this;
        vm.title = '出站人员列表';  //标题
        vm.postdoctoralStaff = {};
        vm.businessFlag = {};
        vm.searchModel = {};
        vm.id = $state.params.id;
        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.id) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.id", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }

            //创建附件对象
            vm.sysFile = {
                businessId: vm.id,
                mainId: vm.id,
                mainType: "博士后在站人员附件",
                sysBusiType: "",
                showBusiType: false,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm,
                uploadSuccess: function () {
                    sysfileSvc.findByBusinessId(vm.id, function (data) {
                        vm.sysFilelists = data;
                    });
                }
            });
        }
        active();
        function active(){
            postdoctoralStaffSvc.postdoctoralPopStaffGrid(vm);
            if(vm.id){
                vm.isShowUpdate = true;
                postdoctoralStaffSvc.findPostdoctoralStaffById(vm.id , function(data){
                    vm.postdoctoralStaff = data;
                    vm.id = vm.postdoctoralStaff.id;
                });
            }
            //初始化上传附件
            vm.initFileUpload();
        }

        /**
         * 保存博士后人员
         */
        vm.commitPostdoctoralStaff = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.postdoctoralStaff.status = '4';
                postdoctoralStaffSvc.createPostdoctoralStaff(vm, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        vm.postdoctoralStaff = data.reObj;
                        vm.id = vm.postdoctoralStaff.id;
                        vm.isShowUpdate = true;
                        vm.initFileUpload();
                        bsWin.alert("保存成功！");
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            }
        }



        /**
         * 更新博士后人员
         * @constructor
         */
        vm.commitPostdoctoralPopStaff = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.postdoctoralStaff.status = "3";
                postdoctoralStaffSvc.updatePostdoctoralStaff(vm, function (data) {
                    bsWin.alert("提交成功！");
                });
            }
        }

        /**
         * 删除信息
         * @param id
         */
        vm.deletePostdoctoralStaff = function(id){
            bsWin.confirm("确定删除？" , function(){
                postdoctoralStaffSvc.deletePostdoctoralStaff(id , function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.alert("删除成功！");
                        vm.gridOptions.dataSource.read();
                    }
                });
            });
        }

        /**
         * 审核信息
         * @param id
         */
        vm.approvePostdoctoralStaff = function(id,status){
            if(status == 'undefined' || status == undefined || status == null || status == ''){
                status = "";
            }
            bsWin.confirm("确定审核？" , function(){
                postdoctoralStaffSvc.approvePostdoctoralStaff(id,status , function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.alert(data.reMsg);
                        vm.gridOptions.dataSource.read();
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            });
        }

        /**
         * 回退信息
         * @param id
         */
        vm.backPostdoctoralStaff = function(id,status){
            if(status == 'undefined' || status == undefined || status == null || status == ''){
                status = "";
            }
            bsWin.confirm("确定回退？" , function(){
                if(status == '2'){
                    status = '0'
                }else if(status == '4'){
                    status = '2'
                }
                postdoctoralStaffSvc.backPostdoctoralStaff(id,status , function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.alert(data.reMsg);
                        vm.gridOptions.dataSource.read();
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            });
        }

        //表单查询
        vm.searchForm = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        //重置查询表单
        vm.formReset = function(){
            vm.searchModel = {};
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('postdoctoralStaffCtrl', postdoctoralStaff);

    postdoctoralStaff.$inject = ['postdoctoralStaffSvc' , 'bsWin' , '$scope' , "$state" , 'sysfileSvc'];

    function postdoctoralStaff(postdoctoralStaffSvc , bsWin , $scope , $state , sysfileSvc) {
        var vm = this;
        vm.title = '博士后人员管理';  //标题
        vm.postdoctoralStaff = {};
        vm.businessFlag = {};
        vm.searchModel = {};
        vm.searchModel.status = '2,3';
        vm.id = $state.params.id;
        vm.name = $state.params.name;


        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.id) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.id", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }

            //创建附件对象
            vm.sysFile = {
                businessId: vm.id,
                mainId: vm.id,
                mainType: "博士后在站人员附件",
                sysBusiType: "",
                showBusiType: false,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm,
                uploadSuccess: function () {
                    sysfileSvc.findByBusinessId(vm.id, function (data) {
                        vm.sysFilelists = data;
                    });
                }
            });
        }

        active();
        function active(){
            postdoctoralStaffSvc.postdoctoralStaffGrid(vm);
            if(vm.id){
                vm.isShowUpdate = true;
                postdoctoralStaffSvc.findPostdoctoralStaffById(vm.id , function(data){
                    vm.postdoctoralStaff = data;
                });
            }
            //初始化上传附件
            vm.initFileUpload();

        }

        /**
         * 保存博士后人员
         */
        vm.createPostdoctoralStaff = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                postdoctoralStaffSvc.createPostdoctoralStaff(vm, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        vm.postdoctoralStaff = data.reObj;
                        vm.isShowUpdate = true;
                        vm.id = vm.postdoctoralStaff.id;
                        vm.initFileUpload();
                        bsWin.alert("保存成功！");
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            }
        }

        /**
         * 更新博士后人员
         * @constructor
         */
        vm.updatePostdoctoralStaff = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                postdoctoralStaffSvc.updatePostdoctoralStaff(vm, function (data) {
                    bsWin.alert("更新成功！");
                });
            }
        }


        /**
         * 提交博士后人员
         * @constructor
         */
        vm.commitPostdoctoralStaff = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.postdoctoralStaff.status = "1";
                postdoctoralStaffSvc.updatePostdoctoralStaff(vm, function (data) {
                    bsWin.alert("提交成功！");
                });
            }
        }


        /**
         * 提交博士后人员
         * @constructor
         */
        vm.commitPostdoctoralPopStaff = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.postdoctoralStaff.status = "3";
                postdoctoralStaffSvc.updatePostdoctoralStaff(vm, function (data) {
                    bsWin.alert("提交成功！");
                });
            }
        }

        /**
         * 删除信息
         * @param id
         */
        vm.deletePostdoctoralStaff = function(id){
            bsWin.confirm("确定删除？" , function(){
                postdoctoralStaffSvc.deletePostdoctoralStaff(id , function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.alert("删除成功！");
                        vm.gridOptions.dataSource.read();
                    }
                });
            });
        }

        /**
         * 审核信息
         * @param id
         */
        vm.approvePostdoctoralStaff = function(id,status){
            if(status == 'undefined' || status == undefined || status == null || status == ''){
                status = "";
            }
            bsWin.confirm("确定审核？" , function(){
                postdoctoralStaffSvc.approvePostdoctoralStaff(id,status , function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.alert(data.reMsg);
                        if(status == '3'){
                            $state.go("postdoctoralPopStaffList");
                        }else{
                            vm.gridOptions.dataSource.read();
                        }
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            });
        }

        /**
         * 回退信息
         * @param id
         */
        vm.backPostdoctoralStaff = function(id,status){
            if(status == 'undefined' || status == undefined || status == null || status == ''){
                status = "";
            }
            bsWin.confirm("确定回退？" , function(){
                if(status == '2'){
                    status = '0'
                }else if(status == '4'){
                    status = '2'
                }
                postdoctoralStaffSvc.backPostdoctoralStaff(id,status , function(data){
                    if(data.flag || data.reCode == 'ok'){
                        bsWin.alert(data.reMsg);
                            vm.gridOptions.dataSource.read();
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            });
        }

        //表单查询
        vm.searchForm = function(){
            vm.gridOptions.dataSource.transport.options.read.url = rootPath+'/postdoctoralStaff/findByOData';
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        //重置查询表单
        vm.formReset = function(){
            vm.searchModel = {};
        }

    }
})();

(function(){
    'use strict';
    angular.module('app').factory('postdoctoralStaffSvc', postdoctoralStaffSvc);
    postdoctoralStaffSvc.$inject = ['$http', '$state' , 'bsWin' ];
    function postdoctoralStaffSvc($http , $state , bsWin ){
        var service = {
            postdoctoralStaffGrid : postdoctoralStaffGrid ,
            postdoctoralPopStaffGrid : postdoctoralPopStaffGrid ,
            createPostdoctoralStaff : createPostdoctoralStaff , //保存
            findPostdoctoralStaffById : findPostdoctoralStaffById , //通过ID获取信息
            updatePostdoctoralStaff : updatePostdoctoralStaff , //更新信息
            deletePostdoctoralStaff : deletePostdoctoralStaff  , //删除信息
            approvePostdoctoralStaff : approvePostdoctoralStaff,
            backPostdoctoralStaff : backPostdoctoralStaff

        }

        return service;

        function deletePostdoctoralStaff(id , callBack){
            var httpOptions = {
                method : "delete",
                url : rootPath + "/postdoctoralStaff/deletePostdoctoralStaff",
                params : {"id" : id}
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function updatePostdoctoralStaff(vm , callBack){
            var httpOptions = {
                method : "post",
                url : rootPath + "/postdoctoralStaff/updatePostdoctoralStaff",
                data : vm.postdoctoralStaff
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function findPostdoctoralStaffById(id , callBack){
            var httpOptions = {
                method : "post",
                url : rootPath + "/postdoctoralStaff/findById",
                params : {"id" : id}
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof callBack =="function"){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function createPostdoctoralStaff(vm , callBack){
            var httpOptions = {
                method : "post",
                url : rootPath + "/postdoctoralStaff/createPostdoctoralStaff",
                data : vm.postdoctoralStaff
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function approvePostdoctoralStaff(id ,status, callBack){
            var httpOptions = {
                method : "post",
                url : rootPath + "/postdoctoralStaff/approvePostdoctoralStaff",
                params : {"id" : id,"status":status}
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function backPostdoctoralStaff(id ,status, callBack){
            var httpOptions = {
                method : "post",
                url : rootPath + "/postdoctoralStaff/backPostdoctoralStaff",
                params : {"id" : id,"status":status}
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        function postdoctoralStaffGrid(vm){
            // Begin:dataSource

            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/postdoctoralStaff/findByOData?initFlag=1", $("#postdoctoralStaffForm"),{$filter:" status ne '4' "},true),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            //S_序号
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                /*{
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox' />"
                },*/
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "name",
                    title: "姓名",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        return common.format($('#columnNames').html(),item.id ,item.name,item.status);
                       // return '<a  href="#/postdoctoralStaffDetail/' + item.id + '">'+item.name+'</a>'
                    }
                },
                {
                    field: "sex",
                    title: "性别",
                    width: 50,
                    filterable: false,
                },
                {
                    field: "enterBaseDate",
                    title: "进入基地时间",
                    width: 160,
                    filterable: false,
                    format: "{0:yyyy-MM-dd}"
                },
                {
                    field: "enterStackApproveDate",
                    title: "进站批准日期",
                    width: 160,
                    filterable: false,
                    format: "{0:yyyy-MM-dd}"
                },
                {
                    field: "status",
                    title: "状态",
                    width: 160,
                    filterable: false,
                    template: function (item) {
                        if(item.status == 0){
                            return "未送审";
                        }else if(item.status == 1){
                            return "送审";
                        }else if(item.status == 2){
                            return "在站";
                        }else if(item.status == 3){
                            return "申请出站";
                        }
                    }
                },
                {
                    field: "",
                    title: "操作",
                    width: 120,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),   item.id ,
                            "vm.approvePostdoctoralStaff('" + item.id + "','"+item.status+"')",
                            "vm.deletePostdoctoralStaff('" + item.id + "')",item.name,item.status,
                            "vm.backPostdoctoralStaff('" + item.id + "','"+item.status+"')",item.createdBy);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };
        }

        function postdoctoralPopStaffGrid(vm){
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/postdoctoralStaff/findByOData", $("#postdoctoralPopStaffForm"), {$filter: "status eq '4'"},true),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            //S_序号
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox' />"
                },
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "name",
                    title: "姓名",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        return common.format($('#columnNames').html(),item.id ,item.name,item.status);
                        // return '<a  href="#/postdoctoralStaffDetail/' + item.id + '">'+item.name+'</a>'
                    }
                },
                {
                    field: "sex",
                    title: "性别",
                    width: 50,
                    filterable: false,
                },
                {
                    field: "enterStackApproveDate",
                    title: "进站时间",
                    width: 160,
                    filterable: false,
                    format: "{0:yyyy-MM-dd}"
                },
                {
                    field: "pooStackDate",
                    title: "出站时间",
                    width: 160,
                    filterable: false,
                    format: "{0:yyyy-MM-dd}"
                },
                {
                    field: "",
                    title: "操作",
                    width: 120,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),   item.id,"vm.deletePostdoctoralStaff('" + item.id + "')",item.name,item.status,"vm.backPostdoctoralStaff('" + item.id + "','"+item.status+"')");
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };
        }

    }
})();
(function(){
    'use strict';
    angular.module('app').controller('postdoctorSubjectCtrl' , postdoctorSubject);
    postdoctorSubject.$inject = ['postdoctorSubjectSvc' , '$state' , 'bsWin'];

    function postdoctorSubject(postdoctorSubjectSvc , $state , bsWin){
        var vm = this ;
        vm.title = "博士后课题列表";
        vm.searchModel = {};


        activate();
        function activate(){
            postdoctorSubjectSvc.subjectGrid(vm);
        }

        /**
         * 删除课题
         * @param id
         */
        vm.deleteSubject = function(id){
            vm.id = id;
            bsWin.confirm("确定删除？" , function(){
                postdoctorSubjectSvc.deleteSubject(vm , function(data){
                    if (data.flag || data.reCode == 'ok') {
                        vm.subject = data.reObj;
                        bsWin.success("删除成功！");
                        vm.subjectGridOptions.dataSource.read();
                    } else {
                        bsWin.error(data.reMsg);
                    }
                })
            })

        }

        /**
         * 重置
         */
        vm.formReset = function(){
            vm.searchModel = {};
        }

        /**
         * 查询
         */
        vm.searchForm = function(){
            vm.subjectGridOptions.dataSource._skip=0;
            vm.subjectGridOptions.dataSource.read();
        }

        /**
         * 查看详情页
         * @param id
         */
        vm.details = function(id){
            postdoctorSubjectSvc.isPermission(function(data){
                if(data.flag || data.reCode == 'ok'){
                    $state.go('postdoctoralSubjectDetail' , {id : id})
                }else{
                    bsWin.error(data.reMsg);
                }
            })

        }

    }
})();
(function (){
    'ust strict';
    angular.module('app').factory('postdoctorSubjectSvc' , postdoctorSubject);
    postdoctorSubject.$inject = ['$http'];
    function postdoctorSubject($http){
        var service = {
            subjectGrid : subjectGrid , //课题列表
            findBySubjectId : findBySubjectId , //通过ID获取课题信息
            createSubject : createSubject , //创建课题
            findStationStaff : findStationStaff , //查询在站人员
            isPermission : isPermission , //判断是否有权限查看
            deleteSubject : deleteSubject , //删除课题

        };
        return service;

        //begin deleteSubject
        function deleteSubject(vm , callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/postdoctorSubject/deleteSubject",
                params : {id : vm.id}
            }
            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end deleteSubject

        //begin isPermission
        function isPermission(callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/postdoctorSubject/isPermission"
            }
            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end isPermission

        //begin createSubject
        function createSubject(vm , callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/postdoctorSubject/createdSubject",
                data : vm.subject
            }
            var httpSuccess = function success(response){
                if(callBack != undefined && typeof callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                vm : vm ,
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end createSubject

        //begin   findBySubjectId
        function findBySubjectId(vm , callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/postdoctorSubject/findBySubjectId",
                params : {id : vm.id}
            }
            var httpSuccess = function success(response){

                if(callBack != undefined && typeof callBack == "function"){
                    callBack(response.data);
                }
            }

            common.http({
                vm : vm ,
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end  findBySubjectId


        function subjectGrid(vm){
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/postdoctorSubject/findByAll"  , $('#doctorSubjectForm')),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            //S_序号
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.mId)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox' />"
                },
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 40,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "subjectName",
                    title: "课题名称",
                    width: 100,
                    filterable: false,
                    template: function (item) {
                        return '<a ng-click="vm.details(' + "'" + item.id + "'" + ')" >'+item.subjectName+'</a>'
                    }
                },
                {
                    field: "pricipalName",
                    title: "课题负责人",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "subjectCreatedDate",
                    title: "创建时间",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "",
                    title: "操作",
                    width: 120,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),   item.id , item.pricipalName);
                    }
                }
            ];
            // End:column

            vm.subjectGridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };
        }

        //begin findStationStaff
        function findStationStaff(callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/postdoctorSubject/findStationStaff"
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end findStationStaff
    }
})();
(function(){
    'use strict';
    angular.module('app').controller('postdoctorSubjectEditCtrl' , postdoctorSubjectEdit);
    postdoctorSubjectEdit.$inject = ['$state' , 'bsWin' , '$scope' , 'postdoctorSubjectSvc' , 'sysfileSvc'];
    function postdoctorSubjectEdit($state , bsWin , $scope , postdoctorSubjectSvc , sysfileSvc){
        var vm = this ;
        vm.title = "博士基地课题编辑";
        vm.id = $state.params.id;
        vm.sysFilelistsYJDG = [];//课题研究大纲
        vm.sysFilelistsWWHT = [];//课题外委合同
        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.id) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.id", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }

            //创建附件对象
            vm.sysFile = {
                businessId: vm.id,
                mainId: vm.id,
                mainType: vm.type,
                sysfileType: vm.type,
                sysBusiType: vm.type,
                showBusiType : false
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm,
                uploadSuccess: function () {
                    sysfileSvc.findByBusinessId(vm.id, function (data) {
                        console.log(234);
                        if(data){
                            vm.sysFilelistsYJDG = [];//课题研究大纲
                            vm.sysFilelistsWWHT = [];//课题外委合同
                            $.each(data , function( i , obj ){
                                if(sysfileSvc.mainTypeValue().DOCTOR_KTYJDG == obj.mainType){
                                    vm.sysFilelistsYJDG.push(obj);
                                }
                                if(sysfileSvc.mainTypeValue().DOCTOR_KTWWHT == obj.mainType){
                                    vm.sysFilelistsWWHT.push(obj);
                                }
                            })
                        }
                    });
                }
            });
        }


        activate();
        function activate(){
            if(vm.id){
                vm.isShowUpdate = true;
                postdoctorSubjectSvc.findBySubjectId(vm , function(data){
                    vm.subject = data;
                });
                sysfileSvc.findByBusinessId(vm.id, function (data) {
                    if(data){
                        $.each(data , function( i , obj ){
                            if(sysfileSvc.mainTypeValue().DOCTOR_KTYJDG == obj.mainType){
                                vm.sysFilelistsYJDG.push(obj);
                            }
                            if(sysfileSvc.mainTypeValue().DOCTOR_KTWWHT == obj.mainType){
                                vm.sysFilelistsWWHT.push(obj);
                            }
                        })
                    }
                });
            }
            postdoctorSubjectSvc.findStationStaff(function(data){
                vm.staffList = data;
            })
            vm.initFileUpload();


        }

        /**
         * 创建课题
         */
        vm.createSubject = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                postdoctorSubjectSvc.createSubject(vm, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        vm.subject = data.reObj;
                        vm.id = vm.subject.id;
                        vm.isShowUpdate = true;
                        bsWin.success("保存成功！");
                        // $state.go('postdoctoralSubjectList');
                    } else {
                        bsWin.error(data.reMsg);
                    }
                })
            }
        }


        /**
         * 更新课题
         */
        vm.updateSubject = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                postdoctorSubjectSvc.createSubject(vm, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        vm.subject = data.reObj;
                        vm.id = vm.subject.id;
                        vm.isShowUpdate = true;
                        bsWin.success("保存成功！");
                    } else {
                        bsWin.error(data.reMsg);
                    }
                })
            }
        }

        /**
         * 上传课题研究大纲
         */
        vm.addKTYJDG = function(){
            vm.type = sysfileSvc.mainTypeValue().DOCTOR_KTYJDG;
            vm.initFileUpload();

        }

        /**
         * 上传课题外委合同
         */
        vm.addKTYWHT = function(){
            vm.type = sysfileSvc.mainTypeValue().DOCTOR_KTWWHT;
            vm.initFileUpload();
        }

        /**
         * 重写附件方案-课题研究大纲
         * @param id
         */
        vm.delectYJDG = function (id) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认删除么？",
                onOk: function () {
                    sysfileSvc.delSysFile(id, function (data) {
                        bsWin.alert(data.reMsg || "删除成功！");
                        $.each(vm.sysFilelistsYJDG, function (i, sf) {
                            if (!angular.isUndefined(sf) && sf.sysFileId == id) {
                                vm.sysFilelistsYJDG.splice(i, 1);
                            }
                        })
                    });
                }
            });
        }

        /**
         * 重写附件删除方法-课题外委合同
         * @param id
         */
        vm.delectWWHT = function(id){
            bsWin.confirm({
                title: "询问提示",
                message: "确认删除么？",
                onOk: function () {
                    sysfileSvc.delSysFile(id, function (data) {
                        bsWin.alert(data.reMsg || "删除成功！");
                        $.each(vm.sysFilelistsWWHT, function (i, sf) {
                            if (!angular.isUndefined(sf) && sf.sysFileId == id) {
                                vm.sysFilelistsWWHT.splice(i, 1);
                            }
                        })
                    });
                }
            });
        }

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('quartzCtrl', quartz);

    quartz.$inject = ['bsWin', 'quartzSvc'];

    function quartz(bsWin, quartzSvc) {
        var vm = this;
        vm.title = '定时器配置';

        activate();
        function activate() {
            quartzSvc.grid(vm);
        }

        //新增定时器
        vm.addQuartz = function () {
            vm.quartz = {};
            $("#quartz_edit_div").kendoWindow({
                width: "680px",
                height: "400px",
                title: "定时器编辑",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        //修改定时器
        vm.edit = function (id) {
            $("#quartz_edit_div").kendoWindow({
                width: "600px",
                height: "400px",
                title: "定时器修改",
                visible: false,
                modal: true,
                open :function(){
                    quartzSvc.getQuartzById(id,function(data){
                        vm.quartz = data;
                    });
                },
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }


        //关闭弹窗
        vm.colseQuartz = function () {
            window.parent.$("#quartz_edit_div").data("kendoWindow").close();
        }

        /**
         * 保存定时器
         */
        vm.saveQuartz = function () {
            common.initJqValidation($("#quartz_form"));
            var isValid = $("#quartz_form").valid();
            if (isValid) {
                // vm.isSubmit = true;
                quartzSvc.saveQuartz(vm.quartz, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        bsWin.alert("操作成功！", function () {
                            vm.colseQuartz();
                            vm.gridOptions.dataSource.read();
                        });
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            }
        }

        /**
         * 执行定时器
         * @param id
         */
        vm.execute = function (id) {
            quartzSvc.quartzExecute(id, function (data) {
                if (data.flag || data.reCode == 'ok') {
                    bsWin.alert("操作成功！", function () {
                        vm.gridOptions.dataSource.read();
                    });
                } else {
                    bsWin.alert(data.reMsg);
                }
            });
        }


        /**
         * 停止执行定时器
         * @param id
         */
        vm.stop = function (id) {
            quartzSvc.quartzStop(id, function (data) {
                if (data.flag || data.reCode == 'ok') {
                    bsWin.alert("操作成功！", function () {
                        vm.gridOptions.dataSource.read();
                    });
                } else {
                    bsWin.alert(data.reMsg);
                }
            });
        }

        /**
         * 设置定时器为不可用
         * @param id
         */
        vm.del = function (id) {
            bsWin.confirm("确认删除？删除数据无法恢复，请谨慎操作！", function () {
                quartzSvc.deleteQuartz(id,function(data){
                    if (data.flag || data.reCode == 'ok') {
                        bsWin.alert("操作成功！", function () {
                            vm.gridOptions.dataSource.read();
                        });
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            });
        }

        /**
         * 立刻执行一次
         * @param id
         */
        vm.runOnce = function (id) {
            quartzSvc.runOnce(id,function(data){
                if (data.flag || data.reCode == 'ok') {
                    bsWin.alert("操作成功！");
                } else {
                    bsWin.alert(data.reMsg);
                }
            });
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').factory('quartzSvc', quartz);

    quartz.$inject = ['$http'];

    function quartz($http) {
        var url_quartz = rootPath + "/quartz", url_back = '#/quartz';
        var service = {
            grid: grid,
            getQuartzById: getQuartzById,   //根据ID查询定时器
            saveQuartz: saveQuartz,         //保存定时器
            deleteQuartz: deleteQuartz,     //停用定时器
            quartzExecute: quartzExecute,	//执行定时器
            quartzStop: quartzStop,	        //停止执行定时器
            runOnce : runOnce               //执行一次
        };

        return service;

        function runOnce(id,callBack){
            var httpOptions = {
                method: "post",
                url: url_quartz + "/runOne",
                params: {
                    quartzId: id
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //begin quartzExecute
        function quartzExecute(id, callBack) {
            var httpOptions = {
                method: "put",
                url: url_quartz + "/quartzExecute",
                params: {quartzId: id}

            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//end quartzExecute

        //begin quartzStop
        function quartzStop(id, callBack) {
            var httpOptions = {
                method: "post",
                url: url_quartz + "/quartzStop",
                params: {quartzId: id}

            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//end quartzStop


        // begin#deleteQuartz
        function deleteQuartz(id,callBack) {
            var httpOptions = {
                method: 'delete',
                url: url_quartz,
                params: {
                    id:id
                }
            };

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#createQuartz
        function saveQuartz(quartz, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/quartz",
                data: quartz,
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#getQuartzById
        function getQuartzById(id,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/quartz/html/findById",
                params: {id: id}
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#grid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/quartz/findByOData"),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            //S_序号
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "quartzName",
                    title: "定时任务名称",
                    width: 220,
                    filterable: false,
                },
                {
                    field: "cronExpression",
                    title: "时间表达式",
                    width: 150,
                    filterable: false,
                },
                {
                    field: "",
                    title: "当前状态",
                    width: 80,
                    filterable: false,
                    template: function (item) {
                        if (item.curState) {
                            if (item.curState == "9") {
                                return "<span class='label label-success'>正在执行</span>";
                            }
                            if (item.curState == "0") {
                                return "<span class='label label-warning'>已暂停</span>";
                            }
                        } else {
                            return "";
                        }
                    }
                },
                {
                    field: "descInfo",
                    title: "描述",
                    width: 120,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 280,
                    template: function (item) {
                        var canExecute = false;
                        if(item.curState == 9){
                            canExecute = true;
                        }
                        return common.format($('#columnBtns').html(), "vm.edit('" + item.id + "')", "vm.execute('" + item.id + "')", !canExecute, "vm.stop('" + item.id + "')",canExecute,"vm.runOnce('" + item.id + "')",canExecute);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };
        }// end fun grid

    }
})();
(function(){
    'use strict';
    angular.module('app').controller('reviewFeeCtrl' , reviewFee);
    reviewFee.$inject = [ 'reviewFeeSvc' , 'expertReviewSvc' , 'bsWin' , '$state','$rootScope','signSvc'];

    function reviewFee(reviewFeeSvc , expertReviewSvc , bsWin , $state,$rootScope,signSvc){
        var vm = this;
        vm.title = '评审费发放';
        vm.reviewFee = {};
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }

        activate();

        function activate(){
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.reviewFee = preView.data.reviewFee;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                reviewFeeSvc.projectGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                reviewFeeSvc.projectGrid(vm);
            }

        }

        /**
         * 查询
         */
        vm.query = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        /**
         * 评审费发放处理 弹出框
         * @param businessId
         */
        vm.dealWindow = function(businessId){
            reviewFeeSvc.findExpertReview(vm , businessId , function(data){
                vm.expertReview = data ;
                //默认初始化评审费发放日期为当天
                vm.expertReview.payDate = new Date().Format("yyyy-MM-dd");
                $("#payFromWindow").kendoWindow({
                    width: "70%",
                    height: "600px",
                    title: "专家评审费发放",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "close"]
                }).data("kendoWindow").center().open();
            })
        }


        /**
         *  计算应纳税额
         */
        vm.countTaxes = function (expertReview) {
            if(expertReview == undefined){
                return ;
            }
            if(expertReview.payDate == undefined){
                bsWin.alert("请选择评审费发放日期");
                return ;
            }
            var reg = /^(\d{4}-\d{1,2}-\d{1,2})$/;
            if(!reg.exec(expertReview.payDate)){
                bsWin.alert("请输入正确的日期格式");
                return ;
            }
            if (expertReview.expertSelectedDtoList == undefined || expertReview.expertSelectedDtoList.length == 0) {
                bsWin.alert("该方案还没评审专家");
                return;
            }
            common.initJqValidation($('#payform'));
            var isValid = $('#payform').valid();
            if(isValid){
                var len = expertReview.expertSelectedDtoList.length, ids = '', month;
                $.each(expertReview.expertSelectedDtoList,function (i,v) {
                    ids += "'" + v.id + "'";
                    if (i != (len - 1)) {
                        ids += ",";
                    }
                })
                var payDate = expertReview.payDate;
                month = payDate.substring(0, payDate.lastIndexOf('-'));
                expertReviewSvc.countTaxes(ids,month,function (data) {
                    var allExpertCost = data;
                    expertReview.reviewCost = 0;
                    expertReview.reviewTaxes = 0;
                    expertReview.totalCost = 0;

                    $.each(expertReview.expertSelectedDtoList,function(i,v){
                       if(v.isConfrim=="9" && v.isJoin=="9") {
                           var expertId = v.EXPERTID;
                           var expertSelectedId = v.id;
                           var totalCost = 0;
                           //console.log("计算专家:"+expertDto.name);
                           if (allExpertCost != undefined && allExpertCost.length > 0) {
                               //累加专家改月的评审费用
                               allExpertCost.forEach(function (v, i) {
                                   if (v.EXPERTID == expertId && v.ESID != expertSelectedId) {
                                       v.REVIEWCOST = v.REVIEWCOST == undefined ? 0 : v.REVIEWCOST;
                                       v.REVIEWCOST = parseFloat(v.REVIEWCOST);
                                       totalCost = parseFloat(totalCost) + v.REVIEWCOST;
                                   }
                               });
                           }
                           //console.log("专家当月累加:" + totalCost);
                           //计算评审费用
                           v.reviewCost = v.reviewCost == undefined ? 0 : v.reviewCost;
                           var reviewTaxesTotal = totalCost + parseFloat(v.reviewCost);
                           //console.log("专家当月累加加上本次:" + reviewTaxesTotal);
                           v.reviewTaxes = countNum(reviewTaxesTotal).toFixed(2);
                           v.totalCost = (parseFloat(v.reviewCost) + parseFloat(v.reviewTaxes)).toFixed(2);
                           expertReview.reviewCost = (parseFloat(expertReview.reviewCost) + parseFloat(v.reviewCost)).toFixed(2);
                           expertReview.reviewTaxes = (parseFloat(expertReview.reviewTaxes) + parseFloat(v.reviewTaxes)).toFixed(2);
                           expertReview.totalCost = (parseFloat(expertReview.reviewCost) + parseFloat(expertReview.reviewTaxes)).toFixed(2);
                       }
                    });


                    //自动保存
                    expertReviewSvc.savePayment(expertReview,vm.isCommit,function(data){
                        if(data.flag || data.reCode == "ok"){
                            bsWin.alert("操作成功！",function(){
                                vm.isCommit = false;
                                window.parent.$("#payFromWindow").data("kendoWindow").close();
                                vm.gridOptions.dataSource.read();
                            });
                        }else{
                            bsWin.alert(data.reMsg);
                        }
                    });
                });

            }else{
                bsWin.alert("请正确填写专家评审费信息！");
            }
        }

        // S_countNum
        function countNum(reviewCost) {
            reviewCost = reviewCost == undefined ? 0 : reviewCost;
            var reviewTaxes = 0;
            if (reviewCost > 800 && reviewCost <= 4000) {
                reviewTaxes = (reviewCost - 800) * 0.2;
            } else if (reviewCost > 4000 && reviewCost <= 20000) {
                reviewTaxes = reviewCost * (1 - 0.2) * 0.2
            } else if (reviewCost > 20000 && reviewCost <= 50000) {
                reviewTaxes = reviewCost * (1 - 0.2) * 0.3 - 2000;
            } else if (reviewCost > 50000) {
                //待确认
            }
            return reviewTaxes;
        }// E_countNum

        /**
         * 保存专家费用
         * @param expertReview
         */
        vm.savePayment = function (expertReview) {
            common.initJqValidation($('#payform'));
            var isValid = $('#payform').valid();
            if (isValid) {
                if(expertReview.expertSelectedDtoList){
                    var isAdopt=false;
                    for(var i=0;i<expertReview.expertSelectedDtoList.length;i++){
                        if(expertReview.expertSelectedDtoList[i].reviewCost==0){ //评审费为0时
                            isAdopt=true;
                        }else{//评审费不为0时
                            if(expertReview.expertSelectedDtoList[i].expertDto.bankAccount!=undefined &&
                                expertReview.expertSelectedDtoList[i].expertDto.openingBank!=undefined ){
                                isAdopt=true;

                            }else{
                                isAdopt=false;
                                break
                            }
                        }

                    }

                }else{
                    isAdopt=true;
                }
                if(isAdopt){
                    expertReviewSvc.savePayment(expertReview, vm.isCommit, function (data) {
                        if (data.flag || data.reCode == "ok") {
                            bsWin.alert("操作成功！", function () {
                                vm.isCommit = false;
                            });
                        } else {
                            bsWin.alert(data.reMsg);
                        }
                    });
                }else{
                    bsWin.alert("评审费不为0的专家，开户行和银行账户不完整，请写完整！");
                }
            }else{
                bsWin.alert("请正确填写专家评审费信息！");
            }
        }

        /**
         * 查看详情
         * @param businessId
         * @param businessType
         */
        vm.detail = function(businessId , businessType){
            vm.saveView();
            if(businessType.trim() == "SIGN"){
                //先获取到processInstanceId流程实例id
                signSvc.initFlowPageData(businessId, function (data) {
                    vm.model = data;
                    $state.go("signDetails", {signid: businessId,processInstanceId:vm.model.processInstanceId});
                });
            }
            if(businessType.trim() == "TOPIC"){
                $state.go("flowDetail" , {businessKey : businessId });
            }

        }
    }
})();
(function(){
    'use strict';
    angular.module('app').factory('reviewFeeSvc' , reviewFee);
    reviewFee.$inject = ['$http'];
    function reviewFee($http){
        var service = {
            projectGrid : projectGrid ,         //查询发文申请阶段，评审费发放超期的项目列表
            findExpertReview : findExpertReview,//通过业务ID获取专家评审方案信息

        }

        return service;
        //begin findExpertReview
        function findExpertReview(vm , businessId , callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/expertReview/initBybusinessId",
                params : {businessId : businessId  , minBusinessId : ""}
            }

            var httpSuccess = function success(response){
                if(callBack !=undefined || typeof callBack == 'function'){
                    callBack(response.data);
                }

            }
            common.http({
                vm : vm ,
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end findExpertReview


        //begin projectGrid
        function projectGrid(vm){
            // Begin:dataSource
            var dataSource = common.kendoGridDataSource(rootPath + "/reviewFee/findReviewFee",$("#reviewFeeForm"),vm.queryParams.page,vm.queryParams.pageSize,vm.gridParams);
            // End:dataSource

            // Begin:column
            var columns = [
                {
                    field: "",
                    title: "序号",
                    template: "<span class='row-number'></span>",
                    width: 50
                },
                {
                    field: "reviewTitle",
                    title: "评审费标题",
                    width: "40%",
                    filterable: false,
                },
                {
                    field: "",
                    title: "评审费类型",
                    width: "20%",
                    filterable: false,
                    template: function (item) {
                        if(item.businessType && item.businessType.trim() == "SIGN"){
                            return "项目评审费";
                        }else if(item.businessType && item.businessType.trim() == "TOPIC"){
                            return "课题评审费";
                        }else{
                            return "";
                        }
                    }
                },
                {
                    field: "reviewDate",
                    title: "评审(函评)日期",
                    width: "15%",
                    filterable: false,
                    format: "{0: yyyy-MM-dd}"
                },
                {
                    field: "",
                    title: "操作",
                    width: "20%",
                    template: function (item) {
                      return common.format($('#columnBtns').html(), "vm.dealWindow('" +item.businessId+ "')"
                          , "vm.detail('" + item.businessId + "','" + item.businessType + "')");
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                pageable : common.kendoGridConfig(vm.queryParams).pageable,
                dataBound:common.kendoGridConfig(vm.queryParams).dataBound,
                resizable: true
            };

        }
        //end projectGrid
    }

})();
(function(){
    'use strict';
    angular.module('app').controller('approveListCtrl'  , approveList);
    approveList.$inject = ['reviewProjectAppraiseSvc'];
    function approveList(reviewProjectAppraiseSvc){
        var vm = this ;
        vm.approve = true;
        vm.idea = false;
        vm.appraise={};

        activate();
        function activate(){
            reviewProjectAppraiseSvc.approveListGrid(vm);
        }

       /* /!**
         * 审批处理弹出框
         * @param id
         *!/
        vm.dealWindow = function(id){

            reviewProjectAppraiseSvc.getAppraiseById(id , function(data){
                vm.appraise = data;
                vm.appraise.generalConductorOpinion = "9";
                reviewProjectAppraiseSvc.appraiseWindow(vm);
            })
        }

        /!**
         * 取消
         *!/
        vm.closewin=function(){
            window.parent.$("#appraiseWindow").data("kendoWindow").close()
        }

        /!**
         * 保存审批意见
         *!/
        vm.commitApprove = function (){
            reviewProjectAppraiseSvc.saveApprove(vm);
        }*/


    }
})();
(function(){
    'use strict';
    angular.module('app').controller('approveWindowCtrl' , approveWindow);
    approveWindow.$inject = ['$state','reviewProjectAppraiseSvc','bsWin'];
    function approveWindow($state , reviewProjectAppraiseSvc,bsWin){
        var vm = this;
        var signId = $state.params.signId;
        vm.model = {};

        activate();
        function  activate(){
            reviewProjectAppraiseSvc.initBySignId(signId,function(data){
                vm.model = data;
            })
        }

        /**
         * 发起流程
         */
        vm.commitApprove = function (){
            common.initJqValidation();
            var isValid = $('#form').valid();
            if(isValid){
                reviewProjectAppraiseSvc.saveApply(vm.model,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        vm.model = data.reObj;
                        reviewProjectAppraiseSvc.startFlow(vm.model.id,function(data){
                            if(data.flag || data.reCode == 'ok'){
                                bsWin.success("操作成功！",function(){
                                    $state.go("personDtasks");
                                });
                            }
                        });
                    }else{
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("优秀评审报告填报表单未填写正确！");
            }
        }
    }
})();
(function(){
    'use strict';
    angular.module('app').controller('approveWindowEditCtrl' , approveWindowEdit);
    approveWindowEdit.$inject = ['$state','reviewProjectAppraiseSvc','bsWin'];
    function approveWindowEdit($state , reviewProjectAppraiseSvc,bsWin){
        var vm = this;
        var id = $state.params.id;
        vm.model = {};

        //保存优秀评审报告申请表
        vm.addApprove=function(){
            reviewProjectAppraiseSvc.saveApply(vm.model,function () {
                bsWin.alert("操作成功");
            })
        }

        activate();
        function  activate(){
            reviewProjectAppraiseSvc.getAppraiseById(id,function(data){
                vm.model = data;
            })
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('reviewProjectAppraiseCtrl', reviewProjectAppraise);

    reviewProjectAppraise.$inject = ['adminSvc', 'reviewProjectAppraiseSvc','$state','$rootScope'];

    function reviewProjectAppraise(adminSvc, reviewProjectAppraiseSvc,$state,$rootScope) {
        var vm = this;
        vm.title = '优秀评审报告列表';
        vm.orgDeptList = [];
        vm.model = {};
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});
        }

        activate();
        function activate() {
            //初始化查询参数
            adminSvc.initSignList(function (data) {
                if (data.flag || data.reCode == 'ok') {
                    vm.orgDeptList = data.reObj;
                }
            });

            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复查询条件
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }
                reviewProjectAppraiseSvc.appraisingProjectGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                reviewProjectAppraiseSvc.appraisingProjectGrid(vm);
            }
        }

        vm.searchSignList = function () {
            vm.saveView();
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        vm.formReset = function(){
            vm.model = {};
        }
    }
})();


(function () {
    'use strict';

    angular.module('app').factory('reviewProjectAppraiseSvc', reviewProjectAppraise);

    reviewProjectAppraise.$inject = ['$http', 'bsWin', '$state'];

    function reviewProjectAppraise($http, bsWin, $state) {
        var service = {
            initBySignId : initBySignId,                    //根据收文项目ID，初始化优秀评审报告
            appraisingProjectGrid: appraisingProjectGrid,   //查询优秀评审项目
            appraiseWindow: appraiseWindow,                 //评优弹出窗
            saveApply: saveApply,                           //保存评优申请
            approveListGrid: approveListGrid,               //优秀评审报告审批列表
            getAppraiseById: getAppraiseById,               //通过Id查询信息
            startFlow : startFlow,                          //发起流程
            initFlowDeal : initFlowDeal,                    //初始化流程参数
        }
        return service;

        //S_初始化流程参数
        function initFlowDeal(vm){
            getAppraiseById(vm.businessKey,function(data){
                vm.model = data;
            });
        }//E_initFlowDeal

        //S_发起流程
        function startFlow(id,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + '/reviewProjectAppraise/startFlow',
                params: {id: id}
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_startFlow


        //S_根据收文项目ID，初始化优秀评审报告
        function initBySignId(signId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + '/reviewProjectAppraise/initBySignId',
                params: {signId: signId}
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_initBySignId


        //begin getAppraiseById
        function getAppraiseById(id, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + '/reviewProjectAppraise/getAppraiseById',
                params: {id: id}
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //end getAppraiseById


        //begin appraiseWindow
        function appraiseWindow(vm) {
            $("#appraiseWindow").kendoWindow({
                width: "800px",
                height: "400px",
                title: "评审报告评优申请",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        //end appraiseWindow

        //begin saveApply
        function saveApply(appraise,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + '/reviewProjectAppraise/saveApply',
                data: appraise
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //end saveApply

        //beign appraisingProjectGrid
        function appraisingProjectGrid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/reviewProjectAppraise/findAppraisingProject", $("#searchform"), vm.gridParams),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: vm.queryParams.pageSize || 10,
                page: vm.queryParams.page || 1,
            });
            // End:dataSource
            // Begin:column
            var columns = [
                {
                    field: "",
                    title: "序号",
                    template: "<span class='row-number'></span>",
                    width: 50
                },
                {
                    field: "",
                    title: "项目名称",
                    width: 160,
                    filterable: false,
                    template: function (item) {
                        if (item.processInstanceId) {
                            return '<a href="#/signDetails/' + item.signid + '/' + item.processInstanceId + '" >' + item.projectname + '</a>';
                        } else {
                            return '<a href="#/signDetails/' + item.signid + '/" >' + item.projectname + '</a>';
                        }

                    }
                },
                {
                    field: "reviewstage",
                    title: "评审阶段",
                    width: 140,
                    filterable: false
                },
                {
                    field: "signdate",
                    title: "收文日期",
                    width: 200,
                    filterable: false
                },
                {
                    field: "dispatchDate",
                    title: "发文日期",
                    width: 160,
                    filterable: false
                },
                {
                    field: "reviewOrgName",
                    title: "评审部门",
                    width: 140,
                    filterable: false
                },
                {
                    field: "aUserName",
                    title: "项目负责人",
                    width: 140,
                    filterable: false
                },
                {
                    field: "ffilenum",
                    title: "归档编号",
                    width: 140,
                    filterable: false
                },
                {
                    field: "dfilenum",
                    title: "文件字号",
                    width: 140,
                    filterable: false
                },
                {
                    field: "appalyInvestment",
                    title: "申报投资",
                    width: 140,
                    filterable: false
                },
                {
                    field: "authorizeValue",
                    title: "审定投资",
                    width: 140,
                    filterable: false
                },
                {
                    field: "extraValue",
                    title: "核减（增）投资",
                    width: 140,
                    filterable: false
                },
                {
                    field: "extraRate",
                    title: "核减率",
                    width: 140,
                    filterable: false
                },
                {
                    field: "approveValue",
                    title: "批复金额",
                    width: 140,
                    filterable: false
                },
                {
                    field: "dispatchType",
                    title: "发文类型",
                    width: 140,
                    filterable: false
                },
                {
                    field: "fileDate",
                    title: "归档日期",
                    width: 140,
                    filterable: false
                },
                {
                    field: "builtcompanyname",
                    title: "建设单位",
                    width: 140,
                    filterable: false
                }
            ];

            // End:column
            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                pageable: common.kendoGridConfig(vm.queryParams).pageable,
                dataBound: common.kendoGridConfig(vm.queryParams).dataBound,
                columns: columns,
                resizable: true,
            };
        }
        //end appraisingProjectGrid

        //begin approveListGrid
        function approveListGrid(vm) {

            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/reviewProjectAppraise/getAppraiseReport"),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            // Begin:column
            var columns = [
                {
                    field: "",
                    title: "序号",
                    template: "<span class='row-number'></span>",
                    width: 50
                },
                {
                    field: "",
                    title: "项目名称",
                    width: 160,
                    filterable: false,
                    template: function (item) {
                        if (item.processInstanceId) {
                            return '<a href="#/signDetails/' + item.signid + '/' + item.processInstanceId + '" >' + item.projectName + '</a>';
                        } else {
                            return '<a href="#/signDetails/' + item.signid + '/" >' + item.projectName + '</a>';
                        }

                    }
                },
                {
                    field: "appraiseReportName",
                    title: "评审报告名称",
                    width: 160,
                    filterable: false,

                },
                {
                    field: "proposerName",
                    title: "申请人",
                    width: 160,
                    filterable: false,

                },
                {
                    field: "proposerTime",
                    title: "申请时间",
                    width: 160,
                    filterable: false,
                    format: "{0: yyyy-MM-dd}"

                },
                {
                    field: "",
                    title: "操作",
                    width: 100,
                    template: function (item) {
                        return common.format($('#columnBtns').html(), item.signid, item.projectname, item.id);
                    }
                }
            ];

            // End:column
            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                dataBound: function () {
                    var rows = this.items();
                    var page = this.pager.page() - 1;
                    var pagesize = this.pager.pageSize();
                    $(rows).each(function () {
                        var index = $(this).index() + 1 + page * pagesize;
                        var rowLabel = $(this).find(".row-number");
                        $(rowLabel).html(index);
                    });
                }
            };

        }
        //end approveListGrid

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('roleCtrl', role);

    role.$inject = ['$location','roleSvc']; 

    function role($location, roleSvc) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '角色列表';

        vm.del = function (id) {
             common.confirm({
            	 vm:vm,
            	 title:"",
            	 msg:"确认删除数据吗？",
            	 fn:function () {
                  	$('.confirmDialog').modal('hide');             	
                    roleSvc.deleteRole(vm,id);
                 }
             })
        }
        vm.dels = function () {     
        	var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
            	common.alert({
                	vm:vm,
                	msg:'请选择数据'
                	
                });
            } else {
            	var ids=[];
                for (var i = 0; i < selectIds.length; i++) {
                	ids.push(selectIds[i].value);
				}  
                var idStr=ids.join(',');
                vm.del(idStr);
            }   
       }
        activate();
        function activate() {
            roleSvc.grid(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('roleEditCtrl', role);

    role.$inject = ['$location','roleSvc','$state']; 

    function role($location, roleSvc,$state) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '添加角色';
        vm.isRoleExist=false;
        vm.id = $state.params.id;
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '更新角色';
        }
        
        vm.create = function () {
        	roleSvc.createRole(vm);
        };
        vm.update = function () {
        	roleSvc.updateRole(vm);
        };
        vm.checkRole = function () {
        	roleSvc.checkRole(vm);
        };

        activate();
        function activate() {
        	if (vm.isUpdate) {
        		roleSvc.getRoleById(vm);
            } else {
            	roleSvc.initZtreeClient(vm);
            }
        }
    }
})();

(function() {
	'use strict';

	angular.module('app').factory('roleSvc', role);

	role.$inject = [ '$http','$compile' ];	
	function role($http,$compile) {	
		var url_role =rootPath + "/role";
		var url_back = '#/role';
		var url_resource=rootPath +"/sys/resource"
			
		var service = {
			grid : grid,
			createRole : createRole,
			checkRole : checkRole,
			getRoleById : getRoleById,
			updateRole:updateRole,
			deleteRole:deleteRole,
			initZtreeClient:initZtreeClient
		};		
		return service;	
		
		// begin common fun
		function getZtreeChecked() {
            var treeObj = $.fn.zTree.getZTreeObj("zTree");
            var nodes = treeObj.getCheckedNodes(true);
            return nodes;
        }
		
		function updateZtree(vm) {
            var treeObj = $.fn.zTree.getZTreeObj("zTree");
            var checkedNodes = $linq(vm.model.resources).select(function (x) { return x.path; }).toArray();
            var allNodes = treeObj.getNodesByParam("level", 1, null);

            var nodes = $linq(allNodes).where(function (x) { return $linq(checkedNodes).contains(x.path); }).toArray();
            
            for (var i = 0, l = nodes.length; i < l; i++) {
                treeObj.checkNode(nodes[i], true, true);
            }
        }
		// end common fun
		
		function grid(vm) {

			// Begin:dataSource
			var dataSource = new kendo.data.DataSource({
				type : 'odata',
				transport : common.kendoGridConfig().transport(url_role+"/fingByOData"),
				schema : common.kendoGridConfig().schema({
					id : "id",
					fields : {
						createdDate : {
							type : "date"
						}
					}
				}),
				serverPaging : true,
				serverSorting : true,
				serverFiltering : true,			
				pageSize: 10,
				sort : {
					field : "createdDate",
					dir : "desc"
				}
			});

			// End:dataSource
			
			 //S_序号
            var  dataBound=function () {  
                var rows = this.items();  
                var page = this.pager.page() - 1;  
                var pagesize = this.pager.pageSize();  
                $(rows).each(function () {  
                    var index = $(this).index() + 1 + page * pagesize;  
                    var rowLabel = $(this).find(".row-number");  
                    $(rowLabel).html(index);  
                });  
            } 
            //S_序号

			// Begin:column
			var columns = [
					{
						template : function(item) {
							return kendo
									.format(
											"<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
											item.id)
						},
						filterable : false,
						width : 40,
						title : "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
						
					}, 
					 {  
					    field: "rowNumber",  
					    title: "序号",  
					    width: 70,
					    filterable : false,
					    template: "<span class='row-number'></span>"  
					 }
					,
					{
						field : "roleName",
						title : "角色名称",
						width : 200,						
						filterable : false
					}, {
						field : "remark",
						title : "描述",
						filterable : false
					}, {
						field : "createdDate",
						title : "创建时间",
						width : 180,
						filterable : false,
						format : "{0:yyyy-MM-dd HH:mm:ss}"

					},  {
						field : "",
						title : "操作",
						width : 180,
						template:function(item){							
							return common.format($('#columnBtns').html(),"vm.del('"+item.id+"')",item.id);
						}
					}
			];
			// End:column
		
			vm.gridOptions={
					dataSource : common.gridDataSource(dataSource),
					filterable : common.kendoGridConfig().filterable,
					pageable : common.kendoGridConfig().pageable,
					noRecords:common.kendoGridConfig().noRecordMessage,
					columns : columns,
					dataBound:dataBound,
					resizable: true
				};
			
		}// end fun grid

		function createRole(vm) {
			common.initJqValidation();
			var isValid = $('form').valid();
			if (isValid && vm.isRoleExist == false) {
				vm.isSubmit = true;
				// zTree
				var nodes = getZtreeChecked();
                var nodes_role = $linq(nodes).where(function (x) {
                    return true;
                }).select(function (x) {
                    return { id: x.id, name: x.name,path:x.path,method:x.method };
                }).toArray();

               vm.model.resources = nodes_role;

				var httpOptions = {
					method : 'post',
					url : url_role,
					data : vm.model
				}
				var httpSuccess = function success(response) {				
					
					common.requestSuccess({
						vm:vm,
						response:response,
						fn:function() {
							common.alert({
								vm:vm,
								msg:"操作成功",
								fn:function() {
									vm.isSubmit = false;
									$('.alertDialog').modal('hide');
									$('.modal-backdrop').remove();
									location.href = url_back;
								}
							})
						}
						
					});

				}

				common.http({
					vm:vm,
					$http:$http,
					httpOptions:httpOptions,
					success:httpSuccess
				});

			} else {				
//				common.alert({
//					vm:vm,
//					msg:"您填写的信息不正确,请核对后提交!"
//				})
			}
		}// end fun createRole

		function checkRole(vm) {

		}// end fun checkRole

		//begin getRoleById
		function getRoleById(vm) {
			var httpOptions = {
				method : 'post',
				url : rootPath + "/role/findById",
				params:{
					roleId:vm.id
				}
			}
			var httpSuccess = function success(response) {
				vm.model = response.data;
				if (vm.isUpdate) {
					initZtreeClient(vm);
				}
			}
			
			common.http({
				vm:vm,
				$http:$http,
				httpOptions:httpOptions,
				success:httpSuccess
			});
		}//end  getRoleById
		
		function updateRole(vm){
			common.initJqValidation();			
			var isValid = $('form').valid();
			if (isValid && vm.isRoleExist == false) {
				vm.isSubmit = true;
				vm.model.id=vm.id;// id
				//console.log(vm.model);
				//return ;
				// zTree
				var nodes = getZtreeChecked();
               var nodes_role = $linq(nodes).where(function (x) {
               			//return x.isParent == false;
                        return true;
				    }).select(function (x) {
				    	return { id: x.id, name: x.name,path:x.path,method:x.method };
				    }).toArray();
               vm.model.resources = nodes_role;

				var httpOptions = {
					method : 'put',
					url : url_role,
					data : vm.model
				}

				var httpSuccess = function success(response) {
					
					common.requestSuccess({
						vm:vm,
						response:response,
						fn:function() {
							
							common.alert({
								vm:vm,
								msg:"操作成功",
								fn:function() {
									vm.isSubmit = false;
									$('.alertDialog').modal('hide');							
								}
							})
						}
						
					})
				}

				common.http({
					vm:vm,
					$http:$http,
					httpOptions:httpOptions,
					success:httpSuccess
				});

			} else {
//				common.alert({
//				vm:vm,
//				msg:"您填写的信息不正确,请核对后提交!"
//			})
			}
		}// end fun updateRole
		
		function deleteRole(vm,id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url:url_role,
                data:id
                
            }
            var httpSuccess = function success(response) {
                
                common.requestSuccess({
					vm:vm,
					response:response,
					fn:function () {
	                    vm.isSubmit = false;
	                    vm.gridOptions.dataSource.read();
	                }
					
				});

            }
            common.http({
				vm:vm,
				$http:$http,
				httpOptions:httpOptions,
				success:httpSuccess
			});
        }// end fun deleteRole
		
		function initZtreeClient(vm){
			var httpOptions = {
	                method: 'get',
	                url: url_resource
	            }
	            var httpSuccess = function success(response) {
	              
	                
	                common.requestSuccess({
						vm:vm,
						response:response,
						fn:function () {
		                    var zTreeObj;
		                    var setting = {
		                        check: {
		                            chkboxType: { "Y": "ps", "N": "ps" },
		                            enable: true
		                        }
		                    };
		                    var zNodes = response.data;
		                    
		                    zTreeObj = $.fn.zTree.init($("#zTree"), setting, zNodes);
		                    if (vm.isUpdate) {
		                         updateZtree(vm);

		                    }
		                }
						
					});
	                

	            }
			common.http({
				vm:vm,
				$http:$http,
				httpOptions:httpOptions,
				success:httpSuccess
			});
		}// end fun initZtreeClient
		
		

	}
	
	
	
})();
(function () {
    'use strict';

    angular.module('app').controller('roomCountCtrl', roomCount);

    roomCount.$inject = ['adminSvc', 'roomCountSvc'];

    function roomCount(adminSvc, roomCountSvc) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '预定会议统计列表';

        vm.queryRoomCount = function () {
            roomCountSvc.queryRoomCount(vm);
        }

        vm.ResetRoomCount = function () {
            roomCountSvc.cleanValue();
        }

        activate();
        function activate() {
            roomCountSvc.grid(vm);
            //会议室
            roomCountSvc.roomList(vm);
            //用户
            roomCountSvc.findAllUsers(vm,function (data) {
                vm.userlist = {};
                vm.userlist = data;
            });
            //部门
            adminSvc.initSignList(function(data){
                if(data.flag || data.reCode == 'ok'){
                    vm.orgDeptList = data.reObj;
                }
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('roomCountSvc', roomCount);

    roomCount.$inject = ['$http', '$compile'];
    function roomCount($http, $compile) {
        var url_roomCount = rootPath + "/roomCount";
        var url_room = rootPath + "/room";
        var url_user = rootPath + "/user";
        var url_back = '#/roomCount';
        var url_user = rootPath + '/user';

        var service = {
            grid: grid,
            queryRoomCount: queryRoomCount,//查询
            roomList: roomList,
            cleanValue: cleanValue,
            findAllUsers: findAllUsers
        };
        return service;

        function cleanValue() {
            var tab = $("#roomCountform").find('input,select');
            $.each(tab, function (i, obj) {
                obj.value = "";
            });
        }

        function queryRoomCount(vm) {
            vm.gridOptions.dataSource._skip="";
            vm.gridOptions.dataSource.read();
        }

        //S_查询预定人
        function findAllUsers(vm,callBack) {
            var httpOptions = {
                method: 'get',
                url: common.format(url_user + "/findAllUsers")
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //E_查询预定人

        //S_查询所有会议室名称
        function roomList(vm) {
            var httpOptions = {
                method: 'get',
                url: common.format(url_room + "/meeting")
            }
            var httpSuccess = function success(response) {
                vm.roomlists = {};
                vm.roomlists = response.data;
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        //E_查询所有会议室名称

        //S_giid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_room + "/fingByOData", $("#roomCountform")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    },

                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                },

            });

            // End:dataSource
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            // Begin:column
            var columns = [
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                }
                ,
                {
                    field: "rbName",
                    title: "会议名称",
                    width: "30%",
                    filterable: false
                },
                {
                    field: "addressName",
                    title: "会议室地点",
                    width: "20%",
                    filterable: false
                },
                {
                    field: "rbDay",
                    title: "会议日期",
                    width: "10%",
                    filterable: false
                },
                {
                    field: "",
                    title: "会议开始时间",
                    width: "10%",
                    filterable: false,
                    template: function(item){
                        if(item.beginTime){
                            return (new Date((item.beginTime).CompatibleDate())).Format("hh:mm");
                        }else{
                            return "";
                        }
                    },
                    //format : "{0: HH:mm}"
                },
                {
                    field: "",
                    title: "会议结束时间",
                    type: "date",
                    width: "10%",
                    filterable: false,
                    //format : "{0: HH:mm}",
                    template: function(item){
                        if(item.endTime){
                            return (new Date((item.endTime).CompatibleDate())).Format("hh:mm");
                        }else{
                            return "";
                        }
                    },
                },
                {
                    field: "dueToPeople",
                    title: "会议预定人",
                    width: "10%",
                    filterable: false
                },
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };

        }// end fun grid

    }


})();
(function () {
    'use strict';

    angular.module('app').controller('roomCtrl', room);

    room.$inject = ['bsWin', 'roomSvc', '$state','$interval'];

    function room(bsWin, roomSvc, $state,$interval) {
        var vm = this;
        vm.title = '会议室预定列表';
        vm.initSuccess = false;
        vm.model = {
            businessId: $state.params.businessId,
            businessType: $state.params.businessType,
        };
       // vm.mainFlag = $state.params.mainFlag;
        vm.startDateTime = new Date("2005/6/1 08:00");
        vm.startRbDate = new Date();
        vm.endDateTime = new Date("2030/6/1 21:00");
        vm.currentDate = "";
        vm.reportName = "会议室安排表";//默认会议室导出文件名
        vm.search = {};     //查询对象
        vm.loadScheduler = false;

        activate();
        function activate() {
            //加载会议室
            roomSvc.showMeeting(vm, function (data) {
                //初始化行程控件
                roomSvc.initScheduler(vm);
                vm.meetings = {};
                vm.meetings = data;
                //设置默认值
                roomSvc.initDefaultValue(vm.model.businessId, vm.model.businessType, function (data2) {
                    vm.model = data2;
                    if (vm.meetings && vm.meetings.length > 0) {
                        vm.search.mrID = vm.meetings[0].id;
                        vm.model.mrID =  vm.meetings[0].id;
                        //查询预订会议数据
                        vm.findMeeting();
                    }
                });
                //添加监听事件,防止会议室变形
                $("#menu_offcanvas_id").click(function(){
                    if ($("body").hasClass('sidebar-collapse')) {
                        vm.t = $interval(function () {
                            if($("#main-sidebar").width() > 50){
                                vm.findMeeting();
                                $interval.cancel(vm.t);
                            }
                        },300);
                    } else {
                        vm.t = $interval(function () {
                            if($("#main-sidebar").width() <= 50){
                                vm.findMeeting();
                                $interval.cancel(vm.t);
                            }
                        },300);
                    }
                });
            });
        }
        //返回调用
        vm.refleshData = function(data){
            vm.findMeeting();
            if (data.flag || data.reCode == 'ok') {
                bsWin.alert("操作成功");
            } else {
                bsWin.error(data.reMsg);
            }
        }

        /**
         * 切换日期时查询
         */
        vm.reQueryDate = function (e) {
            var now = e.date;
            var weekStartDate, weekEndDate;
            var nowDayOfWeek = now.getDay(); //今天本周的第几天
            //星期天
            if (nowDayOfWeek == 0) {
                weekStartDate = now.Days(-6);
                weekEndDate = now.Format("yyyy-MM-dd");
                //星期一
            } else if (nowDayOfWeek == 1) {
                weekStartDate = now.Format("yyyy-MM-dd");
                ;
                weekEndDate = now.Days(6);
            } else {
                weekStartDate = now.Days(-(nowDayOfWeek - 1));
                weekEndDate = now.Days(7 - nowDayOfWeek);
            }
            vm.search.beginTimeStr = weekStartDate;
            vm.search.endTimeStr = weekEndDate;
            //查询预订会议数据
            vm.findMeeting();
        }

        //会议室查询
        vm.findMeeting = function () {
            //查询预订会议数据
            roomSvc.queryBookRoom(vm.search, function (data) {
                vm.model.mrID =  vm.search.mrID;
                roomSvc.setSCDataSource(vm,data);      //设置数据源
            });
        }

        //导出本周评审会议安排
        vm.exportThisWeekStage = function () {
            vm.currentDate = $('.k-sm-date-format').html();
            vm.rbType = "0";//表示评审会
            vm.reportName = "本周评审会会议安排表";
            roomSvc.exportThisWeekStage(vm);
        }

        //导出本周全部会议安排
        vm.exportThisWeek = function () {
            vm.currentDate = $('.k-sm-date-format').html();
            vm.rbType = "1";//表示全部
            vm.reportName = "本周全部会议安排表";
            roomSvc.exportThisWeekStage(vm);
        }

        //导出下周全部会议安排
        vm.exportNextWeek = function () {
            var currentDate = $('.k-sm-date-format').html();
            var str = currentDate.split("-")[0].split("/");
            var year = str[0];
            var month = str[1].length == 2 ? str[1] : ("0" + str[1]);
            var day = str[2].length >= 2 ? str[2].substr(0, 2) : ("0" + str[2].substr(0, 1));
            var startDate = new Date(month + "/" + day + "/" + year);
            var endDate = new Date(month + "/" + day + "/" + year);
            startDate.setDate(startDate.getDate() + 8 - startDate.getDay());
            endDate.setDate(endDate.getDate() + 15 - endDate.getDay());
            var start = new Date(startDate);
            var end = new Date(endDate);
            vm.currentDate = start.getFullYear() + "/" + (start.getMonth() + 1) + "/" + start.getDate() + "-" + end.getFullYear() + "/" + (end.getMonth() + 1) + "/" + end.getDate();
            vm.rbType = "1";//表示全部
            vm.reportName = "下周全部会议安排表";
            roomSvc.exportThisWeekStage(vm);
        }
        //导出下周评审会议安排
        vm.exportNextWeekStage = function () {
            var currentDate = $('.k-sm-date-format').html();
            var str = currentDate.split("-")[0].split("/");
            var year = str[0];
            var month = str[1].length == 2 ? str[1] : ("0" + str[1]);
            var day = str[2].length >= 2 ? str[2].substr(0, 2) : ("0" + str[2].substr(0, 1));
            var startDate = new Date(month + "/" + day + "/" + year);
            var endDate = new Date(month + "/" + day + "/" + year);
            startDate.setDate(startDate.getDate() + 8 - startDate.getDay());
            endDate.setDate(endDate.getDate() + 15 - endDate.getDay());
            var start = new Date(startDate);
            var end = new Date(endDate);
            vm.currentDate = start.getFullYear() + "/" + (start.getMonth() + 1) + "/" + start.getDate() + "-" + end.getFullYear() + "/" + (end.getMonth() + 1) + "/" + end.getDate();
            vm.rbType = "0";//表示评审会
            vm.reportName = "下周评审会会议安排表";
            roomSvc.exportThisWeekStage(vm);
        }


    }
})();

(function () {
    'use strict';

    angular.module('app').controller('roomEditCtrl', room);

    room.$inject = ['$location','roomSvc','$state']; 

    function room($location, roomSvc,$state) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '添加会议室预定';
        vm.isuserExist=false;
        vm.id = $state.params.id;
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '更新会议室';
        }
        
        activate();
        function activate() {
        	if (vm.isUpdate) {
        		roomSvc.getroomById(vm);
            } else {
            	//roomSvc.initZtreeClient(vm);
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('roomSvc', room);

    room.$inject = ['$http', 'bsWin'];

    function room($http, bsWin) {
        var url_room = rootPath + "/room";

        var service = {
            initScheduler: initScheduler,               //初始化会议室预定列表
            queryBookRoom: queryBookRoom,               //查询预订数据
            setSCDataSource: setSCDataSource,           //设置数据源
            showMeeting: showMeeting,                   //查询所有系统会议
            exportThisWeekStage: exportThisWeekStage,   //导出本周评审会会议安排
            //exportNextWeekStage: exportNextWeekStage,   //下周评审会议安排
            //exportThisWeek: exportThisWeek,
            initDefaultValue: initDefaultValue,         //初始化会议信息
            saveBookRoom: saveBookRoom,                 //保存会议预定信息
            deleteRoom : deleteRoom ,                //删除会议室
        };
        return service;
        //start 初始化日程控件
        function initScheduler(vm) {
            $("#scheduler").kendoScheduler({
                date: new Date(),
                width:"100%",
                startTime: new Date("2005/6/1 08:00"),
                endTime: new Date("2030/6/1 21:00"),
                views: [
                    {
                        type: "week",
                        selected: true,
                        allDaySlot: false,
                    },
                ],
                editable: {
                    destroy: true,      //不可删除
                    template: $("#customEditorTemplate").html(),
                },
                navigate: function (e) {
                    vm.reQueryDate(e);
                },
                edit: function (e) {         //新增或者修改时触发事件
                    //vm.editScheduler(e);
                },
                save: function (e) {
                    saveBookRoom(e.event,function(data){
                        vm.refleshData(data);
                    });
                },
                remove: function(e) {
                    deleteRoom(e.event , function(data){
                        vm.refleshData(data);
                    });
                },
                eventTemplate: $("#event-template").html(),
                timezone: "Etc/UTC",
                footer: false,
            });
            var scheduler = $("#scheduler").data("kendoScheduler");
            var formattedShortDate = scheduler._model.formattedShortDate;
            var timeRange = formattedShortDate.split("-");
            vm.search.beginTimeStr = (new Date(timeRange[0].trim())).Format("yyyy-MM-dd");
            vm.search.endTimeStr = (new Date(timeRange[1].trim())).Format("yyyy-MM-dd");
        }

        /**
         * 删除会议室
         */
        function deleteRoom(room , callBack){
            var httpOptions = {
                method : 'delete' ,
                url : rootPath + "/room",
                params : {id : room.id , dueToPeople : room.dueToPeople}
            }
            var httpSuccess = function success(response){
                if(callBack != undefined && typeof callBack == 'function'){
                    callBack(response.data);
                }
            }
            common.http({
                httpOptions : httpOptions ,
                $http : $http,
                success : httpSuccess
            });

        }

        /**
         * 查询数据
         */
        function queryBookRoom(meeting, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/room/queryBookInfo",
                data: meeting,
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        /**
         * 设置行程控件数据源
         */
        function setSCDataSource(vm, data) {
            var scheduler = $("#scheduler").data("kendoScheduler");
            var dataSource = new kendo.data.SchedulerDataSource({
                data: data,
                schema: {
                    model: {
                        id: "bookId",
                        fields: {
                            bookId: {from: "id"},
                            title: {from: "addressName", defaultValue: "会议室",validation: { required: true }},
                            start: {type: "date", from: "beginTime"},
                            end: {type: "date", from: "endTime"},
                            rbDay: {type: "date", from: "rbDay",format:"yyyy-MM-dd"},
                            businessId: {from: "businessId", defaultValue: vm.model.businessId},
                            businessType: {from: "businessType", defaultValue: vm.model.businessType},
                            rbName: {from: "rbName", defaultValue: vm.model.rbName},
                            stageOrgName: {from: "stageOrgName", defaultValue: vm.model.stageOrgName},
                            host: {from: "host", defaultValue: vm.model.host},
                            dueToPeople: {from: "dueToPeople", defaultValue: vm.model.dueToPeople},
                            mrID: {from: "mrID", defaultValue: vm.model.mrID},
                            content: {from: "content", defaultValue: vm.model.content},
                            remark: {from: "remark", defaultValue: vm.model.remark},
                        }
                    }
                },
            });
            scheduler.setDataSource(dataSource);
        }

        function saveBookRoom(event,callBack) {
            var model = event;
            if(!model.rbName || !model.dueToPeople || !model.rbDay || !model.start|| !model.end ||!model.content){
                //返回一个自定义错误对象，不能直接返回自定义js对象，目前找不到好的解决办法
                var httpOptions = {
                    method: 'post',
                    url: rootPath + "/room/errorResult",
                }
                var httpSuccess = function success(response) {
                    if (callBack != undefined && typeof callBack == 'function') {
                        callBack(response.data);
                    }
                }
                common.http({
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            }else{
                model.id = model.bookId;
                var beginTime = (model.start).Format("yyyy-MM-dd hh:mm:ss");
                model.beginTime = beginTime;
                model.rbDay = (model.start).Format("yyyy-MM-dd");
                var endTime = (model.end).Format("hh:mm:ss");
                model.endTime = model.rbDay+ " "+endTime;
               // model.mainFlag = mainFlag;
                var httpOptions = {
                    method: 'post',
                    url: rootPath + "/room/addRoom",
                    data: model
                }
                var httpSuccess = function success(response) {
                    if (callBack != undefined && typeof callBack == 'function') {
                        callBack(response.data);
                    }
                }
                common.http({
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
            }
        }

        //start#会议室地点查询
        function showMeeting(vm, callBack) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/room/meeting",
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //end #会议室地点查询


        //S_初始化会议信息
        function initDefaultValue(businessId, businessType, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/room/initDefaultValue",
                params: {
                    businessId: businessId,
                    businessType: businessType
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //start#exportWeek
        //导出会议室安排
        function exportThisWeekStage(vm) {
            var fileName = escape(encodeURIComponent(vm.reportName));
            window.open(url_room + "/exportThisWeekStage?currentDate=" + vm.currentDate + "&rbType="
                + vm.rbType + "&mrId=" + vm.mrID + "&fileName=" + fileName);
        }

        //S 下周评审会议
        /*function exportNextWeekStage(vm) {
            var httpOptions = {
                method: 'get',
                url: url_room + "/exportThisWeekStage",
                params: {currentDate: vm.currentDate}

            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        common.alert({
                            vm: vm,
                            msg: "操作成功",
                            fn: function () {
                                $('.alertDialog').modal('hide');
                                $('.modal-backdrop').remove();
                            }
                        })
                    }
                });

            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //S 下周评审会议

        //本周全部会议
        function exportThisWeek() {
            window.open(url_room + "/exportWeek");
        }

        //下周全部会议
        function exportNextWeek() {
            window.open(url_room + "/exportNextWeek");
        }*/

        //end#exportWeek

    }
})();


(function () {
    'use strict';

    angular.module('app').controller('sharingDetailCtrl', sharingPlatlform);

    sharingPlatlform.$inject = ['$location', '$state', 'sysfileSvc', 'sharingPlatlformSvc'];

    function sharingPlatlform($location, $state, sysfileSvc, sharingPlatlformSvc) {
        var vm = this;
        vm.title = '资料共享详情页';
        vm.model = {}; //创建资料共享对象
        vm.model.sharId = $state.params.sharId;

        //下载
        vm.downloadSysFile = function (id) {
            sysfileSvc.downloadFile(id);
        }

        activate();
        function activate() {
            sharingPlatlformSvc.getSharingDetailById(vm, vm.model.sharId);
            sysfileSvc.findByBusinessId(vm.model.sharId,function(data){
                vm.sysFilelists = data;
            });
        }
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('sharingPlatlformCtrl', sharingPlatlform);

    sharingPlatlform.$inject = ['$location', '$state', '$http', 'sharingPlatlformSvc','$rootScope','monthlyMultiyearSvc'];

    function sharingPlatlform($location, $state, $http, sharingPlatlformSvc,$rootScope,monthlyMultiyearSvc) {
        var vm = this;
        vm.title = '共享资料管理';
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }
        activate();
        function activate() {
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                sharingPlatlformSvc.grid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                sharingPlatlformSvc.grid(vm);
            }

           /* monthlyMultiyearSvc.findAllOrg(vm);
            monthlyMultiyearSvc.findAllUser(vm);*/

        }

        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    sharingPlatlformSvc.deleteSharingPlatlform(vm, id);
                }
            });
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择要删除的数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');

                vm.del(idStr);
            }
        };

        /**
         * 批量发布
         */
        vm.bathPublish = function () {
            sharingPlatlformSvc.updatePublish(vm, true);
        }

        /**
         * 批量取消发布
         */
        vm.bathDown = function () {
            sharingPlatlformSvc.updatePublish(vm, false);
        }

        //查询
        vm.querySharing = function () {
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        /**
         * 重置
         */
        vm.resetSharing = function(){
            var tab = $("#formSharing").find('input,select');
            $.each(tab, function(i, obj) {
                obj.value = "";
            });
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('sharingPlatlformEditCtrl', sharingPlatlform);

    sharingPlatlform.$inject = ['sharingPlatlformSvc', '$state','sysfileSvc','$scope'];

    function sharingPlatlform(sharingPlatlformSvc, $state,sysfileSvc,$scope) {
        var vm = this;
        vm.title = '新增共享资料';
        vm.model = {};                   //共享平台对象
        vm.businessFlag ={
            isUpdate : false,           //是否为更改
            isLoadModel : false,        //是否已经加载对象
            isLoadOrgUser : false,      //是否已经加载部门和用户
        }

        vm.model.sharId = $state.params.sharId;
        if (vm.model.sharId) {
            vm.businessFlag.isUpdate = true;
            vm.title = '更改共享资料';
        }
        //初始化附件上传控件
        vm.initFileUpload = function(){
            if(!vm.model.sharId){
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.model.sharId",function (newValue, oldValue) {
                    if(newValue && newValue != oldValue && !vm.initUploadOptionSuccess){
                        vm.initFileUpload();
                    }
                });
            }
            //创建附件对象
            vm.sysFile = {
                businessId : vm.model.sharId,
                mainId : vm.model.sharId,
                mainType : sysfileSvc.mainTypeValue().SHARE,
                showBusiType: false,
            };
            sysfileSvc.initUploadOptions({
                inputId:"sysfileinput",
                vm:vm,
                uploadSuccess:function(){
                    sysfileSvc.findByBusinessId(vm.model.sharId,function(data){
                        vm.sysFilelists = data;
                    });
                }
            });
        }

        activate();
        function activate() {
            if (vm.model.sharId) {
                sharingPlatlformSvc.getSharingPlatlformById(vm,function (data) {
                    vm.model = data;
                    vm.businessFlag.isLoadModel = true;
                    sharingPlatlformSvc.initSeleObj(vm);
                    //初始化附件列表
                    sysfileSvc.findByBusinessId(vm.model.sharId,function(data){
                        vm.sysFilelists = data;
                        vm.initFileUpload();
                    });
                });

            }else{
                vm.initFileUpload();
            }
            //初始化部门和用户
            sharingPlatlformSvc.initOrgAndUser(vm);
        }

        //重置
        vm.resetSharing = function(){
        	var tab = $("#formSharing").find('input,select');
			$.each(tab, function(i, obj) {
				obj.value = "";
			});
        }

        /**
         * 保存发布信息
         */
        vm.create = function () {
            sharingPlatlformSvc.createSharingPlatlform(vm);
        };

        /**
         * 选择用户
         * @param $event
         */
        vm.checkBox = function ($event) {
            var checkbox = $event.target;
            var checked = checkbox.checked;
            var checkboxValue = checkbox.value;
            if (checked) {
                $('input[tit=\"' + checkboxValue + '\"]').each(function () {
                    $(this).attr("disabled", "disabled");
                    $(this).removeAttr("checked");
                });
            } else {
                $('input[tit=\"' + checkboxValue + '\"]').each(function () {
                    $(this).removeAttr("disabled");
                });
            }
        }
        /**
         * 选择组别
         * @param $event
         * @param deptObj
         */
        vm.checkDeptBox = function($event,deptObj){
            var checkbox = $event.target;
            var checked = checkbox.checked;
            var userIdList = [];
            for(var i=0,l=deptObj.userDtoList.length;i<l;i++){
                userIdList.push(deptObj.userDtoList[i].id);
            }
            if (checked) {
                $('input[name="shareUser"]').each(function (i,Obj) {
                    if(jQuery.inArray(Obj.value, userIdList ) > -1){
                        $(this).attr("disabled", "disabled");
                        $(this).removeAttr("checked");
                    }
                });
            } else {
                $('input[name="shareUser"]').each(function (i,Obj) {
                    if(jQuery.inArray(Obj.value, userIdList ) > -1){
                        $(this).removeAttr("disabled");
                    }
                });
            }
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').factory('sharingPlatlformSvc', sharingPlatlform);

    sharingPlatlform.$inject = ['$http','bsWin'];

    function sharingPlatlform($http,bsWin) {
        var url_sharingPlatlform = rootPath + "/sharingPlatlform", url_back = '#/sharingPlatlform';

        var service = {
            grid: grid,
            getSharingPlatlformById: getSharingPlatlformById,
            createSharingPlatlform: createSharingPlatlform,
            deleteSharingPlatlform: deleteSharingPlatlform,
            getSharingDetailById: getSharingDetailById,	    //获取详情页
            initOrgAndUser: initOrgAndUser,                 //初始化部门和用户
            initSeleObj : initSeleObj,                      //初始化选择的用户
            updatePublish : updatePublish,                  //批量更改发布状态
        };

        return service;

        //S_初始化选择的用户
        function initSeleObj(vm){
            //没有加载完整或者是所有人可见的，不需要初始化选择的用户
            if(!vm.businessFlag.isLoadOrgUser || !vm.businessFlag.isLoadModel || (vm.model.isNoPermission && vm.model.isNoPermission == '9')){
                return ;
            }
            if((vm.shareOrgList && vm.shareOrgList.length > 0)){
                //1、先计算选择的部门
                if(vm.model.privilegeDtoList && vm.model.privilegeDtoList.length > 0){
                    var userList = [];
                    vm.shareOrgList.forEach(function (so,i){
                        vm.model.privilegeDtoList.forEach(function (p,index) {
                            if(p.businessType == 1 || p.businessType == "1"){
                                if(p.businessId == so.id){
                                    so.isChecked = true;
                                    so.userDtos.forEach(function (u,k){
                                        u.isDisabled = true;
                                        userList.push(u);
                                    });
                                }
                            }else if(p.businessType == 2 || p.businessType == "2"){
                                so.userDtos.forEach(function (u,k){
                                    if(p.businessId == u.id){
                                        u.isChecked = true;
                                    }
                                });
                            }
                        })
                    });
                    var groupUserIdList = [];
                    vm.deptDtoList.forEach(function (dp,i){
                        vm.model.privilegeDtoList.forEach(function (p,index) {
                            if(p.businessType == 3 || p.businessType == "3"){
                                if(p.businessId == dp.id){
                                    dp.isChecked = true;
                                    dp.userDtoList.forEach(function (u,k){
                                        groupUserIdList.push(u.id);
                                    });
                                }
                            }
                        })
                    });

                    if(groupUserIdList && groupUserIdList.length > 0){
                        vm.shareOrgList.forEach(function (so,i) {
                            so.userDtos.forEach(function (u,k){
                                userList.push(u);
                            });
                        });
                    }
                    //组别用户
                    userList.forEach(function (u,index) {
                        if(jQuery.inArray(u.id, groupUserIdList ) > -1){
                            u.isDisabled = true;
                        }
                    })
                }

                if(vm.noOrgUsetList && vm.noOrgUsetList.length > 0 &&  vm.model.privilegeDtoList!=undefined){
                    vm.noOrgUsetList.forEach(function (nu,i){
                        vm.model.privilegeDtoList.forEach(function (p,index) {
                             if( (p.businessType == 2 || p.businessType == "2") && p.businessId == nu.id){
                                 nu.isChecked = true;
                            }
                        })
                    });
                }
                vm.businessFlag.isInitSeled = true;
            }
        }//E_initSeleObj

        //S_初始化部门和用户
        function initOrgAndUser(vm) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/sharingPlatlform/initOrgAndUser",
            };
            var httpSuccess = function success(response) {
                vm.shareOrgList = response.data.orgDtoList;
                vm.deptDtoList = response.data.deptDtoList;
                vm.noOrgUsetList = response.data.noOrgUserList;
                vm.businessFlag.isLoadOrgUser = true;
                initSeleObj(vm);
            };
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_initOrgAndUser

        //S 详情页面
        function getSharingDetailById(vm, id) {
            var httpOptions = {
                method: 'get',
                url: url_sharingPlatlform + "/html/sharingDeatilById",
                params: {id: id}
            };
            var httpSuccess = function success(response) {
                vm.model = response.data;
            };
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#deleteSharingPlatlform
        function deleteSharingPlatlform(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_sharingPlatlform + "/sharingDelete",
                data: id
            };
            var httpSuccess = function success(response) {
                vm.isSubmit = false;
                vm.gridOptions.dataSource.read();
                bsWin.alert("操作成功");
            };
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#createSharingPlatlform
        function createSharingPlatlform(vm) {
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;
                //如果不是全员可看，则要获取选择的部门和用户
                if(vm.model.isNoPermission != 9){
                    vm.model.privilegeDtoList = [];
                    //1、先计算选择的部门
                    var oCheck = $("input[name='shareOrg']:checked");
                    if (oCheck.length > 0) {
                        for (var i = 0; i < oCheck.length; i++) {
                            var shareOrg = {};
                            shareOrg.businessId = oCheck[i].value;
                            shareOrg.businessType = "1";
                            vm.model.privilegeDtoList.push(shareOrg);
                        }
                    }
                    //2、再选择人员
                    var uCheck = $("input[name='shareUser']:not(:disabled):checked");
                    if (uCheck.length > 0) {
                        for (var i = 0; i < uCheck.length; i++) {
                            var shareUser = {};
                            shareUser.businessId = uCheck[i].value;
                            shareUser.businessType = "2";
                            vm.model.privilegeDtoList.push(shareUser);
                        }
                    }
                    //3、计算组别
                    var dCheck = $("input[name='shareDept']:checked");
                    if (dCheck.length > 0) {
                        for (var i = 0; i < dCheck.length; i++) {
                            var shareDept = {};
                            shareDept.businessId = dCheck[i].value;
                            shareDept.businessType = "3";
                            vm.model.privilegeDtoList.push(shareDept);
                        }
                    }
                }
                var httpOptions = {
                    method: 'post',
                    url: rootPath + "/sharingPlatlform/saveSharing",
                    data: vm.model
                };

                var httpSuccess = function success(response) {
                    vm.isSubmit = false;
                    vm.model.sharId = response.data.sharId;
                    bsWin.alert("操作成功");
                };

                common.http({
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess,
                    onError:function () {
                        vm.isSubmit = false;
                    }
                });

            }
        }

        // begin#getSharingPlatlformById
        function getSharingPlatlformById(vm,callBack) {
            var httpOptions = {
                method: 'get',
                url: url_sharingPlatlform + "/html/findById",
                params: {
                    id: vm.model.sharId
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#grid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = common.kendoGridDataSource(url_sharingPlatlform + "/findByCurUser",$("#formSharing"),vm.queryParams.page,vm.queryParams.pageSize,vm.gridParams);
            // End:dataSource
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.sharId)
                    },
                    filterable: false,
                    width: 30,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
                    field: "unitSort",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "theme",
                    title: "主题",
                    width: "35%",
                    filterable: false
                },
                {
                    field: "publishUsername",
                    title: "发布人",
                    width: "10%",
                    filterable: false
                },
                {
                    field: "publishDate",
                    title: "发布时间",
                    format: "{0:yyyy-MM-dd hh24:mm:ss}",
                    width: "18%",
                    filterable: false
                },
                {
                    field: "isPublish",
                    title: "发布状态",
                    width: "12%",
                    template: function (item) {
                       if(item.isPublish && item.isPublish == 9){
                           return "已发布";
                       }else{
                           return "未发布";
                       }
                    },
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: "20%",
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                            item.sharId, item.sharId, "vm.del('" + item.sharId + "')");
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                pageable : common.kendoGridConfig(vm.queryParams).pageable,
                dataBound:common.kendoGridConfig(vm.queryParams).dataBound,
                columns: columns,
                resizable: true
            };

        }// end fun grid


        //S_批量发布
        function updatePublish(vm,isUpdate){
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: "请选择要批量发布的数据"
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var httpOptions = {
                    method: 'post',
                    url: rootPath + "/sharingPlatlform/updatePublish",
                    params: {
                        ids: ids.join(','),
                        status: (isUpdate == true)?'9':'0'
                    }
                }
                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            vm.isSubmit = false;
                            vm.gridOptions.dataSource.read();
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                closeDialog: true
                            })
                        }
                    })
                }
                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
            }
        }//E_bathPublish

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('sharingPlatlformYetCtrl', sharingPlatlformYet);

    sharingPlatlformYet.$inject = ['$location', '$state','$http','sharingPlatlformYetSvc','$rootScope'];

    function sharingPlatlformYet($location,$state, $http,sharingPlatlformYetSvc,$rootScope) {
        var vm = this;
        vm.title = '共享资料列表';
        vm.model = {};

        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }
        activate();
        function activate() {
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                sharingPlatlformYetSvc.grid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                sharingPlatlformYetSvc.grid(vm);
            }

        }
        
        //查询
        vm.findSharing = function(){
            vm.gridOptions.dataSource._skip=0;
        	vm.gridOptions.dataSource.read();
        }
        //重置
        vm.resetShared = function(){
        	var tab = $("#formSharingPub").find('select');
			$.each(tab, function(i, obj) {
				obj.value = "";
			});
        }
    }
})();

(function () {
    'use strict';
    angular.module('app').factory('sharingPlatlformYetSvc', sharingPlatlformYet);
    sharingPlatlformYet.$inject = ['$http'];

    function sharingPlatlformYet($http) {
        var service = {
            grid: grid,
        };

        return service;

        // begin#grid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = common.kendoGridDataSource(rootPath + "/sharingPlatlform/findByReception",$("#formSharingPub"),vm.queryParams.page,vm.queryParams.pageSize,vm.gridParams);
            // End:dataSource

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.sharId)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
                    field: "unitSort",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                
                {
                    field: "theme",
                    title: "共享主题",
                    width: 180,
                    filterable: true
                },
                {
                    field: "publishUsername",
                    title: "发布人",
                    width: 100,
                    filterable: true
                },
                {
                    field: "publishDate",
                    title: "发布时间",
                    width: 100,
                    filterable: true
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),item.sharId);
                    	
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                pageable : common.kendoGridConfig(vm.queryParams).pageable,
                dataBound:common.kendoGridConfig(vm.queryParams).dataBound,
                resizable: true
            };

        }// end fun grid

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('signCreateCtrl', sign);

    sign.$inject = ['$location','signSvc','$state','bsWin'];

    function sign($location, signSvc,$state,bsWin) {
        var vm = this;
        vm.model = {};						//创建一个form对象
        vm.title = '新增收文';        		//标题

        vm.create = function () {
            common.initJqValidation();
            var isValid = $('form').valid();
            if(isValid){
                signSvc.createSign(vm.model,function(data){
                    if (data.flag || data.reCode == "ok") {
                        //如果已经发起流程，则不允许再修改
                        if(data.reObj.processInstanceId){
                            bsWin.alert("操作成功！");
                        } else{
                            bsWin.success("操作成功，请继续填写项目审核登记表",function(){
                                $state.go('fillSign', {signid: data.reObj.signid}, {reload: true});
                            });
                        }
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            }

        };

        /**
         * 提前介入复选框
         * @constructor
         */
        vm.TQJRCheckbox = function(){
            var flag = $("#isAdvanced").is(':checked');
            if(flag){
                if(vm.model.projectname){
                    vm.model.projectname += "(提前介入)";
                }else{
                    vm.model.projectname = "(提前介入)";
                }
            }else{
                if(vm.model.projectname){
                    vm.model.projectname = vm.model.projectname.replace("(提前介入)" , "");
                }
            }
        }

        /**
         * 是否调概复选框
         * @constructor
         */
        vm.SFTGCheckbox = function(){
            var flag = $("#ischangeEstimate").is(':checked');
            if(flag){
                if(vm.model.projectname){
                    vm.model.projectname += "(调概项目)";
                }else{
                    vm.model.projectname = "(调概项目)";
                }
            }else{
                if(vm.model.projectname){
                    vm.model.projectname = vm.model.projectname.replace("(调概项目)" , "");
                }
            }
        }

        /**
         * 评审阶段为“登记赋码”时，在项目名称后自动添加（登记赋码）
         */
        vm.reviewstageSelect = function(){
            if(vm.model.reviewstage && vm.model.reviewstage == "登记赋码"){
                if(vm.model.projectname){
                    vm.model.projectname += "(赋码阶段)";
                }else{
                    vm.model.projectname = "(赋码阶段)";
                }
            }else{
                if(vm.model.projectname){
                    vm.model.projectname = vm.model.projectname.replace("(赋码阶段)" , "");
                }
            }
        }

    }
})();

(function () {
    'use strict';
    angular.module('app').controller('signCtrl', sign);

    sign.$inject = ['signSvc','$state','flowSvc','signFlowSvc','bsWin','$rootScope'];

    function sign(signSvc,$state,flowSvc,signFlowSvc,bsWin,$rootScope) {
        var vm = this;
        vm.model = {};						//创建一个form对象
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});
        }
        active();
        function active() {
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                //恢复查询条件
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                signSvc.signGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                signSvc.signGrid(vm);
            }
        }

        //获取委里签收信息
        vm.getSignInfo = function(){
            if(vm.model.filecode == "" || vm.model.filecode == null){
                bsWin.alert("收文编号不能为空!");
                return ;
            }
            signSvc.getSignInfo(vm.model.filecode,'0',function(data){
                if(data.flag || data.reCode == 'ok'){
                    if(data.reMsg!='保存成功！'){
                        bsWin.alert(data.reMsg);
                        return;
                    }else{
                        vm.gridOptions.dataSource.read();
                    }
                }else{
                    bsWin.alert(data.reMsg);
                }
            });
        }

        //收文查询
        vm.querySign = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        vm.check=function(){
            vm.isAssociate = vm.ischeck?9:0;
      	 }
        
        //start 收文删除
        vm.del = function (signid) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认删除该条项目数据吗？",
                onOk: function () {
                    signSvc.deleteSign(signid,function(data){
                        if(data.flag || data.reCode == 'ok'){
                            bsWin.alert("删除成功！",function(){
                                vm.gridOptions.dataSource.read();
                            })
                        }else{
                            bsWin.alert(data.reMsg);
                        }
                    });
                }
            });
         }//end 收文删除
        
         //start 收文删除
         vm.dels = function () {         	 
        	 var selectIds = common.getKendoCheckId('.grid');         	
             if (selectIds.length == 0) {
              	common.alert({
                  	vm:vm,
                  	msg:'请选择数据'                 	
                  });
              } else {
            	  var ids=[];
                  for (var i = 0; i < selectIds.length; i++) {
                  	ids.push(selectIds[i].value);
    			  }  
                  var idStr=ids.join(',');
                  vm.del(idStr);
              }   
         }//end 收文删除
         
         //************************** S 以下是新流程处理js **************************//
         vm.startNewFlow = function(signid){
             bsWin.confirm({
                 title: "询问提示",
                 message: "确认已经完成填写，并且发起流程么？",
                 onOk: function () {
                     $('.confirmDialog').modal('hide');
                     signFlowSvc.startFlow(signid,function(data){
                         if(data.flag || data.reCode == 'ok'){
                             bsWin.success("操作成功！",function(){
                                 vm.gridOptions.dataSource.read();
                             });
                         }else{
                             bsWin.error(data.reMsg);
                         }
                     });
                 }
             });
         }

        /**
         * 正式签收收文
         * @param signId
         */
        vm.realSign = function(signid){
            bsWin.confirm({
                title: "询问提示",
                message: "确认正式签收了么？",
                onOk: function () {
                    $('.confirmDialog').modal('hide');
                    signSvc.realSign(signid,function(data){
                        if(data.flag || data.reCode == 'ok'){
                            bsWin.success("操作成功！",function(){
                                vm.gridOptions.dataSource.read();
                            });
                        }else{
                            bsWin.error(data.reMsg);
                        }
                    });
                }
            });
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('signFillinCtrl', sign);

    sign.$inject = ['signSvc', 'sysfileSvc', '$state', '$http', 'bsWin', '$scope','addRegisterFileSvc'];

    function sign(signSvc, sysfileSvc, $state, $http, bsWin, $scope,addRegisterFileSvc) {
        var vm = this;
        vm.model = {};		//创建一个form对象
        vm.title = '填写报审登记表';        		//标题
        vm.model.signid = $state.params.signid;	//收文ID
        vm.flowDeal = false;		//是否是流程处理标记
        vm.busiObj = {};             //业务对象，用于记录页面操作对象等信息
        vm.otherFile = [];//其他申报资料
        vm.supply={};    //拟补充资料
        vm.isControl=$state.params.isControl; //按钮显示
        active();
        function active() {
            signSvc.initFillData(vm.model.signid, function (data) {
                vm.model = data.reObj.sign;
                vm.deptlist = data.reObj.deptlist

                if (data.reObj.mainOfficeList) {
                    vm.mainOfficeList = data.reObj.mainOfficeList;
                }
                if (data.reObj.assistOfficeList) {
                    vm.assistOfficeList = data.reObj.assistOfficeList;
                }
                //建设单位和编制单位
                vm.companyList = data.reObj.companyList;
                //分管领导信息
                vm.busiObj.leaderList = data.reObj.leaderList;

                //创建附件对象
                vm.sysFile = {
                    businessId: vm.model.signid,
                    mainId: vm.model.signid,
                    mainType: sysfileSvc.mainTypeValue().SIGN,
                    sysfileType: sysfileSvc.mainTypeValue().FILLSIGN,
                };
                sysfileSvc.initUploadOptions({
                    inputId: "sysfileinput",
                     vm: vm
                });

                //初始化，打印预览的stageType
                if(vm.model.reviewstage == "项目建议书" || vm.model.reviewstage == "可行性研究报告" || vm.model.reviewstage == "登记赋码"){
                    vm.stageType = "STAGESUG";
                }
                else if(vm.model.reviewstage == "资金申请报告"){
                    vm.stageType = "STAGEREPORT";
                }
                else if(vm.model.reviewstage == "设备清单（国产）" || vm.model.reviewstage == "设备清单（进口）"){
                    vm.stageType = "STAGEHOMELAND";
                }
                else if(vm.model.reviewstage == "进口设备"){
                    vm.stageType = "STAGEDEVICE";
                }
                else if(vm.model.reviewstage == "项目概算"){
                    vm.stageType = "STAGEBUDGET";
                }
                //其它资料信息
                if(data.reObj.registerFileDtoDtoList!=undefined){
                    data.reObj.registerFileDtoDtoList.forEach(function(registerFile  , x){
                        if(registerFile.businessType == "3"){
                            vm.supply.push(registerFile);
                        }else if(registerFile.businessType == "2"){
                            vm.drawingFile.push(registerFile);
                        }else{
                            vm.otherFile.push(registerFile);
                        }
                    })
                }
            });
        }

        //选择默认办理部门
        vm.checkOrgType = function ($event) {
            var checkbox = $event.target;
            var checked = checkbox.checked;
            var checkboxValue = checkbox.value;
            if (checked) {
                vm.model.leaderName = signcommon.getDefaultLeader(checkboxValue);
                //设置综合部和分管领导ID
                $.each(vm.busiObj.leaderList, function (i, leader) {
                    if (leader.mngOrgType == checkboxValue) {
                        vm.model.leaderId = leader.id;
                        vm.model.leaderName = leader.displayName;
                        vm.model.comprehensivehandlesug = "请" + leader.displayName + "同志阅示。";
                    }
                })
                if (checkboxValue == signcommon.getBusinessType().GX) {
                    vm.model.leaderhandlesug = "请（概算一部         概算二部）组织评审。";
                } else {
                    vm.model.leaderhandlesug = "请（评估一部         评估二部         评估一部信息化组）组织评审。";
                }
                if (!vm.model.leaderId) {
                    bsWin.alert("选择的默认办理部门没有合适的分管领导，请先设置分管领导角色用户！");
                }
            }
        }

        //发起流程，发起流程先保存数据
        vm.startNewFlow = function () {
            common.initJqValidation($('#sign_fill_form'));
            var isValid = $('#sign_fill_form').valid();
            if (isValid) {
                vm.isSubmit = true;
                bsWin.confirm({
                    title: "询问提示",
                    message: "确定发起流程么，请确保填写的信息已经保存正确！",
                    onOk: function () {
                        signSvc.updateFillin(vm.model, function (data) {
                            if(data.flag){
                                var httpOptions = {
                                    method: 'post',
                                    url: rootPath + "/sign/startNewFlow",
                                    params: {
                                        signid: vm.model.signid
                                    }
                                }
                                var httpSuccess = function success(response) {
                                    vm.isSubmit = false;
                                    if (response.data.reCode == "ok") {
                                        bsWin.success("操作成功！", function () {
                                            $state.go('gtasks');
                                        });
                                    } else {
                                        bsWin.error(response.data.reMsg);
                                    }
                                }
                                common.http({
                                    $http: $http,
                                    httpOptions: httpOptions,
                                    success: httpSuccess
                                });
                            }else{
                                bsWin.alert(data.reMsg);
                            }
                        });
                    }
                });
            } else {
                bsWin.alert("操作失败，有红色*号的选项为必填项，请按要求填写！");
            }

        }

        //打印预览
        vm.signPreview = function (oper) {

            var htmlBody = $(".well").parents("body");
            var htmlsidebar = htmlBody.find(".main-sidebar");
            var htmlhedaer = htmlBody.find(".main-header");
            var htmlContentwrapper = htmlBody.find(".content-wrapper");
            //隐藏不需打印的区域;
            htmlsidebar.hide();
            htmlhedaer.hide();
            $(".toolbar").hide();

            //修改打印显示样式

            //添加替换input的显示内容，打印后自动删除
            $(".well input").each(function () {
                var inptTpye = $(this).attr("type");
                if (inptTpye == "text") {
                    $(this).before('<span class="printmesge" data="text" style="white-space : nowrap;">' + $(this).val() + '</span>');
                }
                ;
                if (inptTpye == "checkbox") {
                    if ($(this).is(':checked')) {
                        $(this).before('<span class="printmesge" data="text">有</span>');
                    } else {
                        $(this).before('<span class="printmesge" data="text">无</span>');
                    }
                }
            });
            $(".printmesge").show();
            $(".well input[type=text]").hide();
            $(".well input[type=checkbox]").hide();
            $(".well button").hide();
            htmlContentwrapper.find("td div select").hide();
            htmlContentwrapper.find("td div span").css("margin", "0");

            /*自定义表格样式*/
            $(".well").addClass("printbody");
            $(".well .table-bordered").addClass("tableBOX");
            htmlContentwrapper.find("input").addClass("noborder");
            htmlContentwrapper.addClass("nomargin");

            window.print();

            // 恢复原有
            htmlsidebar.show();
            htmlhedaer.show();
            $(".toolbar").show();
            $(".printmesge").hide();
            $(".well input[type=text]").show();
            $(".well input[type=checkbox]").show();
            $(".well button").show();
            htmlContentwrapper.find("td div select").show();
            htmlContentwrapper.find("td div span").css("margin-left", "100px");
            $(".well").removeClass("printbody");
            $(".well .table-bordered").removeClass("tableBOX");
            $("[data=text]").remove();//删除临时添加的内容

            htmlContentwrapper.find("input").removeClass("noborder");
            htmlContentwrapper.removeClass("nomargin");
        }


        //申报登记编辑
        vm.updateFillin = function () {
            common.initJqValidation($('#sign_fill_form'));
            var isValid = $('#sign_fill_form').valid();
            if (isValid) {
                vm.isSubmit = true;
                vm.model.leaderhandlesug = $("#leaderhandlesug").val();
                signSvc.updateFillin(vm.model, function (data) {
                    vm.isSubmit = false;
                    if(data.flag){
                        bsWin.alert("操作成功！");
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("操作失败，有红色*号的选项为必填项，请按要求填写！");
            }

        }

        //根据协办部门查询用户
        vm.findOfficeUsersByDeptName = function (status) {
            var param = {};
            if ("main" == status) {
                param.maindeptName = vm.model.maindeptName;
            } else {
                param.assistdeptName = vm.model.assistdeptName;
            }
            signSvc.findOfficeUsersByDeptName(param, function (data) {
                if ("main" == status) {
                    vm.mainOfficeList = {};
                    vm.mainOfficeList = data;
                } else {
                    vm.assistOfficeList = {};
                    vm.assistOfficeList = data;
                }
            });
        }

        /******以下是其它资料添加*****/

        vm.addOtherFile = function (businessId, businessType) {
            if(!vm.addRegisters){
                vm.addRegisters = [];
            }
            if (!businessId) {
                bsWin.alert("请先保存数据！");
            } else {
                if(businessType == "4"){
                    vm.addRegisters = vm.otherFile;
                    vm.showFilePage = false;
                    vm.showFileOther = false;
                    vm.showSignOther = true;
                }
                if(businessType == "2"){
                    vm.addRegisters = vm.drawingFile;
                    vm.showFilePage = true;
                    vm.showFileOther = false;
                    vm.showSignOther = false;
                }

                vm.businessId = businessId;
                vm.businessType = businessType;

                $("#addOtherFile").kendoWindow({
                    width: "840px",
                    height: "480px",
                    title: "补充资料编辑",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            }

        }


        //新建其它资料
        vm.addRegisterFile = function () {
            vm.addRegister = {};
            vm.addRegister.businessId = vm.businessId;
            vm.addRegister.businessType = vm.businessType;
            vm.addRegister.id = common.uuid();
            vm.addRegisters.push(vm.addRegister);
        }

        //保存其它资料
        vm.saveRegisterFile = function () {
            addRegisterFileSvc.saveRegisterFile(vm.addRegisters, function (data) {
                if (data.flag || data.reCode == 'ok') {
                    bsWin.alert("操作成功");
                    vm.addRegisters = data.reObj;
                } else {
                    bsWin.alert(data.reMsg);
                }
            });
        }
        //删除其它资料
        vm.deleteRegisterFile = function () {
            var isCheked = $("#addOtherFile input[name='addRegistersCheck']:checked")
            if (isCheked.length < 1) {
                bsWin.alert("请选择要删除的记录！");
            } else {
                var ids = [];
                for (var i = 0; i < isCheked.length; i++) {
                    vm.addRegisters.forEach(function (f, number) {
                        if (f.id && isCheked[i].value == f.id) {
                            ids.push(isCheked[i].value);
                            vm.addRegisters.splice(number, 1);
                        }
                    });
                }
                if (ids.length > 0) {
                    addRegisterFileSvc.deleteByIds(ids.join(","), function (data) {
                        bsWin.alert("删除成功！");
                    });
                }
            }
        }
        /******以下是其它资料添加END*****/

        //弹出修改文号信息框
        vm.updateProjCode = function(){
            $("#projCodeWin").kendoWindow({
                width: "660px",
                height: "400px",
                title: "项目文号编辑",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Close"]
            }).data("kendoWindow").center().open();
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('signEndCtrl', sign);

    sign.$inject = ['sysfileSvc','signSvc','$state','flowSvc','$scope','templatePrintSvc'];

    function sign(sysfileSvc,signSvc,$state,flowSvc,$scope,templatePrintSvc) {
        var vm = this;
        vm.title = "已办结项目详情";
        vm.model = {};
        vm.flow = {};
        vm.model.signid = $state.params.signid;   //业务ID
        vm.flow.processInstanceId = $state.params.processInstanceId;	//流程实例ID
        vm.flow.hideFlowImg = true;

        //按钮显示控制，全部归为这个对象控制
        vm.showFlag = {
            tabWorkProgram:false,       // 显示工作方案标签tab
            tabBaseWP:false,            // 项目基本信息tab
            tabDispatch:false,          // 发文信息tab
            tabFilerecord:false,        // 归档信息tab
            tabExpert:false,            // 专家信息tab
            tabSysFile:false,           // 附件信息tab
            tabAssociateSigns:false,    // 关联项目tab
        };

        //业务控制对象
        vm.businessFlag = {
            expertReviews : []
        }
        active();
        function active(){
            $('#myTab li').click(function (e) {
                var aObj = $("a",this);
                e.preventDefault();
                aObj.tab('show');
                var showDiv = aObj.attr("for-div");
                $(".tab-pane").removeClass("active").removeClass("in");
                $("#"+showDiv).addClass("active").addClass("in").show(500);
                vm.model.showDiv = showDiv;
            })

            flowSvc.initFlowData(vm);
            //初始化业务信息
            signSvc.initFlowPageData(vm.model.signid,function(data){
                vm.model = data;
                var deActive = $("#myTab .active");
                var deObj = $("a", deActive);
                vm.model.showDiv = deObj.attr("for-div");
                //发文
                if (vm.model.dispatchDocDto) {
                    vm.showFlag.tabDispatch = true;
                    vm.dispatchDoc = vm.model.dispatchDocDto;
                }
                //归档
                if (vm.model.fileRecordDto) {
                    vm.showFlag.tabFilerecord = true;
                    vm.fileRecord = vm.model.fileRecordDto;
                }

                //初始化专家评分
                if (vm.model.processState > 1) {
                    vm.showFlag.tabWorkProgram=true;        //显示工作方案
                }

                //显示拟补充资料函
                if(vm.model.suppLetterDtoList){
                    vm.showSupperIndex = 0;
                }
                //拟补充资料信息
                if(vm.model.registerFileDtoDtoList!=undefined){
                    vm.supply=[];//拟补充资料
                    vm.registerFile=[];//其他资料
                    vm.drawingFile=[];//图纸资料
                    vm.otherFile=[];//归档的其他资料
                    vm.model.registerFileDtoDtoList.forEach(function(registerFile  , x){
                        if(registerFile.businessType =="3"){
                            vm.supply.push(registerFile);
                        }else if(registerFile.businessType =="2"){
                            vm.drawingFile.push(registerFile);
                        }else if(registerFile.businessType =="1" ||registerFile.businessType =="4"){
                            vm.registerFile.push(registerFile);
                        }else if(registerFile.businessType =="5" ||registerFile.businessType =="6"||registerFile.businessType =="7"){
                            vm.otherFile.push(registerFile);
                        }
                    })
                }
            });

            // 初始化上传附件
            sysfileSvc.findByMianId(vm.model.signid,function(data){
                if(data && data.length > 0){
                    vm.showFlag.tabSysFile = true;
                    vm.sysFileList = data;
                    sysfileSvc.initZtreeClient(vm,$scope);//树形图
                }
            });
        }
        //附件下载
        vm.commonDownloadSysFile = function(sysFileId){
            sysfileSvc.downloadFile(sysFileId);
        }

        //附件在线编辑
        vm.commonEditSysFile = function(sysFileId){
            $("#editSysFileWindow").kendoWindow({
                width: "80%",
                title: "在线编辑",
                content: rootPath + "/file/editFile?sysFileId="+sysFileId,
            });
        }
        //签收模板打印
        vm.printpage = function ($event) {
            templatePrintSvc.templatePrint($event.target,vm.model);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('signFlowSvc', signFlow);

    signFlow.$inject = ['$http', '$state', 'bsWin'];

    function signFlow($http, $state, bsWin) {
        var service = {
            startFlow: startFlow,			            //启动流程
            initBusinessParams: initBusinessParams,	    //初始化业务参数
            checkBusinessFill: checkBusinessFill,	    //检查相应的表单填写
            getChargeDispatch: getChargeDispatch,		//获取发文
            getChargeFilerecord: getChargeFilerecord,	//获取归档信息
            endSignDetail: endSignDetail,                 //已办结的签收信息
        };
        return service;

        //S_startFlow
        function startFlow(signid,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/sign/startNewFlow",
                params: {
                    signid: signid
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_startFlow

        //S_initBusinessParams
        function initBusinessParams(vm) {
            switch (vm.flow.curNode.activitiId) {
                //项目签收环节
                case flowcommon.getSignFlowNode().SIGN_QS:
                    vm.showFlag.businessTr = true;
                    vm.showFlag.nodeSign = true;
                    break;
                //综合部办理
                case flowcommon.getSignFlowNode().SIGN_ZHB:
                    vm.showFlag.buttBack = true;
                    vm.showFlag.businessNext = true;
                    vm.showFlag.nodeSelViceMgr = true;
                    if (vm.flow.businessMap) {
                        vm.viceDirectors = vm.flow.businessMap.viceDirectors;
                    }
                    break;
                //分管领导分办
                case flowcommon.getSignFlowNode().SIGN_FGLD_FB:
                    vm.showFlag.buttBack = true;    //可回退
                    vm.showFlag.businessNext = true;
                   
                    vm.showFlag.nodeSelOrgs = true;
                    if (vm.flow.businessMap) {
                        vm.orgs= vm.flow.businessMap.orgs;
                    }
                    break;
                //部门分办
                case flowcommon.getSignFlowNode().SIGN_BMFB1:
                    vm.businessFlag.isMainBranch = true;
                case flowcommon.getSignFlowNode().SIGN_BMFB2:
                case flowcommon.getSignFlowNode().SIGN_BMFB3:
                case flowcommon.getSignFlowNode().SIGN_BMFB4:
                    vm.showFlag.businessNext = true;
                    vm.showFlag.nodeSelPrincipal = true;
                    if (vm.flow.businessMap && vm.flow.businessMap.users) {
                        vm.users = vm.flow.businessMap.users;
                        vm.users.forEach(function(u,index){
                            u.isSelected = false;
                        });
                    }
                    break;
                //项目负责人办理
                case flowcommon.getSignFlowNode().SIGN_XMFZR1:
                    vm.businessFlag.isMainBranch = true;
                    vm.businessFlag.curBranchId = "1";

                case flowcommon.getSignFlowNode().SIGN_XMFZR2:
                    if(!vm.businessFlag.curBranchId){
                        vm.businessFlag.curBranchId = "2";
                    }
                case flowcommon.getSignFlowNode().SIGN_XMFZR3:
                    if(!vm.businessFlag.curBranchId){
                        vm.businessFlag.curBranchId = "3";
                    }
                case flowcommon.getSignFlowNode().SIGN_XMFZR4:
                    if(!vm.businessFlag.curBranchId){
                        vm.businessFlag.curBranchId = "4";          //计算当前分支，主要是为了控制评审方案的编辑
                    }
                    vm.showFlag.businessTr = true;
                    vm.showFlag.nodeWorkProgram = true;

                    vm.businessFlag.isFinishWP = vm.flow.businessMap.isFinishWP;
                    vm.businessFlag.isNeedWP = vm.flow.businessMap.isNeedWP;

                    //已经在做工作方案，则显示
                    if(vm.model.processState >= 2 ){
                        if(vm.businessFlag.curBranchId == '1' && vm.model.projBaseInfoDto){
                            $("#show_baseinfo_a").click();
                        }else{
                            if(vm.model.workProgramDtoList && vm.model.workProgramDtoList.length > 0){
                                $.each(vm.model.workProgramDtoList,function(i,wp){
                                    if(wp.branchId ==  vm.businessFlag.curBranchId){
                                        vm.businessFlag.editEPReviewId = wp.expertReviewId;
                                    }
                                })
                                vm.businessFlag.editExpertSC = true;        //显示专家评分按钮
                                vm.showFlag.tabWorkProgram = true;
                            }
                        }
                    }
                    if(vm.businessFlag.isFinishWP){
                        $("#show_workprogram_a").click();
                    }else{
                        $("#show_sign_a").click();
                    }
                    break;
                //部长审核工作方案
                case flowcommon.getSignFlowNode().SIGN_BMLD_SPW1:
                case flowcommon.getSignFlowNode().SIGN_BMLD_SPW2:
                case flowcommon.getSignFlowNode().SIGN_BMLD_SPW3:
                case flowcommon.getSignFlowNode().SIGN_BMLD_SPW4:
                //分管领导审批工作方案
                case flowcommon.getSignFlowNode().SIGN_FGLD_SPW1:
                case flowcommon.getSignFlowNode().SIGN_FGLD_SPW2:
                case flowcommon.getSignFlowNode().SIGN_FGLD_SPW3:
                case flowcommon.getSignFlowNode().SIGN_FGLD_SPW4:
                    vm.showFlag.buttBack = true;
                    vm.showFlag.tabWorkProgram = true;
                    $("#show_workprogram_a").click();
                    break;
                //发文
                case flowcommon.getSignFlowNode().SIGN_FW:
                    vm.showFlag.businessTr = true;
                    vm.showFlag.nodeDispatch = true;
                    vm.showFlag.isMainPrinUser = true;      //可以进行专家评分
                    vm.showFlag.expertEdit = true;          //评审费编辑
                    if(vm.flow.businessMap.prilUserList){
                        vm.businessFlag.principalUsers = vm.flow.businessMap.prilUserList;
                        vm.showFlag.businessNext = true;
                    }
                    //已经填报的发文信息，则显示
                    if(vm.model.processState >= 4){
                        vm.showFlag.tabDispatch = true;
                        $("#show_dispatch_a").click();
                    }
                    break;
                //项目负责人确认发文
                case flowcommon.getSignFlowNode().SIGN_QRFW:
                case flowcommon.getSignFlowNode().SIGN_BMLD_QRFW_XB:
                case flowcommon.getSignFlowNode().SIGN_FGLD_QRFW_XB:
                    vm.watchPassDis();
                    vm.showFlag.buttBack = false;
                    vm.showFlag.businessTr = true;
                    vm.showFlag.nodeConfirmDis = true;
                    vm.businessFlag.passDis = '9';  //默认通过
                    vm.showFlag.tabDispatch = true;
                    $("#show_dispatch_a").click();
                    break;
                //部长审批发文
                case flowcommon.getSignFlowNode().SIGN_BMLD_QRFW:
                //分管领导审批发文
                case flowcommon.getSignFlowNode().SIGN_FGLD_QRFW:
                //主任审批发文
                case flowcommon.getSignFlowNode().SIGN_ZR_QRFW:
                    vm.showFlag.buttBack = true;
                    vm.showFlag.tabWorkProgram = true;
                    vm.showFlag.tabDispatch = true;
                    $("#show_dispatch_a").click();
                    break;
                //生成发文编号
                case flowcommon.getSignFlowNode().SIGN_FWBH:
                    vm.showFlag.tabWorkProgram = true;
                    vm.showFlag.tabDispatch = true;
                    $("#show_dispatch_a").click();
                    vm.showFlag.businessTr = true;
                    vm.showFlag.nodeCreateDisNum = true;
                    vm.showFlag.isMainPrinUser = true;      //可以进行专家评分
                    //有第二负责人确认
                    /*if(vm.flow.businessMap.isGotoGD){  //可以进行归档编辑
                        vm.showFlag.showFilecodeBt = true;
                    }*/
                    break;
                //财务办理
                case flowcommon.getSignFlowNode().SIGN_CWBL:
                    vm.showFlag.tabWorkProgram = true;
                    vm.showFlag.tabDispatch = true;
                	vm.showFlag.businessTr = true;
                	vm.showFlag.financialCode = true;
                    break;
                //归档
                case flowcommon.getSignFlowNode().SIGN_GD:
                    vm.showFlag.tabWorkProgram = true;
                    vm.showFlag.tabDispatch = true;
                    vm.showFlag.isMainPrinUser = true;      //可以进行专家评分
                    //有第二负责人确认
                    if(vm.flow.businessMap.checkFileUser){
                        vm.showFlag.businessNext = true;
                    }
                    vm.showFlag.businessTr = true;
                    vm.showFlag.nodeFileRecord = true;
                    if(vm.model.processState > 6){
                        vm.showFlag.tabFilerecord = true;
                        $("#show_filerecord_a").click();
                    }
                    break;
                //第二负责人确认归档
                case flowcommon.getSignFlowNode().SIGN_DSFZR_QRGD:
                    vm.showFlag.tabWorkProgram = true;
                    vm.showFlag.tabDispatch = true;
                    vm.showFlag.tabFilerecord = true;
                    $("#show_filerecord_a").click();
                    vm.showFlag.buttBack = true;
                    break;
                //最终归档
                case flowcommon.getSignFlowNode().SIGN_QRGD:
                    vm.showFlag.tabWorkProgram = true;
                    vm.showFlag.tabDispatch = true;
                    vm.showFlag.tabFilerecord = true;
                    //归档员也可以编辑归档信息
                    vm.showFlag.businessTr = true;
                    vm.showFlag.nodeFileRecord = true;
                    $("#show_filerecord_a").click();
                    vm.showFlag.buttBack = true;
                    vm.showFlag.nodeNext = false;
                    break;
                default:
                    ;
            }
        }//E_initBusinessParams

        //S_checkBusinessFill
        function checkBusinessFill(vm) {
            if(!vm.flow.businessMap){
                vm.flow.businessMap = {};
            }

            //默认通过
            var resultObj = {};
            resultObj.resultTag = true;

            switch (vm.flow.curNode.activitiId) {
                //综合部拟办
                case  flowcommon.getSignFlowNode().SIGN_ZHB:
                    if ($("#viceDirector").val()) {
                        vm.flow.businessMap.FGLD = $("#viceDirector").val();
                    } else {
                        resultObj.resultTag = false;
                    }
                    break;
                //分管领导审批，要选择主办部门
                case flowcommon.getSignFlowNode().SIGN_FGLD_FB:
                    resultObj.resultTag = false;
                    $('.seleteTable input[selectType="main"]:checked').each(function () {
                        vm.flow.businessMap.MAIN_ORG = $(this).val();
                        resultObj.resultTag = true;
                    });
                    if(resultObj.resultTag){
                        var assistOrgArr = [];
                        $('.seleteTable input[selectType="assist"]:checked').each(function () {
                            assistOrgArr.push($(this).val())
                        });
                        if(assistOrgArr.length > 3){
                            resultObj.resultTag = false;
                            resultObj.resultMsg = "协办部门最多只能选择3个！";
                        }else{
                            vm.flow.businessMap.ASSIST_ORG = assistOrgArr.join(',');
                        }
                    }else{
                        resultObj.resultMsg = "主办部门不为空！";
                    }
                    break;
                //部门分办，要选择办理人员
                case flowcommon.getSignFlowNode().SIGN_BMFB1:
                    //如果是协审流程
                    if(vm.model.isassistflow && (vm.model.isassistflow == 9 || vm.model.isassistflow == '9')){
                        if(!vm.businessFlag.principalUsers || vm.businessFlag.principalUsers.length == 0){
                            resultObj.resultTag = false;
                            resultObj.resultMsg = "请先选择项目负责人！";
                        }else{
                            resultObj.resultTag = false;
                            $.each(vm.businessFlag.principalUsers,function(i,pu){
                                if(pu.isMainUser == '9' || pu.isMainUser == 9){
                                    resultObj.resultTag = true;
                                }
                            })
                            if(!resultObj.resultTag){
                                resultObj.resultMsg = "必须要选择一个第一负责人！";
                            }
                        }
                        if(resultObj.resultTag){
                            vm.flow.businessMap.PRINCIPAL = vm.businessFlag.principalUsers;
                        }
                    //如果不是
                    }else{
                        //主办才有第一负责人，协办的全是第二负责人
                        var selUserId = $("#selPrincipalMainUser").val();
                        if (!selUserId) {
                            resultObj.resultTag = false;
                            resultObj.resultMsg = "必须要选择一个第一负责人！";
                            break;
                        }
                        resultObj.resultTag = true;
                        vm.flow.businessMap.M_USER_ID = selUserId;
                        //判断选择第二负责人
                        var assistIdArr = [];
                        $('#principalAssistUser input[selectType="assistUser"]:checked').each(function () {
                            assistIdArr.push($(this).val());
                        });
                        if (assistIdArr.length > 0) {
                            vm.flow.businessMap.A_USER_ID = assistIdArr.join(',');
                        }
                    }
                    break;
                case flowcommon.getSignFlowNode().SIGN_BMFB2:
                case flowcommon.getSignFlowNode().SIGN_BMFB3:
                case flowcommon.getSignFlowNode().SIGN_BMFB4:
                    //如果是协审流程
                    if(vm.model.isassistflow && (vm.model.isassistflow == 9 || vm.model.isassistflow == '9')){
                        if(!vm.businessFlag.principalUsers || vm.businessFlag.principalUsers.length == 0){
                            resultObj.resultTag = false;
                            resultObj.resultMsg = "请先选择项目负责人！";
                        }
                        if(resultObj.resultTag){
                            vm.flow.businessMap.PRINCIPAL = vm.businessFlag.principalUsers;
                        }
                    //如果不是
                    }else {
                        var assistIdArr = [];
                        $('#principalAssistUser input[selectType="assistUser"]:checked').each(function () {
                            assistIdArr.push($(this).val());
                        });
                        if (assistIdArr.length > 0) {
                            vm.flow.businessMap.A_USER_ID = assistIdArr.join(',');
                        }else{
                            resultObj.resultTag = false;
                            resultObj.resultMsg = "必须要选择负责人！";
                        }
                    }
                    break;
                case flowcommon.getSignFlowNode().SIGN_XMFZR1:
                case flowcommon.getSignFlowNode().SIGN_XMFZR2:
                case flowcommon.getSignFlowNode().SIGN_XMFZR3:
                case flowcommon.getSignFlowNode().SIGN_XMFZR4:
                    /*if(vm.businessFlag.isNeedWP == 9 && vm.businessFlag.isFinishWP == false){
                        resultObj.resultTag = false;
                        resultObj.resultMsg = "您还没有完成工作方案，不能进行下一步操作！";
                    }*/
                    vm.flow.businessMap.IS_NEED_WP = vm.businessFlag.isNeedWP;
                    break;
                //部长审核工作方案
                case flowcommon.getSignFlowNode().SIGN_BMLD_SPW1:
                case flowcommon.getSignFlowNode().SIGN_BMLD_SPW2:
                case flowcommon.getSignFlowNode().SIGN_BMLD_SPW3:
                case flowcommon.getSignFlowNode().SIGN_BMLD_SPW4:
                   break;
                //分管领导审核工作方案
                case flowcommon.getSignFlowNode().SIGN_FGLD_SPW1:
                case flowcommon.getSignFlowNode().SIGN_FGLD_SPW2:
                case flowcommon.getSignFlowNode().SIGN_FGLD_SPW3:
                case flowcommon.getSignFlowNode().SIGN_FGLD_SPW4:
                    break;
                //发文申请
                case flowcommon.getSignFlowNode().SIGN_FW:
                    if(vm.model.processState < 4){
                        resultObj.resultTag = false;
                        resultObj.resultMsg = "您还没完成发文操作，不能进行下一步操作！";
                    }
                    vm.flow.businessMap.DIS_ID = vm.dispatchDoc.id;
                    break;
                //项目负责人确认发文
                case flowcommon.getSignFlowNode().SIGN_QRFW:
                case flowcommon.getSignFlowNode().SIGN_BMLD_QRFW_XB:
                case flowcommon.getSignFlowNode().SIGN_FGLD_QRFW_XB:
                    if(vm.businessFlag.passDis == '9' || vm.businessFlag.passDis == 9){
                        vm.flow.businessMap.AGREE = '9';
                    }else{
                        vm.flow.businessMap.AGREE = '0';
                    }
                    vm.flow.businessMap.DIS_ID = vm.dispatchDoc.id;
                    break;
                //部长审批发文
                case flowcommon.getSignFlowNode().SIGN_BMLD_QRFW_XB:
                case flowcommon.getSignFlowNode().SIGN_BMLD_QRFW:
                //分管领导审批发文
                case flowcommon.getSignFlowNode().SIGN_FGLD_QRFW_XB:
                case flowcommon.getSignFlowNode().SIGN_FGLD_QRFW:
                //主任审批发文
                case flowcommon.getSignFlowNode().SIGN_ZR_QRFW:
                    vm.flow.businessMap.DIS_ID = vm.dispatchDoc.id;
                    break;
                //生成发文编号
                case flowcommon.getSignFlowNode().SIGN_FWBH:
                    vm.flow.businessMap.DIS_ID = vm.dispatchDoc.id;
                    break;
                //财务办理
                case flowcommon.getSignFlowNode().SIGN_CWBL:
                    break;
                //归档
                case flowcommon.getSignFlowNode().SIGN_GD:
                /*    if(vm.model.processState < 7 ){
                        resultObj.resultTag = false;
                        resultObj.resultMsg = "您还没完成归档操作，不能进行下一步操作！";
                    }*/
                    break;
                //第二负责人确认归档
                case flowcommon.getSignFlowNode().SIGN_DSFZR_QRGD:
                    vm.flow.businessMap.GD_ID = vm.fileRecord.fileRecordId;
                    break;
                //最终归档
                case flowcommon.getSignFlowNode().SIGN_QRGD:
                    vm.flow.businessMap.GD_ID = vm.fileRecord.fileRecordId;
                    break;
                default:
                    ;
            }

            return resultObj;
        }//E_checkBusinessFill

        //S_getChargeDispatch
        function getChargeDispatch(vm) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/dispatch/html/initDispatchBySignId",
                params: {signId: vm.model.signid}
            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        vm.dispatchDoc = response.data;
                        $("#show_dispatch_a").click();
                    }
                });
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_getChargeDispatch

        //S_getChargeFilerecord
        function getChargeFilerecord(vm) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/fileRecord/html/initBySignId",
                params: {signId: vm.model.signid}
            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        vm.fileRecord = response.data;
                        $("#show_filerecord_a").click();
                    }
                });
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_getChargeFilerecord

        //S_endSignDetail
        function endSignDetail(vm) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/sign/html/initDetailPageData",
                params: {signid: vm.model.signid, queryAll: true}
            }

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        vm.model = response.data;
                        if (vm.model.workProgramDtoList && vm.model.workProgramDtoList.length > 0) {
                            vm.show_workprogram = true;
                            vm.model.workProgramDtoList.forEach(function (w, index) {
                                if (w.isMain == 9) {
                                    vm.showMainwork = true;
                                    vm.mainwork = {};
                                    vm.mainwork = w;
                                } else if (w.isMain == 0) {
                                    vm.showAssistwork = true;
                                    vm.assistwork = {};
                                    vm.assistwork = w;
                                }
                            });
                        }
                        if (vm.model.dispatchDocDto) {
                            vm.show_dispatch = true;
                            vm.dispatchDoc = vm.model.dispatchDocDto;
                        }
                        if (vm.model.fileRecordDto) {
                            vm.show_filerecord = true;
                            vm.fileRecord = vm.model.fileRecordDto;
                        }
                    }
                })
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_endSignDetail

    }//E_signFlow
})();
(function () {
    'use strict';

    angular.module('app').controller('signFlowDealCtrl', sign);

    sign.$inject = ['sysfileSvc', 'signSvc', 'dispatchSvc', '$state', 'flowSvc', 'signFlowSvc', 'ideaSvc',
        'workprogramSvc', 'expertReviewSvc', '$scope', 'bsWin', 'financialManagerSvc', 'addSuppLetterQuerySvc',
        'addCostSvc', 'templatePrintSvc', 'companySvc' , 'expertSvc'];

    function sign(sysfileSvc, signSvc, dispatchSvc, $state, flowSvc, signFlowSvc, ideaSvc, workprogramSvc,
                  expertReviewSvc, $scope, bsWin, financialManagerSvc, addSuppLetterQuerySvc, addCostSvc, templatePrintSvc, companySvc , expertSvc) {

        var vm = this;
        vm.title = "项目流程处理";
        vm.model = {};          //收文对象
        vm.flow = {};           //流程对象
        vm.mainwork = {};       //主工作方案
        vm.assistwork = {};     //协工作方案
        vm.dispatchDoc = {};    //发文
        vm.fileRecord = {};     //归档
        vm.expertReview = {};   //评审方案
        vm.queryParams = {};  //返回时。列表数据不变
        vm.work = {};
        vm.isDisplay = true;   //附件显示删除按钮
        vm.reworkWorkPlanObject = {};   //发文:重写工作方案
        vm.expertList = new Array(15); //用于打印页面的专家列表，控制行数
        //按钮显示控制，全部归为这个对象控制
        vm.showFlag = {
            businessTr: false,          //显示业务办理tr
            businessDis: false,         //显示直接发文复选框
            businessNext: false,        //显示下一环节处理人或者部门

            nodeNext: true,           //下一环节名称
            nodeSelViceMgr: false,      // 选择分管副主任环节
            nodeSelOrgs: false,         // 选择分管部门
            nodeSelPrincipal: false,    // 选择项目负责人
            isMainBranch: false,        // 选择第一负责人
            nodeSign: false,            // 项目签收
            nodeWorkProgram: false,     // 工作方案
            nodeDispatch: false,        // 发文
            nodeConfirmDis: false,      // 确认发文
            nodeCreateDisNum: false,    // 生成发文编号
            nodeFileRecord: false,      // 归档
            nodeXSWorkProgram: false,   // 协审工作方案

            tabWorkProgram: false,       // 显示工作方案标签tab
            tabBaseWP: false,            // 项目基本信息tab
            tabDispatch: false,          // 发文信息tab
            tabFilerecord: false,        // 归档信息tab
            tabExpert: false,            // 专家信息tab
            tabSysFile: false,           // 附件信息tab

            buttBack: false,             // 回退按钮
            expertRemark: false,         // 专家评分弹窗内容显示
            expertpayment: false,        // 专家费用弹窗内容显示
            expertEdit: false,            // 专家评分费用编辑权限
            isMainPrinUser: false,        // 是否是第一负责人
            showFilecodeBt : false ,         //显示归档按钮
            showReworkWorkPlanBt : false          //显示重写工作方案按钮
        };

        //业务控制对象
        vm.businessFlag = {
            isLoadSign: false,         // 是否加载收文信息
            isLoadFlow: false,         // 是否加载流程信息
            isGotoDis: false,          // 是否直接发文
            isMakeDisNum: false,       // 是否生成发文编号
            principalUsers: [],         // 负责人列表
            isSelMainPriUser: false,     // 是否已经设置主要负责人
            editExpertSC: false,       // 编辑专家评审费和评分,只有专家评审方案环节才能编辑
            expertScore: {},              // 专家评分对象
            isNeedWP: 9,                // 是否需要工作方案
            isMainBranch: false,       // 是否是主分支流程
            isFinishWP: false,         // 是否完成了工作方案
            passDis: false,              // 发文是否通过
            curBranchId: "",              // 当前流程分支
            editEPReviewId: "",           // 可以编辑的评审方案ID
            isReworkWorkPlan: false,              // 是否重写工作方案对象
        }
        vm.model.signid = $state.params.signid;
        vm.work.id = $state.params.id;
        vm.flow.taskId = $state.params.taskId; // 流程任务ID
        vm.flow.processInstanceId = $state.params.processInstanceId; // 流程实例ID

        vm.signId = vm.model.signid;
        vm.expertList = new Array(10); //用于打印页面的专家列表，控制行数
        vm.curDate = "";  //当前日期

        active();
        function active() {
            // debugger;
            $('#myTab li').click(function (e) {
                var aObj = $("a", this);
                e.preventDefault();
                aObj.tab('show');
                var showDiv = aObj.attr("for-div");
                $(".tab-pane").removeClass("active").removeClass("in");
                $("#" + showDiv).addClass("active").addClass("in").show(500);
                vm.model.showDiv = showDiv;
            })

            //初始化附件控件
            vm.sysFile = {
                businessId: $state.params.signid,
                mainId: $state.params.signid,
                mainType: sysfileSvc.mainTypeValue().SIGN,
                sysfileType: sysfileSvc.mainTypeValue().FILLSIGN,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm,
                uploadSuccess: function () {
                    sysfileSvc.findByMianId(vm.model.signid, function (data) {
                        if (data && data.length > 0) {
                            vm.showFlag.tabSysFile = true;
                            vm.sysFileList = data;
                            sysfileSvc.initZtreeClient(vm, $scope);//树形图
                        }
                    });
                }
            });
            // 初始化业务信息
            signSvc.initFlowPageData(vm.model.signid, function (data) {

                vm.model = data;
                vm.curDate = data.curDate;
                var deActive = $("#myTab .active");
                var deObj = $("a", deActive);
                vm.model.showDiv = deObj.attr("for-div");

                //判断是否有工作方案,并且是正在发文环节的，有工作方案则显示会前材料按钮
                if (vm.model.processState == 3 || vm.model.processState == 4) {
                    vm.showMeterial = true;
                }
                //发文
                if (vm.model.dispatchDocDto) {
                    vm.showFlag.tabDispatch = true;
                    vm.dispatchDoc = vm.model.dispatchDocDto;
                    //如果是合并发文次项目，则不用生成发文编号
                    if ((vm.dispatchDoc.dispatchWay == 2 && vm.dispatchDoc.isMainProject == 0)|| vm.dispatchDoc.fileNum) {
                        vm.businessFlag.isCreateDisFileNum = true;
                    } else {
                        vm.showFlag.buttDisFileNum = true;
                    }
                    //如果是合并发文主项目，要获取合并项目信息
                    if(vm.dispatchDoc.dispatchWay == 2 && vm.dispatchDoc.isMainProject == 9){
                        dispatchSvc.findMergeDis(vm.model.signid,function(data){
                            if(data){
                                vm.mergeDisDtoList = data;
                            }
                        })
                    }
                }

                //归档
                if (vm.model.fileRecordDto) {
                    vm.showFlag.tabFilerecord = true;
                    vm.fileRecord = vm.model.fileRecordDto;
                }

                //判断是否有多个分支，用于控制是否显示总投资字段 和 分开获取关联的项目信息（主要用于项目概算阶段）（旧版本）
                //通过评估部门的个数来控制总投资字段  修改于（2018-01-16）
                if (vm.model.workProgramDtoList && vm.model.workProgramDtoList.length > 0) {
                    var orgStr;
                    if (vm.model.workProgramDtoList[0].branchId == '1') {
                        orgStr = vm.model.workProgramDtoList[0].reviewOrgName;
                    } else {
                        orgStr = vm.model.workProgramDtoList[0].mainWorkProgramDto.reviewOrgName;
                    }

                    if (orgStr && orgStr.split(',').length > 1) {
                        vm.showTotalInvestment = true;
                    }

                    //进行专家的专业类别拼接
                    for (var i = 0; i < vm.model.workProgramDtoList.length; i++) {
                        var workProgramDtoList = vm.model.workProgramDtoList;//进行存值
                        //判断下是否有拟请的专家
                        if (workProgramDtoList[i].expertDtoList) {
                            var expertDtoList = workProgramDtoList[i].expertDtoList;//进行存值
                            for (var j = 0; j < expertDtoList.length; j++) {
                                //判断下专家是否有专业类别
                                if (expertDtoList[j].expertTypeDtoList) {
                                    var expertTypeList = expertDtoList[j].expertTypeDtoList;//进行存值
                                    var major = "";//专业
                                    var expertCategory = ""//专业类别
                                    for (var k = 0; k < expertTypeList.length; k++) {
                                        if (expertCategory.indexOf(expertTypeList[k].expertType) < 0) {
                                            if (k > 0) {
                                                expertCategory += "、"
                                            }
                                            expertCategory += expertTypeList[k].expertType;
                                        }
                                        if (k > 0) {
                                            major += "、"
                                        }
                                        major += expertTypeList[k].maJorBig + "、" + expertTypeList[k].maJorSmall;

                                    }
                                    expertDtoList[j].expertCategory = expertCategory;
                                    expertDtoList[j].major = major;
                                }
                            }
                        }
                    }
                }

                //更改状态,并初始化业务参数
                vm.businessFlag.isLoadSign = true;
                if (vm.businessFlag.isLoadSign && vm.businessFlag.isLoadFlow) {
                    signFlowSvc.initBusinessParams(vm);
                }

                //显示拟补充资料函
                if (vm.model.suppLetterDtoList) {
                    vm.showSupperIndex = 0;
                }
                //拟补充资料信息
                if (vm.model.registerFileDtoDtoList != undefined) {
                    vm.supply = [];//拟补充资料
                    vm.registerFile = [];//其他资料
                    vm.drawingFile = [];//图纸资料
                    vm.otherFile = [];//归档的其他资料
                    vm.model.registerFileDtoDtoList.forEach(function (registerFile, x) {
                        if (registerFile.businessType == 3/* || registerFile.businessType =="5"
                            ||registerFile.businessType =="6"||registerFile.businessType =="7"*/) {
                            vm.supply.push(registerFile);
                            vm.otherFile.push(registerFile);
                        } else if (registerFile.businessType == 2) {
                            vm.drawingFile.push(registerFile);
                        } else if (registerFile.businessType == 1 || registerFile.businessType == 4) {
                            vm.registerFile.push(registerFile);
                        } else if ( registerFile.businessType == 5 || registerFile.businessType == 6 || registerFile.businessType == 7) {
                            vm.otherFile.push(registerFile);
                        }
                    })
                }
            });

            // 初始化流程数据
            flowSvc.getFlowInfo(vm.flow.taskId, vm.flow.processInstanceId, function (data) {
                vm.flow = data;
                //如果任务ID为空，说明任务已经被处理
                if (vm.flow.taskId) {
                    //如果是结束环节，则不显示下一环节信息
                    if (vm.flow.end) {
                        vm.showFlag.nodeNext = false;
                    }
                    //更改状态,并初始化业务参数
                    vm.businessFlag.isLoadFlow = true;
                    if (vm.businessFlag.isLoadSign && vm.businessFlag.isLoadFlow) {
                        signFlowSvc.initBusinessParams(vm);
                    }
                } else {
                    bsWin.alert("该任务已处理！", function () {
                        $state.go('gtasks');
                    });
                }
            });
            // 初始化办理信息
            flowSvc.initFlowData(vm);

            // 初始化上传附件
            sysfileSvc.findByMianId(vm.model.signid, function (data) {
                if (data && data.length > 0) {
                    vm.showFlag.tabSysFile = true;
                    vm.sysFileList = data;
                    sysfileSvc.initZtreeClient(vm, $scope);//树形图
                }
            });
            /**
             * 删除附件
             * @param fileId
             */
            vm.delFile = function (fileId) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "确认删除么？",
                    onOk: function () {
                        sysfileSvc.delSysFile(fileId, function () {
                            bsWin.alert("删除成功", function () {
                                sysfileSvc.findByMianId(vm.model.signid, function (data) {
                                    if (data && data.length > 0) {
                                        vm.showFlag.tabSysFile = true;
                                        vm.sysFileList = data;
                                        sysfileSvc.initZtreeClient(vm, $scope);//树形图
                                    } else {
                                        vm.showFlag.tabSysFile = false;
                                        $('#myTab a:first').tab('show');// 选取第一个标签页
                                        //打开标签页
                                        $(".tab-pane").removeClass("active").removeClass("in");
                                        $("#sign_detail").addClass("active").addClass("in").show(500);
                                    }
                                });
                            })
                        });
                    }
                });

            }
            //初始化个人常用意见
            ideaSvc.initIdea(vm);
        }

        /***************  S_评审意见管理  ***************/
        // begin 管理个人意见
        vm.ideaEdit = function (options) {
            // debugger;
            if (!angular.isObject(options)) {
                options = {};
            }
            ideaSvc.initIdeaData(vm, options);
        }

        //选择个人常用意见
        vm.selectedIdea = function () {
            // debugger;
            vm.flow.dealOption = vm.chooseIdea;
        }
        /***************  E_评审意见管理  ***************/

        /***************  S_专家评分，评审费发放  ***************/
        // 编辑专家评分
        vm.editSelectExpert = function (id) {
            // debugger;
            vm.scoreExpert = {};
            $.each(vm.model.expertReviewDto.expertSelectedDtoList, function (i, scopeEP) {
                if (scopeEP.id == id) {
                    vm.scoreExpert = angular.copy(scopeEP);
                    return;
                }
            })

            $("#star_" + vm.scoreExpert.id).raty({
                number: 5,
                score: function () {
                    $(this).attr("data-num", angular.isUndefined(vm.scoreExpert.score) ? 0 : vm.scoreExpert.score);
                    return $(this).attr("data-num");
                },
                starOn: '../contents/libs/raty/lib/images/star-on.png',
                starOff: '../contents/libs/raty/lib/images/star-off.png',
                starHalf: '../contents/libs/raty/lib/images/star-half.png',
                readOnly: false,
                halfShow: true,
                hints: ['不合格', '合格', '中等', '良好', '优秀'],
                size: 34,
                click: function (score, evt) {
                    vm.scoreExpert.score = score;
                }
            });

            $("#score_win").kendoWindow({
                width: "820px",
                height: "365px",
                title: "编辑-专家星级",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Close"]
            }).data("kendoWindow").center().open();
        }


        // 关闭专家评分
        vm.closeEditMark = function () {
            window.parent.$("#score_win").data("kendoWindow").close();
        }

        // 保存专家评分
        vm.saveMark = function () {
            if (!vm.scoreExpert.score || vm.scoreExpert.score == 0) {
                bsWin.alert("请对专家进行评分！");
            } else {
                expertReviewSvc.saveMark(vm.scoreExpert, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        angular.forEach(vm.model.expertReviewDto.expertSelectedDtoList, function (scopeEP, index) {
                            if (scopeEP.id == vm.scoreExpert.id) {
                                scopeEP.score = vm.scoreExpert.score;
                                scopeEP.describes = vm.scoreExpert.describes;
                            }
                        })
                        bsWin.success("保存成功！", function () {
                            vm.closeEditMark();
                        });
                    } else {
                        bsWin.alert(data.reMsg);
                    }

                });
            }
        }

        /**
         * 计算应纳税额(日期以【函评日期/评审会日期】为准)
         * @param expertReview
         */
        vm.countTaxes = function (expertReview) {
            if (expertReview == undefined) {
                return;
            }
            if (expertReview.expertSelectedDtoList == undefined || expertReview.expertSelectedDtoList.length == 0) {
                bsWin.alert("该方案还没有选择评审专家，请先选取评审专家！");
                return;
            }
            if (expertReview.reviewDate == undefined) {
                bsWin.alert("(函评/评审会)日期为空，无法进行专家纳税计算，请联系系统管理员处理！");
                return;
            }
            var reg = /^(\d{4}-\d{1,2}-\d{1,2})$/;
            if (!reg.exec(expertReview.reviewDate)) {
                bsWin.alert("请输入正确的日期格式");
                return;
            }
            //设置一个评审费发放日期默认值
            if (!expertReview.payDate) {
                expertReview.payDate = vm.curDate;
            }
            common.initJqValidation($('#payform'));
            var isValid = $('#payform').valid();
            if (isValid) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "确认提交么？提交之后不可修改，请核对正确。",
                    onOk: function () {
                        //自动保存
                        expertReviewSvc.savePayment(expertReview, vm.isCommit,true, function (data) {
                            if (data.flag || data.reCode == "ok") {
                                var resultMap = data.reObj, totalCost = 0, totaoTaxes = 0;
                                for (var k = 0, lk = expertReview.expertSelectedDtoList.length; k < lk; k++) {
                                    var v = expertReview.expertSelectedDtoList[k];
                                    if ((v.isConfrim == '9' || v.isConfrim == 9) && (v.isJoin == '9' || v.isJoin == 9)) {
                                        for (var i = 0, l = resultMap.length; i < l; i++) {
                                            var epId = resultMap[i].EXPERTID;
                                            if (v.expertDto.expertID == epId) {
                                                v.reviewTaxes = parseFloat(resultMap[i].MONTAXES == undefined ? 0 : resultMap[i].MONTAXES).toFixed(2);
                                                v.totalCost = (parseFloat(v.reviewCost) + parseFloat(v.reviewTaxes)).toFixed(2);
                                                totalCost = parseFloat(totalCost) + parseFloat(v.reviewCost);
                                                totaoTaxes = parseFloat(totaoTaxes) + parseFloat(v.reviewTaxes);
                                            }
                                        }
                                    }
                                }

                                expertReview.reviewCost = parseFloat(totalCost).toFixed(2);
                                expertReview.reviewTaxes = parseFloat(totaoTaxes).toFixed(2);
                                expertReview.totalCost = (parseFloat(totalCost) + parseFloat(totaoTaxes)).toFixed(2);
                                bsWin.alert("操作成功！", function () {
                                    vm.isCommit = false;
                                    expertReview.state = '9';
                                });
                            } else {
                                bsWin.alert(data.reMsg);
                            }
                        });
                    }
                });
            } else {
                bsWin.alert("请正确填写专家评审费信息！");
            }
        }

        // 关闭专家费用
        vm.closeEditPay = function () {
            window.parent.$("#payment").data("kendoWindow").close();
        }

        /**
         * 保存评审费，不包括计税
         * @param expertReview
         */
        vm.savePayment = function(expertReview){
            if (expertReview == undefined) {
                return;
            }
            if (expertReview.expertSelectedDtoList == undefined || expertReview.expertSelectedDtoList.length == 0) {
                bsWin.alert("该方案还没有选择评审专家，请先选取评审专家！");
                return;
            }
            common.initJqValidation($('#payform'));
            var isValid = $('#payform').valid();
            if (isValid) {
                //自动保存
                expertReviewSvc.savePayment(expertReview, vm.isCommit,false, function (data) {
                    if (data.flag || data.reCode == "ok") {
                        var resultMap = data.reObj, totalCost = 0, totaoTaxes = 0;
                        for (var k = 0, lk = expertReview.expertSelectedDtoList.length; k < lk; k++) {
                            var v = expertReview.expertSelectedDtoList[k];
                            if ((v.isConfrim == '9' || v.isConfrim == 9) && (v.isJoin == '9' || v.isJoin == 9)) {
                                for (var i = 0, l = resultMap.length; i < l; i++) {
                                    var epId = resultMap[i].EXPERTID;
                                    if (v.expertDto.expertID == epId) {
                                        v.reviewTaxes = parseFloat(resultMap[i].MONTAXES == undefined ? 0 : resultMap[i].MONTAXES).toFixed(2);
                                        v.totalCost = (parseFloat(v.reviewCost) + parseFloat(v.reviewTaxes)).toFixed(2);
                                        totalCost = parseFloat(totalCost) + parseFloat(v.reviewCost);
                                        totaoTaxes = parseFloat(totaoTaxes) + parseFloat(v.reviewTaxes);
                                    }
                                }
                            }
                        }

                        expertReview.reviewCost = parseFloat(totalCost).toFixed(2);
                        expertReview.reviewTaxes = parseFloat(totaoTaxes).toFixed(2);
                        expertReview.totalCost = (parseFloat(totalCost) + parseFloat(totaoTaxes)).toFixed(2);
                        bsWin.alert("操作成功！", function () {
                            vm.isCommit = false;
                        });
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("请正确填写专家评审费信息！");
            }
        }
        /***************  E_专家评分，评审费发放  ***************/

        /*****************S_单位评分******************/
        vm.editUnitScore = function (id) {
            $("#star").raty({
                number: 5,
                score: function () {
                    $(this).attr("data-num", angular.isUndefined(vm.model.unitScoreDto.score) ? 0 : vm.model.unitScoreDto.score);
                    return $(this).attr("data-num");
                },
                starOn: '../contents/libs/raty/lib/images/star-on.png',
                starOff: '../contents/libs/raty/lib/images/star-off.png',
                starHalf: '../contents/libs/raty/lib/images/star-half.png',
                readOnly: false,
                halfShow: true,
                hints: ['不合格', '合格', '中等', '良好', '优秀'],
                size: 34,
                click: function (score, evt) {
                    vm.model.unitScoreDto.score = score;
                }
            });

            $("#unitscore_win").kendoWindow({
                width: "820px",
                height: "365px",
                title: "编辑-单位星级",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Close"]
            }).data("kendoWindow").center().open();

        }
        //保存单位评分
        vm.saveUnit = function () {
            if (!vm.model.unitScoreDto.score || vm.model.unitScoreDto.score == 0) {
                bsWin.alert("请对单位进行评分！");
            } else {
                companySvc.saveUnit(vm.model.unitScoreDto, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        bsWin.success("保存成功！", function () {
                            vm.closeEditUnit();
                        });
                    } else {
                        bsWin.alert(data.reMsg);
                    }

                });
            }

        }
        // 关闭单位评分
        vm.closeEditUnit = function () {
            window.parent.$("#unitscore_win").data("kendoWindow").close();
        }

        /*****************E_单位评分******************/

        /***************  S_流程处理 ***************/
        //流程提交
        vm.commitNextStep = function () {
            vm.activitiName =  vm.flow.curNode.activitiName;

            if (vm.flow.isSuspended) {
                bsWin.error("该流程目前为暂停状态，不能进行流转操作！");
                return;
            } else {
                var checkResult = signFlowSvc.checkBusinessFill(vm);
                if (checkResult.resultTag) {

                    flowSvc.commit(vm.isCommit, vm.flow, function (data) {
                        if (data.flag || data.reCode == "ok") {
                            if(vm.activitiName == "确认归档") {
                                
                                vm.isFileRecord = true;
                            }
                            bsWin.success("操作成功！", function () {
                                if(!vm.isFileRecord){
                                    $state.go('gtasks');
                                }

                            })
                        } else {
                            bsWin.alert(data.reMsg);
                        }
                    });
                } else {
                    bsWin.alert(checkResult.resultMsg);
                }
            }
        }

        //S_流程回退
        vm.commitBack = function () {
            common.initJqValidation($("#flow_form"));
            var isValid = $("#flow_form").valid();
            if (isValid) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "确认回退吗？",
                    onOk: function () {
                        flowSvc.rollBackToLast(vm.flow, vm.isCommit, function (data) {
                            if (data.flag || data.reCode == "ok") {
                                vm.isCommit = false;
                                bsWin.alert("回退成功！", function () {
                                    $state.go('gtasks');
                                });
                            } else {
                                bsWin.alert(data.reMsg);
                            }
                        }); // 回退到上一个环节
                    }
                });
            }
        }

        vm.deleteFlow = function () {
            bsWin.confirm({
                title: "询问提示",
                message: "终止流程将无法恢复，确认删除么？？",
                onOk: function () {
                    $('.confirmDialog').modal('hide');
                    flowSvc.deleteFlow(vm);
                }
            });
        }
        /***************  E_流程处理 ***************/

        //编辑审批登记表
        vm.editSign = function () {
            $state.go('fillSign', {signid: vm.model.signid});
        }
        // S_跳转到 工作方案 编辑页面
        vm.addWorkProgram = function () {
            $state.go('flowWPEdit', {signid: vm.model.signid,taskid:vm.flow.taskId});
        }// E_跳转到 工作方案 编辑页面

        // S_跳转到 项目基本信息 编辑页面
        vm.addBaseInfo = function(){
            $state.go('initProjBase', {signid: vm.model.signid,isadmin:null});
        }// E_跳转到 项目基本信息 编辑页面

        //S_链接到拟补充资料函
        vm.addSuppLetter = function () {
            addSuppLetterQuerySvc.checkIsApprove(vm.model.signid,"1",function(data){
                if(data.flag || data.reCode == 'ok'){
                    $state.go('addSupp', {businessId: vm.model.signid, businessType: "SIGN"});
                }else{
                    bsWin.confirm({
                        title: "询问提示",
                        message: "该项目还有拟补充资料函未审批完成，确定要新增拟补充资料函么？如果要修改拟补充资料函，请到“查询统计”->“拟补充资料函查询”菜单进行修改即可！",
                        onOk: function () {
                            $state.go('addSupp', {businessId: vm.model.signid, businessType: "SIGN"});
                        }
                    });
                }
            });


        }// E_跳转到 拟补充资料函 编辑页面

        //S 拟补充资料函列表
        vm.addSuppLetterList = function () {
            $state.go('addSuppletterList', {businessId: vm.model.signid});
        }
        //E 拟补充资料函列表

        //S_工作方案  --链接到  登记表补充资料
        vm.addRegisterFile = function () {
            // debugger;
            /*$("#associateWindow").kendoWindow({
             width: "80%",
             height: "800px",
             title: "项目关联",
             visible: false,
             modal: true,
             closable: true,
             actions: ["Pin", "Minimize", "Maximize", "close"],
             }).data("kendoWindow").center().open();*/
            $state.go('registerFile', {businessId: vm.model.signid});
        }// E_工作方案  --链接到  登记表补充资料

        //S_跳转到 工作方案 基本信息
        vm.addBaseWP = function () {
            $state.go('workprogramBaseEdit', {signid: vm.model.signid});
        }


        // S_跳转到 发文 编辑页面
        vm.addDisPatch = function () {
            //如果是未关联，并且是可研或者概算阶段，提醒是否要关联
            if ((!vm.model.isAssociate || vm.model.isAssociate == 0) &&
                (signcommon.getReviewStage().STAGE_STUDY == vm.model.reviewstage
                || signcommon.getReviewStage().STAGE_BUDGET == vm.model.reviewstage)) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "该项目还没进行项目关联，是否需要进行关联设置？",
                    onOk: function () {
                        if (!vm.ss) {
                            vm.page = lgx.page.init({
                                id: "demo5", get: function (o) {
                                    //根据项目名称，查询要关联阶段的项目
                                    if (!vm.price) {
                                        vm.price = {
                                            signid: vm.model.signid,
                                            mUserName: vm.model.mUserName,
                                        };
                                    }
                                    vm.price.reviewstage = vm.model.reviewstage; //设置评审阶段
                                    var skip;
                                    //oracle的分页不一样。
                                    if (o.skip != 0) {
                                        skip = o.skip + 1
                                    } else {
                                        skip = o.skip
                                    }
                                    vm.price.skip = skip;//页码
                                    vm.price.size = o.size + o.skip;//页数
                                    signSvc.getAssociateSignGrid(vm, function (data) {
                                        vm.associateSignList = [];
                                        if (data) {
                                            vm.noassociateSign = false;
                                            vm.associateSignList = data.value;
                                            vm.page.callback(data.count);//请求回调时传入总记录数
                                        }else{
                                            vm.noassociateSign = true;
                                        }
                                    });
                                }
                            });
                            vm.ss = true;
                        } else {
                            vm.page.selPage(1);
                        }
                        //选中要关联的项目
                        $("#associateWindow").kendoWindow({
                            width: "80%",
                            height: "800px",
                            title: "项目关联",
                            visible: false,
                            modal: true,
                            closable: true,
                            actions: ["Pin", "Minimize", "Maximize", "close"],
                        }).data("kendoWindow").center().open();

                    },
                    onCancel: function () {
                        $state.go('dispatchEdit', {signid: vm.model.signid});
                    }
                });
            } else {
                $state.go('dispatchEdit', {signid: vm.model.signid});
            }
        }// E_跳转到 发文 编辑页面

        // S_跳转到 发文 重写工作方案
        vm.reworkWorkPlanViem = function () {
            workprogramSvc.getProjBranchInfo($state.params.signid,function(data){
                vm.signBranchData = data.branchList;
                vm.reworkUserList = data.userList;
                vm.reworkType = '1';   //默认是重做工作方案
                $("#reworkWorkPlanWindow").kendoWindow({
                    width: "720px",
                    title: "新增工作方案",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "close"],
                }).data("kendoWindow").center().open();
            });
        }// E_跳转到 发文 编辑页面

        //S_重做工作方案
        vm.reWorkFlow = function(){
            if(vm.reworkType == 1){
                var isCheck = $("#rework input[name='checBrands']:checked");
                if(!isCheck || isCheck.length ==0){
                    bsWin.alert("请选择要重做工作方案的分支！");
                }else{
                    var branchArr = [];
                    for (var i = 0; i < isCheck.length; i++) {
                        branchArr.push(isCheck[i].value);
                    }
                    var branchStr = branchArr.join(',');
                    bsWin.confirm("确定重做么？" , function(){
                        workprogramSvc.reStartWorkFlow($state.params.signid,1, branchStr,null, function(data){
                            if(data.flag || data.reCode == 'ok'){
                                bsWin.success("操作成功！",function(){
                                    window.parent.$("#reworkWorkPlanWindow").data("kendoWindow").close();
                                });
                            }else{
                                bsWin.alert(data.reMsg);
                            }
                        });
                    })
                }
            }else if(vm.reworkType == 0){
                if(!vm.reworkUserId){
                    bsWin.alert("请选择新增工作方案的负责人！");
                }else{
                    bsWin.confirm("确定新增工作方案么？" , function(){
                        workprogramSvc.reStartWorkFlow($state.params.signid,0,null, vm.reworkUserId, function(data){
                            if(data.flag || data.reCode == 'ok'){
                                bsWin.success("操作成功！",function(){
                                    window.parent.$("#reworkWorkPlanWindow").data("kendoWindow").close();
                                });
                            }else{
                                bsWin.alert(data.reMsg);
                            }
                        });
                    })
                }
            }

        }//E_重做工作方案

        //关联项目条件查询
        vm.associateQuerySign = function () {
            signSvc.getAssociateSignGrid(vm, function (data) {
                vm.associateSignList = [];
                if (data) {
                    vm.noassociateSign = false;
                    vm.associateSignList = data.value;
                    vm.page.callback(data.count);//请求回调时传入总记录数
                }else{
                    vm.noassociateSign = true;
                }
            });
        }

        //start 保存项目关联
        vm.saveAssociateSign = function (associateSignId) {
            if (vm.model.signid == associateSignId) {
                bsWin.alert("不能关联自身项目");
                return;
            }
            signSvc.saveAssociateSign(vm.model.signid, associateSignId, function () {
                if (associateSignId) {
                    vm.model.isAssociate = 1;
                }
                bsWin.alert(associateSignId != undefined ? "项目关联成功" : "项目解除关联成功");
                window.parent.$("#associateWindow").data("kendoWindow").close();
            });
        }
        //end 保存项目关联

        // S_财务办理(目前全部是评审费)
        vm.addFinancialApply = function (id) {
            vm.costType = "REVIEW";
            /*if ("9" == vm.model.isassistflow || 9 == vm.model.isassistflow) {
             vm.costType = "ASSIST";
             } else {
             vm.costType = "REVIEW";
             }*/
            /**
             * 初始化费用录入
             */
            addCostSvc.initAddCost(vm, vm.costType, vm.model, id);
        }
        //E_财务办理

        vm.addDoFile = function () {
            $state.go('fileRecordEdit', {
                signid: vm.model.signid
            });
        }

        //S_归档登记表补充资料
        vm.addRegisterFileRecord = function () {
            if (!vm.fileRecord.fileRecordId) {
                bsWin.alert("请保存归档再操作！");
            } else {
                $state.go('registerFile', {signid: vm.fileRecord.fileRecordId});
            }
        }// E_归档到登记表补充资料


        // 业务判断
        vm.mainOrg = function ($event) {
            var checkbox = $event.target;
            var checked = checkbox.checked;
            var checkboxValue = checkbox.value;
            if (checked) {
                $('.seleteTable input[selectType="main"]').each(
                    function () {
                        var value = $(this).attr("value");
                        if (value != checkboxValue) {
                            $(this).removeAttr("checked");
                            $("#assist_" + value).removeAttr("disabled");
                        } else {
                            $("#assist_" + checkboxValue).removeAttr("checked");
                            $("#assist_" + checkboxValue).attr("disabled", "disabled");
                        }
                    });

            } else {
                $("#assist_" + checkboxValue).removeAttr("disabled");
            }
            vm.initOption($event);
        }
        var selOrg = [];
        vm.initOption = function ($event) {
            var checkbox = $event.target;
            var obj = $(checkbox);
            var selectType = obj.attr("selectType");
            var checked = checkbox.checked;
            if (checked && selectType == 'main') {
                //先删除第一个
                selOrg.splice(0, 1);
                //添加（替换不了。变为了添加）
                selOrg.splice(0, 0, obj.attr("tit"));
            } else if (!checked && selectType == 'main') {
                selOrg[0] = "";
            }

            if (checked && selectType == 'assist') {
                selOrg.push(obj.attr("tit"));
            } else if (!checked && selectType == 'assist') {
                var title = obj.attr("tit");
                angular.forEach(selOrg, function (tit, index) {
                    if (tit == title) {
                        selOrg.splice(index, 1);
                    }
                });
            }
            if (selOrg.length > 0) {
                for (var i = 0; i < selOrg.length; i++) {
                    if (selOrg[0] == selOrg[i] && 0 != i) {//判断跟主办是否有重复
                        selOrg.splice(i, 1);
                    }

                }
                vm.flow.dealOption = "请（" + selOrg.join('，') + "）组织评审";
            }

        }

        //检查项目负责人
        vm.checkPrincipal = function () {
            var selUserId = $("#selPrincipalMainUser").val();
            if (selUserId) {
                $('#principalAssistUser input[selectType="assistUser"]').each(
                    function () {
                        var value = $(this).attr("value");
                        if (value == selUserId) {
                            $(this).removeAttr("checked");
                            $(this).attr("disabled", "disabled");
                        } else {
                            $(this).removeAttr("disabled");
                        }
                    }
                );
            }
            vm.initUserOption();
        }
        //部门领导分办，选择用户的默认处理意见

        var selUser = []
        vm.initUserOption = function (displayName) {
            var selUserId = $("#selPrincipalMainUser").val();
            var isSelMainUser = false;
            var defaultOption = "请（"
            if (selUserId) {
                $.each(vm.users, function (i, u) {
                    if (u.id == selUserId) {
                        defaultOption += u.displayName;
                        vm.selUserName = u.displayName;//用于判断是否要删除。
                        isSelMainUser = true;
                    }
                })
            } else {
                vm.selUserName = displayName;
            }
            //根据勾选的来加
            if ($("input[name='" + displayName + "']").is(':checked')) {//勾中的
                selUser.push(displayName);
            } else {//不勾中的
                angular.forEach(selUser, function (su, index) {
                    if (su == vm.selUserName || su == displayName) {
                        //判断。如果第一负责人跟其他负责人相同时。进行删减。只保留一个意见
                        selUser.splice(index, 1);
                    }
                });
            }
            if (selUser.length > 0) {
                if (isSelMainUser) {
                    defaultOption += ', ';
                }
                defaultOption += selUser.join(', ');
            }
            defaultOption += " )组织评审。";

            vm.flow.dealOption = defaultOption;
        }

        // checkbox 单选
        vm.checkBoxSingle = function ($event, type) {
            var checkbox = $event.target;
            var checked = checkbox.checked;
            var checkboxValue = checkbox.value;
            if (checked) {
                $('.seleteTable input[selectType=\"' + type + '\"]').each(function () {
                    var id = $(this).attr("id");
                    var value = $(this).attr("value");
                    if (id != (type + "_" + checkboxValue)) {
                        $("#" + disabletype + "_" + value).removeAttr("disabled");
                        $(this).removeAttr("checked");
                    } else {
                        $("#" + disabletype + "_" + checkboxValue).attr("disabled", "disabled");
                    }
                });
            } else {
                $("#" + disabletype + "_" + checkboxValue).removeAttr("disabled");
            }
        }

        //checkbox 单选
        vm.checkBoxSingle = function ($event, type) {
            var checkbox = $event.target;
            var checked = checkbox.checked;
            var checkboxValue = checkbox.value;
            if (checked) {
                $('#xs_table input[selectType=\"' + type + '\"]').each(function () {
                    var id = $(this).attr("id");
                    var value = $(this).attr("value");
                    if (value != checkboxValue) {
                        $(this).removeAttr("checked");
                    }
                });
            }
        }

        //选择负责人
        vm.addPriUser = function () {
            var isCheck = $("#xs_bmfb input[name='unSelPriUser']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择负责人");
            } else {
                if (vm.businessFlag.isMainBranch) {
                    if (vm.isMainPriUser == 9 && isCheck.length > 1) {
                        bsWin.alert("总负责人只能选一个");
                        return;
                    }
                    if (vm.businessFlag.isSelMainPriUser == false && (angular.isUndefined(vm.isMainPriUser) || vm.isMainPriUser == 0)) {
                        bsWin.alert("请先选择总负责人");
                        return;
                    }
                    if (vm.businessFlag.isSelMainPriUser == true && vm.isMainPriUser == 9) {
                        bsWin.alert("你已经选择了一个总负责人！");
                        return;
                    }
                }
                /* if(vm.businessFlag.principalUsers && (vm.businessFlag.principalUsers.length + isCheck.length) > 3){
                 bsWin.alert("最多只能选择3个负责人，请重新选择！");
                 return ;
                 }*/

                for (var i = 0; i < isCheck.length; i++) {
                    var priUser = {};
                    priUser.userId = isCheck[i].value;
                    priUser.userType = $("#userType").val();
                    if (vm.isMainPriUser == 9) {
                        vm.businessFlag.isSelMainPriUser = true;
                        priUser.isMainUser = 9;
                        vm.isMainPriUser = 0;
                    } else {
                        priUser.isMainUser = 0;
                    }
                    vm.users.forEach(function (u, index) {
                        if (u.id == isCheck[i].value) {
                            u.isSelected = true;
                            priUser.userId = u.id;
                            priUser.userName = u.displayName;
                        }
                    });
                    vm.businessFlag.principalUsers.push(priUser);
                    //进行排序。主负责人第一
                    vm.businessFlag.principalUsers.sort(by("isMainUser"));
                    //初始化处理人
                    vm.initDealUserName(vm.businessFlag.principalUsers);
                }
            }
        }
        //排序的方法
        var by = function (name) {
            return function (o, p) {
                var a, b;
                if (typeof o === "object" && typeof p === "object" && o && p) {
                    a = o[name];
                    b = p[name];
                    console.log(a, b);
                    if (a === b) {
                        return 0;
                    }
                    if (typeof a === typeof b) {
                        return a > b ? -1 : 1;
                    }
                    return typeof a > typeof b ? -1 : 1;
                }
                else {
                    throw ("error");
                }
            }
        }

        //删除负责人
        vm.delPriUser = function () {
            var isCheck = $("#xs_bmfb input[name='selPriUser']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择取消的负责人");
            } else {
                for (var i = 0; i < isCheck.length; i++) {
                    vm.users.forEach(function (u, index) {
                        if (u.id == isCheck[i].value) {
                            u.isSelected = false;
                        }
                    });
                    vm.businessFlag.principalUsers.forEach(function (pu, index) {
                        if (pu.userId == isCheck[i].value) {
                            if (pu.isMainUser == 9) {
                                vm.businessFlag.isSelMainPriUser = false;
                            }
                            vm.businessFlag.principalUsers.splice(index, 1);
                        }
                    });
                }
                //初始化处理人
                vm.initDealUserName(vm.businessFlag.principalUsers);
            }
        }//E_删除负责人

        vm.initDealUserName = function (userList) {
            if (userList && userList.length > 0) {
                var defaultOption = "请（";
                angular.forEach(userList, function (u, i) {
                    if (i > 0) {
                        defaultOption += ","
                    }
                    defaultOption += u.userName;


                })
                defaultOption += " )组织评审。";
                vm.flow.dealOption = defaultOption;
            } else {
                vm.flow.dealOption = "";
            }
        }


        //S_判断是否需要工作方案
        vm.checkNeedWP = function ($event) {
            var checkbox = $event.target;
            var checked = checkbox.checked;
            if (checked) {
                vm.businessFlag.isNeedWP = 9;
            } else {
                //如果已经完成了工作方案，则询问是否要删除
                if (vm.businessFlag.isFinishWP) {
                    bsWin.confirm({
                        title: "询问提示",
                        message: "不做工作方案系统将会删除工作方案数据，确认不做工作方案么？",
                        onOk: function () {
                            vm.isSubmit = true;
                            vm.businessFlag.isNeedWP = 0;
                            signSvc.removeWP(vm,function(data){
                                if (data.flag || data.reCode == "ok") {
                                    bsWin.success("操作成功！",function(){
                                        active();
                                    });
                                } else {
                                    bsWin.error(data.reMsg);
                                }
                            });
                        },
                        onClose: function () {
                            checkbox.checked = !checked;
                            vm.businessFlag.isNeedWP = 9;
                        }
                    });
                } else {
                    vm.businessFlag.isNeedWP = 0;
                }
            }
        }//E_判断是否需要工作方案

        //生产会前准备材料
        vm.meetingDoc = function () {
            bsWin.confirm({
                title: "",
                message: "如果之前已经生成会前准备材料，则本次生成的文档会覆盖之前产生的文档，确定执行操作么？",
                onOk: function () {
                    signSvc.meetingDoc(vm, function (data) {
                        if (data.flag || data.reCode == 'ok') {
                            bsWin.success(data.reMsg);
                            sysfileSvc.findByMianId(vm.model.signid, function (data) {
                                if (data || data.length > 0) {
                                    vm.showFlag.tabSysFile = true;
                                    vm.sysFileList = data;
                                    sysfileSvc.initZtreeClient(vm, $scope);//树形图
                                }
                            });
                        } else {
                            bsWin.alert(data.reMsg);
                        }
                    });
                    // });
                }
            })
        }

        //附件下载
        vm.commonDownloadSysFile = function (sysFileId) {
            sysfileSvc.downloadFile(sysFileId);
        }

        //生成发文字号
        vm.createDispatchFileNum = function () {
            signSvc.createDispatchFileNum(vm.model.signid, vm.dispatchDoc.id, function (data) {
                if (data.flag || data.reCode == "ok") {
                    vm.dispatchDoc.fileNum = data.reObj;
                }
                bsWin.alert(data.reMsg);
            });
        }

        //生成发文模板
        vm.dispatchTemplate = function () {
            signSvc.createDispatchTemplate(vm , function(data){
                if (data.flag || data.reCode == 'ok') {
                    bsWin.success(data.reMsg);
                    sysfileSvc.findByMianId(vm.model.signid, function (data) {
                        if (data || data.length > 0) {
                            vm.showFlag.tabSysFile = true;
                            vm.sysFileList = data;
                            sysfileSvc.initZtreeClient(vm, $scope);//树形图
                        }
                    });
                } else {
                    bsWin.alert(data.reMsg);
                }
            });
        }

        //监听是否通过
        vm.watchPassDis = function () {
            //监听是否关联事件
            $scope.$watch("vm.businessFlag.passDis", function (newValue, oldValue) {
                if (newValue == 9) {
                    vm.flow.dealOption = "核稿无误";
                } else {
                    vm.flow.dealOption = "核稿有误";
                }
            });
        }

        //确定实际参加会议的专家
        vm.affirmJoinExpert = function () {
            if (vm.model.expertReviewDto && vm.model.expertReviewDto.expertSelectedDtoList) {
                vm.confirmEPList = vm.model.expertReviewDto.expertSelectedDtoList;
                $("#confirmJoinExpert").kendoWindow({
                    width: "75%",
                    height: "600px",
                    title: "参加评审会专家确认",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            } else {
                bsWin.alert("该项目没有评审专家！");
            }
        }

        //未参加改为参加
        vm.updateToJoin = function () {
            var isCheck = $("#notJoinExpertTable input[name='notJoinExpert']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择要改为参加会议的专家");
            } else {
                var ids = [];
                for (var i = 0; i < isCheck.length; i++) {
                    ids.push(isCheck[i].value);
                }
                console.log(ids.join(','));
                expertReviewSvc.updateJoinState(vm.expertReview.id,"", "", ids.join(','), '9', vm.isCommit, function (data) {
                    if(data.flag || data.reCode == 'ok'){
                        vm.reFleshJoinState(ids, '9');
                        bsWin.success("操作成功！");
                    }else{
                        bsWin.success(data.reMsg);
                    }
                });
            }
        }

        //参加改为未参加
        vm.updateToNotJoin = function () {
            var isCheck = $("#joinExpertTable input[name='joinExpert']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择未参加会议的专家");
            } else {
                var ids = [];
                for (var i = 0; i < isCheck.length; i++) {
                    ids.push(isCheck[i].value);
                }
                expertReviewSvc.updateJoinState(vm.expertReview.id,"", "", ids.join(','), '0', vm.isCommit, function (data) {
                    if(data.flag || data.reCode == 'ok'){
                        vm.reFleshJoinState(ids, '0');
                        bsWin.success("操作成功！");
                    }else{
                        bsWin.success(data.reMsg);
                    }
                });
            }
        }

        //更新参加未参加状态
        vm.reFleshJoinState = function (ids, state) {
            $.each(ids, function (i, obj) {
                //1、删除已确认的专家
                $.each(vm.confirmEPList, function (index, epObj) {
                    if (obj == epObj.id) {
                        epObj.isJoin = state;
                    }
                })
            })
            //刷新工作方案的专家信息
            $.each(vm.model.workProgramDtoList, function (i, wpObj) {
                expertReviewSvc.refleshBusinessEP(wpObj.id, function (data) {
                    wpObj.expertDtoList = data;
                });
            })
        }

        //工作方案模板打印
        vm.printpage = function ($event) {
            var id = $($event.target).attr("id");
            signSvc.workProgramPrint(id);
        }

        /**
         * 生成评审报告
         */
        vm.reviewReportDoc = function () {
            bsWin.confirm({
                title: "",
                message: "如果之前已经生成评审报告，则本次操作会覆盖之前生成的文档，确定执行操作么？",
                onOk: function () {
                    signSvc.createDispatchTemplate(vm, function (data) {
                        if (data.flag || data.reCode == 'ok') {
                            bsWin.success("操作成功！", function () {
                                sysfileSvc.findByMianId(vm.model.signid, function (data) {
                                    if (data || data.length > 0) {
                                        vm.showFlag.tabSysFile = true;
                                        vm.sysFileList = data;
                                        sysfileSvc.initZtreeClient(vm, $scope);//树形图
                                    }
                                })
                            });
                        } else {
                            bsWin.alert(data.reMsg);
                        }
                    });
                }
            })
        }

        /**
         * 打印功能 -分页
         */
        vm.templatePage = function (id) {
            templatePrintSvc.templatePage(id);
        }

        /**
         * 专家评审费大于1000的可以点击进行拆分打印
         * @param expertId
         */
        vm.splitPayment = function(expertSelectId , expert , reviewCost){
            vm.expertSelect = {};
            vm.expertSelect.id = expertSelectId;
            vm.expertSelect.isSplit = 9;
            vm.expertSelect.oneCost = "1000";

            vm.expertName = expert.name;
            vm.reviewCost = reviewCost
            $("#splitPayment").kendoWindow({
                width: "50%",
                height: "300px",
                title: "专家评审费打印方案",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();

            $scope.$watch("vm.expertSelect.isSplit",function (newValue, oldValue) {
                //由关联改成未关联
                if(newValue != oldValue ){
                    if(vm.expertSelect.isSplit == 9){
                        vm.expertSelect.oneCost = "1000";
                    }
                    if(vm.expertSelect.isSplit == 0){
                        vm.expertSelect.oneCost = "0";
                    }
                }
            });
        }

        /**
         * 保存打印方案
         */
        vm.saveSplit = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                expertReviewSvc.saveSplit(vm);
            }
        }

        /**
         * 查看专家信息
         * @param expertId
         */
        vm.checkExpertDetail = function(expertId){
            expertSvc.queryExpertDetail(vm , expertId);
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('signFlowDetailCtrl', sign);

    sign.$inject = ['sysfileSvc','signSvc','$state','flowSvc','signFlowSvc','$scope','templatePrintSvc' , 'expertReviewSvc' , 'expertSvc'];

    function sign(sysfileSvc,signSvc,$state,flowSvc,signFlowSvc,$scope,templatePrintSvc , expertReviewSvc , expertSvc) {
        var vm = this;
        vm.title = "项目流程信息";
        vm.model = {};
        vm.flow = {};					
        vm.work = {};
        vm.dispatchDoc = {};
        vm.fileRecord = {};
        vm.model.signid = $state.params.signid;	
        vm.flow.taskId = $state.params.taskId;			//流程任务ID
        vm.flow.processInstanceId = $state.params.processInstanceId;	//流程实例ID

        //按钮显示控制，全部归为这个对象控制
        vm.showFlag = {
            tabWorkProgram:false,       // 显示工作方案标签tab
            tabBaseWP:false,            // 项目基本信息tab
            tabDispatch:false,          // 发文信息tab
            tabFilerecord:false,        // 归档信息tab
            tabExpert:false,            // 专家信息tab
            tabSysFile:false,           // 附件信息tab
            tabAssociateSigns:false,    // 关联项目tab
        };

        //业务控制对象
        vm.businessFlag = {
            expertReviews : [],         // 专家评审方案
        }
        vm.expertList =  new Array(10); //用于打印页面的专家列表，控制行数
        //用于打印发文，项目概况控制
        // vm.workProgramXmjys ={};//项目建议书
        // vm.workProgramKxxyj = {};//可行性研究
        // vm.workProgramXmgs = {};//项目概算
        // vm.workProgramTg = {}; //调概
        active();
        function active(){
        	$('#myTab li').click(function (e) {
        		var aObj = $("a",this);        		
        		e.preventDefault();       		  
        		aObj.tab('show');      		
        		var showDiv = aObj.attr("for-div");   		
        		$(".tab-pane").removeClass("active").removeClass("in");
        		$("#"+showDiv).addClass("active").addClass("in").show(500);
                vm.model.showDiv = showDiv;
        	})

            //初始化附件控件
            vm.sysFile = {
                businessId: $state.params.signid,
                mainId: $state.params.signid,
                mainType: sysfileSvc.mainTypeValue().SIGN,
                sysfileType: sysfileSvc.mainTypeValue().FILLSIGN,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm,
                uploadSuccess: function () {
                    sysfileSvc.findByMianId(vm.model.signid, function (data) {
                        if (data && data.length > 0) {
                            vm.showFlag.tabSysFile = true;
                            vm.sysFileList = data;
                            sysfileSvc.initZtreeClient(vm, $scope);//树形图
                        }
                    });
                }
            });

            //初始化流程信息
            flowSvc.initFlowData(vm);
            // 初始化业务信息
            signSvc.initFlowPageData(vm.model.signid,function(data){
                vm.model = data;
                var deActive = $("#myTab .active");
                var deObj = $("a", deActive);
                vm.model.showDiv = deObj.attr("for-div");
                //发文
                if (vm.model.dispatchDocDto) {
                    vm.showFlag.tabDispatch = true;
                    vm.dispatchDoc = vm.model.dispatchDocDto;
                    //如果是合并发文次项目，则不用生成发文编号
                    if((vm.dispatchDoc.dispatchWay == 2 && vm.dispatchDoc.isMainProject == 0)
                        || vm.dispatchDoc.fileNum){
                        vm.businessFlag.isCreateDisFileNum = true;
                    }else{
                        vm.showFlag.buttDisFileNum = true;
                    }
                }
                //归档
                if (vm.model.fileRecordDto) {
                    vm.showFlag.tabFilerecord = true;
                    vm.fileRecord = vm.model.fileRecordDto;
                }

                //判断是否有多个分支，用于控制是否显示总投资字段 和 分开获取关联的项目信息（主要用于项目概算阶段）（旧版本）
                //通过评估部门的个数来控制总投资字段  修改于（2018-01-16）
                if(vm.model.workProgramDtoList && vm.model.workProgramDtoList.length >0){
                    var orgStr;
                    if(vm.model.workProgramDtoList[0].branchId == '1' ||vm.model.workProgramDtoList[0].branchId == '1' ){
                        orgStr = vm.model.workProgramDtoList[0].reviewOrgName;
                    }else{
                        orgStr = vm.model.workProgramDtoList[0].mainWorkProgramDto.reviewOrgName;
                    }
                    if(orgStr != '' && orgStr.split(',').length > 1){

                        vm.showTotalInvestment = true;
                    }
                   /* for( var i=0 ; i< vm.model.workProgramDtoList.length ; i++ ){
                        var reviewStage = vm.model.workProgramDtoList[i].reviewstage;
                        if(reviewStage && reviewStage == '项目建议书'){
                            vm.workProgramXmjys =vm.model.workProgramDtoList[i];
                        }
                        if(reviewStage && reviewStage == '可行性研究报告'){
                            vm.workProgramKxxyj = vm.model.workProgramDtoList[i];
                        }
                        if(reviewStage && reviewStage == '项目概算' &&
                            (!vm.model.ischangeEstimate || vm.model.ischangeEstimate != 9 || vm.model.ischangeEstimate != '9')){
                            vm.workProgramXmgs =vm.model.workProgramDtoList[i];
                        }
                        if(reviewStage && reviewStage == '项目概算' &&
                            vm.model.ischangeEstimate && (vm.model.ischangeEstimate == 9 || vm.model.ischangeEstimate == '9')){
                            vm.workProgramTg =vm.model.workProgramDtoList[i];
                        }
                    }*/
                }

                //初始化专家评分
                if (vm.model.processState > 1) {
                    vm.showFlag.tabWorkProgram=true;        //显示工作方案
                }
                //显示拟补充资料函
                if(vm.model.suppLetterDtoList){
                    vm.showSupperIndex = 0;
                }
                //拟补充资料信息
                if(vm.model.registerFileDtoDtoList!=undefined){
                    vm.supply=[];//拟补充资料
                    vm.registerFile=[];//其他资料
                    vm.drawingFile=[];//图纸资料
                    vm.otherFile=[];//归档的其他资料
                    vm.model.registerFileDtoDtoList.forEach(function(registerFile  , x){
                        if(registerFile.businessType =="3" || registerFile.businessType =="5"
                            ||registerFile.businessType =="6"||registerFile.businessType =="7"){
                            vm.supply.push(registerFile);
                        }else if(registerFile.businessType =="2"){
                            vm.drawingFile.push(registerFile);
                        }else if(registerFile.businessType =="1" ||registerFile.businessType =="4"){
                            vm.registerFile.push(registerFile);
                        }else if(registerFile.businessType =="5" ||registerFile.businessType =="6"||registerFile.businessType =="7"){
                            vm.otherFile.push(registerFile);
                        }
                    })
                }
            });

            // 初始化上传附件
            sysfileSvc.findByMianId(vm.model.signid,function(data){
                if(data && data.length > 0){
                    vm.showFlag.tabSysFile = true;
                    vm.sysFileList = data;
                    sysfileSvc.initZtreeClient(vm,$scope);//树形图
                }
            });
        }

        //附件下载
        vm.commonDownloadSysFile = function(sysFileId){
            sysfileSvc.downloadFile(sysFileId);
        }

        //签收模板打印
        /*vm.printpage = function ($event) {
            var id =  $($event.target).attr("id");
            signSvc.workProgramPrint(id);
        }*/

        /**
         * 打印功能 -分页
         */
        vm.templatePage = function(id){
            templatePrintSvc.templatePage(id);
        }

        /**
         * 专家评审费大于1000的可以点击进行拆分打印
         * @param expertId
         */
        vm.splitPayment = function(expertSelectId , expert , reviewCost){
            vm.expertSelect = {};
            vm.expertSelect.id = expertSelectId;
            vm.expertSelect.isSplit = 9;
            vm.expertSelect.oneCost = "1000";

            vm.expertName = expert.name;
            vm.reviewCost = reviewCost
            $("#splitPayment").kendoWindow({
                width: "50%",
                height: "300px",
                title: "专家评审费打印方案",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();

            $scope.$watch("vm.expertSelect.isSplit",function (newValue, oldValue) {
                //由关联改成未关联
                if(newValue != oldValue ){
                    if(vm.expertSelect.isSplit == 9){
                        vm.expertSelect.oneCost = "1000";
                    }
                    if(vm.expertSelect.isSplit == 0){
                        vm.expertSelect.oneCost = "0";
                    }
                }

            });
        }

        /**
         * 保存打印方案
         */
        vm.saveSplit = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                expertReviewSvc.saveSplit(vm);
            }

        }

        /**
         * 查看专家信息
         * @param expertId
         */
        vm.checkExpertDetail = function(expertId){
            expertSvc.queryExpertDetail(vm , expertId);
        }

    }
})();

(function () {
    'use strict';

    angular.module('app').controller('signReserveAddCtrl', sign);

    sign.$inject = ['$location', 'reserveSignSvc', '$state', 'bsWin'];

    function sign($location, reserveSignSvc, $state, bsWin) {
        var vm = this;
        vm.model = {};						//创建一个form对象
        vm.title = '新增预签收收文';        		//标题
        vm.reserveAdd = function () {
            common.initJqValidation($('#reserveform'));
            var isValid = $('#reserveform').valid();
            if (isValid) {
                reserveSignSvc.reserveAdd(vm.model, function (data) {
                    if (data.flag || data.reCode == "ok") {
                        bsWin.success("操作成功，请继续填写项目审核登记表", function () {
                            $state.go('fillSign', {signid: data.reObj.signid}, {reload: true});
                        });
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            } else {
                bsWin.alert("操作失败，有红色*号的选项为必填项，请按要求填写！");
            }
        };
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('signReserveCtrl', sign);

    sign.$inject = ['$location', 'reserveSignSvc', '$state', '$rootScope', 'signSvc', 'bsWin', 'signFlowSvc'];

    function sign($location, reserveSignSvc, $state, $rootScope, signSvc, bsWin, signFlowSvc) {
        var vm = this;
        vm.model = {};						//创建一个form对象
        vm.title = '预签收列表';        		//标题  
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function () {
            $rootScope.storeView(vm.stateName, {
                gridParams: vm.gridOptions.dataSource.transport.options.read.data(),
                queryParams: vm.queryParams,
                data: vm
            });

        }
        //收文查询
        vm.querySign = function () {
            vm.gridOptions.dataSource._skip = 0;
            vm.gridOptions.dataSource.read();
        }
        vm.del = function (id) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认删除该条项目数据吗？",
                onOk: function () {
                    signSvc.deleteSign(id, function (data) {
                        if (data.flag || data.reCode == 'ok') {
                            bsWin.alert("删除成功！", function () {
                                vm.gridOptions.dataSource.read();
                            })
                        } else {
                            bsWin.alert(data.reMsg);
                        }
                    });
                }
            });
        }

        /**
         * 正式签收收文
         * @param signId
         */
        vm.realSign = function (signid) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认正式签收了么？",
                onOk: function () {
                    signSvc.realSign(signid, function (data) {
                        if (data.flag || data.reCode == 'ok') {
                            bsWin.success("操作成功！", function () {
                                vm.gridOptions.dataSource.read();
                            });
                        } else {
                            bsWin.error(data.reMsg);
                        }
                    });
                }
            });
        }

        vm.startNewFlow = function (signid) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认已经完成填写，并且发起流程么？",
                onOk: function () {
                    $('.confirmDialog').modal('hide');
                    signFlowSvc.startFlow(signid, function (data) {
                        if (data.flag || data.reCode == 'ok') {
                            bsWin.success("操作成功！", function () {
                                vm.gridOptions.dataSource.read();
                            });
                        } else {
                            bsWin.error(data.reMsg);
                        }
                    });
                }
            });
        }

        vm.getPreSignInfo = function () {
            if(vm.model.filecode == "" || vm.model.filecode == null){
                bsWin.alert("收文编号不能为空!");
                return ;
            }
            reserveSignSvc.getPreSignInfo(vm.model.filecode,'1',function(data){
                if(data.flag || data.reCode == 'ok'){
                    if(data.reMsg!='保存成功！'){
                        bsWin.alert(data.reMsg);
                        return ;
                    }else{
                        vm.gridOptions.dataSource.read();
                    }
                }else{
                    bsWin.alert(data.reMsg);
                }
            });
        }


        active();
        function active() {
            if ($rootScope.view[vm.stateName]) {
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if (preView.gridParams) {
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if (preView.data) {
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if (preView.queryParams) {
                    vm.queryParams = preView.queryParams;
                }

                reserveSignSvc.grid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            } else {
                reserveSignSvc.grid(vm);
            }

        }

    }
})();

(function () {
    'use strict';

    angular.module('app').factory('reserveSignSvc', sign);

    sign.$inject = ['$http','$state'];

    function sign($http,$state) {
        var url_sign = rootPath + "/sign";
        var url_back = '#/sign';
        var service = {
            grid: grid,                                  //预签收列表
            getsignById: getsignById,                    //根据id查询
            reserveAdd: reserveAdd,                     //新增预签收记录
            deleteReserveSign: deleteReserveSign,       //删除预签收记录
            getPreSignInfo : getPreSignInfo             //根据收文编号查询项目预签收信息
        };

        return service;

        //S_查询grid
        function querySign(vm) {
            vm.gridOptions.dataSource.read();
        }//E_查询grid

        // begin# E_项目预签收
        function reserveAdd(model ,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/sign/html/reserveAddPost",
                data: model
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }
        //end E_项目预签收

        function getPreSignInfo(fileCode ,signType,callBack) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/intfc/getPreSign",
                params:{
                    fileCode :fileCode,
                    signType : signType
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        // begin#deleteUser
        function deleteReserveSign(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_sign +"/deleteReserve",
                params:{signid :id}

            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        vm.isSubmit = false;
                        vm.gridOptions.dataSource.read();
                    }

                });

            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }



        
        // begin#getUserById
        function getsignById(vm) {
            var httpOptions = {
                method: 'get',
                url: url_sign + "/html/findByIdsign",
                params: {id: vm.id}
            }
            var httpSuccess = function success(response) {
                vm.model = response.data;
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#grid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_sign + "/reserveListSign", $("#reserveFrom"),vm.gridParams),
                schema: {
                    data: "value",
                    total: function (data) {
                        if (data['count']) {
                            $('#GET_RESERVESIGN_COUNT').html(data['count']);
                        } else {
                            $('#GET_RESERVESIGN_COUNT').html(0);
                        }
                        return data['count'];
                    },
                    model: {
                        id: "signid"
                    }
                },
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize : vm.queryParams.pageSize ||10,
                page:vm.queryParams.page||1,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSourc


            // Begin:column
            var columns = [
                {  
				    field: "rowNumber",  
				    title: "序号",  
				    width: 50,
				    filterable : false,
				    template: "<span class='row-number'></span>"  
				 },
                {
                    title: "项目名称",
                    width: 280,
                    template: function (item) {
                        return '<a ng-click="vm.saveView()"  href="#/signDetails/' + item.signid +'/' + item.processInstanceId + '" >' + item.projectname + '</a>';
                    }
                },
                {
                    field: "filecode",
                    title: "委里收文编号",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "designcompanyName",
                    title: "项目单位",
                    width: 220,
                    filterable: false,
                },
                {
                    field: "reviewstage",
                    title: "项目阶段",
                    width: 130,
                    filterable: false,
                },
                {
                    field: "projectcode",
                    title: "项目代码",
                    width: 210,
                    filterable: false,
                },
                {
                    field: "receivedate",
                    title: "收文日期",
                    width: 160,
                    filterable: false,
                    format: "{0:yyyy-MM-dd HH:mm:ss}"

                },
                {
                    field: "",
                    title: "操作",
                    width: 320,
                    template: function (item) {
                        var isStartFlow = false;
                        if(item.processInstanceId){
                            isStartFlow = true;
                        }
                        var isRealSign = false;
                        if(item.issign && (item.issign == 9 || item.issign == '9' )){
                            isRealSign = true;
                        }
                        //如果已经发起流程，则只能查看
                        return common.format($('#columnBtns').html(),
                            item.signid, isStartFlow,
                            item.signid + "/" + item.processInstanceId,
                            "vm.del('" + item.signid + "')",
                            "vm.startNewFlow('" + item.signid + "')",
                            "vm.realSign('" + item.signid + "')", isRealSign);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable : common.kendoGridConfig(vm.queryParams).pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound:common.kendoGridConfig(vm.queryParams).dataBound,
                resizable: true
            };
        }// end fun grid


    }
})();
(function () {
    'use strict';

    angular.module('app').controller('signDetailsCtrl', sign);

    sign.$inject = ['sysfileSvc', 'signSvc', '$state', 'flowSvc', '$scope', 'templatePrintSvc', 'assistSvc'  , 'expertReviewSvc' , 'expertSvc'];

    function sign(sysfileSvc, signSvc, $state, flowSvc, $scope, templatePrintSvc, assistSvc , expertReviewSvc , expertSvc) {
        var vm = this;
        vm.model = {};							    //创建一个form对象
        vm.flow = {};                               //收文对象
        vm.model.signid = $state.params.signid;	    //收文ID
        vm.flow.processInstanceId = $state.params.processInstanceId;	//流程实例ID
        //按钮显示控制，全部归为这个对象控制
        vm.showFlag = {
            tabWorkProgram: false,       // 显示工作方案标签tab
            tabBaseWP: false,            // 项目基本信息tab
            tabDispatch: false,          // 发文信息tab
            tabFilerecord: false,        // 归档信息tab
            tabExpert: false,            // 专家信息tab
            tabSysFile: false,           // 附件信息tab
            tabAssociateSigns: false,    // 关联项目tab
        };
        //业务控制对象
        vm.businessFlag = {
            expertReviews: [],         // 专家评审方案
        }

        vm.expertList = new Array(15); //用于打印页面的专家列表，控制行数

        active();
        function active() {
            $('#myTab li').click(function (e) {
                var aObj = $("a", this);
                e.preventDefault();
                aObj.tab('show');
                var showDiv = aObj.attr("for-div");
                $(".tab-pane").removeClass("active").removeClass("in");
                $("#" + showDiv).addClass("active").addClass("in").show(500);
                vm.model.showDiv = showDiv;
            })

            //流程图和流程处理记录信息
            if ($state.params.processInstanceId) {
                flowSvc.initFlowData(vm);
            }

            //初始化业务信息
            signSvc.initFlowPageData(vm.model.signid, function (data) {
                vm.model = data;
                var deActive = $("#myTab .active");
                var deObj = $("a", deActive);
                vm.model.showDiv = deObj.attr("for-div");
                //发文
                if (vm.model.dispatchDocDto) {
                    vm.showFlag.tabDispatch = true;
                    vm.dispatchDoc = vm.model.dispatchDocDto;
                    assistSvc.findAssistPlanSignById(vm.model.signid, function (data) {
                        vm.assistPlanSign = data;
                    })
                }
                //归档
                if (vm.model.fileRecordDto) {
                    vm.showFlag.tabFilerecord = true;
                    vm.fileRecord = vm.model.fileRecordDto;
                }
                //通过评估部门的个数来控制总投资字段
                if(vm.model.workProgramDtoList && vm.model.workProgramDtoList.length >0) {
                    var orgStr;
                    if (vm.model.workProgramDtoList[0].branchId == 1) {
                        orgStr = vm.model.workProgramDtoList[0].reviewOrgName;
                    } else {
                        orgStr = vm.model.workProgramDtoList[0].mainWorkProgramDto.reviewOrgName;
                    }
                    if (orgStr && orgStr.split(',').length > 1) {
                        vm.showTotalInvestment = true;
                    }
                }

                //初始化专家评分
                if (vm.model.processState > 1) {
                    vm.showFlag.tabWorkProgram = true;        //显示工作方案
                }

                //显示拟补充资料函
                if (vm.model.suppLetterDtoList) {
                    vm.showSupperIndex = 0;
                }
                //拟补充资料信息
                if(vm.model.registerFileDtoDtoList!=undefined){
                    vm.supply=[];//拟补充资料
                    vm.registerFile=[];//审批页面的其他资料
                    vm.drawingFile=[];//图纸资料
                    vm.otherFile=[];//归档的其他资料
                    vm.model.registerFileDtoDtoList.forEach(function(registerFile  , x){
                        if(registerFile.businessType =="3" /*|| registerFile.businessType =="5"
                            ||registerFile.businessType =="6"||registerFile.businessType =="7"*/){
                            vm.supply.push(registerFile);
                            vm.otherFile.push(registerFile);
                        }else if(registerFile.businessType =="2"){
                            vm.drawingFile.push(registerFile);
                        }else if(registerFile.businessType =="1" ||registerFile.businessType =="4"){
                            vm.registerFile.push(registerFile);
                        }else if(registerFile.businessType =="5" ||registerFile.businessType =="6"||registerFile.businessType =="7"){
                            vm.otherFile.push(registerFile);
                        }
                    })
                }
            });

            // 初始化上传附件
            sysfileSvc.findByMianId(vm.model.signid, function (data) {
                if (data && data.length > 0) {
                    vm.showFlag.tabSysFile = true;
                    vm.sysFileList = data;
                    sysfileSvc.initZtreeClient(vm, $scope);//树形图
                }
            });
        }

        //签收模板打印
        /*vm.printpage = function ($event) {
            var id = $($event.target).attr("id");
            signSvc.workProgramPrint(id);
        }*/

        /**
         * 打印功能 - 分页
         */
        vm.templatePage = function (id) {
            templatePrintSvc.templatePage(id);
        }

        //附件下载
        vm.commonDownloadSysFile = function (sysFileId) {
            sysfileSvc.downloadFile(sysFileId);
        }
        /**
         * 报审登记表导出
         */
        /*vm.printSign = function () {
            var reviewstage = escape(encodeURIComponent(vm.model.reviewstage));
            window.open(rootPath + "/sign/printSign?signId=" + vm.model.signid + "&reviewStage=" + reviewstage);
        }*/

        /**
         * 专家评审费大于1000的可以点击进行拆分打印
         * @param expertId
         */
        vm.splitPayment = function(expertSelectId , expert , reviewCost){
            vm.expertSelect = {};
            vm.expertSelect.id = expertSelectId;
            vm.expertSelect.isSplit = 9;
            vm.expertSelect.oneCost = "1000";

            vm.expertName = expert.name;
            vm.reviewCost = reviewCost
            $("#splitPayment").kendoWindow({
                width: "50%",
                height: "300px",
                title: "专家评审费打印方案",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();

            $scope.$watch("vm.expertSelect.isSplit",function (newValue, oldValue) {
                //由关联改成未关联
                if(newValue != oldValue ){
                    if(vm.expertSelect.isSplit == 9){
                        vm.expertSelect.oneCost = "1000";
                    }
                    if(vm.expertSelect.isSplit == 0){
                        vm.expertSelect.oneCost = "0";
                    }
                }

            });
        }

        /**
         * 保存打印方案
         */
        vm.saveSplit = function(){
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                expertReviewSvc.saveSplit(vm);
            }

        }

        /**
         * 查看专家信息
         * @param expertId
         */
        vm.checkExpertDetail = function(expertId){
            expertSvc.queryExpertDetail(vm , expertId);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('signSvc', sign);

    sign.$inject = ['$http', '$state', 'bsWin', 'sysfileSvc', 'templatePrintSvc'];

    function sign($http, $state, bsWin, sysfileSvc, templatePrintSvc) {
        var service = {
            signGrid: signGrid,				//初始化项目列表
            createSign: createSign,			//新增
            initFillData: initFillData,		//初始化表单填写页面（可编辑）
            initDetailData: initDetailData,	//初始化详情页（不可编辑）
            updateFillin: updateFillin,		//申报编辑
            deleteSign: deleteSign,			//删除收文
            findOfficeUsersByDeptName: findOfficeUsersByDeptName,//根据协办部门名称查询用户
            initFlowPageData: initFlowPageData, //初始化流程收文信息
            removeWP: removeWP,             //删除工作方案
            associateGrid: associateGrid,   //项目关联列表
            getAssociateSign: getAssociateSign, //获取项目关联阶段信息
            getAssociateSignGrid: getAssociateSignGrid,//获取项目关联阶段信息的grid表格
            saveAssociateSign: saveAssociateSign,   //保存项目关联
            initAssociateSigns: initAssociateSigns, //初始化项目关联信息
            meetingDoc: meetingDoc,                 //生成会前准备材
            createDispatchFileNum: createDispatchFileNum,       //生成发文字号
            realSign: realSign,                                 //正式签收
            createDispatchTemplate: createDispatchTemplate,     //生成发文模板
            signGetBackGrid: signGetBackGrid,                   //项目取回列表
            getBack: getBack,                           //项目取回
            editTemplatePrint: editTemplatePrint,       //编辑模板打印
            /*workProgramPrint:workProgramPrint,        //工作方案模板打印*/
            signDeletGrid: signDeletGrid,               //作废项目
            editSignState: editSignState,               //恢复项目
            sumExistDays: sumExistDays,                 //统计项目接受到现在所存在的天数（办结的，按办结日期，未办结的，按现在时间）
            MaintenanProjectGrid: MaintenanProjectGrid, //维护项目
            excelExport: excelExport,                   //项目查询统计导出
            excelExport2: excelExport2,                 //项目查询统计导出
            findExpertReview: findExpertReview,         //查询项目在办的专家抽取方案信息
            getSignInfo: getSignInfo ,                  //通过收文编号获取委里信息
            findSignUnitScore : findSignUnitScore,      //获取评分单位信息
            findAVGDayById : findAVGDayById ,           //获取平均评审天数和工作日
            addAOrg : addAOrg ,                         //添加评审部门（项目维护）
            deleteAOrg : deleteAOrg ,                   //移除评审部门（项目维护）
            addSecondUser : addSecondUser ,             //保存添加负责人（项目维护）
            deleteSecondUser : deleteSecondUser ,       //删除添加的负责人（项目维护）
            saveMoreExpert : saveMoreExpert,            //保存是否能多个自选专家
            updateFGWState : updateFGWState,            //更改回传委里状态
        };
        return service;

        function findAVGDayById(isgnIds , callBack){
            var httpOptions = {
                method: "post",
                url: rootPath + "/sign/findAVGDayId",
                params: {signIds: isgnIds}
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        function findSignUnitScore(signId, callBack){
            var httpOptions = {
                method: "post",
                url: rootPath + "/sign/findSignUnitScore",
                params: {signId: signId}
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //S_查询项目在办的专家抽取方案信息
        function findExpertReview(signId, callBack) {
            var httpOptions = {
                method: "post",
                url: rootPath + "/signwork/fingSignWorkById",
                params: {signId: signId}
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_findExpertReview

        //s_项目查询统计导出
        function excelExport(signIds) {
            var downForm = $("#countSignDayForm");
            downForm.attr("target", "");
            downForm.attr("method", "post");
            downForm.attr("action", rootPath + "/signView/excelExport");
            downForm.find("input[name='signIds']").val(signIds);
            downForm.submit();//表单提交
        }
        //s_项目查询统计导出
        function excelExport2(signIds) {
            var downForm = $("#countSignDayForm");
            downForm.attr("target", "");
            downForm.attr("method", "post");
            downForm.attr("action", rootPath + "/signView/excelExport2");
            downForm.find("input[name='signIds']").val(signIds);
            downForm.submit();//表单提交
        }

        //e_项目查询统计导出

        //S_统计项目接受到现在所存在的天数
        function sumExistDays(signIds, callBack) {
            var httpOptions = {
                method: "post",
                url: rootPath + "/sign/sumExistDays",
                params: {signIds: signIds}
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_sumExistDays

        //negin createDispatchTemplate
        function createDispatchTemplate(vm, callBack) {
            var httpOptions = {
                method: "post",
                url: rootPath + "/dispatch/createDispatchTemplate",
                params: {signId: vm.model.signid}
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //end createDispatchTemplate

        //E 上传附件列表

        function getSignInfo(fileCode, signType, callBack) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/intfc/getPreSign",
                params: {
                    fileCode: fileCode,
                    signType: signType
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //S_初始化grid(过滤已签收和已经完成的项目)
        function signGrid(vm) {
            // Begin:dataSource
            /*      var dataSource = new kendo.data.DataSource({
             type: 'odata',
             transport: common.kendoGridConfig().transport(rootPath + "/sign/findBySignUser", $("#searchform")),
             schema: {
             data: "value",
             total: function (data) {
             if (data['count']) {
             $('#GET_SIGN_COUNT').html(data['count']);
             } else {
             $('#GET_SIGN_COUNT').html(0);
             }
             return data['count'];
             },
             model: {
             id: "taskId"
             }
             },
             serverPaging: true,
             serverSorting: true,
             serverFiltering: true,
             pageSize: 10,
             sort: {
             field: "createdDate",
             dir: "desc"
             }
             });*/
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/sign/findBySignUser", $("#searchform"), vm.gridParams),
                schema: {
                    data: "value",
                    total: function (data) {
                        if (data['count']) {
                            $('#GET_SIGN_COUNT').html(data['count']);
                        } else {
                            $('#GET_SIGN_COUNT').html(0);
                        }
                        return data['count'];
                    },
                    model: {
                        id: "signid"
                    }
                },
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: vm.queryParams.pageSize || 10,
                page: vm.queryParams.page || 1,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            // Begin:column
            var columns = [
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "",
                    title: "项目名称",
                    width: 280,
                    filterable: false,
                    template: function (item) {
                        return '<a ng-click="vm.saveView()"  href="#/fillSign/' + item.signid + '/" >' + item.projectname + '</a>';
                    }
                },
                {
                    field: "filecode",
                    title: "委里收文编号",
                    width: 140,
                    filterable: false,
                },
                {
                    field: "designcompanyName",
                    title: "项目单位",
                    width: 260,
                    filterable: false,
                },
                {
                    field: "reviewstage",
                    title: "评审阶段",
                    width: 130,
                    filterable: false,
                },
                {
                    field: "projectcode",
                    title: "项目代码",
                    width: 210,
                    filterable: false,
                },
                {
                    field: "signdate",
                    title: "签收日期",
                    width: 100,
                    filterable: false,
                    format: "{0:yyyy-MM-dd HH:mm:ss}"
                },
                {
                    field: "",
                    title: "流程状态",
                    width: 80,
                    filterable: false,
                    template: function (item) {
                        if (item.signState) {
                            if (item.signState == 1) {
                                return '<span style="color:green;">进行中</span>';
                            } else if (item.signState == 2) {
                                return '<span style="color:orange;">已暂停</span>';
                            } else if (item.signState == 8) {
                                return '<span style="color:red;">强制结束</span>';
                            } else if (item.signState == 9) {
                                return '<span style="color:blue;">已完成</span>';
                            } else if (item.signState == 5) {
                                return '未发起';
                            } else {
                                return "";
                            }
                        } else {
                            return "未发起"
                        }
                    }
                },
                {
                    field: "",
                    title: "操作",
                    width: 320,
                    template: function (item) {
                        var isStartFlow = false;
                        if (item.processInstanceId) {
                            isStartFlow = true;
                        }
                        var isRealSign = false;
                        if (item.issign && (item.issign == 9 || item.issign == '9' )) {
                            isRealSign = true;
                        }
                        //如果已经发起流程，则只能查看
                        return common.format($('#columnBtns').html(),
                            item.signid, isStartFlow,
                            item.signid + "/" + item.processInstanceId,
                            "vm.del('" + item.signid + "')", isStartFlow,
                            "vm.startNewFlow('" + item.signid + "')", isStartFlow,
                            "vm.realSign('" + item.signid + "')", isRealSign);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                pageable: common.kendoGridConfig(vm.queryParams).pageable,
                dataBound: common.kendoGridConfig(vm.queryParams).dataBound,
                resizable: true
            };
        }//E_初始化grid


        //S_创建收文
        function createSign(model, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/sign",
                data: model
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_创建收文

        //start  根据协办部门查询用户
        function findOfficeUsersByDeptName(param, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/officeUser/findOfficeUsersByDeptName",
                data: param
            };

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //end  根据协办部门查询用户

        //Start 申报登记编辑
        function updateFillin(signObj, callBack) {
            var httpOptions = {
                method: 'put',
                url: rootPath + "/sign",
                data: signObj,
            }
            var httpSuccess = function success(response) {
                //关闭项目关联窗口
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //End 申报登记编辑

        //Start 删除收文
        function deleteSign(signid, callBack) {
            var httpOptions = {
                method: 'delete',
                url: rootPath + "/sign",
                params: {
                    signid: signid
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //End 删除收文

        //S_初始化填报页面数据
        function initFillData(signid, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/sign/html/initFillPageData",
                params: {
                    signid: signid
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_初始化填报页面数据

        //S_初始化详情数据
        function initDetailData(signid, callBack) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/sign/html/initDetailPageData",
                params: {
                    signid: signid
                }
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_初始化详情数据

        //S_初始化流程页面
        function initFlowPageData(signId, callBack) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/sign/initFlowPageData",
                params: {
                    signid: signId,
                    queryAll: true
                }
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_初始化流程页面

        //S_removeWP
        function removeWP(vm,callBack) {
            var httpOptions = {
                method: 'delete',
                url: rootPath + "/workprogram/deleteBySignId",
                params: {
                    signId: vm.model.signid
                }
            }
            var httpSuccess = function success(response) {
                vm.isSubmit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_removeWP

        //associateGrid（停用，2017-08-27，改用List的方式）
        function associateGrid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/sign/fingByOData", $("#searchAssociateform"), {filter: "isAssociate eq 0"}),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource

            // Begin:column
            var columns = [
                {
                    field: "projectname",
                    title: "项目名称",
                    width: 160,
                    filterable: false
                },
                {
                    field: "projectcode",
                    title: "收文编号",
                    width: 140,
                    filterable: false,
                },
                {
                    field: "designcompanyName",
                    title: "项目单位",
                    width: 200,
                    filterable: false,
                },
                {
                    field: "reviewstage",
                    title: "项目阶段",
                    width: 160,
                    filterable: false,
                },
                {
                    field: "projectcode",
                    title: "项目代码",
                    width: 140,
                    filterable: false,
                }
            ];
            // End:column
            vm.associateGridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true
            };
        }//E_初始化associateGrid


        //getAssociateSignGrid
        function getAssociateSignGrid(vm, callBack) {
            /* var httpOptions = {
             method: 'post',
             url: rootPath + "/sign/findAssociateSignList",
             params: {
             signid: vm.price.signid,
             reviewstage:vm.price.reviewstage,
             projectname:vm.price.projectname,
             skip:vm.price.skip,
             size:vm.price.size,

             },
             }
             var httpSuccess = function success(response) {
             if (callBack != undefined && typeof callBack == 'function') {
             callBack(response.data);
             }
             }

             common.http({
             $http: $http,
             httpOptions: httpOptions,
             success: httpSuccess
             });*/
            $http({
                method: 'post',
                url: rootPath + "/sign/findAssociateSignList",
                params: {
                    signid: vm.price.signid,
                    reviewstage: vm.price.reviewstage,
                    projectname: vm.price.projectname,
                    mUserName : vm.price.mUserName,
                    skip: vm.price.skip,
                    size: vm.price.size,
                },
            }).then(function (r) {
                if (typeof callBack == 'function') {
                    callBack(r.data);
                }
            });
        }//E_getAssociateSignGrid


        //S_获取关联项目
        function getAssociateSign(signModel, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/sign/findAssociateSign",
                data: signModel
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_getAssociateSign

        //start saveAssociateSign
        //如果associateSignId为空，解除关联
        function saveAssociateSign(signId, associateSignId, callBack) {
            associateSignId = associateSignId == 'undefined' ? null : associateSignId;
            var httpOptions = {
                method: 'post',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                url: rootPath + "/sign/associate",
                data: $.param({signId: signId, associateId: associateSignId}, true),

            }
            var httpSuccess = function success(response) {
                //关闭项目关联窗口
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //end saveAssociateSign

        //显示关联信息
        //start initAssociateSigns
        function initAssociateSigns(vm, singid) {
            var httpOptions = {
                method: 'get',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                url: rootPath + "/sign/associate?signId=" + singid,
            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        if (response.data != undefined) {
                            vm.associateSign = response.data;
                            var signs = response.data;

                            var html_ = '';
                            for (var i = (signs.length - 1); i >= 0; i--) {
                                var s = signs[i];
                                var signdate = s.signdate || '';
                                html_ += '<div class="intro-list">' +
                                    '<div class="intro-list-left">' +
                                    '项目阶段：' + s.reviewstage + "<br/>签收时间：" + signdate +
                                    '</div>' +
                                    '<div class="intro-list-right">' +
                                    '<span></span>' +
                                    '<div class="intro-list-content">' +
                                    '名称：<span style="color:red;">' + s.projectname + '</span><br/>' +
                                    '送件人：<span style="color:red;">' + s.sendusersign + '</span><br/>' +
                                    '</div>' +
                                    '</div>' +
                                    '</div>';

                            }
                            $('#introFlow').html(html_);
                            var step = $("#myStep").step({
                                animate: true,
                                initStep: 1,
                                speed: 1000
                            });

                        }
                    }
                });
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //end initAssociateSigns

        //S_meetingDoc
        function meetingDoc(vm, callBack) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/workprogram/createMeetingDoc",
                params: {
                    signId: vm.model.signid,
                    // workprogramId: wpId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof  callBack == "function") {
                    callBack(response.data);
                }
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_meetingDoc


        //S_createDispatchFileNum
        function createDispatchFileNum(signId, dispatchId, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/dispatch/createFileNum",
                params: {
                    signId: signId,
                    dispatchId: dispatchId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_createDispatchFileNum

        //S_项目正式签收
        function realSign(signid, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/sign/realSign",
                params: {
                    signid: signid
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
            });
        }//E_realSign


        //signGetBackGrid
        function signGetBackGrid(vm) {
            // Begin:dataSource
            /* var dataSource = new kendo.data.DataSource({
             type: 'odata',
             transport: common.kendoGridConfig().transport(rootPath + "/sign/fingByGetBack", $("#signBackform")),
             schema: common.kendoGridConfig().schema({
             id: "signid",
             fields: {
             createdDate: {
             type: "date"
             }
             }
             }),
             serverPaging: true,
             serverSorting: true,
             serverFiltering: true,
             pageSize: 10,
             sort: {
             field: "createdDate",
             dir: "desc"
             }
             });*/

            var dataSource = common.kendoGridDataSource(rootPath + "/sign/fingByGetBack", $("#signBackform"), vm.queryParams.page, vm.queryParams.pageSize, vm.gridParams);

            // End:dataSource

            // Begin:column
            var columns = [
                {
                    field: "",
                    title: "序号",
                    template: "<span class='row-number'></span>",
                    width: 50
                },
                {
                    field: "projectName",
                    title: "项目名称",
                    width: "25%",
                    filterable: false
                },
                {
                    field: "nodeNameValue",
                    title: "当前环节",
                    width: "10",
                    filterable: false,
                },
                {
                    field: "displayName",
                    title: "处理人",
                    width: "10",
                    filterable: false,
                },
                {
                    field: "",
                    title: "合并评审",
                    width: "12%",
                    filterable: false,
                    template: function (item) {
                        if (item.reviewType) {
                            if (item.reviewType == 9 || item.reviewType == '9') {
                                return "合并评审[主项目]";
                            } else {
                                return "合并评审[次项目]";
                            }
                        } else {
                            return "否";
                        }
                    }
                },
                {
                    field: "reviewStage",
                    title: "项目阶段",
                    width: "15%",
                    filterable: false,
                },
                {
                    field: "signDate",
                    title: "签收时间",
                    width: "10%",
                    filterable: false,
                },
                {
                    field: "",
                    title: "操作",
                    width: "12%",
                    template: function (item) {
                        return common.format($('#columnBtns').html(), "signFlowDetail", item.businessKey, item.taskId, item.processInstanceId, "vm.getBack");
                    }
                }

            ];
            // End:column
            vm.signGetBackGrid = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                pageable: common.kendoGridConfig(vm.queryParams).pageable,
                dataBound: common.kendoGridConfig(vm.queryParams).dataBound,
                resizable: true
            };
        }//E_初始化signGetBackGrid

        //S_项目取回
        function getBack(taskId, businessKey, callBack) {
            //var activityId= "SIGN_FGLD_FB";根据角色判断回退到哪个环节
            var httpOptions = {
                method: 'post',
                url: rootPath + "/sign/getBack",
                params: {
                    taskId: taskId,
                    businessKey: businessKey
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
            });
        }//getBack

        //编辑模板打印
        function editTemplatePrint(vm) {
            if (vm.model.reviewstage == '项目建议书' || vm.model.reviewstage == '可行性研究报告' || vm.model.reviewstage == '其它') {
                templatePrintSvc.templatePrint("sign_fill_xmjys_templ");
            } else if (vm.model.reviewstage == '资金申请报告') {
                templatePrintSvc.templatePrint("sign_fill_zjsq_templ");
            } else if (vm.model.reviewstage == '进口设备') {
                templatePrintSvc.templatePrint("sign_fill_jksb_templ");
            } else if (vm.model.reviewstage == '设备清单（国产）' || vm.model.reviewstage == '设备清单（进口）') {
                templatePrintSvc.templatePrint("sign_fill_sbqd_templ");
            } else if (vm.model.reviewstage == '项目概算') {
                templatePrintSvc.templatePrint("sign_fill_xmgs_templ");
            }
        }

        /*//工作方案详细打印
         function workProgramPrint(id){
         var tempStr1;
         var tempStr2;
         if(id.indexOf("wpMain")>-1){
         if(id=='wpMain'){
         tempStr1 = "wp1";
         tempStr2 = "wp2";
         }else{
         tempStr1 = "wpEdit1";
         tempStr2 = "wpEdit2";
         }
         var LODOP = getLodop();
         var strStylePath = rootPath +"/contents/shared/templatePrint.css";
         var strStyleCSS="<link href="+strStylePath+" type='text/css' rel='stylesheet'>";
         var strFormHtml1="<head>"+strStyleCSS+"</head><body>"+$("#"+tempStr1).html()+"</body>";
         LODOP.PRINT_INIT("");
         LODOP.ADD_PRINT_HTML(10,20,"100%","100%",strFormHtml1);
         LODOP.NewPage();
         var strFormHtml2="<head>"+strStyleCSS+"</head><body>"+$("#"+tempStr2).html()+"</body>";
         LODOP.ADD_PRINT_HTML(50,20,"100%","100%",strFormHtml2);
         LODOP.PREVIEW();
         }else if(id.indexOf("wp") > -1 ){
         var strArr  = id.split("_");
         var LODOP = getLodop();
         var strStylePath = rootPath +"/contents/shared/templatePrint.css";
         var strStyleCSS="<link href="+strStylePath+" type='text/css' rel='stylesheet'>";
         var strFormHtml1="<head>"+strStyleCSS+"</head><body>"+$("#wpTempl1"+strArr[1]+strArr[2]).html()+"</body>";
         LODOP.PRINT_INIT("");
         LODOP.ADD_PRINT_HTML(10,20,"100%","100%",strFormHtml1);
         LODOP.NewPage();
         var strFormHtml2="<head>"+strStyleCSS+"</head><body>"+$("#wpTempl2"+strArr[1]+strArr[2]).html()+"</body>";
         LODOP.ADD_PRINT_HTML(50,20,"100%","100%",strFormHtml2);
         LODOP.PREVIEW();
         }
         }*/

        //begin_signDeletGrid
        //作废项目
        function signDeletGrid(vm) {
            var dataSource = common.kendoGridDataSource(rootPath + "/signView/getSignList?$orderby=receivedate", $("#deletform"), vm.queryParams.page, vm.queryParams.pageSize, vm.gridParams);

            // Begin:column
            var columns = [
                {
                    field: "",
                    title: "序号",
                    template: "<span class='row-number text-center'></span>",
                    width: 40
                },
                {
                    field: "",
                    title: "项目名称",
                    width: 160,
                    filterable: false,
                    template: function (item) {
                        if (item.processInstanceId) {
                            return '<a ng-click="vm.saveView()" href="#/signDetails/' + item.signid + '/' + item.processInstanceId + '" >' + item.projectname + '</a>';
                        } else {
                            return '<a ng-click="vm.saveView()" href="#/signDetails/' + item.signid + '/" >' + item.projectname + '</a>';
                        }

                    }
                },
                {
                    field: "reviewstage",
                    title: "项目阶段",
                    width: 110,
                    filterable: false,
                },
                {
                    field: "projectcode",
                    title: "项目代码",
                    width: 100,
                    filterable: false
                },
                {
                    field: "signdate",
                    title: "签收日期",
                    width: 100,
                    filterable: false,
                    format: "{0:yyyy/MM/dd HH:mm:ss}"
                },
                {
                    field: "",
                    title: "操作",
                    width: 90,
                    filterable: false,
                    template: function (item) {
                        return common.format($('#columnBtns').html(), "vm.editSignState('" + item.signid + "')");

                    }
                }
            ];

            // End:column
            vm.signListOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                pageable: common.kendoGridConfig(vm.queryParams).pageable,
                dataBound: common.kendoGridConfig(vm.queryParams).dataBound
            };
        }//signDeletGrid


        //negin editSignState
        function editSignState(vm, callBack) {
            var httpOptions = {
                method: "post",
                url: rootPath + "/sign/editSignState",
                params: {signId: vm.signid, stateProperty: "signState", stateValue: vm.stateValue}
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        //end editSignState
        //begin editSignState
        //维护项目列表
        function MaintenanProjectGrid(vm) {
            var dataSource = common.kendoGridDataSource(rootPath + "/signView/getSignList", $("#Maintenanform"), vm.queryParams.page, vm.queryParams.pageSize, vm.gridParams);
            // Begin:column
            var columns = [
                {
                    field: "",
                    title: "序号",
                    template: "<span class='row-number text-center'></span>",
                    width: 50
                },
                {
                    field: "",
                    title: "项目名称",
                    width: 260,
                    filterable: false,
                    template: function (item) {
                        if (item.processInstanceId) {
                            return '<a ng-click="vm.saveView()" href="#/MaintainProjectEdit/' + item.signid + '/' + item.processInstanceId + '" >' + item.projectname + '</a>';
                        } else {
                            return '<a ng-click="vm.saveView()" href="#/MaintainProjectEdit/' + item.signid + '/" >' + item.projectname + '</a>';
                        }

                    }
                }, {
                    field: "builtcompanyname",
                    title: "建设单位",
                    width: 210,
                    filterable: false,
                },
                {
                    field: "reviewstage",
                    title: "评审阶段",
                    width: 120,
                    filterable: false,
                },
                {
                    field: "",
                    title: "项目状态",
                    width: 80,
                    filterable: false,
                    template: function (item) {
                        var returnStr = "";
                        switch (item.signState) {
                            case "1":
                                returnStr = "进行中";
                                break;
                            case "2":
                                returnStr = "暂停";
                                break;
                            case "8":
                                returnStr = "强制结束";
                                break;
                            case "9":
                                returnStr = "已完成";
                                break;
                            default:
                                ;
                        }
                        return returnStr;
                    }
                }, {
                    field: "signNum",
                    title: "收文编号",
                    width: 100,
                    filterable: false,
                }, {
                    field: "signdate",
                    title: "收文日期",
                    width: 100,
                    filterable: false,
                }, {
                    field: "dfilenum",
                    title: "发文号",
                    width: 100,
                    filterable: false,
                }, {
                    field: "ffilenum",
                    title: "归档编号",
                    width: 130,
                    filterable: false,
                }, {
                    field: "reviewOrgName",
                    title: "所属部门",
                    width: 100,
                    filterable: false,
                }, {
                    field: "allPriUser",
                    title: "项目负责人",
                    width: 100,
                    filterable: false,
                }, {
                    field: "dispatchType",
                    title: "发文类型",
                    width: 100,
                    filterable: false,
                }, {
                    field: "appalyInvestment",
                    title: "申报金额",
                    width: 100,
                    filterable: false,
                }, {
                    field: "authorizeValue",
                    title: "审定金额",
                    width: 100,
                    filterable: false,
                }, {
                    field: "extraValue",
                    title: "核减",
                    width: 100,
                    filterable: false,
                }, {
                    field: "approveValue",
                    title: "批复金额",
                    width: 100,
                    filterable: false,
                }
            ];

            // End:column
            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true,
                pageable: common.kendoGridConfig(vm.queryParams).pageable,
                dataBound: common.kendoGridConfig(vm.queryParams).dataBound
            };
        }

        //end editSignState

        //begin addAOrg
        function addAOrg(orgIds , signId , callBack){
            var httpOptions = {
                method : "post" ,
                url : rootPath + "/sign/addAOrg",
                params : {signId : signId  , orgIds : orgIds }
            }

            var httpSuccess = function success(response){
                if(callBack != undefined || typeof callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //end addAOrg

        //begin deleteAOrg
        function deleteAOrg(orgId  , signId , callBack){
            var httpOptions = {
                method : "delete" ,
                url : rootPath + "/sign/deleteOrg",
                params : {orgIds : orgId  , signId : signId}
            }

            var httpSuccess = function success(response){
                if(callBack != undefined || typeof callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //end deleteAOrg

        //begin addSecondUser
        function addSecondUser(userId ,  signId , callBack){
            var httpOptions = {
                method : "post" ,
                url : rootPath + "/sign/addSecondUser",
                params : {userId : userId  ,   signId : signId}
            }

            var httpSuccess = function success(response){
                if(callBack != undefined || typeof callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //end addSecondUser

        //begin deleteSecondUser
        function deleteSecondUser(userId , signId , callBack){
            var httpOptions = {
                method : "delete" ,
                url : rootPath + "/sign/deleteSecondUser",
                params : {userId : userId  ,   signId : signId}
            }

            var httpSuccess = function success(response){
                if(callBack != undefined || typeof callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //end deleteSecondUser

        //begin saveMoreExpert
        function saveMoreExpert(signId , isMoreExpert , callBack){
            var httpOptions = {
                method : "post",
                url : rootPath + "/sign/saveMoreExpert",
                params : {signId : signId , isMoreExpert : isMoreExpert}
            }
            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end saveMoreExpert

        function updateFGWState(signId , state , callBack){
            var httpOptions = {
                method : "post",
                url : rootPath + "/sign/updateSendFGWState",
                params : {
                    signId : signId ,
                    state : state
                }
            }
            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
    }
})();
(function () {
    'use strict';
    angular.module('app').controller('signChartCtrl', signChart);
    signChart.$inject = ['signChartSvc', 'bsWin'];
    function signChart(signChartSvc, bsWin) {
        var vm = this;
        vm.startTime = (new Date()).halfYearAgo();
        vm.endTime = new Date().Format("yyyy-MM-dd");

        vm.statsType = '1' ;// 默认是 申报金额统计
        vm.chartType = 'lineChart';//默认为折线图

        vm.reviewStage = [];//评审阶段



        /**
         * 图形切换触发事件
         */
        $("input[type='radio']").click(function(){
            var selectType = $("input[type='radio']:checked").val();
            if (selectType == 'lineChart') {
                vm.gotoLineChart();
            } else if (selectType == 'histogram') {
                vm.gotoHistogram();
            } else if (selectType == 'pie') {
                vm.gotoPie();
            }

        })


        /**
         * 通过开始和结束日期重新统计项目信息情况
         */
        vm.resetChart = function () {

            vm.resultData = []; //柱状图 - y轴的值
            //申报金额统计
            if(vm.statsType == '1'){
                vm.chartType = 'lineChart';//默认为折线图
                activate();
            }
            //项目类别
            if(vm.statsType == '2'){
                vm.chartType = 'histogram';//默认为柱状图
                vm.review = [ '项目建议书','可行性研究报告','项目概算', '资金申请报告', '设备清单（进口）', '设备清单（国产）',  '进口设备', '其它']; // 横坐标
                vm.title = "项目类别分布情况"; //统一标题
                vm.capital = ['市政工程', '房建工程', '信息工程', '设备采购', '其他']; // 柱状图类型
                vm.yAxisName = "项目个数"; // 柱状图 - y坐标单位
                vm.sz = [];//市政工程
                vm.fj = [];//房建工程
                vm.xx = [];//信息工程
                vm.sb = [];//设备采购
                vm.qt = [];//其他
                vm.lineLegendData = ['审定/申报']; // 折线 - 类型
                vm.lineResultValue = []; //折线 -
                vm.LineYAxisName = "百分比（%）"; //折线 - y坐标单位

                signChartSvc.findByTypeAndReview(vm, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        var resultData = data.reObj;
                        for(var j = 0 ; j < vm.review.length ; j ++ ){
                            for(var i =0 ; i < resultData.length ; i++) {
                                $.each(resultData[i], function (key, value) {
                                    if(key == vm.review[j]){
                                        vm.sz.push(value[0]);
                                        vm.fj.push(value[1]);
                                        vm.xx.push(value[2]);
                                        vm.sb.push(value[3]);
                                        vm.qt.push(value[4]);
                                    }
                                });
                            }
                        }
                        vm.resultData.push(vm.sz, vm.fj, vm.xx, vm.sb, vm.qt);
                        vm.gotoHistogram();
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            }

            //项目金额
            if(vm.statsType == '3'){
                vm.chartType = 'pie';//默认为饼图
                vm.title = "项目申报投资金额分布情况"; //统一标题
                vm.stage = ['3000万以下', '3000万-1亿', '1亿-10亿', '10亿以上']; // 饼图 - 各分布范围

                signChartSvc.pieData(vm, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        vm.resultData = data.reObj;
                        if (vm.resultData != undefined && vm.resultData != null) {
                            vm.gotoPie();
                        } else {
                            bsWin.error("该时间段没有数据！");
                        }

                    } else {
                        bsWin.error(data.reMsg);
                    }

                });


            }

        }


        /**
         * 柱状图
         */
        vm.gotoHistogram = function () {
            vm.showHistogram = true;
            vm.showLineChart = false;
            vm.showPie = false;
            vm.series = [];
            for (var i = 0; i < vm.capital.length; i++) {
                vm.series.push(
                    {
                        name: vm.capital[i],
                        type: 'bar', //bar line
                        data: vm.resultData[i],
                        barWidth: 10,//设置柱子的宽度
                        itemStyle: {
                            normal: {
                                label: {
                                    show: true,
                                    position: 'top',
                                    formatter: function (params) {
                                        return params.value;
                                    }
                                }
                            }
                        },
                    }
                );
            }
            vm.initHistogram();

        }

        /**
         * 初始化柱状图数据
         */
        vm.initHistogram = function () {
            var myChart = echarts.init(document.getElementById('histogram')); //只能用javaScript获取节点，如用jquery方式则找不到节点
            var option = {
                title: {
                    text: vm.title,
                    // subtext: '按评审阶段划分',
                    x: 'center'
                },
                tooltip: {//提示框设置
                    trigger: 'axis',
                    axisPointer: {
                        type: 'cross', //cross  line  shadow
                        label: {
                            backgroundColor: '#283b56'
                        }
                    }
                },
                legend: { //头部显示说明，注意：data值要与series中的name一致，顺序可以不一致
                    orient: 'vertical',
                    left: 'left',
                    data: vm.capital
                },
                //工具栏设置
                toolbox: {
                    show: true,
                    x: '80%',
                    feature: {
                        dataView: {show: true, readOnly: true},//数据统计
                        restore: {show: true},//还原
                        saveAsImage: {show: true}//下载
                    },
                    optionToContent : function(opt){

                        var axisData = opt.xAxis[0].data;
                        var series = opt.series;
                        var table ='<table id="test" class="table-bordered table-striped" style="width:100%;text-align:center">';
                        table += '<tbody><tr>';

                        //遍历表头
                        table += '<th style="text-align: center;">评审阶段</th>';
                        for(var i=0 ; i<series.length; i++){
                            if(vm.statsType == '1'){

                                table += '<th style="text-align: center;">' + series[i].name + '(亿元)' + '</th>';
                            }
                            if(vm.statsType == '2'){
                                table += '<th style="text-align: center;">' + series[i].name + '(个)' + '</th>';
                            }
                        }
                        table  += '</tr>';

                        //遍历行
                        for (var i = 0, l = axisData.length; i < l; i++) {
                            table += '<tr>' + '<td>' + axisData[i] + '</td>';
                            for(var j = 0 ; j < series.length ; j++){
                                table += '<td>' + series[j].data[i] + '</td>';
                            }
                        }
                        table += '</tbody>';
                        return table;

                    }
                },

                //设置坐标
                grid: {
                    // 这些是设置坐标边距
                    left: '13%',
                    right: '10%',
                    bottom: '10%',
                    containLabel: true,
                    //设置xy轴宽度
                    // y : 70,
                    // x : 60
                },
                xAxis: {
                    type: 'category',
                    name: '评审阶段',
                    data: vm.review,
                    axisTick: {
                        alignWithLabel: true
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: 35,//倾斜度 -90 至 90 之间，默认为0
                        margin: 2,
                        textStyle: {
                            fontWeight: 'bolder',
                            color: '#295645'
                        }
                    }
                },
                yAxis: {
                    type: 'value',
                    name: vm.yAxisName,
                    min: 0,
                    // max: 1000,
                    // interval: 100, //刻度值
                },
                series: vm.series,
                itemStyle: {
                    emphasis: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0,0,0,0.5)'
                    }
                }
            };
            myChart.clear(); // 再次加载数据时，先清空表格，后再设置值，以防会保留原先的数据信息
            myChart.setOption(option);
        }//end initHistogram

        /**
         * 折线图
         */
        vm.gotoLineChart = function () {
            vm.showHistogram = false;
            vm.showPie = false;
            vm.showLineChart = true;
            vm.lineSeries = [];
            for (var i = 0; i < vm.lineLegendData.length; i++) {
                vm.lineSeries.push(
                    {
                        name: vm.lineLegendData[i],
                        type: 'line', //bar line
                        data: vm.lineResultValue,
                        itemStyle: {
                            normal: {
                                label: {
                                    show: true,
                                    position: 'top',
                                    textStyle: { //设置图表上数目的大小
                                        fontWeight: 'normal',
                                        fontSize: 15
                                    },
                                    formatter: function (params) {
                                        return params.value;
                                    },

                                }
                            }
                        },
                    }
                );
            }
            vm.initLineChart();

            //申报金额分布情况
            /*  if(vm.statsType == '1'){
             vm.series.push(
             {
             name: "审定/申报",
             type: 'line', //bar line
             data: vm.sdbsRatio,
             itemStyle: {
             normal: {
             label: {
             show: true,
             position: 'top',
             textStyle: { //设置图表上数目的大小
             fontWeight: 'normal',
             fontSize: 15
             },
             formatter: function (params) {
             return params.value;
             },

             }
             },
             }
             });
             vm.initLineChart();
             }*/
            /* if(vm.statsType == '2'){

             signChartSvc.findByTypeAndReview(vm, function (data) {
             if (data.flag || data.reCode == 'ok') {
             var resultData = data.reObj;
             if (resultData != undefined && resultData.length > 0) {
             for (var i = 0; i < resultData.length; i++) {
             $.each(resultData[i], function (key, value) {
             vm.reviewStage.push(key);
             vm.sz.push(value[0]);
             vm.fj.push(value[1]);
             vm.xx.push(value[2]);
             vm.sb.push(value[3]);
             vm.qt.push(value[4]);

             });
             }
             vm.resultData.push(vm.sz, vm.fj, vm.xx, vm.sb, vm.qt);
             for (var i = 0; i < vm.projectType.length; i++) {
             vm.series.push(
             {
             name: vm.projectType[i],
             type: 'line', //bar line
             data: vm.resultData[i],
             itemStyle: {
             normal: {
             label: {
             show: true,
             position: 'top',
             textStyle: { //设置图表上数目的大小
             fontWeight: 'normal',
             fontSize: 15
             },
             formatter: function (params) {
             return params.value;
             },

             }
             }
             },
             }
             );
             }
             }
             vm.initLineChart();
             } else {
             bsWin.error(data.reMsg);
             }
             });
             }*/
        }

        /**
         * 初始化折线图
         */
        vm.initLineChart = function () {
            var myChart = echarts.init(document.getElementById('lineChart'));
            var option = {
                title: {
                    text: vm.title,
                    // subtext: '按评审阶段划分',
                    x: 'center'
                },
                tooltip: {
                    trigger: 'item',
                    formatter: function(params){
                        for(var i = 0 ; i < vm.extraRate.length ; i++){
                            if(params.name == vm.extraRate[i].reviewStage){
                                return params.name + '<br/>' + ' 核减率 : ' + vm.extraRate[i].value + "%";
                            }

                        }

                    }
                },
                //设置坐标
                grid: {
                    left: '13%',
                    right: '10%',
                    bottom: '10%',
                    containLabel: true,
                },
                toolbox: {
                    show: true,
                    x: '80%',
                    feature: {
                        dataView: {show: true, readOnly: true},//数据统计
                        restore: {show: true},//还原
                        saveAsImage: {show: true}//下载
                    },
                    optionToContent : function(opt){
                        var axisData = opt.xAxis[0].data;
                        var series = opt.series;
                        var table ='<table id="test" class="table-bordered table-striped" style="width:100%;text-align:center">';
                        table += '<tbody><tr>';

                        //遍历表头
                        table +=  '<th style="text-align: center;">评审阶段</th>';
                        for(var i=0 ; i<series.length; i++){
                            table +=  '<th style="text-align: center;">' + series[i].name + '</th>';
                        }
                        table  +=  '</tr>';

                        //遍历行
                        for (var i = 0, l = axisData.length; i < l; i++) {
                            table += '<tr>' + '<td>' + axisData[i] + '</td>';
                            for(var j = 0 ; j < series.length ; j++){
                                table += '<td>' + series[j].data[i] + '</td>';
                            }
                        }
                        table += '</tbody>';
                        return table;

                    }
                },
                legend: {
                    orient: 'vertical',
                    left: 'left',
                    data: vm.lineLegendData
                },
                xAxis: {
                    type: 'category',
                    name: '评审阶段',
                    splitLine: {show: false},
                    data: vm.review,
                    axisLabel: {
                        interval: 0,
                        rotate: 35,//倾斜度 -90 至 90 之间，默认为0
                        margin: 2,
                        textStyle: {
                            fontWeight: 'bolder',
                            color: '#295645'
                        }
                    }
                },
                yAxis: {
                    type: 'value',
                    name: vm.LineYAxisName,
                    min: 0,
                    // max: 100,
                    // interval: 20

                },
                series: vm.lineSeries,
                lineStyle: {
                    emphasis: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0,0,0,0.5)'
                    }
                }
            };
            myChart.clear();
            myChart.setOption(option);

        }//end initLineChart


        /**
         * 饼图
         */
        vm.gotoPie = function () {
            vm.showHistogram = false;
            vm.showLineChart = false;
            vm.showPie = true;
            vm.series = [];
            vm.tooltipFormater = []; //饼图 - 提示框内容设置
            for (var i = 0; i < vm.resultData[1].length; i++) {
                vm.series.push(
                    {
                        value: vm.resultData[1][i],
                        name: vm.stage[i],
                        label: {
                            normal: {
                                formatter: ' {b} : {c}%',
                                textStyle: {
                                    fontWeight: 'normal',
                                    fontSize: 15
                                }
                            }
                        }
                    }
                )
                vm.tooltipFormater.push(
                    {
                        seriesName: "项目数",
                        totalName: "项目总数",
                        totalValue: vm.resultData[2],
                        name: vm.stage[i],
                        pidName: "占百分比",
                        data: vm.resultData[0][i],
                        value: vm.resultData[1][i]

                    }
                );
            }
            vm.initPie();

            /*signChartSvc.pieData(vm, function (data) {
                if (data.flag || data.reCode == 'ok') {
                    var resultData = data.reObj;
                    if (resultData != undefined && resultData != null) {
                        if (resultData[1] != undefined && resultData[1].length > 0) {
                            for (var i = 0; i < resultData[1].length; i++) {
                                vm.series.push(
                                    {
                                        value: resultData[1][i],
                                        name: vm.stage[i],
                                        label: {
                                            normal: {
                                                formatter: ' {b} : {c}%',
                                                textStyle: {
                                                    fontWeight: 'normal',
                                                    fontSize: 15
                                                }
                                            }
                                        }
                                    }
                                )

                                vm.tooltipFormater.push(
                                    {
                                        seriesName: "项目数",
                                        totalName: "项目总数",
                                        totalValue: resultData[2],
                                        name: vm.stage[i],
                                        pidName: "占百分比",
                                        data: resultData[0][i],
                                        value: resultData[1][i]

                                    }
                                );
                            }
                        }
                        vm.initPie();
                    } else {
                        bsWin.error("该时间段没有数据！");
                    }

                } else {
                    bsWin.error(data.reMsg);
                }

            });
*/
        }


        /**
         * 初始化饼图
         */
        vm.initPie = function () {
            var myChart = echarts.init(document.getElementById('pie'));
            var option = {
                title: {
                    text: vm.title,
                    // subtext: '按申报金额范围划分',
                    x: 'center'
                },
                tooltip: {
                    trigger: 'item',
                    width: 150,
                    formatter: function (params) {
                        for (var i = 0; i < vm.tooltipFormater.length; i++) {
                            if (vm.tooltipFormater[i].name == params.name) {
                                return params.name + "<br/>"
                                    + vm.tooltipFormater[i].seriesName + " : " + vm.tooltipFormater[i].data + "<br/>"
                                    + vm.tooltipFormater[i].totalName + " : " + vm.tooltipFormater[i].totalValue + "<br/>"
                                    + vm.tooltipFormater[i].pidName + " : " + vm.tooltipFormater[i].value + "%";
                            }

                        }
                    }
                },
                grid: {
                    left: '10%',
                    right: '10%',
                    bottom: '10%',
                    containLabel: true,
                },
                toolbox: {
                    show: true,
                    x: '80%',
                    feature: {
                        dataView: {show: true, readOnly: true},//数据统计
                        restore: {show: true},//还原
                        saveAsImage: {show: true}//下载
                    },
                    optionToContent : function(opt){
                        var series = opt.series[0].data;
                        var table ='<table id="test" class="table-bordered table-striped" style="width:100%;text-align:center">';
                        table += '<tbody><tr>';

                        //遍历表头
                        table += '<th style="text-align: center;">申报金额范围</th>';
                        table += '<th style="text-align: center;">' + '占百分比(%)' + '</th>';
                        table  += '</tr>';

                        //遍历行
                        for (var i = 0, l = series.length; i < l; i++) {
                            table += '<tr>' + '<td>' + series[i].name + '</td>';
                            table += '<td>' + series[i].value + '</td>';
                        }
                        table += '</tbody>';
                        return table;
                    }
                },
                legend: {
                    orient: 'vertical',
                    left: 'left',
                    data: vm.stage
                },
                series: [
                    {
                        type: 'pie',
                        radius: '30%',//半径
                        center: ['50%', '50%'],
                        selectMode: 'single',
                        data: vm.series,
                        itemStyle: {
                            emphasis: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0,0,0,0.5)'
                            }
                        }

                    }
                ]

            };
            myChart.clear();
            myChart.setOption(option);
        }//end initPie


        activate();
        function activate() {
            vm.review = ['项目建议书', '可行性研究报告', '项目概算',  '资金申请报告',  '其它']; // 横坐标
            vm.title = "项目申报投资金额分布情况"; //统一标题
            vm.capital = ['申报金额', '审定金额']; // 柱状图类型
            vm.yAxisName = "金额（亿元）"; // 柱状图 - y坐标单位
            vm.lineLegendData = ['审定/申报']; // 折线 - 类型
            vm.lineResultValue = []; //折线 -
            vm.LineYAxisName = "百分比（%）"; //折线 - y坐标单位
            vm.appalyinvestment = []; //申报金额
            vm.authorizeValue = []; //审定金额
            vm.extraRate = [] ; //核减率
            // vm.projectCount = []; //项目数目
            vm.resultData = []; //柱状图- y轴的值

            signChartSvc.findByTime(vm, function (data) {
                if (data.flag || data.reCode == 'ok') {
                    var resultData = data.reObj;
                    if (resultData != undefined && resultData.length > 0) {
                        for(var j = 0 ; j < vm.review.length ; j ++ ){
                            for (var i = 0; i < resultData.length; i++) {
                                $.each(resultData[i], function (key, value) {
                                    if( key == vm.review[j]){
                                        // vm.reviewStage.push(key);
                                        vm.appalyinvestment.push(value[0]);
                                        vm.authorizeValue.push(value[1]);
                                        // vm.projectCount.push(value[2]);
                                        vm.lineResultValue.push(value[3] == undefined ? 0 : value[3]);
                                        vm.extraRate.push({
                                            reviewStage : key ,
                                            value : value[4] == undefined ? 0 : value[4]
                                        });
                                    }

                                });
                            }
                        }
                        vm.resultData.push(vm.appalyinvestment, vm.authorizeValue);
                        vm.gotoLineChart();
                    }
                } else {
                    bsWin.error(data.reMsg);
                }
            });
        }//end_activate







    }
})();
(function(){
    'use strict';
    angular.module("app").factory('signChartSvc' , signChart);

    signChart.$inject = ['$http'];
    function signChart($http){
        var service = {
            findByTime : findByTime , //通过时间段获取项目信息
            pieData : pieData , //通过申报金额统计项目信息
            findByTypeAndReview : findByTypeAndReview ,//按评审阶段’项目类别 查询项目信息
            getDate : getDate,//获取半年前日期

        }
        return service;

        //begin getDate
        function getDate(callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + '/signView/getDate',
            }

            var httpSuccess = function(response){
                if(callBack != undefined && typeof  callBack=='function'){
                    callBack(response.data);
                }
            }
            common.http({
                httpOptions : httpOptions ,
                $http : $http ,
                success : httpSuccess
            });
        }
        //end getDate

        //begin findByTime
        function findByTime(vm, callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + '/signView/findByTime',
                params : {startTime : vm.startTime , endTime : vm.endTime}
            }

            var httpSuccess = function(response){
                if(callBack != undefined && typeof  callBack=='function'){
                    callBack(response.data);
                }
            }
            common.http({
                vm : vm,
                httpOptions : httpOptions ,
                $http : $http ,
                success : httpSuccess
            });
        }
        //end findByTime

        //begin pieData
        function pieData(vm , callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + '/signView/pieDate',
                params : {startTime : vm.startTime , endTime : vm.endTime}
            }

            var httpSuccess = function(response){
                if(callBack != undefined && typeof  callBack=='function'){
                    callBack(response.data);
                }
            }
            common.http({
                vm : vm,
                httpOptions : httpOptions ,
                $http : $http ,
                success : httpSuccess
            });
        }
        //end pieData

        //begin findByTypeAndReview
        function findByTypeAndReview(vm , callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + '/signView/findByTypeAndReview',
                params : {startTime : vm.startTime , endTime : vm.endTime}
            }

            var httpSuccess = function(response){
                if(callBack != undefined && typeof  callBack=='function'){
                    callBack(response.data);
                }
            }
            common.http({
                vm : vm,
                httpOptions : httpOptions ,
                $http : $http ,
                success : httpSuccess
            });
        }
        //end findByTypeAndReview
    }
})();
(function () {
    'use strict';
    angular.module('app').controller('signDeletCtrl', signDelet);

    signDelet.$inject = ['signSvc', 'flowSvc', 'signFlowSvc', 'bsWin','$state','$rootScope','pauseProjectSvc'];

    function signDelet(signSvc, flowSvc, signFlowSvc, bsWin,$state,$rootScope,pauseProjectSvc) {
        var vm = this;
        vm.title = "作废项目列表";

        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.signListOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }

        //查找
        vm.query = function () {
            vm.signListOptions.dataSource._skip=0;
            vm.signListOptions.dataSource.read();
        }

        //恢复项目
        vm.editSignState = function (signid) {
            vm.signid = signid;
            pauseProjectSvc.getProjectStopBySignId(signid,function (data) {//查找作项目是否暂停
                if(data[0].isactive=="9" && data[0].isOverTime=="9"){//根据后台查回来最新数据的第一条来判断<后台已根据创建时间来排序了。保证第一天都是最新的>
                    vm.stateValue="2"//恢复时项目是暂停的
                }else{
                    vm.stateValue="1"//恢复时项目是进行时的
                }
            })
            bsWin.confirm({
                title: "询问提示",
                message: "确认要恢复项目吗？",
                onOk: function () {
                    signSvc.editSignState(vm,function (data) {
                        if(data.flag || data.reCode == 'ok'){
                            bsWin.alert("恢复成功！",function(){
                                vm.signListOptions.dataSource.read();
                            })
                        }else{
                            bsWin.alert(data.reMsg);
                        }

                    })
                }
            });

        }

        /**
         * 重置
         */
        vm.formReset = function () {
            var tab = $("#deletform").find('input,select').not(":submit, :reset, :image, :disabled,:hidden");
            $.each(tab, function (i, obj) {
                obj.value = "";
            });
        }

        active();
        function active() {

            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.project = preView.data.project;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                signSvc.signDeletGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                signSvc.signDeletGrid(vm);
            }

        }

    }
})();
/**
 * Created by Administrator on 2017/11/10.
 */
(function () {
    'use strict';
    angular.module('app').controller('signGetBackCtrl', signGetBack);

    signGetBack.$inject = ['signSvc', 'flowSvc', 'signFlowSvc', 'bsWin','$state','$rootScope'];

    function signGetBack(signSvc, flowSvc, signFlowSvc, bsWin,$state,$rootScope) {
        var vm = this;
        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.signGetBackGrid.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }
        vm.getBack = function (taskId, businessKey) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认取回吗？",
                onOk: function () {
                    signSvc.getBack(taskId, businessKey,function(data){
                        if(data.flag || data.reCode == 'ok'){
                            bsWin.alert("取回项目成功",function(){
                                vm.signGetBackGrid.dataSource.read();
                                //项目待办加1
                                var totalCount = parseInt( $('#DO_SIGN_COUNT').html());
                                $('#DO_SIGN_COUNT').html((totalCount + 1));
                            });
                        }else{
                            bsWin.alert(data.reMsg);
                        }
                    });
                }
            });
        }

        vm.query=function () {//查找
         vm.signGetBackGrid.dataSource._skip=0;
         vm.signGetBackGrid.dataSource.read();
        }

        active();
        function active() {
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                //恢复查询条件
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                signSvc.signGetBackGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                signSvc.signGetBackGrid(vm);
            }

        }

    }
})();

(function () {
    'use strict';
    angular.module('app').controller('MaintainProjectCtrl', MaintainProject);

    MaintainProject.$inject = ['signSvc', 'flowSvc', 'signFlowSvc', 'bsWin','$state','$rootScope'];

    function MaintainProject(signSvc, flowSvc, signFlowSvc, bsWin,$state,$rootScope) {
        var vm = this;
        vm.title = "维护项目列表";
        vm.model={};

        //获取到当前的列表
        vm.stateName = $state.current.name;
        //查询参数
        vm.queryParams = {};
        //点击时。保存查询的条件和grid列表的条件
        vm.saveView = function(){
            $rootScope.storeView(vm.stateName,{gridParams:vm.gridOptions.dataSource.transport.options.read.data(),queryParams:vm.queryParams,data:vm});

        }

        //查找
        vm.query = function () {
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        /**
         * 重置
         */
        vm.formReset = function () {
            var tab = $("#deletform").find('input,select').not(":submit, :reset, :image, :disabled,:hidden");
            $.each(tab, function (i, obj) {
                obj.value = "";
            });
        }

        active();
        function active() {
            if($rootScope.view[vm.stateName]){
                var preView = $rootScope.view[vm.stateName];
                //恢复grid
                if(preView.gridParams){
                    vm.gridParams = preView.gridParams;
                }
                //恢复表单参数
                if(preView.data){
                    vm.model = preView.data.model;
                }
                //恢复数据
                /*vm.project = preView.data.project;*/
                //恢复页数页码
                if(preView.queryParams){
                    vm.queryParams=preView.queryParams;
                }

                signSvc.MaintenanProjectGrid(vm);
                //清除返回页面数据
                $rootScope.view[vm.stateName] = undefined;
            }else {
                signSvc.MaintenanProjectGrid(vm);
            }

        }

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('MaintainProjectEditCtrl', MaintainProjectEdit);

    MaintainProjectEdit.$inject = ['pauseProjectSvc', 'signSvc', '$state', 'flowSvc', '$scope', 'sysfileSvc',
        'addRegisterFileSvc', 'bsWin' , 'orgSvc' , 'userSvc'];

    function MaintainProjectEdit(pauseProjectSvc, signSvc, $state, flowSvc, $scope, sysfileSvc, addRegisterFileSvc, bsWin , orgSvc , userSvc) {
        var vm = this;
        vm.title = "维护项目修改";
        vm.model = {};
        vm.model.signid = $state.params.signid;   //业务ID
        vm.model.processInstanceId = $state.params.processInstanceId;	//流程实例ID
        vm.isHaveWork = false;
        vm.isHaveDis = false;
        vm.isHaveFile = false;
        vm.isHaveBaseInfo = false;
        vm.isHaveNoWP = false;
        vm.signWorkList = {};
        //初始化附件上传控件
        vm.initFileUpload = function () {
            //创建附件对象
            vm.sysFile = {
                businessId: vm.model.signid,
                mainId: vm.model.signid,
                mainType: sysfileSvc.mainTypeValue().SIGN,
                sysfileType: sysfileSvc.mainTypeValue().WORKPROGRAM,
                sysBusiType: sysfileSvc.mainTypeValue().WORKPROGRAM,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm,
                uploadSuccess: function () {
                    //5、附件
                    sysfileSvc.findByMianId(vm.model.signid, function (data) {
                        if (data && data.length > 0) {
                            vm.isDisplay = true;//删除附件按钮
                            vm.sysFileList = data;
                            sysfileSvc.initZtreeClient(vm, $scope);//树形图
                        }
                    });
                }
            });
        }
        active();
        function active() {
            $('#myTab li').click(function (e) {
                var aObj = $("a", this);
                e.preventDefault();
                aObj.tab('show');
                var showDiv = aObj.attr("for-div");
                $(".tab-pane").removeClass("active").removeClass("in");
                $("#" + showDiv).addClass("active").addClass("in").show(500);
                vm.model.showDiv = showDiv;
            })
            // 初始化业务信息
            signSvc.initFlowPageData(vm.model.signid, function (data) {
                vm.model = data;
                if(vm.model.dispatchDocDto){
                    vm.dispatchDoc = vm.model.dispatchDocDto;
                    vm.isHaveDis = true;
                }
                if(vm.model.fileRecordDto){
                    vm.fileRecordDto = vm.model.fileRecordDto;
                    vm.isHaveFile = true;
                }
                if (vm.model.workProgramDtoList) {
                    var wpLength = vm.model.workProgramDtoList.length;
                    if(wpLength > 0){
                        vm.isHaveWork = true;
                        for (var i = 0; i < wpLength; i++) {
                            if (vm.model.workProgramDtoList[i].branchId == "1") {
                                vm.work = vm.model.workProgramDtoList[i];//主的工作方案
                            }
                        }
                    }
                }
                //是否有项目基本信息
                if(vm.model.projBaseInfoDto){
                    vm.isHaveBaseInfo = true;
                }
                //即没有工作方案，也没有项目基本信息
                if(!vm.isHaveWork && !vm.isHaveBaseInfo){
                    vm.isHaveNoWP = true;
                }

                //评审部门，主办部门 + 协办部门
                vm.orgName = vm.model.mOrgName
                if(vm.orgName){
                    vm.orgName += vm.model.aOrgName == undefined ? "" : "," + vm.model.aOrgName;
                }else{
                    vm.orgName = vm.model.aOrgName;
                }
                vm.secondChargeUserName = [] ;
                //项目负责人
                if(vm.model.aUserName){
                    vm.secondChargeUserName = vm.model.aUserName.split(",")
                }
                //5、附件
                sysfileSvc.findByMianId(vm.model.signid, function (data) {
                    if (data && data.length > 0) {
                        vm.isDisplay = true;//删除附件按钮
                        vm.sysFileList = data;
                        sysfileSvc.initZtreeClient(vm, $scope);//树形图
                    }
                });
            });
            vm.initFileUpload();
        }

        //  登记表补充资料
        vm.addRegisterFile = function () {
            $state.go('registerFile', {businessId: vm.model.signid});
        }
        // S_跳转到 工作方案 编辑页面
        vm.addWorkProgram = function () {
            if( vm.isHaveWork){
                $state.go('maintWorkprogramEdit', {signid: vm.model.signid});
            }else{
                bsWin.alert("该项目没有工作方案！");
            }
        }
        //跳转到项目基本信息编辑页
        vm.addBaseInfo = function(){
            $state.go('initProjBase', {signid: vm.model.signid,isadmin:true});
        }
        // E_跳转到 工作方案 编辑页面

        // S_跳转到 发文 编辑页面
        vm.addDisPatch = function () {
            if( vm.isHaveDis) {
                $state.go('dispatchEdit', {signid: vm.model.signid, isControl: true});
            }else{
                bsWin.alert("该项目没有发文！");
            }
        }// E_跳转到 发文 编辑页面

        //跳转到归档页面
        vm.addDoFile = function () {
            if (vm.isHaveFile) {
                $state.go('fileRecordEdit', {signid: vm.model.signid, isControl: true});
            } else {
                bsWin.alert("该项目还没有填写归档");
            }
        }

        //start  作废项目
        vm.scrap = function (signid) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认作废该条项目吗？",
                onOk: function () {
                    signSvc.deleteSign(signid, function (data) {
                        if (data.flag || data.reCode == 'ok') {
                            bsWin.alert("操作成功！", function () {
                                $state.go('MaintainProjectList');
                            })
                        } else {
                            bsWin.alert(data.reMsg);
                        }
                    });
                }
            });
        }
        //end 作废项目

        /**
         * 项目暂停
         * @param signid
         */
        vm.pauseProject = function () {
            pauseProjectSvc.findPausingProject(vm, vm.model.signid);
        }
        //S_链接到拟补充资料函
        vm.addSuppLetter = function () {
            $state.go('addSupp', {businessId: vm.model.signid, businessType: "SIGN", isControl: true});
        }
        // E_跳转到 拟补充资料函 编辑页面

        //关联其他项目阶段
        vm.relation = function () {
            if (vm.model.dispatchDocDto) {
                if (!vm.ss) {
                    vm.page = lgx.page.init({
                        id: "demo5", get: function (o) {
                            //根据项目名称，查询要关联阶段的项目
                            if (!vm.price) {
                                vm.price = {
                                    signid: vm.model.signid,
                                    projectname: vm.model.projectname,
                                };
                            }
                            vm.price.reviewstage = vm.model.reviewstage; //设置评审阶段
                            var skip;
                            //oracle的分页不一样。
                            if (o.skip != 0) {
                                skip = o.skip + 1
                            } else {
                                skip = o.skip
                            }
                            vm.price.skip = skip;//页码
                            vm.price.size = o.size + o.skip;//页数
                            signSvc.getAssociateSignGrid(vm, function (data) {
                                vm.associateSignList = [];
                                if (data) {
                                    vm.associateSignList = data.value;
                                    vm.page.callback(data.count);//请求回调时传入总记录数
                                }
                                vm.ss = true;
                            });
                            //alert("当前页："+o.number+"，从数据库的位置1"+o.skip+"起，查"+o.size+"条数据");
                            //需在这里发起ajax请求查询数据，请求成功后需调用callback方法重新计算分页

                        }
                    });

                } else {
                    vm.page.selPage(1);
                }


                //选中要关联的项目
                $("#associateWindow").kendoWindow({
                    width: "75%",
                    height: "750px",
                    title: "项目关联",
                    visible: false,
                    modal: true,
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "close"],
                }).data("kendoWindow").center().open();

            } else {
                bsWin.alert("该项目还没有填写发文");
            }
        }

        //S_查找项目信息
        vm.findExpertReview = function (signid, signState) {
            if (signState == 9) {
                bsWin.alert("该项目已归档，不能再修改！");
            } else {
                vm.signWorkList = {};
                signSvc.findExpertReview(signid, function (data) {
                    if (data || data.length > 0) {
                        vm.signWorkList = data;
                        $("#signWorkDiv").kendoWindow({
                            width: "860px",
                            height: "320px",
                            title: "抽取专家维护",
                            visible: false,
                            modal: true,
                            closable: true,
                            actions: ["Pin", "Minimize", "Maximize", "close"]
                        }).data("kendoWindow").center().open();
                    }
                });
            }
        }

        vm.colseOpenWin = function () {
            window.parent.$("#signWorkDiv").data("kendoWindow").close();
        }

        //附件下载
        vm.commonDownloadSysFile = function (sysFileId) {
            sysfileSvc.downloadFile(sysFileId);
        }
        /**
         * 删除附件
         * @param fileId
         */
        vm.delFile = function (fileId) {
            bsWin.confirm({
                title: "询问提示",
                message: "确认删除么？",
                onOk: function () {
                    sysfileSvc.delSysFile(fileId, function () {
                        bsWin.alert("删除成功", function () {
                            sysfileSvc.findByMianId(vm.model.signid, function (data) {
                                if (data && data.length > 0) {
                                    vm.sysFileList = data;
                                    sysfileSvc.initZtreeClient(vm, $scope);//树形图
                                }
                            });
                        })
                    });
                }
            });
        }

        //关联项目条件查询
        vm.associateQuerySign = function () {
            signSvc.getAssociateSignGrid(vm, function (data) {
                vm.associateSignList = [];
                if (data) {
                    vm.associateSignList = data.value;
                    vm.page.callback(data.count);//请求回调时传入总记录数
                }

            });
        }

        //start 保存项目关联
        vm.saveAssociateSign = function (associateSignId) {
            if (vm.model.signid == associateSignId) {
                bsWin.alert("不能关联自身项目");
                return;
            }
            //保存成功之后，返回关联的项目信息
            signSvc.saveAssociateSign(vm.model.signid, associateSignId, function (data) {
                if (data.flag || data.reCode == 'ok') {
                    if (associateSignId) {
                        vm.model.isAssociate = 1;
                        vm.associateDispatchs = data.reObj;
                    } else {
                        vm.associateDispatchs = []; //解除关联也要重新设置值
                    }
                    bsWin.alert(associateSignId != undefined ? "项目关联成功" : "项目解除关联成功", function () {
                        window.parent.$("#associateWindow").data("kendoWindow").close();
                    });
                } else {
                    bsWin.alert(data.reMsg);
                }

            });
        }

        /**
         * 添加评审部门弹框
         */
        vm.addReviewDept = function(){
            $("#addReviewDeptWindow").kendoWindow({
                width: "600px",
                height: "400px",
                title: "评审部门管理",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();

            orgSvc.queryOrgList(vm , function(data){
                vm.orgs = data;
                if(vm.work && vm.work.reviewOrgName){
                    var reviewOrgName = vm.work.reviewOrgName.split(',');
                    for(var i = 0 ; i < reviewOrgName.length ; i++){
                        $.each(vm.orgs , function(x , obj){
                            if(obj.name == reviewOrgName[i]){
                                var inputId = obj.id;
                                $("#" + inputId).attr("disabled", "disabled");
                            }
                        })
                    }
                }
            });

        }

        /**
         * 保存添加的评审部门
         */
        vm.saveReviewDept = function(orgId , orgName){
            signSvc.addAOrg(  orgId , vm.model.signid  , function(data){
                if(data.flag || data.reCode == 'ok'){
                    bsWin.alert(data.reMsg);
                    vm.orgName += (vm.orgName == undefined ? "" : "," ) + orgName;
                }else{
                    bsWin.error(data.reMsg);
                }

            });
            //     }
        }

        /**
         * 移除添加的评审部门
         * @param orgId
         * @param orgName
         */
        vm.deleteReviewDept = function(orgId , orgName){
            signSvc.deleteAOrg(orgId ,  vm.model.signid , function(data){
                if(data.flag || data.reCode == 'ok'){
                    bsWin.alert(data.reMsg);
                    var reviewOrgName = vm.orgName.split(',');
                    for(var i = 0 ; i < reviewOrgName.length ; i++){
                        if(reviewOrgName[i] == orgName){
                            reviewOrgName.splice(i , 1);
                            break;
                        }
                    }

                    vm.orgName = reviewOrgName.join(',');
                }else{
                    bsWin.error(data.reMsg);
                }
            });
        }

        /**
         * 添加项目负责人弹出框
         */
        vm.addSecondChargeUser = function(){
            $("#addSecondChargeUserWindow").kendoWindow({
                width: "600px",
                height: "400px",
                title: "负责人管理",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();

            userSvc.findUserAndOrg(function(data){
                vm.user = data;
            })
        }

        /**
         * 保存添加的负责人
         * @param user
         */
        vm.saveSecondUser = function (user){
            signSvc.addSecondUser(user.id , vm.model.signid , function(data){
                if(data.flag || data.reCode == 'ok'){
                    bsWin.alert(data.reMsg);
                    vm.secondChargeUserName.push(user.displayName);
                    var orgNames = vm.orgName.split(",");
                    var b = true;
                   for(var i =0 ; i < orgNames.length ; i++){
                       if(orgNames[i] == user.orgDto.name){
                           b = false;
                           break;
                       }
                   }
                   if(b){
                       orgNames.push(user.orgDto.name);
                       vm.orgName = orgNames.join(",");
                   }
                }else{
                    bsWin.error(data.reMsg);
                }
            });

        }

        /**
         * 移除添加的负责人
         * @param user
         */
        vm.deleteSecondUser = function(user){
            signSvc.deleteSecondUser(user.id , vm.model.signid , function(data){
                if(data.flag || data.reCode == 'ok'){
                    bsWin.alert(data.reMsg);
                    for(var i = 0 ; i < vm.secondChargeUserName.length ; i++){
                        if(vm.secondChargeUserName[i] == user.displayName){
                            vm.secondChargeUserName.splice(i , 1);
                            break;
                        }
                    }
                }else{
                    bsWin.error(data.reMsg);
                }

            });
        }

        /**
         * 是否能自选多个专家
         */
        vm.addMoreExp = function(){
            var selected = $("#isMoreExpert").is(':checked');
            if(selected){
                bsWin.confirm("确认能自选多个专家？" , function(){
                    signSvc.saveMoreExpert(vm.model.signid , vm.model.isMoreExpert , function(data){
                        if(data.flag || data.reCode == 'ok'){
                            bsWin.alert(data.reMsg);
                        }
                    });
                });
            }else{
                bsWin.confirm("确认取消自选多个专家？" , function(){
                    signSvc.saveMoreExpert(vm.model.signid , vm.model.isMoreExpert , function(data){
                        if(data.flag || data.reCode == 'ok'){
                            bsWin.alert(data.reMsg);
                        }
                    });
                });
            }
        }

        //是否已经发送委里
        vm.updateFGWState = function(){
            var checkedValue = $("#isSendFGW").is(':checked');
            if(checkedValue){
                bsWin.confirm("该项目已经回传委里？" , function(){
                    signSvc.updateFGWState(vm.model.signid , "9" , function(data){
                        if(data.flag || data.reCode == 'ok'){
                            bsWin.alert("操作成功");
                        }else{
                            bsWin.alert(data.reMsg);
                        }
                    });
                });
            }else{
                bsWin.confirm("确定更改？" , function(){
                    signSvc.updateFGWState(vm.model.signid , "0" , function(data){
                        if(data.flag || data.reCode == 'ok'){
                            bsWin.alert("操作成功");
                        }else{
                            bsWin.alert(data.reMsg);
                        }
                    });
                });
            }
        }
    }
})();

(function () {
    'use strict';

    /**
     * 项目业务类型
     */
    var signBusinessType = {
        PX : "PX",      //评估
        GX : "GX",      //概算
    }

    /**
     * 默认办理人员
     */
    var signDealUser = {
        ZHANG_YF : "张一帆",      //评估
        LI_J : "李军",      //概算
    }

    /**
     * 流程参数
     */
    var signFlowParams = {
        godispatch : "godispatch",          //直接发文
        principaluser : "principaluser",    //项目负责人
        seconduser : "seconduser",           //第二负责人审核
    }

    var service = {
        getBusinessType: getBusinessType,               // 获取项目类型
        getDefaultLeader : getDefaultLeader,            // 获取默认办理的分管主任
        getDefaultZHBYJ:getDefaultZHBYJ,                // 获取默认综合部审批意见
        getFlowParams : getFlowParams,                  // 获取流程参数
        getReviewStage : function(){
            return {
                STAGE_SUG:"项目建议书",
                STAGE_STUDY:"可行性研究报告",
                STAGE_BUDGET:"项目概算",
                APPLY_REPORT :"资金申请报告",
                OTHERS:"其它",
                DEVICE_BILL_HOMELAND:"设备清单（国产）",
                DEVICE_BILL_IMPORT:"设备清单（进口）",
                IMPORT_DEVICE:"进口设备"
            }
        },
    };
    window.signcommon = service;

    //S_获取项目类型
    function getBusinessType() {
        return signBusinessType;
    }//E_getBusinessType

    //S_获取默认办理的分管主任
    function getDefaultLeader(businessType){
        var resultName = "";
        switch(businessType){
            case signBusinessType.PD:
                resultName = signDealUser.ZHANG_YF
                break;
            case signBusinessType.GD:
                resultName = signDealUser.LI_J
                break;
            default:
                ;
        }
        return resultName;
    }//E_getDefaultLeader

    //S_获取默认综合部审批意见
    function getDefaultZHBYJ(businessType){
        var resultOption = "";
        switch(businessType){
            case signBusinessType.PD:
                resultOption = "请张一帆同志阅示。";
                break;
            case signBusinessType.GD:
                resultOption = "请李军同志阅示。";
                break;
            default:
                ;
        }
        return resultOption;
    }//E_getDefaultZHBYJ

    //S_获取流程参数
    function getFlowParams() {
        return signFlowParams;
    }//E_getFlowParams

})();


(function () {
    'use strict';
    angular.module('app').controller('signworkCtrl', signworkC);

    signworkC.$inject = ['signworkSvc','bsWin' , '$state'];

    function signworkC(signworkSvc,bsWin , $state) {
        var vm = this;
        vm.signId = $state.params.signid;

        active();
        function active() {
            vm.signWorkList = [];
            signworkSvc.signWorkList(function(data){
                vm.signWorkList = data;
                if(!vm.signWorkList || vm.signWorkList.length == 0){
                    vm.nodata = true;
                }else{
                    vm.nodata = false;
                }
            });
        }

        //收文查询
        vm.querySignWork = function(){
            active();
        }
        //重置
        vm.resetForm = function () {
            var tab = $("#signworkform").find('input,select');
            $.each(tab, function (i, obj) {
                obj.value = "";
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('signworkSvc', signwork);

    signwork.$inject = ['$http', '$state','bsWin'];

    function signwork($http, $state,bsWin) {
        var service = {
            signWorkList: signWorkList,
        };
        return service;

        function signWorkList(callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signwork/fingSignWorkList",
                headers:{ 'Content-Type': 'application/x-www-form-urlencoded'},
                data: {$filter:common.buildOdataFilter($("#signworkform"))},
                transformRequest: function(obj) {
                    var str = [];
                    for(var p in obj){
                        str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                    }
                    return str.join("&");
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('smslogCtrl', smslog);

    smslog.$inject = ['$location','smslogSvc'];

    function smslog($location, smslogSvc) {
        var vm = this;
        vm.title = '短信列表';

        activate();
        sysConfig();

        function sysConfig() {
            smslogSvc.select(vm);
        };



        function activate() {
            smslogSvc.msgGrid(vm);
        }

        vm.querySMSLog = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        /**
         * 重置
         */
        vm.formSMSReset = function(){
            var tab = $("#smsLogform").find('input,select');
            $.each(tab, function(i, obj) {
                obj.value = "";
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('smslogSendCtrl', smslogSend);

    smslogSend.$inject = ['$location','smslogSendSvc','smslogSvc','$http','$state','bsWin'];

    function smslogSend($location, smslogSendSvc,smslogSvc,$http,$state,bsWin) {
        var vm = this;
        vm.model = {};
        vm.title = '发送短信';
        vm.issmslogSendExist=false;
        vm.model.id = $state.params.id;
        if (vm.model.id) {
            vm.isUpdate = true;
            vm.title = '查看短信';
        }
        activate();
        vm.selectsend = function activate() {
            var httpOptions = {
                method: 'get',
                url: '/szcshl-web/smslog/querySMSLogType',
                params: {
                    type: "send"
                }
            }
            var httpSuccess = function success(response) {
                vm.select = response.data;
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
            smslogSendSvc.initRoleUsers(function(data){
                vm.orgMLeaderUsers = data.DIRECTOR;
                vm.orgSLeaderUser = data.VICE_DIRECTOR;
                vm.OrgDirectorUsers = data.DEPT_LEADER;
            });
            if (vm.isUpdate) {
                orgSvc.getOrgById(vm.model.id,function(data){
                    vm.model = data;
                });
            }
        }

        // vm.create = function () {
        //     common.initJqValidation();
        //     var isValid = $('form').valid();
        //     if(isValid){
        //         $.each(vm.OrgDirectorUsers,function( number , u){
        //             if(u.id == vm.model.orgDirector){
        //                 vm.model.orgDirectorName = u.displayName;
        //             }
        //         })
        //         $.each(vm.orgMLeaderUsers,function( number , u){
        //             if(u.id == vm.model.orgMLeader){
        //                 vm.model.orgMLeaderName = u.displayName;
        //             }
        //         })
        //         $.each(vm.orgSLeaderUser,function( number , u){
        //             if(u.id == vm.model.orgSLeader){
        //                 vm.model.orgSLeaderName = u.displayName;
        //             }
        //         })
        //         orgSvc.createOrg(vm.model,vm.isSubmit,function(data){
        //             vm.isSubmit = false;
        //             if(data.flag || data.reCode == 'ok'){
        //                 if(!vm.model.id){
        //                     vm.model.id = data.idCode;
        //                 }
        //                 bsWin.success("操作成功！");
        //             }else{
        //                 bsWin.error(data.reMsg);
        //             }
        //         });
        //     }else{
        //         bsWin.alert("保存失败，有红色*号的选项是必填项，请按要求填写！");
        //     }
        //
        // };
        //
        // vm.update = function () {
        //     common.initJqValidation();
        //     var isValid = $('form').valid();
        //     if(isValid){
        //         $.each(vm.OrgDirectorUsers,function( number , u){
        //             if(u.id == vm.model.orgDirector){
        //                 vm.model.orgDirectorName = u.displayName;
        //             }
        //         })
        //         $.each(vm.orgMLeaderUsers,function( number , u){
        //             if(u.id == vm.model.orgMLeader){
        //                 vm.model.orgMLeaderName = u.displayName;
        //             }
        //         })
        //         $.each(vm.orgSLeaderUser,function( number , u){
        //             if(u.id == vm.model.orgSLeader){
        //                 vm.model.orgSLeaderName = u.displayName;
        //             }
        //         })
        //         orgSvc.updateOrg(vm.model,vm.isSubmit,function(data){
        //             vm.isSubmit = false;
        //             if(data.flag || data.reCode == 'ok'){
        //                 bsWin.success("操作成功！");
        //             }else{
        //                 bsWin.alert(data.reMsg);
        //             }
        //         });
        //     }else{
        //         bsWin.alert("保存失败，有红色*号的选项是必填项，请按要求填写！");
        //     }
        // };

    }
})();

(function () {
    'use strict';

    angular.module('app').factory('smslogSvc', smslog);

    smslog.$inject = ['$http', '$compile'];
    function smslog($http, $compile) {

        var service = {
            msgGrid: msgGrid,
            select: select,
        };
        return service;
        // var url_sms = rootPath + "/smslog";


        // begin#deleteUser
        //获取下拉框 数据
        function select(vm) {
            var httpOptions = {
                method: 'get',
                url: '/szcshl-web/smslog/querySMSLogType',
                params: {type: "all"}
            }
            var httpSuccess = function success(response) {
                vm.select = response.data;
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }


        function msgGrid(vm) {
            var form = $("#smsLogform");
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath +"/smslog/fingByOData",form),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        },
                        smsLogType:"smsLogType"
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource

            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }

            // Begin:column
            var columns = [
                 {
                     field: "",
                     title: "序号",
                     width: 50,
                     filterable: false,
                     template: "<span class='row-number'></span>"
                 },
                {

                    field: "",
                    title: "应发人",
                    width: 150,
                    filterable: false,
                    template:function(item){
                        return "<textarea rows='4' style='width:100%;'>"+item.userName+"</textarea>";
                    },
                },
                {

                    field: "smsUserName",
                    title: "实发人",
                    width: 150,
                    filterable: false,
                    template:function(item){
                        var nValue = "";
                        if(item.smsUserName){
                            nValue = item.smsUserName
                        }
                        return "<textarea rows='4' style='width:100%;'>"+nValue+"</textarea>";
                    },
                },
                {
                    field: "",
                    title: "接收手机号码",
                    width: 150,
                    filterable: false,
                    template:function(item){
                        var nValue = "";
                        if(item.smsUserPhone){
                            nValue = item.smsUserPhone;
                        }
                        return "<textarea rows='4' style='width:100%;'>"+nValue+"</textarea>";
                    },
                },
                {
                    field: "",
                    title: "短信内容",
                    filterable: false,
                    width: 220,
                    template:function(item){
                        return "<textarea rows='4' style='width:100%;'>"+item.message+"</textarea>";
                    },
                },
                {
                    field: "",
                    title: "返回信息",
                    filterable: false,
                    width: 220,
                    template:function(item){
                        return "<textarea rows='4' style='width:100%;'>"+item.resultCode +'['+item.customMessage+']'+"</textarea>";
                    },
                },
                {
                    field: "createdDate",
                    title: "创建时间",
                    width: 100,
                    filterable: false,
                    format: "{0:yyyy/MM/dd HH:mm:ss}"
                }
                , {
                    field: "",
                    title: "结果",
                    filterable: false,
                    width: 50,
                    template:function(item){
                        if(item.result){
                            if(item.result == "9"){
                                return '<span class="label label-success">成功</span>';
                            }else {
                                return '<span class="label label-danger">失败</span>';
                            }
                        }else{
                            return "";
                        }
                    },
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };
        }// end fun grid
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('sysConfigCtrl', sysConfig);

    sysConfig.$inject = ['$location', 'sysConfigSvc' , 'bsWin'];

    function sysConfig($location, sysConfigSvc , bsWin) {
        var vm = this;
        vm.model = {};      // 参数对象
        vm.title = '系统配置';

        activate();
        function activate() {
            sysConfigSvc.queryList(vm);
        }

        //新增参数
        vm.addConfig = function () {
            vm.model = {};
            vm.model.isShow = '9';//是否显示
            //显示次项目窗口
            $("#configdiv").kendoWindow({
                width: "760px",
                height: "500px",
                title: "系统参数编辑",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        //关闭窗口
        vm.closeWin = function () {
            window.parent.$("#configdiv").data("kendoWindow").close();
            activate();
        }

        //保存参数
        vm.doCommit = function () {
            common.initJqValidation();
            var isValid = $('#configForm').valid();
            if (isValid) {
                sysConfigSvc.saveConfig(vm , function(data){
                    if(data.flag || data.reCode=='ok'){
                        bsWin.success("操作成功！");
                        window.parent.$("#configdiv").data("kendoWindow").close();
                        activate();
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            }
        }

        //编辑参数
        vm.editConfig = function (id) {
            vm.configList.forEach(function (c, index) {
                if (c.id == id) {
                    vm.model = c;
                }
            });
            //显示次项目窗口
            $("#configdiv").kendoWindow({
                width: "700px",
                height: "440px",
                title: "参数编辑",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        //删除参数
        /* vm.del = function (ids) {
         var checkSign = $("input[name='configid']:checked");
         if (checkSign.length < 1) {
         common.alert({
         vm: vm,
         msg: "请选择删除的参数"
         })
         } else {
         common.confirm({
         vm: vm,
         title: "",
         msg: "确认删除数据吗？",
         fn: function () {
         $('.confirmDialog').modal('hide');
         var ids = [];
         for (var i = 0; i < checkSign.length; i++) {
         ids.push(checkSign[i].value);
         }
         sysConfigSvc.deleteConfig(vm, ids.join(","));
         }
         })
         }
         }*/

    }//E_sysConfig
})();

(function () {
    'use strict';

    angular.module('app').factory('sysConfigSvc', sysConfig);

    sysConfig.$inject = ['$http'];

    function sysConfig($http) {
        var service = {
            queryList : queryList,			        //初始化表格
            deleteConfig : deleteConfig,            //删除参数
            saveConfig : saveConfig,                //保存系统参数

        };
        return service;

        //S_queryList
        function queryList(vm) {
            var httpOptions = {
                method : 'get',
                url : rootPath+"/sysConfig/queryList",
            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm:vm,
                    response:response,
                    fn:function() {
                        vm.configList = new Array();
                        vm.configList = response.data;
                    }
                });
            }
            common.http({
                vm:vm,
                $http:$http,
                httpOptions:httpOptions,
                success:httpSuccess
            });
        }//E_queryList

        //S_deleteConfig
        function deleteConfig(vm,ids){
            var httpOptions = {
                method : 'delete',
                url : rootPath+"/sysConfig",
                params :{id:ids}
            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm:vm,
                    response:response,
                    fn:function() {
                        common.alert({
                            vm:vm,
                            msg:"操作成功",
                            fn:function(){
                                $('.alertDialog').modal('hide');
                                $('.modal-backdrop').remove();
                                vm.isSubmit=false;
                                queryList(vm);

                            }
                        })
                    }
                });
            }
            common.http({
                vm:vm,
                $http:$http,
                httpOptions:httpOptions,
                success:httpSuccess
            });
        }//E_deleteConfig

        //S_saveConfig
        function saveConfig(vm , callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath+"/sysConfig",
                data :vm.model
            }
            var httpSuccess = function success(response) {
               if(callBack !=undefined && typeof  callBack =='function'){
                   callBack(response.data);
               }
            }
            common.http({
                vm:vm,
                $http:$http,
                httpOptions:httpOptions,
                success:httpSuccess
            });
        }//E_saveConfig

    }//E_sysConfig

})();
(function () {
    'use strict';

    angular.module('app').controller('sysdeptCtrl', sysdept);

    sysdept.$inject = [ 'sysdeptSvc'];

    function sysdept(sysdeptSvc) {
        var vm = this;
        vm.model = {};
        vm.title = '部门小组列表';

        activate();
        function activate() {
            sysdeptSvc.listGrid(vm.gridOptions);
        }


    }//E_sysdept
})();

(function () {
    'use strict';

    angular.module('app').controller('sysdeptEditCtrl', sysdept);

    sysdept.$inject = [ 'sysdeptSvc'];

    function sysdept(sysdeptSvc) {
        var vm = this;
        vm.model = {};
        vm.title = '部门小组编辑';
        vm.model.id = $state.params.id;
        if (vm.model.id) {
            vm.isUpdate = true;
            vm.title = '更新部门';
        }


        activate();
        function activate() {
            if(vm.isUpdate){
                sysdeptSvc.findById(vm.model.id,function (data) {
                    vm.model = data;
                });
            }
        }


    }//E_sysdept
})();

(function () {
    'use strict';

    angular.module('app').factory('sysdeptSvc', sysdept);

    sysdept.$inject = ['$http'];

    function sysdept($http) {
        var service = {
            listGrid : listGrid,			        //初始化表格
            findById : findById,                    //根据Idc初始化表格

        };
        return service;

        //S_初始化表格
        function listGrid(gridOption) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/sysdept/fingByOData", $("#sysDeptForm")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"

                },
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable : false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "name",
                    title: "小组名称",
                    width: 160,
                    filterable: false
                },
                {
                    field : "",
                    title : "操作",
                    width : 200,
                    template:function(item){
                        return common.format($('#columnBtns').html(),"vm.del('"+item.id+"')",item.id);
                    }
                }

            ];

            gridOption = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound:dataBound,
                resizable: true
            };
        }//E_listGrid

        //S_根据ID初始化表格
        function findById(id,callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath+"/sysdept/getSysDeptById",
                params : {
                    id:id
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http:$http,
                httpOptions:httpOptions,
                success:httpSuccess
            });
        }


    }//E_sysConfig

})();
(function () {
    'use strict';

    angular.module('app').controller('fileListCtrl', fileList);

    fileList.$inject = ['$location', 'sysfileSvc','$state'];

    function fileList($location, sysfileSvc,$state) {
        var vm = this;
        vm.model={};
        vm.model.signid=$state.params.id;
        vm.model.type=$state.params.type;
        //附件下载
        vm.commonDownloadSysFile = function(sysFileId){
            sysfileSvc.downloadFile(sysFileId);
        }
        activate();
        function activate() {
            // 初始化上传附件
            sysfileSvc.queryFile(vm.model.signid,vm.model.type,function(data){
                if(data && data.length > 0){
                    //vm.showFlag.tabSysFile = true;
                    vm.sysFileList = data;
                }
            });
        }


    }//E_sysConfig
})();

(function () {
    'use strict';

    angular.module('app').controller('pluginfileCtrl', pluginfile);

    pluginfile.$inject = ['$location', 'sysfileSvc'];

    function pluginfile($location, sysfileSvc) {
        var vm = this;
        vm.title = '系统安装包列表';

        activate();
        function activate() {
            sysfileSvc.queryPluginfile(vm);
        }


    }//E_sysConfig
})();

(function () {
    'use strict';

    angular.module('app').factory('sysfileSvc', sysfile);

    sysfile.$inject = ['$http', 'bsWin', '$state', '$interval'];
    function sysfile($http, bsWin, $state, $interval) {
        var service = {
            initUploadOptions: initUploadOptions,       // 初始化上传附件控件
            delSysFile: delSysFile,                     // 删除系统文件
            downloadFile: downloadFile,                 // 系统文件下载
            queryPluginfile: queryPluginfile,           // 查询系统安装包
            findByMianId: findByMianId,                 // 根据主业务ID获取所有的附件信息
            findByBusinessId: findByBusinessId,         // 根据业务ID 获取上传附件
            mainTypeValue: mainTypeValue,               // 各大模块附件根目录
            previewFile: previewFile,                   // pdf 预览
            initZtreeClient: initZtreeClient,
            queryFile: queryFile

        };
        return service;

        function previewFile() {
            //alert(12);
        }

        // 各大模块附件根目录(跟后台Constant.SysFileMainType 同步)
        function mainTypeValue() {
            return {
                SIGN: "项目附件",
                FILLSIGN: "审批登记",
                HUMAN: "人事附件",
                BOOKS: "图书附件",
                NOTICE: "通知公告",
                SHARE: "资料共享",
                MEETTINGROOM: "会议室预定",
                WORKPROGRAM: "工作方案",
                DISPATCH: "发文",
                DOFILE: "归档",
                MEETING: "会前准备材料",
                SUPPLEMENT: "补充函",
                STAGEMEETING: "评审会会议",
                FILELIBRARY: "质量管理文件库",
                POLICYLIBRARY: "政策标准库",
                TOPIC: "课题附件",
                TOPIC_PLAN: "课题计划书",
                TOPIC_WORKPLAN: "课题工作方案",
                TOPIC_FILING: "课题归档",
                MONTH_FILE: "月报简报",
                AADSUPP_FILE: "拟补充资料函",
                DOCTOR_KTYJDG : "课题研究大纲",
                DOCTOR_KTWWHT : "课题外委合同"
            }
        }

        // 系统文件下载
        function downloadFile(id) {

            var httpOptions = {
                method: 'post',
                url: rootPath + "/file/fileSysCheck",
                params: {
                    sysFileId: id
                }
            }
            var httpSuccess = function success(response) {
                var downForm = $("#szecSysFileDownLoadForm");
                downForm.attr("target","");
                downForm.attr("method","post");
                if (response.data.flag || response.data.reCode == 'ok') {
                    downForm.attr("action",rootPath + "/file/fileDownload");
                    downForm.find("input[name='sysfileId']").val(id);
                    downForm.submit();//表单提交
                } else {
                    downForm.attr("action","");
                    downForm.find("input[name='sysfileId']").val("");
                    bsWin.error(response.data.reMsg);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        //根据主业务获取所有的附件信息
        function findByBusinessId(businessId, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/file/findByBusinessId",
                params: {
                    businessId: businessId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //根据主业务获取所有的附件信息
        function findByMianId(mainId, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/file/findByMainId",
                params: {
                    mainId: mainId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //根据点击的文件查询
        function queryFile(mainId, type, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/file/queryFile",
                headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'},
                data: $.param({mainId: mainId, sysBusiType: type}),
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });

        }

        // S 删除系统文件,自己实现回调方法
        function delSysFile(sysFileId, callBack) {
            var httpOptions = {
                method: 'delete',
                url: rootPath + "/file/deleteSysFile",
                params: {
                    id: sysFileId
                }
            }
            var httpSuccess = function success(response) {
                if (response.data.flag || response.data.reCode == 'ok') {
                    if (callBack != undefined && typeof callBack == 'function') {
                        callBack(response.data);
                    }
                } else {
                    bsWin.alert(response.data.reMsg);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // E 删除系统文件

        // S 初始化上传附件控件
        /**
         * options 属性 options.vm.sysFile 一定要有，这个是附件对象
         *  uploadBt : 上传按钮
         *  detailBt : 查看按钮
         *  inputId : "sysfileinput",
         *  mainType : 主要业务模块，业务的根目录
         * @param options
         */
        function initUploadOptions(options) {
            options.vm.initUploadOptionSuccess = false;
            //options.vm.sysFile 为定义好的附件对象
            var sysFileDefaults = {
                width: "70%",
                height: "460px",
                uploadBt: "upload_file_bt",
                detailBt: "detail_file_bt",
                inputId: "sysfileinput",
                mainType: "没有归类附件",
                sysBusiType: "",
                showBusiType: true,
            };
            if (!options.vm.sysFile) {
                bsWin.alert("初始化附件控件失败，请先定义附件对象！");
                return;
            }
            if (options.sysBusiType) {
                sysFileDefaults.sysBusiType = options.sysBusiType;
            }
            if (options.width) {
                sysFileDefaults.width = options.width;
            }
            if (options.height) {
                sysFileDefaults.height = options.height;
            }

            //是否显示业务下来框
            if (angular.isUndefined(options.vm.sysFile.showBusiType)) {
                options.vm.sysFile.showBusiType = sysFileDefaults.showBusiType;
            }

            //附件下载方法
            options.vm.downloadSysFile = function (id) {
                downloadFile(id);
            }
            //附件删除方法
            options.vm.delSysFile = function (id) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "确认删除么？",
                    onOk: function () {
                        delSysFile(id, function (data) {
                            bsWin.alert(data.reMsg || "删除成功！");
                            $.each(options.vm.sysFilelists, function (i, sf) {
                                if (!angular.isUndefined(sf) && sf.sysFileId == id) {
                                    options.vm.sysFilelists.splice(i, 1);
                                }
                            })
                        });
                    }
                });
            }
            options.vm.clickUploadBt = function () {
                if (!options.vm.sysFile.businessId) {
                    bsWin.alert("请先保存业务数据！");
                } else {
                    //B、清空上一次的上传文件的预览窗口
                    options.vm.sysFile.sysBusiType="";
                    angular.element('#sysfileinput').fileinput('clear');
                    //E、清空上一次的上传文件的预览窗口
                    $("#commonUploadWindow").kendoWindow({
                        width: sysFileDefaults.width,
                        height: sysFileDefaults.height,
                        title: "附件上传",
                        visible: false,
                        modal: true,
                        closable: true,
                    }).data("kendoWindow").center().open();
                }
            }

            options.vm.clickDetailBt = function () {
                if (!options.vm.sysFile.businessId) {
                    bsWin.alert("请先保存业务数据！");
                    return;
                } else {
                    findByBusinessId(options.vm.sysFile.businessId, function (data) {
                        options.vm.sysFilelists = [];
                        options.vm.sysFilelists = data;
                        $("#commonQueryWindow").kendoWindow({
                            width: "75%",
                            height: "500px",
                            title: "附件上传列表",
                            visible: false,
                            modal: true,
                            closable: true,
                            actions: ["Pin", "Minimize", "Maximize", "Close"]
                        }).data("kendoWindow").center().open();
                    });
                }
            }
            //有业务数据才能初始化
            if (options.vm.sysFile.businessId) {
                var projectfileoptions = {
                    language: 'zh',
                    allowedPreviewTypes: ['image'],
                    allowedFileExtensions: ['sql', 'exe', 'lnk'],//修改过，改为了不支持了。比如不支持.sql的
                    maxFileSize: 0,     //文件大小不做限制
                    showRemove: false,
                    previewFileIcon: "<i class='glyphicon glyphicon-king'></i>",
                    uploadAsync: false, //同步上传
                    enctype : 'multipart/form-data',
                    uploadUrl: rootPath + "/file/fileUpload",// 默认上传ftp服务器 /file/fileUploadLocal 为上传到本地服务
                    previewFileIconSettings: {
                        'doc': '<i class="fa fa-file-word-o text-primary"></i>',
                        'xls': '<i class="fa fa-file-excel-o text-success"></i>',
                        'ppt': '<i class="fa fa-file-powerpoint-o text-danger"></i>',
                        'docx': '<i class="fa fa-file-word-o text-primary"></i>',
                        'xlsx': '<i class="fa fa-file-excel-o text-success"></i>',
                        'pptx': '<i class="fa fa-file-powerpoint-o text-danger"></i>',
                        'pdf': '<i class="fa fa-file-pdf-o text-danger"></i>',
                        'zip': '<i class="fa fa-file-archive-o text-muted"></i>',
                    },
                    uploadExtraData: function (previewId, index) {
                        var result = {};
                        result.businessId = options.vm.sysFile.businessId;
                        result.mainId = options.vm.sysFile.mainId;
                        result.mainType = options.vm.sysFile.mainType || sysFileDefaults.mainType;
                        result.sysfileType = options.vm.sysFile.sysfileType || "";
                        result.sysBusiType = options.vm.sysFile.sysBusiType || sysFileDefaults.sysBusiType;
                        return result;
                    }
                };

                var filesCount = 0;
                $("#" + options.inputId || sysFileDefaults.inputId).fileinput(projectfileoptions)
                    //附件选择
                    .on("filebatchselected", function (event, files) {
                        filesCount = files.length;
                        //console.log("附件选择:" + filesCount);
                    })
                    //上传前
                    .on('filepreupload', function (event, data, previewId, index) {
                        var form = data.form, files = data.files, extra = data.extra,
                            response = data.response, reader = data.reader;
                        //console.log("附件上传前:" + files);
                    })
                    /*//异步上传返回结果处理
                    .on("fileuploaded", function (event, data, previewId, index) {
                        projectfileoptions.sysBusiType = options.vm.sysFile.sysBusiType;
                        if (filesCount == (index + 1)) {
                            if (options.uploadSuccess != undefined && typeof options.uploadSuccess == 'function') {
                                options.uploadSuccess(event, data, previewId, index);
                            }
                        }
                    })*/
                    //同步上传错误处理
                    .on('filebatchuploaderror', function(event, data, msg) {
                        //console.log("同步上传错误");
                        // get message
                        //alert(msg);
                    })
                    //同步上传返回结果处理
                    .on("filebatchuploadsuccess", function (event, data, previewId, index) {
                        console.log("同步上传成功");
                        console.log(data);
                        if (options.uploadSuccess != undefined && typeof options.uploadSuccess == 'function') {
                            options.uploadSuccess(event, data, previewId, index);
                        }
                    });

                //表示初始化控件成功
                options.vm.initUploadOptionSuccess = true;
            }
        }

        // E 初始化上传附件控件

        // S 系统安装包管理
        function queryPluginfile(vm) {
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/file/getPluginFile"),
                schema: common.kendoGridConfig().schema(),
                serverPaging: false,
                serverSorting: true,
                serverFiltering: true,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource

            // Begin:column
            var columns = [
                {
                    field: "fileName",
                    title: "名称",
                    filterable: false
                },
                {
                    field: "fileLength",
                    title: "大小",
                    width: 160,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 150,
                    template: function (item) {
                        return common.format($('#columnBtns').html(), rootPath + "/" + item.relativePath);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true
            };
        }// E queryPluginfile

        function initZtreeClient(vm, $scope) {
            var zTreeObj;
            var setting = {
                check: {
                    chkboxType: {"Y": "ps", "N": "ps"},
                    enable: false
                },
                callback: {
                    onClick: function (event, treeId, treeNode) {
                        vm.sysFileList = [];
                        //点击文件夹
                        if (treeNode.check_Child_State == 0) {
                            if (treeNode.children) {
                                vm.sysFileList = treeNode.children;
                            }

                        }else{
                            var parentId = treeNode.parentTId;
                            var nodes = zTreeObj.getNodeByTId(parentId);
                            if(nodes != null){
                                vm.sysFileList = nodes.children;
                            }
                        }
                        $scope.$apply();
                    }
                }
            };

            var array = vm.sysFileList;
            vm.zNodes = [];
            vm.initFileTreeSucess = false;
            var data = [];
            //循环数据取出父类和相对应的子类
            for (var i = 0, l = array.length; i < l; i++) {
                if (!array[i].sysBusiType) {
                    array[i].sysBusiType = "其他文件";
                }
                var s = new Object();
                s = array[i];
                s.name = array[i].showName;
                s.id = array[i].sysFileId;

                if (!data[array[i].sysBusiType]) {
                    var node = new Object();//定义父类的对象
                    node.id = (new Date()).getTime();
                    node.name = array[i].sysBusiType;
                    vm.zNodes.push(node);
                    var arr = [];
                    arr.push(s);
                    data[array[i].sysBusiType] = arr;
                } else {
                    data[array[i].sysBusiType].push(s)
                }
            }
            for (var i = 0, l = vm.zNodes.length; i < l; i++) {
                for (var key in data) {
                    if (vm.zNodes[i].name == key) {
                        vm.zNodes[i].children = data[key];
                    }
                }
                if (i == (l - 1)) {
                    vm.initFileTreeSucess = true;
                }
            }
            //监听值改变
            $scope.$watch("vm.initFileTreeSucess", function (newValue, oldValue) {
                if (newValue == true) {
                    var timer = $interval(function () {
                        var s = document.getElementById("zTree");
                        //当有ztree的id时开始赋值
                        if (s != null) {
                            var treeObj1 = $.fn.zTree.getZTreeObj("zTree");
                            //先通过Id获取树形，如果已经有树形，则默认展示正在展示的节点，如树形不存在则默认展开第一个节点
                            if(treeObj1 != null){
                                //获取被选的所有节点
                                var selectedNodes = treeObj1.getSelectedNodes();
                                if(selectedNodes != null && selectedNodes.length>0){
                                    //获取父节点
                                    var parentId = selectedNodes[0].tId;
                                    //重新初始化树形图
                                    zTreeObj = $.fn.zTree.init($("#zTree"), setting, vm.zNodes);
                                    //通过父ID获取节点
                                    var nodes = zTreeObj.getNodeByTId(parentId);
                                    if(nodes != null){
                                        vm.sysFileList = [];
                                        vm.sysFileList = nodes.children;
                                        //设置选中的节点并展开
                                        zTreeObj.selectNode(nodes);
                                        zTreeObj.expandNode(nodes , true , false);
                                    }
                                }
                            }else{
                                zTreeObj = $.fn.zTree.init($("#zTree"), setting, vm.zNodes);
                                //获取节点，判断节点长度，默认现在第一个节点，并且显示第一个节点
                                var nodes = zTreeObj.getNodes();
                                if(nodes.length > 0){
                                    zTreeObj.selectNode(nodes[0]);
                                    zTreeObj.expandNode(nodes[0] , true , false);
                                    vm.sysFileList = nodes[0].children;
                                }
                            }


                            $interval.cancel(timer);//停止定时器

                        }
                    }, 500);   //间隔0.5秒定时执行
                }
            });
        }// end fun initZtreeClient
    }
})();
(function () {
    'use strict';

    angular.module('app').factory('templatePrintSvc', templatePrint);

    templatePrint.$inject = ['$http', 'bsWin','$state'];
    function templatePrint($http, bsWin,$state) {
        var vm = this;
        vm.model={};
        var service = {
            templatePrint: templatePrint,       //模板打印
            getBrowserType: getBrowserType,     //获取浏览器类型
            templatePage : templatePage , //打印 （分页）
        };
        return service;

        function templatePrint(id) {
            var LODOP = getLodop();
            var strStylePath = rootPath +"/contents/shared/templatePrint.css";
            var strStyleCSS="<link href="+strStylePath+" type='text/css' rel='stylesheet'>";
            var strFormHtml="<head>"+strStyleCSS+"</head><body>"+$("#"+id).html()+"</body>";
            LODOP.PRINT_INIT("");
            LODOP.ADD_PRINT_HTML(10,20,"100%","100%",strFormHtml);
            LODOP.PREVIEW();
        }

        //获取浏览器类型
        function getBrowserType(){
            var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串
            console.log(userAgent);
            var isOpera = userAgent.indexOf("Opera") > -1;
            if (isOpera) {
                return "Opera"
            }; //判断是否Opera浏览器
            if (userAgent.indexOf("Firefox") > -1) {
                return "FF";
            } //判断是否Firefox浏览器
            if (userAgent.indexOf("Chrome") > -1){
                return "Chrome";
            }
            if (userAgent.indexOf("Safari") > -1) {
                return "Safari";
            } //判断是否Safari浏览器
            if (!!window.ActiveXObject || "ActiveXObject" in window) {
                return "IE";
            }; //判断是否IE浏览器
        }

        //begin templatePage
        function templatePage(id){
            var LODOP = getLodop();
            var strStylePath = rootPath +"/contents/shared/templatePrint.css";
            var strStyleCSS="<link href="+strStylePath+" type='text/css' rel='stylesheet'>";
            var strFormHtml1="<head>"+strStyleCSS+"</head><body>"+$("#"+ id +"_templ1").html()+"</body>";

            LODOP.PRINT_INIT("");
            LODOP.ADD_PRINT_HTML(10,20,"100%","100%",strFormHtml1);

            //分页
            if($("#"+ id +"_templ2").html()){
                LODOP.NewPage();
                var strFormHtml2="<head>"+strStyleCSS+"</head><body>"+$("#"+ id +"_templ2").html()+"</body>";
                LODOP.ADD_PRINT_HTML(50,20,"100%","100%",strFormHtml2);
            }


            if($("#"+ id +"_templ3").html()){
                LODOP.NewPage();
                var strFormHtml3="<head>"+strStyleCSS+"</head><body>"+$("#"+ id +"_templ3").html()+"</body>";
                LODOP.ADD_PRINT_HTML(50,20,"100%","100%",strFormHtml3);
            }
            //打印预览
            LODOP.PREVIEW();
        }
        //end templatePage
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('topicAddCtrl', topicCtrl);

    topicCtrl.$inject = ['bsWin', '$scope', 'sysfileSvc', 'topicSvc','$state'];

    function topicCtrl(bsWin, $scope, sysfileSvc, topicSvc,$state) {
        var vm = this;
        vm.title = '新增课题研究';
        vm.model = {};
        vm.model.fgwlx = 0;             //默认不是发改委立项
        vm.model.sendFgw = 0;           //默认不报发改委审批
        vm.conMaxIndex = 0;                   //条件号
        vm.conditions = [];         //条件列表
        vm.isCreate = false;      //是否已经创建课题
        vm.endTopic = false;      //结题标志
        if($state.params.id){
            vm.model.id = $state.params.id;
        }
        if($state.params.curNodeId){
            vm.curNodeId = $state.params.curNodeId;
            if(vm.curNodeId == 'TOPIC_KTFZR_QR'||vm.curNodeId == 'TOPIC_ZLGD'){
                vm.endTopic = true;
            }

        }

        if(vm.model.id){
            vm.isUpdate = true;
        }else{
            vm.isUpdate = false;
        }

        //初始化附件上传控件
        vm.initFileUpload = function(){
            if(!vm.model.id){
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.model.id",function (newValue, oldValue) {
                    if(newValue && newValue != oldValue && !vm.initUploadOptionSuccess){
                        vm.initFileUpload();
                    }
                });
            }
            //创建附件对象
            vm.sysFile = {
                businessId : vm.model.id,
                mainId : vm.model.id,
                mainType : sysfileSvc.mainTypeValue().TOPIC,
                sysfileType:sysfileSvc.mainTypeValue().TOPIC_PLAN,
                sysBusiType:sysfileSvc.mainTypeValue().TOPIC_PLAN,
                showBusiType : false,
            };
            sysfileSvc.initUploadOptions({
                inputId:"sysfileinput",
                vm:vm,
            });
        }
        activate();
        function activate() {
            if(vm.model.id){
                topicSvc.initDetail(vm.model.id,function(data){
                    vm.model = data;
                    if(vm.model.contractDtoList != undefined){
                        vm.conditions = vm.model.contractDtoList;
                        for(var i=0;i<vm.conditions.length;i++){
                            vm.conditions[i]["sort"]= (i+1);
                        }
                    }
                });
            }
            topicSvc.findOrgUser(function(data){
                vm.principalUsers = data;
            });
            //初始化上传附件
            vm.initFileUpload();
        }

        //检查项目负责人
        vm.checkPrincipal = function(){
            var selUserId = $("#mainPrinUserId").val();
            if(selUserId){
                $('#principalUser_ul input[selectType="assistUser"]').each(
                    function () {
                        var value = $(this).attr("value");
                        if (value == selUserId) {
                            $(this).removeAttr("checked");
                            $(this).attr("disabled", "disabled");
                        } else {
                            $(this).removeAttr("disabled");
                        }
                    }
                );
            }
        }

        //保存
        vm.create = function(){
            common.initJqValidation($('#topicform'));
            var isValid = $('#topicform').valid();
            if (isValid) {
                var selUser = []
                $('#principalUser_ul input[selectType="assistUser"]:checked').each(function () {
                    selUser.push($(this).attr("value"));
                });
                vm.model.prinUserIds = selUser.join(",");
                topicSvc.createTopic(vm.model,vm.isCommit, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        vm.model = data.reObj;
                        vm.isCreate  = true;
                        bsWin.alert("操作成功！");
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("页面未填报完整或者为正确，请检查！");
            }
        }


        //保存结题方式信息
        vm.saveEndTopic = function(){
            common.initJqValidation($('#endTopicform'));
            var isValid = $('#endTopicform').valid();
            if (isValid) {
                topicSvc.updateTopic(vm.model,vm.isCommit, function (data) {
                    if (data.flag || data.reCode == 'ok') {
                        vm.model = data.reObj;
                        vm.isCreate  = true;
                        bsWin.alert("操作成功！");
                    } else {
                        bsWin.alert(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("页面未填报完整或者为正确，请检查！");
            }
        }


        //发起流程
        vm.startFlow = function(){
            common.initJqValidation($('#topicform'));
            var isValid = $('#topicform').valid();
            if (isValid) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "发起流程后，当前页面数据将不能再修改！确认发起流程么？",
                    onOk: function () {
                        var selUser = []
                        $('#principalUser_ul input[selectType="assistUser"]:checked').each(function () {
                            selUser.push($(this).attr("value"));
                        });
                        vm.model.prinUserIds = selUser.join(",");
                        topicSvc.startFlow(vm.model,vm.isCommit,function(data){
                            if(data.flag || data.reCode == 'ok'){
                                bsWin.alert("保存成功！",function(){
                                    $state.go('myTopic');
                                });
                            }else{
                                bsWin.alert(data.reMsg);
                            }
                        });
                    }
                });
            }else{
                bsWin.alert("页面未填报完整或者为正确，请检查！");
            }
        }

        //添加合同信息
        vm.addContract = function () {
            if(vm.isCreate || vm.model.id){
                vm.condition = {};
                if(!vm.isUpdate){
                    vm.condition.sort = vm.conMaxIndex+1;
                }else{
                    vm.conMaxIndex = vm.conditions.length;
                    vm.condition.sort = vm.conditions.length+1;
                }
                vm.conditions.push(vm.condition);
                vm.conMaxIndex++;
            }else{
                bsWin.alert("请先保存课题，再添加合同信息！");
            }
        }

        //保存合同信息
        vm.saveContract = function () {
            if (buildCondition()) {
                var temp1 = vm.model.mainPrinUserId;
                var temp2 = vm.model.prinUserIds;
                topicSvc.saveContractDetailList(vm.conditions,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        vm.model = data.reObj;
                        vm.model.mainPrinUserId = temp1;
                        vm.model.prinUserIds = temp2;
                        bsWin.success("保存成功！");
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            }
        }

        //删除合同信息
        vm.removeContract = function () {
            var isCheck = $("#contractTable input[name='contractInfo']:checked");
            if (isCheck.length > 0) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "删除数据不可恢复，确定删除么？",
                    onOk: function () {
                        $('.confirmDialog').modal('hide');
                        var ids = [];
                        for (var i = 0; i < isCheck.length; i++) {
                            for(var k = 0; k < vm.conditions.length; k++){
                                var con = vm.conditions[k];
                                if (isCheck[i].value == con.sort) {
                                    if (con.contractId) {
                                        ids.push(con.contractId);
                                    }else{
                                        vm.conditions.splice(k, 1);
                                        $("#conTr"+con.sort).remove();
                                        break;
                                    }
                                }
                            }
                        }
                        if(ids.length > 0){
                            topicSvc.deleteContractConditions(ids.join(","),function(data){
                                if(data.flag || data.reCode == 'ok'){
                                    bsWin.success("操作成功！");
                                    for(var i = 0; i < ids.length; i++ ){
                                        for(var k = 0; k < vm.conditions.length; k++){
                                            var con = vm.conditions[k];
                                            if (ids[i] == con.contractId) {
                                                vm.conditions.splice(k, 1);
                                                $("#conTr"+con.sort).remove();
                                                break;
                                            }
                                        }
                                    }
                                }else{
                                    bsWin.error(data.reMsg);
                                }
                            });
                        }
                    },
                });
            }else{
                bsWin.alert("请选择要删除的合同信息！");
            }

        }


        function buildCondition() {
            common.initJqValidation($('#contractform'));
            var isValid = $('#contractform').valid();
            if (isValid) {
                if (vm.conditions.length > 0) {
                    var validateResult = true;
                    vm.conditions.forEach(function (p, number) {
                        p.cooperator = $("#cooperator" + p.sort).val();
                        p.entrustValue = $("#entrustValue" + p.sort).val();
                        p.purchaseType = $("#purchaseType" + p.sort).val();
                        p.contractPerson = $("#contractPerson" + p.sort).val();
                        p.contractTel = $("#contractTel" + p.sort).val();
                        p.topicId= vm.model.id;
                        if(p.cooperator=="" || p.cooperator==="undefined"){
                            bsWin.error("合作单位不能为空！");
                            validateResult = false;
                            return validateResult;
                        }
                        if(p.purchaseType=="" || p.purchaseType==="undefined"){
                            bsWin.error("采购方式不能为空！");
                            validateResult = false;
                            return validateResult;
                        }
                        var pc = /^(-)?(([1-9]{1}\d*)|([0]{1}))(\.(\d){1,4})?$/;
                        if(!pc.test(p.entrustValue)){
                            bsWin.error("委托金额只能输入数字请核查！");
                            validateResult = false;
                            return validateResult;
                        }
                    });
                    return validateResult;
                } else {
                    bsWin.error("没有分录数据，无法保存！");
                    return false;
                }
            }else{
                bsWin.alert("页面未填报完整或者为正确，请检查！");
                return false;
            }
        }
        //校验金额
        vm.checkPrice = function(sort){
            var pc = /^(-)?(([1-9]{1}\d*)|([0]{1}))(\.(\d){1,4})?$/;    //保留4个小数点
            var priceId = "entrustValue"+sort;
            if(!pc.test( $("#"+priceId).val())){
                $("#"+priceId).val("");
                $("span[data-valmsg-for='"+priceId+"']").html("价格只能输入数字！");
                return ;
            }
            $("span[data-valmsg-for='"+priceId+"']").html("");
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('filingEditCtrl', filing);

    filing.$inject = ['bsWin', '$scope', 'addRegisterFileSvc', 'filingSvc','$state','sysfileSvc'];

    function filing(bsWin, $scope, addRegisterFileSvc, filingSvc,$state,sysfileSvc) {
        var vm = this;
        vm.title = '课题研究存档表';
        vm.filing = {};
        vm.zlList = [];     //新增的资料列表
        if($state.params.curNodeId){
            vm.curNodeId = $state.params.curNodeId;

        }
        activate();
        function activate() {
            filingSvc.findByTopicId($state.params.topicId,function(data){
                vm.filing = data.file_record;
                vm.topicUserList = data.topic_user_List;
                vm.filing.topicId = $state.params.topicId;
                vm.initFileUpload();
            })
        }

        //初始化附件上传控件
        vm.initFileUpload = function(){
            if(!vm.filing.id){
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.filing.id",function (newValue, oldValue) {
                    if(newValue && newValue != oldValue && !vm.initUploadOptionSuccess){
                        vm.initFileUpload();
                    }
                });
            }

            //创建附件对象
            vm.sysFile = {
                businessId : vm.filing.id,
                mainId : vm.filing.topicId,
                mainType : sysfileSvc.mainTypeValue().TOPIC,
                sysfileType:sysfileSvc.mainTypeValue().TOPIC_FILING,
                sysBusiType:sysfileSvc.mainTypeValue().TOPIC_FILING,
            };
            sysfileSvc.initUploadOptions({
                inputId:"sysfileinput",
                vm:vm
            });
        }

        //S_保存存档信息
        vm.saveFiling = function(){
            if(vm.curNodeId == 'TOPIC_ZLGD'){
                vm.filing.isGdy = '1';
            }
            filingSvc.save(vm.filing,function (data) {
                if(data.flag || data.reCode == 'ok'){
                   // vm.filing = data.reObj;
                    vm.filing.topicId = $state.params.topicId;
                    bsWin.alert("保存成功！");
                }else{
                    bsWin.error(data.reMsg);
                }
            })
        }//E_saveFiling

        //S_新增资料
        vm.addZL = function(){
            if(!vm.filing.registerFileDto){
                vm.filing.registerFileDto = [];
            }
            var newFile = {};
            newFile.id = common.uuid();
            vm.filing.registerFileDto.push(newFile);
        }//E_addZL

        //S_删除资料
        vm.delZL = function(){
            var isCheck = $("#filingform input[tit='dynamicCheckbox']:checked");
            if (isCheck.length < 1) {
                bsWin.alert("请选择要删除的意见！");
            } else {
                var ids = [];
                for (var i = 0; i < isCheck.length; i++) {
                    if(isCheck[i].value){
                        ids.push(isCheck[i].value);
                    }
                    $.each(vm.filing.registerFileDto,function(c,obj){
                        if(obj.id == isCheck[i].value ){
                            vm.filing.registerFileDto.splice(c, 1);
                        }
                    })
                }
                if(ids.length > 0){
                    addRegisterFileSvc.deleteByIds(ids.join(","),function(data){
                        bsWin.alert("删除成功！");
                    });
                }
            }
        }//E_delZL

        //S_初始化input框的值
        /*       vm.initInputValue = function($event,defaultValue){
         var checkbox = $event.target;
         var checked = checkbox.checked;
         if (checked && !defaultValue) {
         return 1;
         }else{
         return defaultValue;
         }
         }*///E_initInputValue
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('filingSvc', filingService);

    filingService.$inject = ['$http','bsWin'];

    function filingService($http,bsWin) {
        var service = {
            findByTopicId: findByTopicId,                   //根据他课题研究ID查询存档
            save    :   save,                               //保存存档
        };

        return service;

        //S_根据他课题研究ID查询工作计划
        function findByTopicId(topicId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/filing/initByTopicId",
                params:{
                    topicId:topicId
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_findPlanByTopicId


        //S_保存工作方案
        function save(filing,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/filing",
                data:filing
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_save
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('myTopicCtrl', myTopic);

    myTopic.$inject = ['bsWin', '$scope', 'sysfileSvc', 'topicSvc'];

    function myTopic(bsWin, $scope, sysfileSvc, topicSvc) {
        var vm = this;
        vm.title = '我的课题列表';

        activate();
        function activate() {
            topicSvc.initMyGird(vm);
        }
        //表单查询
        vm.searchForm = function(){
            vm.myTopicOptions.dataSource._skip=0;
            vm.myTopicOptions.dataSource.read();
        }

        //重置查询表单
        vm.formReset = function(){
            vm.searchModel = {};
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('queryTopicCtrl', queryTopic);

    queryTopic.$inject = ['bsWin', '$scope', 'sysfileSvc', 'topicSvc'];

    function queryTopic(bsWin, $scope, sysfileSvc, topicSvc) {
        var vm = this;
        vm.title = '课题查询';

        activate();
        function activate() {
            topicSvc.queryGrid(vm);
        }


        //表单查询
        vm.searchForm = function(){
            vm.queryTopicOptions.dataSource._skip=0;
            vm.queryTopicOptions.dataSource.read();
        }

        //重置查询表单
        vm.formReset = function(){
            vm.searchModel = {};
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('topicSvc', topicService);

    topicService.$inject = ['$http','bsWin','sysfileSvc'];

    function topicService($http,bsWin,sysfileSvc) {
        var service = {
            findOrgUser: findOrgUser,                   //查询当前用户所在部门的所有用户信息
            createTopic : createTopic,                  //创建课题研究信息
            updateTopic : updateTopic,                  //更新课题研究信息
            startFlow : startFlow,                      //发起课题研究流程
            initFlowDeal : initFlowDeal,                //初始化课题研究流程信息
            initFlowNode : initFlowNode,                //初始化流程环节信息
            initMyGird : initMyGird,                    //初始化我的课题列表
            initDetail : initDetail,                    //初始化详情信息
            queryGrid : queryGrid ,                     //初始化课题查询列表
            saveContractDetailList : saveContractDetailList, //保存合同信息
            deleteContractConditions: deleteContractConditions  //删除合同信息
        };

        return service;

        //S_查询当前用户所在部门的所有用户信息
        function findOrgUser(callBack){
            var httpOptions = {
                method: 'get',
                url: rootPath + "/user/findChargeUsers",
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_findOrgUser

        //S_创建课题研究信息
        function createTopic(topicModel,isCommit,callBack){
            isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/topicInfo",
                data : topicModel
            };
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){isCommit = false;}
            });
        }//E_createTopic

        //S_更新课题研究信息
        function updateTopic(topicModel,isCommit,callBack){
            isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/topicInfo/updateTopic",
                data : topicModel
            };
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){isCommit = false;}
            });
        }//

        //S_启动流程
        function startFlow(topicModel,isCommit,callBack){
            isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/topicInfo/startFlow",
                data : topicModel
            };
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){isCommit = false;}
            });
        }//E_startFlow

        //S_初始化课题研究流程信息
        function initFlowDeal(vm){
            //vm.businessKey,vm.taskId,vm.instanceId
            var httpOptions = {
                method: 'post',
                url: rootPath + "/topicInfo/findById",
                params : {
                    id:vm.businessKey
                }
            };
            var httpSuccess = function success(response) {
                vm.model = {};
                vm.model = response.data;
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){}
            });
        }//E_initFlowDeal

        //S_初始化我的课题列表
        function initMyGird(vm){
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/topicInfo/findByOData", $("#myTopicForm"),{filter: "createdBy eq ${CURRENT_USER.id}"}),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable : false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "topicName",
                    title: "课题名称",
                    width: "25%",
                    filterable: false
                },
                {
                    field: "cooperator",
                    title: "合作单位",
                    width: "20%",
                    filterable: false,
                },
                {
                    field: "createdDate",
                    title: "创建日期",
                    width: "25%",
                    filterable: false,
                    format: "{0:yyyy/MM/dd HH:mm:ss}"
                },
                {
                    field: "",
                    title: "已发起流程",
                    width: "15%",
                    filterable: false,
                    template: function (item) {
                        if(item.processInstanceId){
                            return "是";
                        }else{
                            return "否";
                        }
                    }
                },
                {
                    field: "",
                    title: "操作",
                    width: "15%",
                    template: function (item) {
                        //如果已经发起流程，则只能查看
                        var isStartFlow = item.processInstanceId?true:false;
                        return common.format($('#columnBtns').html(), item.id, isStartFlow,"flowEnd/"+item.id+"/"+flowcommon.getFlowDefinedKey().TOPIC_FLOW+"/"+item.processInstanceId,!isStartFlow);
                    }
                }
            ];
            // End:column

            vm.myTopicOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound:dataBound,
                resizable: true
            };
        }//E_initMyGird

        //S_初始化详情信息
        function initDetail(topicId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/topicInfo/findDetailById",
                params : {
                    id:topicId
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){}
            });
        }

        //S_保存合同信息
        function saveContractDetailList(conditions,callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/topicInfo/saveContractDetailList",
                headers:{
                    "contentType":"application/json;charset=utf-8"  //设置请求头信息
                },
                traditional: true,
                dataType : "json",
                data : angular.toJson(conditions)//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }

        /**
         * 删除合同信息
         * @param delIds
         * @param isCommit
         * @param callBack
         */
        function deleteContractConditions(delIds,callBack){
            var httpOptions = {
                method : 'delete',
                url: rootPath + "/topicInfo/contractDel",
                params:{
                    ids : delIds
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess,
            });
        }

        //S_初始化流程环节信息
        function initFlowNode(flow,showFlag,vm){
            switch (flow.curNode.activitiId){
                case flowcommon.getTopicFlowNode().TOPIC_BZSH_JH:
                case flowcommon.getTopicFlowNode().TOPIC_FGLD_JH:
                case flowcommon.getTopicFlowNode().TOPIC_ZRSH_JH:
                case flowcommon.getTopicFlowNode().TOPIC_BZSH_FA:
                case flowcommon.getTopicFlowNode().TOPIC_FGLD_FA:
                case flowcommon.getTopicFlowNode().TOPIC_ZRSH_FA:

                case flowcommon.getTopicFlowNode().TOPIC_BZSH_BG:
                case flowcommon.getTopicFlowNode().TOPIC_FGLD_BG:
                case flowcommon.getTopicFlowNode().TOPIC_ZRSH_BG:
                case flowcommon.getTopicFlowNode().TOPIC_BZSH_JT:
                case flowcommon.getTopicFlowNode().TOPIC_FGLD_JT:
                case flowcommon.getTopicFlowNode().TOPIC_ZRSH_JT:
                case flowcommon.getTopicFlowNode().TOPIC_BZSH_GD:
                case flowcommon.getTopicFlowNode().TOPIC_GDY_QR:
                    showFlag.buttBack = true;
                    break;
                //显示附件上传按钮
                case flowcommon.getTopicFlowNode().TOPIC_CGJD:
                case flowcommon.getTopicFlowNode().TOPIC_KTBG:
                case flowcommon.getTopicFlowNode().TOPIC_KTJT:
                    if(flow.businessMap) {  //判断是否第一负责人
                        vm.showFlag.isMainPrinUser = flow.businessMap.MAIN_USER;
                        vm.showFlag.expertEdit = true;          //评审费编辑
                    }
                    break;
                case flowcommon.getTopicFlowNode().TOPIC_LXDW:
                case flowcommon.getTopicFlowNode().TOPIC_QDHT:
                case flowcommon.getTopicFlowNode().TOPIC_YJSS:
                case flowcommon.getTopicFlowNode().TOPIC_NBCS:
                case flowcommon.getTopicFlowNode().TOPIC_YFZL:
                    showFlag.showUploadBT = true;
                    vm.initFileUpload(sysfileSvc.mainTypeValue().TOPIC,sysfileSvc.mainTypeValue().TOPIC,sysfileSvc.mainTypeValue().TOPIC);
                    break;
                //课题计划环节
                case flowcommon.getTopicFlowNode().TOPIC_JHTC:
                    showFlag.businessTr = true;
                    break;
                //工作方案填报环节
                case flowcommon.getTopicFlowNode().TOPIC_GZFA:
                    showFlag.businessTr = true;
                    /*if(flow.businessMap) {  //判断是否第一负责人
                     showFlag.isMainPrinUser = flow.businessMap.MAIN_USER;
                     }*/
                    break;
                //归档环节
                case flowcommon.getTopicFlowNode().TOPIC_ZLGD:
                    showFlag.businessTr = true;
                    vm.showFlag.isMainPrinUser = true;      //可以进行专家评分
                    vm.showFlag.expertEdit = true;          //评审费编辑
                    break;
            }
        }//E_initFlowNode

        //begin queryGrid
        function queryGrid(vm){
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/topicInfo/findByOData", $("#queryTopicForm")),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });
            // End:dataSource
            //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable : false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "",
                    title: "课题名称",
                    width: 200,
                    filterable: false,
                    template : function(item){
                        if(item.processInstanceId){
                            return '<a href="#/topicDetail/'+ item.id
                                + '/'  + item.processInstanceId +'">' + item.topicName + '</a>';
                        }else{
                            return '<a href="#/topicDetail/'+ item.id
                                + '/">' + item.topicName + '</a>';
                        }

                    }
                },
                {
                    field: "cooperator",
                    title: "合作单位",
                    width: 200,
                    filterable: false,
                },
                {
                    field: "createdDate",
                    title: "创建日期",
                    width: 100,
                    filterable: false,
                    format: "{0:yyyy/MM/dd}"
                },
                {
                    field: "endTime",
                    title: "结题日期",
                    width: 100,
                    filterable: false,
                    format: "{0:yyyy/MM/dd}"
                },
                {
                    field: "orgName",
                    title: "申报部门",
                    width: 100,
                    filterable: false
                },
                {
                    field: "",
                    title: "操作",
                    width: 100,
                    template: function (item) {
                        return "";
                    }
                }
            ];
            // End:column

            vm.queryTopicOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound:dataBound,
                resizable: true
            };
        }
        //end queryGrid

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('topicDetailCtrl', topicDetail);

    topicDetail.$inject = ['bsWin', '$scope' , '$state' , 'flowSvc', 'topicSvc'];

    function topicDetail(bsWin, $scope, $state , flowSvc, topicSvc) {
        var vm = this;

        vm.businessKey = $state.params.businessId;
        vm.flow = {};
        vm.flow.processInstanceId = $state.params.processInstanceId;
        activate();
        function activate() {
            $('#myTab li').click(function (e) {
                var aObj = $("a", this);
                e.preventDefault();
                aObj.tab('show');
                var showDiv = aObj.attr("for-div");
                $(".tab-pane").removeClass("active").removeClass("in");
                $("#" + showDiv).addClass("active").addClass("in").show(500);
            })

            //流程图和流程处理记录信息
            if ($state.params.processInstanceId) {
                flowSvc.initFlowData(vm);
            }

            topicSvc.initFlowDeal(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('workPlanEditCtrl', workPlan);

    workPlan.$inject = ['bsWin', 'meetingSvc', 'roomSvc', 'workPlanSvc','$state','$scope','sysfileSvc'];

    function workPlan(bsWin, meetingSvc, roomSvc, workPlanSvc,$state,$scope,sysfileSvc) {
        var vm = this;
        vm.title = '课题研究成果鉴定会工作方案';
        vm.workplan = {};
        if($state.params.topicId){
            vm.workplan.topicId = $state.params.topicId;
        }

        activate();
        function activate() {
            if(vm.workplan.topicId){
                workPlanSvc.findByTopicId(vm.workplan.topicId,function(data){
                    vm.workplan = data;
                    vm.workplan.topicId = $state.params.topicId;
                    vm.initFileUpload();
                })
            }
        }

        //S_保存工作方案
        vm.saveWorkPlan = function(){
            workPlanSvc.save(vm.workplan,function (data) {
                if(data.flag || data.reCode == 'ok'){
                    vm.workplan = data.reObj;
                    bsWin.alert("保存成功！");
                }else{
                    bsWin.error(data.reMsg);
                }
            })
        }//E_saveWorkPlan

        //初始化附件上传控件
        vm.initFileUpload = function(){
            if(!vm.workplan.id){
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.workplan.id",function (newValue, oldValue) {
                    if(newValue && newValue != oldValue && !vm.initUploadOptionSuccess){
                        vm.initFileUpload();
                    }
                });
            }

            //创建附件对象
            vm.sysFile = {
                businessId : vm.workplan.id,
                mainId : vm.workplan.topicId,
                mainType : sysfileSvc.mainTypeValue().TOPIC,
                sysfileType:sysfileSvc.mainTypeValue().TOPIC_WORKPLAN,
                sysBusiType:sysfileSvc.mainTypeValue().TOPIC_WORKPLAN,
            };
            sysfileSvc.initUploadOptions({
                inputId:"sysfileinput",
                vm:vm
            });
        }

        //S_会议室预定
        vm.bookMeeting = function () {
            if(vm.workplan.id){
                $state.go('room',{businessId:vm.workplan.id,businessType:"TOPIC_WP"});
            }else{
                bsWin.alert("请先保存当前信息！");
            }
        }//E_addTimeStage

        //S_拟聘请专家
        vm.selectExpert = function () {
            if (vm.workplan.id) {
                $state.go('expertReviewEdit', {businessId:$state.params.topicId,minBusinessId:vm.workplan.id,businessType:"TOPIC",reviewType: vm.workplan.reviewType});
            } else {
                bsWin.alert("请先保存当前信息，再继续操作！");
            }
        }//E_selectExpert

        //S_编辑预定会议室
        vm.updateBookRoom = function(id){
            if(!vm.meetingList){
                //查找所有会议室地
                meetingSvc.findAllMeeting(function (data) {
                    vm.meetingList = data;
                })
            }
            $.each(vm.workplan.roomDtoList, function(key, val) {
                if(id == val.id){
                    vm.roombook = val;
                }
            } );

            $("#roomBookDetailWindow").kendoWindow({
                width : "50%",
                height : "620px",
                title : "会议预定信息",
                visible : false,
                modal : true,
                closable : true,
                actions : [ "Pin", "Minimize", "Maximize", "Close" ]
            }).data("kendoWindow").center().open();
        }//E_updateBookRoom

        //S_保存预定会议室信息
        vm.saveRoom = function(){
            roomSvc.saveRoom(vm.roombook,function(data){
                if (data.flag || data.reCode == "ok") {
                    //替换修改的会议信息
                    $.each(vm.workplan.roomDtoList, function(key, val) {
                        if(vm.roombook.id == val.id){
                            val = data.reObj;
                        }
                    } );
                    bsWin.success("操作成功！",function(){
                        vm.onRoomClose();
                    });
                } else {
                    bsWin.error(data.reMsg);
                }
            })
        }//E_saveRoom

        vm.onRoomClose = function(){
            window.parent.$("#roomBookDetailWindow").data("kendoWindow").close();
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('workPlanSvc', workPlan);

    workPlan.$inject = ['$http','bsWin'];

    function workPlan($http,bsWin) {
        var service = {
            findByTopicId: findByTopicId,                   //根据他课题研究ID查询工作计划
            save    :   save,                               //保存工作方案
        };

        return service;

        //S_根据他课题研究ID查询工作计划
        function findByTopicId(topicId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/workPlan/initByTopicId",
                params:{
                    topicId:topicId
                }
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_findPlanByTopicId


        //S_保存工作方案
        function save(workPlan,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/workPlan",
                data:workPlan
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_save
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('userCtrl', user);

    user.$inject = ['$location', 'userSvc', 'bsWin'];

    function user($location, userSvc, bsWin) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '用户列表';

        vm.del = function (id) {
            bsWin.confirm({
                    title: '温馨提示',
                    message: "确认删除数据吗？",
                    onOk: function () {
                        userSvc.deleteUser(vm, id, function (data) {
                            if (data.flag || data.reCode == 'ok') {
                                bsWin.success("操作成功！", function () {
                                    vm.gridOptions.dataSource.read();
                                });
                            } else {
                                bsWin.error(data.reMsg);
                            }
                        });
                    }
                }
            );
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                bsWin.alert("请选择要删除数据！");
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };
        //查询
        vm.queryUser = function () {
            userSvc.queryUser(vm);
        }

        /**
         * 重置密码
         */
        vm.resetPwd = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                bsWin.alert("请选择数据");
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                bsWin.confirm({
                        title: '温馨提示',
                        message: "确认重置密码？",
                        onOk: function () {
                            userSvc.resetPwd(vm, idStr);
                        }
                    }
                );
            }
        }

        activate();
        function activate() {
            //默认查询在职用户
            if(!vm.model){
                vm.model = {};
            }
            if(!vm.model.jobState){
                vm.model.jobState = "t";
            }
            userSvc.grid(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('userEditCtrl', user);

    user.$inject = ['$location', 'userSvc', '$state','bsWin'];

    function user($location, userSvc, $state,bsWin) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '新增用户';
        vm.isuserExist = false;
        vm.id = $state.params.id;
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '编辑用户';
        }

        activate();
        function activate() {
            if (vm.isUpdate) {
                userSvc.getUserById(vm);
            } else {
                userSvc.initZtreeClient(vm);
            }
            userSvc.getOrg(function(data){
                vm.org = {};
                vm.org = data;
            });
        }

        vm.create = function () {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                var nodes = userSvc.getZtreeChecked();
                var nodes_roles = $linq(nodes).where(function (x) {
                    return x.isParent == false;
                }).select(function (x) {
                    return {
                        id: x.id,
                        roleName: x.name
                    };
                }).toArray();
                vm.model.roleDtoList = nodes_roles;
                userSvc.createUser(vm.model, vm.isSubmit,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        if(!vm.model.id){
                            vm.model.id = data.idCode;
                            vm.isUpdate = true;
                        }
                        bsWin.success("操作成功！");
                    }else{
                        bsWin.error(data.reMsg);
                    }

                });
            }
        };

        vm.update = function () {
            userSvc.updateUser(vm);
        };


    }
})();

(function () {
    'use strict';

    angular.module('app').factory('userSvc', user);

    user.$inject = ['$http', 'bsWin'];

    function user($http, bsWin) {
        var url_user = rootPath + "/user", url_back = '#/user', url_role = rootPath + "/role/fingByOData",
            url_dictgroup = rootPath + "/dict";
        var service = {
            grid: grid,
            getUserById: getUserById,
            initZtreeClient: initZtreeClient,
            createUser: createUser,
            deleteUser: deleteUser,
            updateUser: updateUser,
            getOrg: getOrg,
            queryUser: queryUser,
            getZtreeChecked: getZtreeChecked,
            resetPwd: resetPwd, //重置密码
            findUserAndOrg : findUserAndOrg,  //获取部门下的所有用户,
            getAllTaskList : getAllTaskList,    //获取可以设置代办的人员列表
        };

        return service;

        /**
         * 获取该用户所有的
         * @param userId
         * @param callBack
         */
        function getAllTaskList(userId,callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/user/findAllTaskList",
                params : {
                    userId : userId
                }
            }
            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }
            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }

        //begin findUserAndOrg
        function findUserAndOrg(callBack){
            var httpOptions = {
                method : 'post',
                url : rootPath + "/user/findUserAndOrg"
            }

            var httpSuccess = function success(response){
                if(callBack != undefined && typeof  callBack == 'function'){
                    callBack(response.data);
                }
            }

            common.http({
                $http : $http ,
                httpOptions : httpOptions ,
                success : httpSuccess
            });
        }
        //end findUserAndOrg

        //begin resetPwd
        function resetPwd(vm, ids) {
            var httpOptions = {
                method: 'put',
                url: url_user + '/resetPwd',
                params: {ids: ids}
            }
            var httpSuccess = function success(response) {
                bsWin.success("重置密码成功！",function(){
                    vm.gridOptions.dataSource.read();
                });
            }
            common.http({
                vm: vm,
                httpOptions: httpOptions,
                success: httpSuccess,
                $http: $http
            });
        }
        //end resetPwd


        //begin initUserNo
        /*function initUserNo(vm){
        
        	var httpOptions={
        		method : "get",
        		url : url_user +"/createUserNo"
        	}
        	
        	var httpSuccess=function success(response){
        	
        		vm.model={};
        		var userNo=response.data;
        		vm.model.userNo=userNo.substring(1,userNo.length-1);
        	}
         common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
        	
        }*///end initUserNo

        // begin#updateUser
        function updateUser(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;
                // zTree
                var nodes = getZtreeChecked();
                var nodes_role = $linq(nodes).where(function (x) {
                    return x.isParent == false;
                }).select(function (x) {
                    return {
                        id: x.id,
                        roleName: x.name
                    };
                }).toArray();
                vm.model.roleDtoList = nodes_role;

                var httpOptions = {
                    method: 'put',
                    url: url_user,
                    data: vm.model
                }

                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                }
                            })
                        }
                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } else {
                // common.alert({
                // vm:vm,
                // msg:"您填写的信息不正确,请核对后提交!"
                // })
            }
        }

        // begin#deleteUser
        function deleteUser(vm, id,callBack) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_user,
                data: id
            }
            var httpSuccess = function success(response) {
                vm.isSubmit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){vm.isSubmit = false;}
            });
        }

        // begin#createUser
        function createUser(userModel, isSubmit, callBack) {
            isSubmit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/user",
                data: userModel
            }

            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError:function(){
                    isSubmit = false;
                }
            });
        }

        //获取部门信息
        function getOrg(callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/org/listAll",
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#initZtreeClient
        function initZtreeClient(vm) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/role/findAllRoles"
            }
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        var zTreeObj;
                        var setting = {
                            check: {
                                chkboxType: {
                                    "Y": "ps",
                                    "N": "ps"
                                },
                                enable: true
                            }
                        };
                        var zNodes = $linq(response.data).select(
                            function (x) {
                                return {
                                    id: x.id,
                                    name: x.roleName
                                };
                            }).toArray();
                        var rootNode = {
                            id: '',
                            name: '角色集合',
                            children: zNodes
                        };
                        zTreeObj = $.fn.zTree.init($("#zTree"), setting, rootNode);
                        if (vm.isUpdate) {
                            updateZtree(vm);
                        }
                    }

                });

            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#getUserById
        function getUserById(vm) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/user/findUserById",
                params: {
                    userId: vm.id
                }
            }
            var httpSuccess = function success(response) {
                vm.model = response.data;
                if (vm.isUpdate) {
                    initZtreeClient(vm);
                }
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#grid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/user/fingByOData", $("#usersform"),{filter: "loginName ne 'admin'"}),
                schema: common.kendoGridConfig().schema({
                    id: "id"
                }),
                serverPaging: false,
                serverSorting: false,
                serverFiltering: false,
                pageSize: 10
            });
            // End:dataSource
            //S_序号
            var dataBound = function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号
            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox' />"
                },
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable: false,
                    template: "<span class='row-number'></span>"
                }
                ,
                {
                    field: "loginName",
                    title: "登录名",
                    width: 100,
                    filterable: false
                },
                {
                    field: "displayName",
                    title: "显示名",
                    width: 100,
                    filterable: false
                },
                {
                    field: "orgDto.name",
                    title: "所属部门",
                    width: 100,
                    filterable: false
                },
                {
                    field: "userIP",
                    title: "登录IP",
                    width: 160,
                    filterable: false
                },
                {
                    field: "lastLogin",
                    title: "最后登录时间",
                    width: 160,
                    filterable: false
                },
                {
                    field: "",
                    title: "所属角色",
                    width: 160,
                    filterable: false,
                    template: function (item) {
                        if (item.roleDtoList) {
                            var resultStr = "";
                            for (var i = 0, l = item.roleDtoList.length; i < l; i++) {
                                if (i == 0) {
                                    resultStr += item.roleDtoList[i].roleName
                                } else {
                                    resultStr += ", " + item.roleDtoList[i].roleName;
                                }
                            }
                            return resultStr;
                        }
                        else {
                            return " ";
                        }
                    }
                },
                {
                    field: "",
                    title: "在职情况",
                    width: 80,
                    filterable: false,
                    template: function (item) {
                        if (item.jobState && item.jobState == "t") {
                            return "在职";
                        } else {
                            return "已撤销";
                        }
                    }
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),"vm.del('" + item.id + "')", item.id);

                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound: dataBound,
                resizable: true
            };

        }// end fun grid

        //查询
        function queryUser(vm) {
            vm.gridOptions.dataSource._skip = 0;
            vm.gridOptions.dataSource.read();
        }

        // begin common fun
        function getZtreeChecked() {
            var treeObj = $.fn.zTree.getZTreeObj("zTree");
            var nodes = treeObj.getCheckedNodes(true);
            return nodes;
        }

        function updateZtree(vm) {
            var treeObj = $.fn.zTree.getZTreeObj("zTree");
            var checkedNodes = $linq(vm.model.roleDtoList).select(function (x) {
                return x.roleName;
            }).toArray();
            var allNodes = treeObj.getNodesByParam("level", 1, null);

            var nodes = $linq(allNodes).where(function (x) {
                return $linq(checkedNodes).contains(x.name);
            }).toArray();

            for (var i = 0, l = nodes.length; i < l; i++) {
                treeObj.checkNode(nodes[i], true, true);
            }
        }

        // end common fun
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('workdayCtrl', workday);

    workday.$inject = ['$location', 'workdaySvc'];

    function workday($location, workdaySvc) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '工作日列表';
        
        activate();
        function activate() {
        	workdaySvc.grid(vm);
        }

        //打开增加窗口
        vm.addWorkDay=function(){
            //初始化对象
            vm.workday = {};
            $("#workDay").kendoWindow({
                width: "45%",
                height: "auto",
                title: "系统工作日编辑",
                visible: false,
                modal: true,
                closable: true,
                actions: ["Pin", "Minimize", "Maximize", "Close"]
            }).data("kendoWindow").center().open();
        }

        vm.create=function(){
            common.initJqValidation($('#form'));
            var isValid = $('#form').valid();
            if (isValid) {
                workdaySvc.createWorkday(vm);
            }
        }

        vm.del=function(id){
        	common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    workdaySvc.deleteWorkday(vm, id);
                }
            });
        }
        
         vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };
        
        
        vm.queryWorkday=function(){
        	workdaySvc.queryWorkday(vm);
        }
        
        vm.ResetWorkday=function(){
        	workdaySvc.clearValue(vm);
        }
    }
})();

(function() {
	'use strict';
	
	angular.module('app').factory('workdaySvc', workday);
	
	workday.$inject = ['$http','$state','bsWin'];

	function workday($http,$state,bsWin) {
		
		var url_workday=rootPath+'/workday';
		var url_back="#/workday"
		var service = {
			grid : grid,	//初始化数据
			createWorkday : createWorkday,	//新增工作日
			getWorkdayById : getWorkdayById,	//通过id查找该对象信息
			updateWorkday : updateWorkday,		//更新
			deleteWorkday : deleteWorkday,		//删除
			queryWorkday : queryWorkday,		//模糊查询
			clearValue : clearValue		//重置
			
			
		}
		
		return service;	
		
		//begin clearValue
		function clearValue(vm){
		var tab = $("#workdayForm").find('input,select');
			$.each(tab, function(i, obj) {
				obj.value = "";
			});
			
		vm.gridOptions.dataSource.read();
		}
		
		//begin getWorkdayById
		function getWorkdayById(vm){
		
			var httpOptions={
				method:'get',
				url :url_workday+"/getWorkdayById",
				params:{id:vm.id}
			}
			
			var httpSuccess=function success(response){
				vm.workday=response.data;
			}
			
			 common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
		}//end getWorkdayById
		
		function queryWorkday(vm){
			vm.gridOptions.dataSource.read();
		}
		
		//begin createWorkday
		function createWorkday(vm){
			var httpOptions={
				method :'post',
				url : url_workday+"/createWorkday",
				data : vm.workday
			}
			var httpSuccess=function success(response){
				if(response.data.flag){
                    bsWin.alert("保存成功！", function(){
                        window.parent.$("#workDay").data("kendoWindow").close();
                        vm.gridOptions.dataSource.read();
                        vm.workday = {};
                    });
				}else{
                    bsWin.alert(response.data.reMsg);
				}
			}
			 common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
		
		
		}//end createWorkday
		
		//begin updateWorkday
		function updateWorkday(vm){
			var httpOptions={
				method: "put",
				url : url_workday,
				data : vm.workday
			}
			
			var httpSuccess=function success(response){
				common.requestSuccess({
					vm:vm,
					response:response,
					fn:function(){
						common.alert({
							vm: vm,
							msg:"操作成功",
							fn:function(){
								vm.isSubmit = false;
                                $('.alertDialog').modal('hide');
                                $('.modal-backdrop').remove();
                                location.href = url_back;
							}
						});
					}
				});
			}
			common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
		}
		//end updateWorkday
		
		
		//begin deleteWorkday
		function deleteWorkday(vm,id){
			var httpOptions={
				method:'delete',
				url:url_workday,
				data:id
			}
			
			var httpSuccess=function success(response){
				 vm.gridOptions.dataSource.read();
			}
			common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });
			
		}
		//end deleteWorkday
		
		function grid(vm){
			//begin dataSource
			var dataSource=new kendo.data.DataSource({
				type:'odata',
				transport:common.kendoGridConfig().transport(url_workday+'/findByOdataObj',$("#workdayForm")),
				schema:common.kendoGridConfig().schema({
					id:'id',
					fields:{
						createdDate:{
							type:"date"
						},
						modifiedDate:{
							type:"date"
						}
					}
				
				}),
				serverPaging:true,
				serverSorting:true,
				serverFiltering:true,
				pageSize :10,
				sort:{
					field:"dates",
					dir:"desc"
				}

				
			});//end dataSource
			
			//S_序号
            var  dataBound=function () {  
                var rows = this.items();  
                var page = this.pager.page() - 1;  
                var pagesize = this.pager.pageSize();  
                $(rows).each(function () {  
                    var index = $(this).index() + 1 + page * pagesize;  
                    var rowLabel = $(this).find(".row-number");  
                    $(rowLabel).html(index);  
                });  
            }; 
            //S_序号
			
			var columns=[
				{
				 template: function (item) {
                        return kendo
                            .format(
                                "<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                                item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"

                },
                {  
				    field: "rowNumber",  
				    title: "序号",  
				    width: 50,
				    filterable : false,
				    template: "<span class='row-number'></span>"  
				 },
                {  
				    field: "dates",  
				    title: "时间",  
				    width: 200,
				    format:"{0:yyyy-MM-dd}",
				    filterable : false
				 },
                {  
				    field: "",  
				    title: "状态",  
				    width: 100,
				    filterable : false,
				    template:function(item){
				    	if(item.status){
					    	if(item.status=="1"){
					    		return "调休";
					    	}
					    	if(item.status=="2"){
					    		return "加班";
					    	}
				    	}else{
				    		return "";
				    	}
				    }
				 } ,
                {  
				    field: "remark",  
				    title: "备注",  
				    width: 140,
				    filterable : false
				 }
				 ,
                {  
				    field: "",  
				    title: "操作",  
				    width: 140,
				    template: function (item) {
                        return common.format($('#columnBtns').html(),
                            "vm.del('" + item.id + "')", item.id);

                    }
				 }
			
			];
			vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound:dataBound,
                resizable: true,
            };

		
		}//end grid
		}
		
	})();
(function () {
    'use strict';

    angular.module('app').controller('workdayEditCtrl', workdayEdit);

    workdayEdit.$inject = ['$location', 'workdaySvc','$state'];

    function workdayEdit($location, workdaySvc,$state) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '添加工作日';
        vm.id=$state.params.id;
        vm.workday={};
        vm.workday.status="1";//初始化状态
        if(vm.id){
        	vm.isUpdate=true;
        	vm.title="更新工作日";
        }
        
        
        activate();
        function activate() {
        	if(vm.isUpdate){
        		workdaySvc.getWorkdayById(vm);
        	}
        }
        
        vm.create=function(){
        	workdaySvc.createWorkday(vm);
        }
        
        vm.update=function(){
        	workdaySvc.updateWorkday(vm);
        }
    }
})();

/**
 * Created by shenning on 2018/5/21.
 */
(function () {
    'use strict';
    angular.module('app').controller('flowWPEditCtrl', flowWPEdit);

    flowWPEdit.$inject = ['workprogramSvc', '$state', 'bsWin', 'sysfileSvc', '$scope','$rootScope' , 'expertSvc'];

    function flowWPEdit(workprogramSvc, $state, bsWin, sysfileSvc, $scope,$rootScope , expertSvc) {
        var vm = this;
        vm.work = {};						//创建一个form对象
        vm.model = {};                      //项目对象
        vm.startDateTime = new Date("2006/6/1 08:00");
        vm.endDateTime = new Date("2060/6/1 21:00");

        vm.signid =  $state.params.signid;		//收文ID
        vm.taskid = $state.params.taskid;		//任务ID
        vm.branchId = $state.params.branchId;   //分支ID

        vm.work.signId = $state.params.signid;
        vm.work.id = "";
        vm.sign = {};						//创建收文对象
        vm.unSeledWork = {};                //未选择的工作方案
        vm.searchSign = {};                 //用于过滤

        vm.businessFlag = {
            isSelfReview: false,            //是否自评
            isSingleReview: true,           //是否单个评审
            isMainWorkProj: false,          //是否是合并评审主项目
            isLoadMeetRoom: false,          //是否已经加载了会议室
            isReveiwAWP: false,             //是否是合并评审次项目，如果是，则不允许修改，由主项目控制
        }
        //页面初始化
        activate();
        function activate() {
            vm.showAll = true;
            workprogramSvc.initFlowWP(vm.work.signId,vm.taskid,$state.params.branchId,function(data){
                vm.work = data.eidtWP;
                //如果没有赋值，则初始化一种类型，否则按照默认的类型
                //因为合并评审次项目是不可以修改的
                if (!vm.work.reviewType) {
                    vm.work.reviewType = "自评";
                }
                if (!vm.work.isSigle) {
                    vm.work.isSigle = '单个评审';
                }

                //如果选了专家，并且评审费有变动，则更改
                if (vm.work.expertDtoList && vm.work.expertDtoList.length > 0) {
                    if (!vm.work.expertCost || vm.work.expertCost < 1000 * (vm.work.expertDtoList.length)) {
                        vm.work.expertCost = 1000 * (vm.work.expertDtoList.length);
                    }
                    //判断下是否有拟请的专家
                    if (vm.work.expertDtoList) {
                        var expertDtoList = vm.work.expertDtoList;//进行存值
                        for (var j = 0; j < expertDtoList.length; j++) {
                            //判断下专家是否有专业类别
                            if (expertDtoList[j].expertTypeDtoList) {
                                var expertTypeList = expertDtoList[j].expertTypeDtoList;//进行存值
                                var major = "";//专业
                                var expertCategory = ""//专业类别
                                for (var k = 0; k < expertTypeList.length; k++) {
                                    if (expertCategory.indexOf(expertTypeList[k].expertType) < 0) {
                                        if (k > 0) {
                                            expertCategory += "、"
                                        }
                                        expertCategory += expertTypeList[k].expertType;
                                    }
                                    if (k > 0) {
                                        major += "、"
                                    }
                                    major += expertTypeList[k].maJorBig + "、" + expertTypeList[k].maJorSmall;

                                }
                                expertDtoList[j].expertCategory = expertCategory;
                                expertDtoList[j].major = major;
                            }
                        }

                    }

                }
                vm.model.workProgramDtoList = {};
                //如果存在多个分支的情况，则显示项目总投资
                if ((data.showTotalInvestment == '9' || data.showTotalInvestment == 9)
                    || (data.WPList && data.WPList.length > 0)) {
                    vm.model.workProgramDtoList = data.WPList;
                    vm.showTotalInvestment = true;
                }

                if (vm.work.branchId == "1") {
                    workprogramSvc.findCompanys(vm);
                }
                vm.work.signId = $state.params.signid;		//收文ID(重新赋值)
                if (vm.work.projectType) {
                    vm.work.projectTypeDicts = $rootScope.topSelectChange(vm.work.projectType, $rootScope.DICT.PROJECTTYPE.dicts)
                }

                //如果是合并评审次项目，则不允许修改
                if (vm.work.isSigle == "合并评审" && (vm.work.isMainProject == "0" || vm.work.isMainProject == 0)) {
                    vm.businessFlag.isReveiwAWP = true;
                }

                //初始化控件
                vm.initFileUpload();
            });

            $('#wpTab li').click(function (e) {
                var aObj = $("a", this);
                e.preventDefault();
                aObj.tab('show');
                var showDiv = aObj.attr("for-div");
                $(".tab-pane").removeClass("active").removeClass("in");
                $("#" + showDiv).addClass("active").addClass("in").show(500);
            })
            //查询会议列表
        }

        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.work.id) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.work.id", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }

            //创建附件对象
            vm.sysFile = {
                businessId: vm.work.id,
                mainId: vm.work.signId,
                mainType: sysfileSvc.mainTypeValue().SIGN,
                sysfileType: sysfileSvc.mainTypeValue().WORKPROGRAM,
                sysBusiType: sysfileSvc.mainTypeValue().WORKPROGRAM,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm
            });
        }

        //评审方式修改
        vm.reviewTypeChange = function () {
            if(vm.work.reviewType =='自评'){
                vm.work.expertCost="";
            }
            if(vm.work.reviewType =='合并评审'){
                vm.work.isMainProject = "9";
            }
            //如果已经保存了工作方案，则从数据库查找工作方案内容进行对比
            if(vm.work.id){
                workprogramSvc.findById(vm.work.id,function(data){
                    if(data.expertCost!=undefined && vm.work.expertCost==""){
                        vm.work.expertCost=data.expertCost;
                    }
                    //1、由合并评审改为单个评审
                    if(data.isSigle == '合并评审' && data.isMainProject == "9" && "单个评审" == vm.work.isSigle){
                        bsWin.confirm({
                            title: "询问提示",
                            message: "该项目已关联其他项目，您确定要改为单个评审吗？",
                            onOk: function () {
                                workprogramSvc.deleteAllMerge($state.params.signid,vm.work.id, function (data) {
                                    if (data.flag || data.reCode == 'ok') {
                                        bsWin.alert("操作成功！",function(){
                                            vm.work.isMainProject = "0";
                                        });
                                    } else {
                                        bsWin.error("操作失败！");
                                    }
                                });
                            },
                            onCancel: function () {
                                vm.work.isSigle = "合并评审";
                                vm.work.isMainProject = "9";
                            }
                        });
                        //由专家评审会改成专家函评，并且已经预定了会议室
                    }else if(data.reviewType =='专家评审会' && vm.work.reviewType =='专家函评' && vm.work.roomBookingDtos && vm.work.roomBookingDtos.length > 0){
                        bsWin.confirm({
                            title: "询问提示",
                            message: "改成专家函评，预定会议室将会删除，确定修改么？",
                            onOk: function () {
                                workprogramSvc.updateReviewType($state.params.signid,vm.work.id,vm.work.reviewType, function (data) {
                                    if (data.flag || data.reCode == 'ok') {
                                        vm.work = data.reObj;
                                        vm.work.signId = $state.params.signid;
                                        bsWin.alert("操作成功！");
                                    } else {
                                        bsWin.error("操作失败！");
                                    }
                                });
                            },
                            onCancel: function () {
                                vm.work.reviewType = data.reviewType;
                            }
                        });

                    }else if((data.reviewType =='专家评审会' || data.reviewType =='专家函评') && vm.work.reviewType =='自评'){
                        var isNeedUpdate = false;
                        if(vm.work.roomBookingDtos && vm.work.roomBookingDtos.length > 0){
                            isNeedUpdate = true;
                        }else if(vm.work.expertDtoList &&vm.work.expertDtoList.length > 0){
                            isNeedUpdate = true;
                        }
                        if(isNeedUpdate){
                            bsWin.confirm({
                                title: "询问提示",
                                message: "评审方式改成自评，预定会议室和抽取专家将会删除，确定修改么？",
                                onOk: function () {
                                    workprogramSvc.updateReviewType($state.params.signid,vm.work.id,vm.work.reviewType, function (data) {
                                        if (data.flag || data.reCode == 'ok') {
                                            vm.work = data.reObj;
                                            vm.work.signId = $state.params.signid;
                                            bsWin.alert("操作成功！");
                                        } else {
                                            bsWin.error("操作失败！");
                                        }
                                    });
                                },
                                onCancel: function () {
                                    vm.work.reviewType = data.reviewType;
                                }
                            });
                        }
                    }

                });
            }
        }

        //关闭窗口
        vm.onWorkClose = function () {
            window.parent.$(".workPro").data("kendoWindow").close();
        }

        //重置合并发文
        vm.formReset = function () {
            vm.searchSign = {};
        }
        //过滤器
        vm.filterSign = function (item) {
            var isMatch = true;
            if (vm.searchSign.projectname && (item.projectname).indexOf(vm.searchSign.projectname) == -1) {
                isMatch = false;
            }
            if (isMatch && vm.searchSign.reviewstage && (item.reviewstage).indexOf(vm.searchSign.reviewstage) == -1) {
                isMatch = false;
            }
            if (isMatch) {
                return item;
            }
        }

        //初始化合并评审弹框
        vm.initMergeWP = function () {
            if (!vm.work.id) {
                bsWin.alert("请先保存工作方案！");
            } else {
                //1、先判断该工作方案是否已经保存
                workprogramSvc.findById(vm.work.id,function(data){
                    //2、如果已经保存，则弹框
                    if(data.isSigle == '合并评审' && data.isMainProject == "9"){
                        //初始化合并评审信息
                        workprogramSvc.initMergeInfo(vm, vm.work.signId);
                        $("#mergeSign").kendoWindow({
                            width: "75%",
                            height: "700px",
                            title: "合并评审",
                            visible: false,
                            modal: true,
                            closable: true,
                            actions: ["Pin", "Minimize", "Maximize", "Close"]
                        }).data("kendoWindow").center().open();
                    }else{
                        bsWin.alert("请先保存工作方案！");
                    }
                });
            }
        }

        //选择项目
        vm.chooseSign = function () {
            var selIds = $("input[name='mergeSign']:checked");
            if (selIds.length == 0) {
                bsWin.alert("请选择要合并评审的项目！");
            } else {
                var signIdArr = [];
                $.each(selIds, function (i, obj) {
                    signIdArr.push(obj.value);
                });
                workprogramSvc.chooseSign(vm.work.signId, signIdArr.join(","), function (data) {
                    if (data.flag || data.reCode == "ok") {
                        workprogramSvc.initMergeInfo(vm, vm.work.signId);
                    }
                    bsWin.alert(data.reMsg);
                });
            }
        }

        //取消项目
        vm.cancelSign = function () {
            var selIds = $("input[name='cancelMergeSignid']:checked");
            if (selIds.length == 0) {
                bsWin.alert("请选择要取消合并评审的项目！");
            } else {
                var selSignIdArr = [];
                $.each(selIds, function (i, obj) {
                    selSignIdArr.push(obj.value);
                });
            }
            workprogramSvc.cancelMergeSign(vm.work.signId, selSignIdArr.join(","), function (data) {
                if (data.flag || data.reCode == "ok") {
                    workprogramSvc.initMergeInfo(vm, vm.work.signId);
                }
                bsWin.alert(data.reMsg);
            });
        }

        /*********************  S_会议室模块   *************************/
        //会议预定添加弹窗
        vm.addTimeStage = function () {
            if (vm.work.id) {
                workprogramSvc.findById(vm.work.id,function(data){
                    //2、如果已经保存，则弹框
                    if(data.reviewType == '专家评审会'){
                        $state.go('room', {businessId: vm.work.id, businessType: "SIGN_WP"});
                    }else{
                        bsWin.alert("请先保存工作方案！");
                    }
                });
            } else {
                bsWin.alert("请先保存！");
            }
        }

        /*********************  E_会议室模块   *************************/

        //查询评估部门
        vm.findUsersByOrgId = function (type) {
            workprogramSvc.findUsersByOrgId(vm, type);
        }

        vm.create = function () {
            common.initJqValidation($("#work_program_form"));
            var isValid = $("#work_program_form").valid();
            if (isValid) {
                if(!vm.isTime){
                    if(vm.work.studyQuantum=="全天") {
                        vm.work.studyBeginTime="";
                        vm.work.studyEndTime="";
                    }
                    else {
                        if ($("#studyBeginTime").val()) {
                            vm.work.studyBeginTimeStr = $("#studyBeginTime").val();
                        }
                        if ($("#studyEndTime").val()) {
                            vm.work.studyEndTimeStr = $("#studyEndTime").val();
                        }
                        if ($("#studyAllDay").val() && $("#studyBeginTime").val()) {
                            vm.work.studyBeginTime = $("#studyAllDay").val() + " " + $("#studyBeginTime").val() + ":00";
                        }
                        if ($("#studyAllDay").val() && $("#studyEndTime").val()) {
                            vm.work.studyEndTime = $("#studyAllDay").val() + " " + $("#studyEndTime").val() + ":00";
                        }
                    }
                    workprogramSvc.createWP(vm.work, false, vm.iscommit, function (data) {
                        if (data.flag || data.reCode == "ok") {
                            vm.work.id = data.reObj.id;
                            bsWin.success("操作成功！");
                        } else {
                            bsWin.error(data.reMsg);
                        }
                    });
                }else{
                    bsWin.alert("结束时间必须大于开始时间！");
                }

            } else {
                bsWin.alert("操作失败，有红色*号的选项为必填项，请按要求填写！");
            }
        };
        //判断调研时间的结束时间是否小于开始时间
        vm.compare=function () {
            var studyBeginTimeStr = parseInt(vm.work.studyBeginTimeStr.split(":")[0]);
            var studyEndTimeStr = parseInt(vm.work.studyEndTimeStr.split(":")[0]);
            if(studyBeginTimeStr==studyEndTimeStr){//当“时”想等时，判断“分”
                var beginTime = parseInt(vm.work.studyBeginTimeStr.split(":")[1]);
                var endTime = parseInt(vm.work.studyEndTimeStr.split(":")[1]);
                if(beginTime>endTime){ //判断“分”
                    vm.isTime=true;
                }else{
                    vm.isTime=false;
                }

            }else{
                if(studyBeginTimeStr>studyEndTimeStr){ //判断"时"
                    vm.isTime=true;
                }else{
                    vm.isTime=false;
                }
            }

        }

        //拟聘请专家
        vm.selectExpert = function () {
            if (vm.work.id) {
                //2、如果已经保存，则弹框
                workprogramSvc.findById(vm.work.id,function(data){
                    if(data.reviewType == '专家评审会' || data.reviewType == '专家函评'){
                        //先让用户选择会议时间
                        if(vm.work.reviewType == '专家评审会' && (!vm.work.roomBookingDtos || vm.work.roomBookingDtos.length == 0) ){
                            bsWin.alert("请先预定评审会日期！");
                        }else if(vm.work.reviewType == '专家函评' && !data.letterDate){
                            bsWin.alert("请先选择函评日期并保存！");
                        }else{
                            $state.go('expertReviewEdit', {
                                businessId: vm.signid,
                                minBusinessId: vm.work.id,
                                businessType: "SIGN",
                                reviewType: vm.work.reviewType,
                                processInstanceId:vm.work.processInstanceId ||'',
                                taskId :vm.taskid,
                                isback:false
                            });
                        }
                    }else{
                        bsWin.alert("请先保存工作方案！");
                    }
                });
            } else {
                bsWin.alert("请先保存当前信息，再继续操作！");
            }
        }

        /**
         * 查看专家信息
         * @param expertId
         */
        vm.checkExpertDetail = function(expertId){
            vm.expert = [];
            vm.id = expertId;
            expertSvc.getExpertById(vm.id, function (data) {
                vm.expert = data;
                $("#queryExportDetailsWP").kendoWindow({
                    width: "80%",
                    height: "620px",
                    title: "专家详细信息",
                    visible: false,
                    modal: true,
                    open:function(){
                        $("#expertPhotoSrc").attr("src", rootPath + "/expert/transportImg?expertId=" + vm.expert.expertID + "&t=" + Math.random());
                        //tab标签
                        $("#busi_baseinfoWP").addClass("active").addClass("in").show(500);
                        $('#myTabExpertWP li').click(function (e) {
                            $("#busi_baseinfoWP").removeClass("active").removeClass("in");
                            $("#busi_workplanWP").removeClass("active").removeClass("in");
                            var aObj = $("a", this);
                            e.preventDefault();
                            aObj.tab('show');
                            var showDiv = aObj.attr("for-div");
                            // $("#" + showDiv).removeClass("active").removeClass("in");
                            $("#" + showDiv).addClass("active").addClass("in").show(500);
                        })
                        //评审过项目
                        vm.reviewProjectList2 = [];
                        expertSvc.reviewProjectGrid(vm.id,function(data){
                            vm.isLoading = false;
                            if(data && data.length > 0){
                                vm.reviewProjectList2 = data;
                                vm.noData = false;
                            }else{
                                vm.noData = true;
                            }

                        });
                    },
                    closable: true,
                    actions: ["Pin", "Minimize", "Maximize", "Close"]
                }).data("kendoWindow").center().open();
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('wpBaseCtrl', workprogram);

    workprogram.$inject = ['bsWin','workprogramSvc','$state',"$rootScope"];

    function workprogram(bsWin,workprogramSvc,$state,$rootScope) {
        var vm = this;
    	vm.work = {};						//创建一个form对象
        vm.title = '项目基本信息';        	//标题
        vm.signId = $state.params.signid;
        vm.isadmin = $state.params.isadmin; //是否是从项目维护跳转过来

        activate();
        function activate() {
        	workprogramSvc.initBaseInfo(vm.signId,function(data){
                vm.work = data;
                if(vm.work.projectType){
                    vm.projectTypes = $rootScope.topSelectChange(vm.work.projectType,$rootScope.DICT.PROJECTTYPE.dicts)
                }
            });
        }

        vm.goBack = function(){
            if(vm.isadmin){
                $state.go('MaintainProjectEdit', {signid: $state.params.signid,processInstanceId:null});
            }else{
                $rootScope.back();
            }
        }
        vm.create = function () {
            common.initJqValidation($("#work_program_form"));
            var isValid = $("#work_program_form").valid();
            if (isValid) {
                vm.iscommit = true;
                workprogramSvc.saveBaseInfo(vm.work,vm.iscommit,function(data){
                    vm.iscommit = false;
                    if (data.flag || data.reCode == "ok") {
                        vm.work.id = data.idCode;
                        bsWin.success("操作成功！");
                    } else {
                        bsWin.error(data.reMsg);
                    }
                });
            }else{
                bsWin.alert("操作失败，有红色*号的选项为必填项，请按要求填写！");
            }
        };  

    }
})();


(function () {
    'use strict';

    angular.module('app').controller('workprogramEditCtrl', workprogram);

    workprogram.$inject = ['workprogramSvc', '$state', 'bsWin', 'sysfileSvc', '$scope', 'meetingSvc', 'roomSvc','signSvc'];

    function workprogram(workprogramSvc, $state, bsWin, sysfileSvc, $scope, meetingSvc, roomSvc,signSvc) {
        var vm = this;
        vm.work = {};						//创建一个form对象
        vm.model = {};                      //项目对象
        vm.title = '评审方案编辑';        	//标题
        vm.startDateTime = new Date("2006/6/1 08:00");
        vm.endDateTime = new Date("2030/6/1 21:00");
        vm.work.signId = $state.params.signid;		//收文ID
        vm.isControl=$state.params.isControl;		//按钮显示
        vm.work.id = "";

        vm.sign = {};						//创建收文对象
        vm.unSeledWork = {};                //未选择的工作方案
        vm.searchSign = {};                 //用于过滤

        vm.businessFlag = {
            isSelfReview: false,          //是否自评
            isSingleReview: true,         //是否单个评审
            isMainWorkProj: false,         //是否是合并评审主项目
            isLoadMeetRoom: false,         //是否已经加载了会议室
            isReveiwAWP: false,             //是否是合并评审次项目，如果是，则不允许修改，由主项目控制
        }
        vm.expertList =  new Array(15); //用于打印页面的专家列表，控制行数
        //页面初始化
        activate();
        function activate() {
            vm.showAll = true;
            if(vm.isControl){//是否为维护项目
                workprogramSvc.workMaintainList(vm);
            }else{
                workprogramSvc.initPage(vm);
            }

            $('#wpTab li').click(function (e) {
                var aObj = $("a", this);
                e.preventDefault();
                aObj.tab('show');
                var showDiv = aObj.attr("for-div");
                $(".tab-pane").removeClass("active").removeClass("in");
                $("#" + showDiv).addClass("active").addClass("in").show(500);
            })
            //查询会议列表
        }

        //初始化附件上传控件
        vm.initFileUpload = function () {
            if (!vm.work.id) {
                //监听ID，如果有新值，则自动初始化上传控件
                $scope.$watch("vm.work.id", function (newValue, oldValue) {
                    if (newValue && newValue != oldValue && !vm.initUploadOptionSuccess) {
                        vm.initFileUpload();
                    }
                });
            }

            //创建附件对象
            vm.sysFile = {
                businessId: vm.work.id,
                mainId: vm.work.signId,
                mainType: sysfileSvc.mainTypeValue().SIGN,
                sysfileType: sysfileSvc.mainTypeValue().WORKPROGRAM,
                sysBusiType: sysfileSvc.mainTypeValue().WORKPROGRAM,
            };
            sysfileSvc.initUploadOptions({
                inputId: "sysfileinput",
                vm: vm
            });
        }

        //评审方式修改
        vm.reviewTypeChange = function () {
            if(vm.work.reviewType =='自评'){
                vm.work.expertCost="";
            }
            if(vm.work.reviewType =='合并评审'){
                vm.work.isMainProject = "9";
            }
            //如果已经保存了工作方案，则从数据库查找工作方案内容进行对比
            if(vm.work.id){
                workprogramSvc.findById(vm.work.id,function(data){
                    if(data.expertCost!=undefined && vm.work.expertCost==""){
                        vm.work.expertCost=data.expertCost;
                    }
                    //1、由合并评审改为单个评审
                    if(data.isSigle == '合并评审' && data.isMainProject == "9" && "单个评审" == vm.work.isSigle){
                        bsWin.confirm({
                            title: "询问提示",
                            message: "该项目已关联其他项目，您确定要改为单个评审吗？",
                            onOk: function () {
                                workprogramSvc.deleteAllMerge($state.params.signid,vm.work.id, function (data) {
                                    if (data.flag || data.reCode == 'ok') {
                                        bsWin.alert("操作成功！",function(){
                                            vm.work.isMainProject = "0";
                                        });
                                    } else {
                                        bsWin.error("操作失败！");
                                    }
                                });
                            },
                            onCancel: function () {
                                vm.work.isSigle = "合并评审";
                                vm.work.isMainProject = "9";
                            }
                        });
                    //由专家评审会改成专家函评，并且已经预定了会议室
                    }else if(data.reviewType =='专家评审会' && vm.work.reviewType =='专家函评' && vm.work.roomBookingDtos && vm.work.roomBookingDtos.length > 0){
                        bsWin.confirm({
                            title: "询问提示",
                            message: "改成专家函评，预定会议室将会删除，确定修改么？",
                            onOk: function () {
                                workprogramSvc.updateReviewType($state.params.signid,vm.work.id,vm.work.reviewType, function (data) {
                                    if (data.flag || data.reCode == 'ok') {
                                        vm.work = data.reObj;
                                        vm.work.signId = $state.params.signid;
                                        bsWin.alert("操作成功！");
                                    } else {
                                        bsWin.error("操作失败！");
                                    }
                                });
                            },
                            onCancel: function () {
                                vm.work.reviewType = data.reviewType;
                            }
                        });

                    }else if((data.reviewType =='专家评审会' || data.reviewType =='专家函评') && vm.work.reviewType =='自评'){
                        var isNeedUpdate = false;
                        if(vm.work.roomBookingDtos && vm.work.roomBookingDtos.length > 0){
                            isNeedUpdate = true;
                        }
                        if(vm.work.expertDtoList &&vm.work.expertDtoList.length > 0){
                            isNeedUpdate = true;
                        }
                        if(isNeedUpdate){
                            bsWin.confirm({
                                title: "询问提示",
                                message: "评审方式改成自评，预定会议室和抽取专家将会删除，确定修改么？",
                                onOk: function () {
                                    workprogramSvc.updateReviewType($state.params.signid,vm.work.id,vm.work.reviewType, function (data) {
                                        if (data.flag || data.reCode == 'ok') {
                                            vm.work = data.reObj;
                                            vm.work.signId = $state.params.signid;
                                            bsWin.alert("操作成功！");
                                        } else {
                                            bsWin.error("操作失败！");
                                        }
                                    });
                                },
                                onCancel: function () {
                                    vm.work.reviewType = data.reviewType;
                                }
                            });
                        }
                    }

                });
            }
        }

        //关闭窗口
        vm.onWorkClose = function () {
            window.parent.$(".workPro").data("kendoWindow").close();
        }

        //重置合并发文
        vm.formReset = function () {
            vm.searchSign = {};
        }
        //过滤器
        vm.filterSign = function (item) {
            var isMatch = true;
            if (vm.searchSign.projectname && (item.projectname).indexOf(vm.searchSign.projectname) == -1) {
                isMatch = false;
            }
            if (isMatch && vm.searchSign.reviewstage && (item.reviewstage).indexOf(vm.searchSign.reviewstage) == -1) {
                isMatch = false;
            }
            if (isMatch) {
                return item;
            }
        }

        //初始化合并评审弹框
        vm.initMergeWP = function () {
            if (!vm.work.id) {
                bsWin.alert("请先保存工作方案！");
            } else {
                //1、先判断该工作方案是否已经保存
                workprogramSvc.findById(vm.work.id,function(data){
                    //2、如果已经保存，则弹框
                    if(data.isSigle == '合并评审' && data.isMainProject == "9"){
                        //初始化合并评审信息
                        workprogramSvc.initMergeInfo(vm, vm.work.signId);
                        $("#mergeSign").kendoWindow({
                            width: "75%",
                            height: "700px",
                            title: "合并评审",
                            visible: false,
                            modal: true,
                            closable: true,
                            actions: ["Pin", "Minimize", "Maximize", "Close"]
                        }).data("kendoWindow").center().open();
                    }else{
                        bsWin.alert("请先保存工作方案！");
                    }
                });
            }
        }

        //选择项目
        vm.chooseSign = function () {
            var selIds = $("input[name='mergeSign']:checked");
            if (selIds.length == 0) {
                bsWin.alert("请选择要合并评审的项目！");
            } else {
                var signIdArr = [];
                $.each(selIds, function (i, obj) {
                    signIdArr.push(obj.value);
                });
                workprogramSvc.chooseSign(vm.work.signId, signIdArr.join(","), function (data) {
                    if (data.flag || data.reCode == "ok") {
                        workprogramSvc.initMergeInfo(vm, vm.work.signId);
                    }
                    bsWin.alert(data.reMsg);
                });
            }
        }

        //取消项目
        vm.cancelSign = function () {
            var selIds = $("input[name='cancelMergeSignid']:checked");
            if (selIds.length == 0) {
                bsWin.alert("请选择要取消合并评审的项目！");
            } else {
                var selSignIdArr = [];
                $.each(selIds, function (i, obj) {
                    selSignIdArr.push(obj.value);
                });
            }
            workprogramSvc.cancelMergeSign(vm.work.signId, selSignIdArr.join(","), function (data) {
                if (data.flag || data.reCode == "ok") {
                    workprogramSvc.initMergeInfo(vm, vm.work.signId);
                }
                bsWin.alert(data.reMsg);
            });
        }

        /*********************  S_会议室模块   *************************/
        //会议预定添加弹窗
        vm.addTimeStage = function () {
            if (vm.work.id) {
                workprogramSvc.findById(vm.work.id,function(data){
                    //2、如果已经保存，则弹框
                    if(data.reviewType == '专家评审会'){
                        $state.go('room', {businessId: vm.work.id, businessType: "SIGN_WP"});
                    }else{
                        bsWin.alert("请先保存工作方案！");
                    }
                });
            } else {
                bsWin.alert("请先保存！");
            }
        }
        //会议预定添加弹窗维维护管理模块
/*        vm.addTimeStageMain = function () {
            if (vm.work.id) {
                workprogramSvc.findById(vm.work.id,function(data){
                    //2、如果已经保存，则弹框
                    if(data.reviewType == '专家评审会'){
                        $state.go('room', {businessId: vm.work.id, businessType: "SIGN_WP",mainFlag:"1"});
                    }else{
                        bsWin.alert("请先保存工作方案！");
                    }
                });
            } else {
                bsWin.alert("请先保存！");
            }
        }*/
        /*********************  E_会议室模块   *************************/

        //查询评估部门
        vm.findUsersByOrgId = function (type) {
            workprogramSvc.findUsersByOrgId(vm, type);
        }

        vm.create = function () {
           /* var id = $("#work_program_form").find('div[class="ng-scope"]').attr("id");*/
            common.initJqValidation($("#work_program_form"));
            var isValid = $("#work_program_form").valid();
            if (isValid) {
                if(!vm.isTime){
                    if(vm.work.studyQuantum=="全天") {
                        vm.work.studyBeginTime="";
                        vm.work.studyEndTime="";
                    }
                    else {
                        if ($("#studyBeginTime").val()) {
                            vm.work.studyBeginTimeStr = $("#studyBeginTime").val();
                        }
                        if ($("#studyEndTime").val()) {
                            vm.work.studyEndTimeStr = $("#studyEndTime").val();
                        }
                        if ($("#studyAllDay").val() && $("#studyBeginTime").val()) {
                            vm.work.studyBeginTime = $("#studyAllDay").val() + " " + $("#studyBeginTime").val() + ":00";
                        }
                        if ($("#studyAllDay").val() && $("#studyEndTime").val()) {
                            vm.work.studyEndTime = $("#studyAllDay").val() + " " + $("#studyEndTime").val() + ":00";
                        }
                    }
                    workprogramSvc.createWP(vm.work, false, vm.iscommit, function (data) {
                        if (data.flag || data.reCode == "ok") {
                            vm.work.id = data.reObj.id;
                            bsWin.success("操作成功！");
                        } else {
                            bsWin.error(data.reMsg);
                        }
                    });
                }else{
                    bsWin.alert("结束时间必须大于开始时间！");
                }

            } else {
                bsWin.alert("操作失败，有红色*号的选项为必填项，请按要求填写！");
            }
        };
         //判断调研时间的结束时间是否小于开始时间
        vm.compare=function () {
            var studyBeginTimeStr = parseInt(vm.work.studyBeginTimeStr.split(":")[0]);
            var studyEndTimeStr = parseInt(vm.work.studyEndTimeStr.split(":")[0]);
            if(studyBeginTimeStr==studyEndTimeStr){//当“时”想等时，判断“分”
                var beginTime = parseInt(vm.work.studyBeginTimeStr.split(":")[1]);
                var endTime = parseInt(vm.work.studyEndTimeStr.split(":")[1]);
                if(beginTime>endTime){ //判断“分”
                    vm.isTime=true;
                }else{
                    vm.isTime=false;
                }

            }else{
                if(studyBeginTimeStr>studyEndTimeStr){ //判断"时"
                    vm.isTime=true;
                }else{
                    vm.isTime=false;
                }
            }

        }

        //拟聘请专家
        vm.selectExpert = function () {
            if (vm.work.id) {
                //2、如果已经保存，则弹框
                workprogramSvc.findById(vm.work.id,function(data){
                    if(data.reviewType == '专家评审会' || data.reviewType == '专家函评'){
                        //先让用户选择会议时间
                        if(vm.work.reviewType == '专家评审会' && (!vm.work.roomBookingDtos || vm.work.roomBookingDtos.length == 0) ){
                            bsWin.alert("请先预定评审会日期！");
                        }else if(vm.work.reviewType == '专家函评' && !data.letterDate){
                            bsWin.alert("请先选择函评日期并保存！");
                        }else{
                            $state.go('expertReviewEdit', {
                                businessId: vm.work.signId,
                                minBusinessId: vm.work.id,
                                businessType: "SIGN",
                                reviewType: vm.work.reviewType
                            });
                        }
                    }else{
                        bsWin.alert("请先保存工作方案！");
                    }
                });
            } else {
                bsWin.alert("请先保存当前信息，再继续操作！");
            }
        }

        //签收模板打印
        vm.printpage = function ($event) {
            var id =  $($event.target).attr("id");
            signSvc.workProgramPrint(id);
        }

      //维护项目时的工作方案的保存
        vm.createMaintain=function () {
            //保存工作方案的意见
            if (vm.assistant != undefined && vm.assistant.length != 0) {
                for (var i = 0; i < vm.assistant.length; i++) {
                    if(vm.work.studyQuantum=="全天") {
                        vm.work.studyBeginTime="";
                        vm.work.studyEndTime="";
                    }
                    else {
                        if ($("#studyBeginTime").val()) {
                            vm.assistant[i].studyBeginTimeStr = $("#studyBeginTime").val();
                        }
                        if ($("#studyEndTime").val()) {
                            vm.assistant[i].studyEndTimeStr = $("#studyEndTime").val();
                        }
                        if ($("#studyAllDay").val() && $("#studyBeginTime").val()) {
                            vm.assistant[i].studyBeginTime = $("#studyAllDay").val() + " " + $("#studyBeginTime").val() + ":00";
                        }
                        if ($("#studyAllDay").val() && $("#studyEndTime").val()) {
                            vm.assistant[i].studyEndTime = $("#studyAllDay").val() + " " + $("#studyEndTime").val() + ":00";
                        }
                    }
                    vm.assistant[i].signId=vm.work.signId;
                    workprogramSvc.createWP(vm.assistant[i], false, vm.iscommit);
                }
            }
            if(vm.work){
                workprogramSvc.createWP(vm.work, false, vm.iscommit,function () {
                    bsWin.alert("操作成功");
                });
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('workprogramSvc', workprogram);

    workprogram.$inject = ['$http', '$state', '$rootScope','sysfileSvc'];
    function workprogram($http, $state, $rootScope,sysfileSvc) {
        var url_company = rootPath + "/company";
        var service = {
            initPage: initPage,				            //初始化页面参数
            createWP: createWP,				            //新增操作
            findCompanys: findCompanys,		            //查找主管部门
            findUsersByOrgId: findUsersByOrgId,         //查询评估部门
            deleteBookRoom: deleteBookRoom,             //删除会议室
            findAllMeeting: findAllMeeting,             //查找会议室地点
            workMaintainList: workMaintainList,         //根据signid查询工作方案
            initMergeInfo: initMergeInfo,               //初始化合并项目信息
            getMergeSignBySignId: getMergeSignBySignId, //初始化已选项目列表
            unMergeWPSign: unMergeWPSign,			    //待选项目列表

            chooseSign: chooseSign,                     //选择合并评审的工作方案
            cancelMergeSign: cancelMergeSign,           //取消合并评审的工作方案
            deleteAllMerge: deleteAllMerge,             //删除所有合并评审的工作方案

            findById: findById,                         //根据主键查询
            updateReviewType: updateReviewType,         //工作方案由专家评审会改成专家函评
            updateWPExpertCost : updateWPExpertCost,    //更新工作方案中拟评审专家评审费
            initFlowWP : initFlowWP,                    //初始化流程工作方案
            initBaseInfo : initBaseInfo,                //初始化项目基本信息
            saveBaseInfo : saveBaseInfo,                //保存项目基本信息
            getProjBranchInfo : getProjBranchInfo,      //获取项目的分支信息
            reStartWorkFlow : reStartWorkFlow,          //发起重做工作方案流程
            initFlowDeal : initFlowDeal,                //初始化重做工作方案流程
        };

        return service;

        //初始化重做工作方案流程信息
        function initFlowDeal(vm,$scope,isLoadFile){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/workprogram/initDealFlow",
                params: {
                    wpId : vm.businessKey
                },
            }
            var httpSuccess = function success(response) {
                vm.model = {};
                if(response.data.SignDto){
                    vm.model = response.data.SignDto;
                    //加载项目附件
                    if(isLoadFile){
                        sysfileSvc.findByMianId(vm.model.signid,function(data){
                            if(data && data.length > 0){
                                vm.showFlag.tabSysFile = true;
                                vm.sysFileList = data;
                                sysfileSvc.initZtreeClient(vm,$scope);//树形图
                            }
                        });
                    }
                }
                vm.model.workProgramDtoList = [];
                if(response.data.WorkProgramDto){
                    vm.model.workProgramDtoList.push(response.data.WorkProgramDto);
                    vm.branchId = response.data.WorkProgramDto.branchId;
                }
                if(response.data.WorkProgramHisDtoList){
                    vm.WorkProgramHisDtoList = response.data.WorkProgramHisDtoList;
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        function reStartWorkFlow(signId,reworkType,branchIds,userId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/workprogram/startReWorkFlow",
                params: {
                    signId : signId,
                    reworkType: reworkType,
                    brandIds : branchIds,
                    userId:userId
                },
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        function getProjBranchInfo(signId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/flow/getBranchInfo",
                params: {
                    signId : signId,
                },
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        function initBaseInfo(signId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/workprogram/initBaseInfo",
                params: {
                    signId : signId,
                },
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //初始化流程工作方案
        function initFlowWP(signId,taskId,branchId,callBack){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/workprogram/initFlowWP",
                params: {
                    signId : signId,
                    taskId : taskId,
                    branchId : branchId
                },
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        function updateWPExpertCost(wpId){
            var httpOptions = {
                method: 'post',
                url: rootPath + "/workprogram/updateWPExpertCost",
                params: {wpId : wpId},
            }
            var httpSuccess = function success(response) {

            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //S_工作方案由专家评审会改成专家函评
        function updateReviewType(signId, workprogramId, reviewType, callBack) {
            var wpObj = {
                signId: signId,
                id: workprogramId,
                reviewType: reviewType
            }
            var httpOptions = {
                method: 'post',
                url: rootPath + "/workprogram/updateReviewType",
                data: wpObj,
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_expertToLetter

        /**
         * 根据主键查询工作方案信息
         * @param wpId
         */
        function findById(workId, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/workprogram/initWorkProgramById",
                params: {
                    workId: workId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //S_初始化已选项目列表
        function getMergeSignBySignId(signId, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/getMergeSignBySignId",
                params: {
                    signId: signId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //E_初始化已选项目列表

        //S_待选项目列表
        function unMergeWPSign(signId, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/unMergeWPSign",
                params: {
                    signId: signId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //E_待选项目列表

        //S_initMergeInfo
        function initMergeInfo(vm, signId) {
            unMergeWPSign(signId, function (data) {
                vm.unMergeSign = [];
                vm.unMergeSign = data;
            });//待选
            getMergeSignBySignId(signId, function (data) {
                vm.mergeSign = [];
                vm.mergeSign = data;
            });//初始化已选项目
        }

        //S_取消合并评审工作方案
        function cancelMergeSign(signId, cancelIds, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/cancelMergeSign",
                params: {
                    signId: signId,
                    cancelIds: cancelIds,
                    mergeType: "1"
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_cancelWP

        //S_选择合并评审工作方案
        function chooseSign(signId, mergeIds, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/mergeSign",
                params: {
                    signId: signId,
                    mergeIds: mergeIds,
                    mergeType: "1"
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_chooseWP

        //S_删除所有合并评审工作方案
        function deleteAllMerge(signId, businessId, callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/signView/deleteAllMerge",
                params: {
                    signId: signId,
                    mergeType: "1",
                    businessId: businessId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }

            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_deleteAllMerge

        //S_查找所有会议室地点
        function findAllMeeting(callBack) {
            var httpOptions = {
                method: 'get',
                url: rootPath + "/room/meeting"
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //E_查找所有会议室地点

        //start 查找主管部门
        function findCompanys(vm) {
            var httpOptions = {
                method: 'get',
                url: common.format(url_company + "/findCcompanys")
            }
            var httpSuccess = function success(response) {
                vm.companys = {};
                vm.companys = response.data;
            }

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //end 查找主管部门

        //S_根据部门ID选择用户
        function findUsersByOrgId(vm, type) {
            var param = {};
            if ("main" == type) {
                param.orgId = vm.work.reviewDept;
            }
            var httpOptions = {
                method: 'get',
                url: rootPath + "/user/findUsersByOrgId",
                params: param
            };
            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                        if ("main" == type) {
                            vm.mainUserList = {};
                            vm.mainUserList = response.data;
                        }
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        //E_根据部门ID选择用户

        //S_初始化页面参数
        function initPage(vm) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/workprogram/html/initWorkProgram",
                params: {
                    signId: vm.work.signId
                }
            }

            var httpSuccess = function success(response) {
                if (response.data != null && response.data != "") {
                    vm.work = response.data.eidtWP;
                    //如果没有赋值，则初始化一种类型，否则按照默认的类型
                    //因为合并评审次项目是不可以修改的
                    if (!vm.work.reviewType) {
                        vm.work.reviewType = "自评";
                    }
                    if (!vm.work.isSigle) {
                        vm.work.isSigle = '单个评审';
                    }

                    //如果选了专家，并且评审费有变动，则更改
                    if (vm.work.expertDtoList && vm.work.expertDtoList.length > 0) {
                        if (!vm.work.expertCost || vm.work.expertCost < 1000 * (vm.work.expertDtoList.length)) {
                            vm.work.expertCost = 1000 * (vm.work.expertDtoList.length);
                        }
                        //进行专家的专业类别拼接
                        //    var workProgramDtoList = vm.work.expertDtoList;//进行存值
                        //判断下是否有拟请的专家
                        if (vm.work.expertDtoList) {
                            var expertDtoList = vm.work.expertDtoList;//进行存值
                            for (var j = 0; j < expertDtoList.length; j++) {
                                //判断下专家是否有专业类别
                                if (expertDtoList[j].expertTypeDtoList) {
                                    var expertTypeList = expertDtoList[j].expertTypeDtoList;//进行存值
                                    var major = "";//专业
                                    var expertCategory = ""//专业类别
                                    for (var k = 0; k < expertTypeList.length; k++) {
                                        if (expertCategory.indexOf(expertTypeList[k].expertType) < 0) {
                                            if (k > 0) {
                                                expertCategory += "、"
                                            }
                                            expertCategory += expertTypeList[k].expertType;
                                        }
                                        if (k > 0) {
                                            major += "、"
                                        }
                                        major += expertTypeList[k].maJorBig + "、" + expertTypeList[k].maJorSmall;

                                    }
                                    expertDtoList[j].expertCategory = expertCategory;
                                    expertDtoList[j].major = major;
                                }
                            }

                        }

                    }
                    vm.model.workProgramDtoList = {};
                    //如果存在多个分支的情况，则显示项目总投资
                    if ((response.data.showTotalInvestment == '9' || response.data.showTotalInvestment == 9)
                        || (response.data.WPList && response.data.WPList.length > 0)) {
                        vm.model.workProgramDtoList = response.data.WPList;
                        vm.showTotalInvestment = true;
                    }

                    if (vm.work.branchId == "1") {
                        findCompanys(vm);//查找主管部门
                    }
                    vm.work.signId = $state.params.signid;		//收文ID(重新赋值)
                    if (vm.work.projectType) {
                        vm.work.projectTypeDicts = $rootScope.topSelectChange(vm.work.projectType, $rootScope.DICT.PROJECTTYPE.dicts)
                    }

                    //如果是合并评审次项目，则不允许修改
                    if (vm.work.isSigle == "合并评审" && (vm.work.isMainProject == "0" || vm.work.isMainProject == 0)) {
                        vm.businessFlag.isReveiwAWP = true;
                    }

                    //初始化控件
                    vm.initFileUpload();
                }
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//S_初始化页面参数

        //S_初始化页面参数
        function workMaintainList(vm,callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/workprogram/html/workMaintainList",
                params: {
                    signId: vm.work.signId,
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//S_初始化页面参数

        //S_保存操作
        function createWP(work, isNeedWorkProgram, isCommit, callBack) {
            isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/workprogram/addWork",
                data: work,
                params: {
                    isNeedWorkProgram: isNeedWorkProgram
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {
                    isCommit = false;
                }
            });
        }//E_保存操作

        function saveBaseInfo(work, isCommit, callBack) {
            isCommit = true;
            var httpOptions = {
                method: 'post',
                url: rootPath + "/workprogram/saveBaseInfo",
                data: work,
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError: function (response) {
                    isCommit = false;
                }
            });
        }//E_保存操作

        //S_删除会议室
        function deleteBookRoom(bookId, callBack) {
            var httpOptions = {
                method: 'delete',
                url: rootPath + "/room",
                params: {
                    id: bookId
                }
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack();
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_deleteBookRoom
    }
})();
(function () {
    'use strict';

    angular.module('app').controller('assertStorageBusinessCtrl', assertStorageBusiness);

    assertStorageBusiness.$inject = ['$location', 'assertStorageBusinessSvc'];

    function assertStorageBusiness($location, assertStorageBusinessSvc) {
        var vm = this;
        vm.title = '固定资产申购流程';

        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    assertStorageBusinessSvc.deleteAssertStorageBusiness(vm, id);
                }
            });
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };

        activate();
        function activate() {
            assertStorageBusinessSvc.grid(vm);
        }

        //表单查询
        vm.searchForm = function(){
            vm.gridOptions.dataSource._skip=0;
            vm.gridOptions.dataSource.read();
        }

        //重置查询表单
        vm.formReset = function(){
            vm.searchModel = {};
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('assertStorageBusinessEditCtrl', assertStorageBusiness);

    assertStorageBusiness.$inject = ['$location', 'assertStorageBusinessSvc', '$state','bsWin'];

    function assertStorageBusiness($location, assertStorageBusinessSvc, $state,bsWin) {
        /* jshint validthis:true */
        var vm = this;
        vm.model = {};
        vm.conMaxIndex = 0;                   //条件号
        vm.conditions = new Array();         //条件列表
        vm.title = '添加固定资产申购流程';
        vm.isuserExist = false;
        vm.businessId = $state.params.businessId;
        vm.showFlag={
            addBooksDeatail:true,
            modBooksDetail:true,
            bookBuyApplyTr:false,
            bookBuyBzTr:true,
            bookBuyFgzrTr:true,
            bookBuyZrTr:true,
            bookBuyYsrk:true
        }
        if (vm.businessId) {
            vm.isUpdate = true;
            vm.showFlag.modBooksDetail=true;
            vm.showFlag.addBooksDeatail=false;
            vm.title = '更新图书采购申请业务信息';
            $("#businessId").val(vm.businessId);
        }

        vm.create = function () {
            assertStorageBusinessSvc.createAssertStorageBusiness(vm);
        };
        vm.update = function () {
            assertStorageBusinessSvc.updateAssertStorageBusiness(vm);
        };
        //添加资产详细信息
        vm.addCondition = function () {
            vm.condition = {};
            if(vm.showFlag.addBooksDeatail){
                vm.condition.sort = vm.conMaxIndex+1;
            }else{
                vm.conMaxIndex = vm.conditions.length;
                vm.condition.sort = vm.conditions.length+1;
            }
            vm.conditions.push(vm.condition);
            vm.conMaxIndex++;
        }
        //删除资产详细信息
        vm.removeCondition = function () {
            var isCheck = $("#conditionTable input[name='epConditionSort']:checked");
            if (isCheck.length > 0) {
                bsWin.confirm({
                    title: "询问提示",
                    message: "删除数据不可恢复，确定删除么？",
                    onOk: function () {
                        $('.confirmDialog').modal('hide');
                        var ids = [];
                        for (var i = 0; i < isCheck.length; i++) {
                            $.each(vm.conditions,function(c,con){
                                if (isCheck[i].value == con.sort) {
                                    if (con.id) {
                                        ids.push(con.id);
                                    }else{
                                        vm.conditions.splice(c, 1);
                                    }
                                }
                            })
                        }
                        if(ids.length > 0){
                            assertStorageBusinessSvc.deleteSelConditions(ids.join(","),vm.isCommit,function(data){
                                if(data.flag || data.reCode == 'ok'){
                                    bsWin.success("操作成功！");
                                    $.each(ids,function(i,id){
                                        $.each(vm.conditions,function(c,con){
                                            if (id == con.sort) {
                                                vm.conditions.splice(c, 1);     //没有保存抽取条件的直接删除
                                            }
                                        })
                                    })
                                }else{
                                    bsWin.error(data.reMsg);
                                }
                            });
                        }else{
                            bsWin.success("操作成功！");
                        }
                    },
                });
            }else{
                bsWin.alert("请选择要删除的抽取条件！");
            }

        }

        vm.saveCondition = function () {
            if (buildCondition(false)) {
                assertStorageBusinessSvc.saveGoodsDetailBusinessDetail(vm.conditions,function(data){
                    if(data.flag || data.reCode == 'ok'){
                        $("#businessId").val(data.reObj.businessId);
                        bsWin.success("保存成功！");
                    }else{
                        bsWin.error(data.reMsg);
                    }
                });
            } else {
                bsWin.error("请添加后再保存");
            }
        }

        function buildCondition(checkId) {
            //TODO:表单参数校验待核实
            if (vm.conditions.length > 0) {
                var validateResult = true;
                vm.conditions.forEach(function (p, number) {
                    p.goodsName = $("#goodsName" + p.sort).val();
                    p.specifications = $("#specifications" + p.sort).val();
                    p.models = $("#models" + p.sort).val();
                    p.orgCompany = $("#orgCompany" + p.sort).val();
                    p.evaluate = $("#evaluate" + p.sort).val();
                    p.goodsNumber = $("#goodsNumber" + p.sort).val();
                    p.applyDept= vm.model.applyDept;
                    p.operator= vm.model.operator;
                    p.businessId= $("#businessId").val();
                });
                return validateResult;
            } else {
                return false;
            }
        }
        //发起流程
        vm.startFlow = function(){
            /*  common.initJqValidation($('#topicform'));
             var isValid = $('#topicform').valid();*/
            bsWin.confirm({
                title: "询问提示",
                message: "发起流程后，当前页面数据将不能再修改！确认发起流程么？",
                onOk: function () {
                    if (buildCondition(false)) {
                        assertStorageBusinessSvc.startFlow(vm.conditions,vm.isCommit,function(data){
                            if(data.flag || data.reCode == 'ok'){
                                bsWin.alert("保存成功！",function(){
                                    $state.go('myAssertStorageBusiness');
                                });
                            }else{
                                bsWin.alert(data.reMsg);
                            }
                        });
                    }else{
                        bsWin.error("请添加图书信息后再发起流程！");
                    }
                }
            });
        }

        //校验数量
        vm.checkBookNum = function (sort){
            var bookNumber = "bookNumber"+sort;
            if(!isUnsignedInteger($("#"+bookNumber).val())){
                $("span[data-valmsg-for='"+bookNumber+"']").html("图书数量只能输入正整数！");
                return ;
            }
            $("span[data-valmsg-for='"+bookNumber+"']").html("");
        }

        //校验价格
        vm.checkPrice = function(sort){
            var pc = /^(-)?(([1-9]{1}\d*)|([0]{1}))(\.(\d){1,4})?$/;    //保留4个小数点
            var priceId = "booksPrice"+sort;
            var bookNumberId = "bookNumber"+sort;
            if(!pc.test( $("#"+priceId).val())){
                $("#"+priceId).val("");
                $("span[data-valmsg-for='"+priceId+"']").html("价格只能输入数字！");
                return ;
            }
            $("span[data-valmsg-for='"+priceId+"']").html("");
            var price = $("#"+priceId).val();
            var num = $("#"+bookNumberId).val();
            $("#total"+sort).val(parseFloat(price)*num);
        }

        //检查是否为正整数
        function isUnsignedInteger(value) {
            if ((/^(\+|-)?\d+$/.test(value)) && value > 0) {
                return true;
            } else {
                return false;
            }
        }

        activate();
        function activate() {
            if (vm.isUpdate) {
                assertStorageBusinessSvc.getAssertStorageBusinessById(vm);
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('assertStorageBusinessSvc', assertStorageBusiness);

    assertStorageBusiness.$inject = ['$http'];

    function assertStorageBusiness($http) {
        var url_assertStorageBusiness = rootPath + "/assertStorageBusiness", url_back = '#/assertStorageBusinessList';
        var service = {
            grid: grid,
            getAssertStorageBusinessById: getAssertStorageBusinessById,
            createAssertStorageBusiness: createAssertStorageBusiness,
            deleteAssertStorageBusiness: deleteAssertStorageBusiness,
            updateAssertStorageBusiness: updateAssertStorageBusiness,
            saveGoodsDetailBusinessDetail:saveGoodsDetailBusinessDetail,
            startFlow:startFlow,
            initFlowDeal:initFlowDeal
        };

        return service;

        // begin#updateAssertStorageBusiness
        function updateAssertStorageBusiness(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;
                vm.model.id = vm.id;// id

                var httpOptions = {
                    method: 'put',
                    url: url_assertStorageBusiness,
                    data: vm.model
                }

                var httpSuccess = function success(response) {

                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {

                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                }
                            })
                        }

                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } else {
                // common.alert({
                // vm:vm,
                // msg:"您填写的信息不正确,请核对后提交!"
                // })
            }

        }

        // begin#deleteAssertStorageBusiness
        function deleteAssertStorageBusiness(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_assertStorageBusiness,
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                    	common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog :true,
                            fn: function () {
                            	vm.isSubmit = false;
                                vm.gridOptions.dataSource.read();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#createAssertStorageBusiness
        function createAssertStorageBusiness(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;

                var httpOptions = {
                    method: 'post',
                    url: url_assertStorageBusiness,
                    data: vm.model
                };

                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                closeDialog :true,
                                fn: function () {
                                    vm.isSubmit = false;
                                    location.href = url_back;
                                }
                            });
                        }
                    });
                };

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            }
        }

        function saveGoodsDetailBusinessDetail(conditions,callBack){
            //console.log(conditions);
            var httpOptions = {
                method : 'post',
                url : rootPath + "/assertStorageBusiness/saveGoodsDetailList",
                headers:{
                    "contentType":"application/json;charset=utf-8"  //设置请求头信息
                },
                traditional: true,
                dataType : "json",
                data : angular.toJson(conditions)//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http : $http,
                httpOptions : httpOptions,
                success : httpSuccess
            });
        }

        //S_启动流程
        function startFlow(conditions,isCommit,callBack){
            isCommit = true;
            var httpOptions = {
                method : 'post',
                url : rootPath + "/assertStorageBusiness/startFlow",
                headers:{
                    "contentType":"application/json;charset=utf-8"  //设置请求头信息
                },
                traditional: true,
                dataType : "json",
                data : angular.toJson(conditions)//将Json对象序列化成Json字符串，JSON.stringify()原生态方法
            }
            var httpSuccess = function success(response) {
                isCommit = false;
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){isCommit = false;}
            });
        }//E_startFlow

        //S_初始化资产采购流程信息
        function initFlowDeal(vm){
            //vm.businessKey,vm.taskId,vm.instanceId
            var httpOptions = {
                method: 'get',
                url: rootPath + "/assertStorageBusiness/html/findById",
                params : {
                    id:vm.businessKey
                }
            };
            var httpSuccess = function success(response) {
                vm.model = response.data;
            };
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess,
                onError : function(){}
            });
        }//E_initFlowDeal

        // begin#getAssertStorageBusinessById
        function getAssertStorageBusinessById(vm) {
        	var httpOptions = {
                method: 'get',
                url: rootPath + "/assertStorageBusiness/html/findById",
                params:{id:vm.businessId}
            };
            var httpSuccess = function success(response) {
                vm.model = response.data;
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });                       
        }

        // begin#grid
        function grid(vm) {
            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(rootPath + "/assertStorageBusiness/findByOData", $("#myTopicForm"),{filter: "createdBy eq ${CURRENT_USER.id}"}),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

            //S_序号
            var  dataBound=function () {
                var rows = this.items();
                var page = this.pager.page() - 1;
                var pagesize = this.pager.pageSize();
                $(rows).each(function () {
                    var index = $(this).index() + 1 + page * pagesize;
                    var rowLabel = $(this).find(".row-number");
                    $(rowLabel).html(index);
                });
            }
            //S_序号

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />", item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"

                },
                {
                    field: "rowNumber",
                    title: "序号",
                    width: 50,
                    filterable : false,
                    template: "<span class='row-number'></span>"
                },
                {
                    field: "businessName",
                    title: "业务流程名称",
                    width: "20%",
                    filterable: false
                },
                {
                    field: "createdDate",
                    title: "创建日期",
                    width: "15%",
                    filterable: false,
                    format: "{0:yyyy/MM/dd HH:mm:ss}"
                },
                {
                    field: "",
                    title: "已发起流程",
                    width: "15%",
                    filterable: false,
                    template: function (item) {
                        if(item.processInstanceId){
                            return "是";
                        }else{
                            return "否";
                        }
                    }
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        var isStartFlow = item.processInstanceId?true:false;
                        return common.format($('#columnBtns').html(), item.businessId, isStartFlow);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                dataBound:dataBound,
                resizable: true
            };
        }// end fun grid

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('goodsDetailCtrl', goodsDetail);

    goodsDetail.$inject = ['$location', 'goodsDetailSvc'];

    function goodsDetail($location, goodsDetailSvc) {
        var vm = this;
        vm.title = '物品明细';

        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    goodsDetailSvc.deleteGoodsDetail(vm, id);
                }
            });
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };

        activate();
        function activate() {
            goodsDetailSvc.grid(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('goodsDetailEditCtrl', goodsDetail);

    goodsDetail.$inject = ['$location', 'goodsDetailSvc', '$state'];

    function goodsDetail($location, goodsDetailSvc, $state) {
        /* jshint validthis:true */
        var vm = this;
        vm.title = '添加物品明细';
        vm.isuserExist = false;
        vm.id = $state.params.id;
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '更新物品明细';
        }

        vm.create = function () {
            goodsDetailSvc.createGoodsDetail(vm);
        };
        vm.update = function () {
            goodsDetailSvc.updateGoodsDetail(vm);
        };

        activate();
        function activate() {
            if (vm.isUpdate) {
                goodsDetailSvc.getGoodsDetailById(vm);
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('goodsDetailSvc', goodsDetail);

    goodsDetail.$inject = ['$http'];

    function goodsDetail($http) {
        var url_goodsDetail = rootPath + "/goodsDetail", url_back = '#/goodsDetailList';
        var service = {
            grid: grid,
            getGoodsDetailById: getGoodsDetailById,
            createGoodsDetail: createGoodsDetail,
            deleteGoodsDetail: deleteGoodsDetail,
            updateGoodsDetail: updateGoodsDetail,
            getAllStoreAssert:getAllStoreAssert
        };

        return service;

        // begin#updateGoodsDetail
        function updateGoodsDetail(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;
                vm.model.id = vm.id;// id

                var httpOptions = {
                    method: 'put',
                    url: url_goodsDetail,
                    data: vm.model
                }

                var httpSuccess = function success(response) {

                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {

                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                }
                            })
                        }

                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } else {
                // common.alert({
                // vm:vm,
                // msg:"您填写的信息不正确,请核对后提交!"
                // })
            }

        }

        // begin#deleteGoodsDetail
        function deleteGoodsDetail(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_goodsDetail,
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                    	common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog :true,
                            fn: function () {
                            	vm.isSubmit = false;
                                vm.gridOptions.dataSource.read();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#createGoodsDetail
        function createGoodsDetail(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;

                var httpOptions = {
                    method: 'post',
                    url: url_goodsDetail,
                    data: vm.model
                };

                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                closeDialog :true,
                                fn: function () {
                                    vm.isSubmit = false;
                                    location.href = url_back;
                                }
                            });
                        }
                    });
                };

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            }
        }

        // begin#getGoodsDetailById
        function getGoodsDetailById(vm) {
        	var httpOptions = {
                method: 'get',
                url: rootPath + "/goodsDetail/html/findById",
                params:{id:vm.id}
            };
            var httpSuccess = function success(response) {
                vm.model = response.data;
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });                       
        }

        //S_获取取入库资产信息
        function getAllStoreAssert(callBack){
            var httpOptions = {
                method: 'get',
                url: rootPath + "/bookBuyBusiness/html/findById"
            };
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }
        //End_获取入库资产信息

        // begin#grid
        function grid(vm) {

            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_goodsDetail),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
                    field: "id",
                    title: "id",
                    width: 100,
                    filterable: true
                },
                {
                    field: "goodsCode",
                    title: "goodsCode",
                    width: 100,
                    filterable: true
                },
                {
                    field: "goodsName",
                    title: "goodsName",
                    width: 100,
                    filterable: true
                },
                {
                    field: "specifications",
                    title: "specifications",
                    width: 100,
                    filterable: true
                },
                {
                    field: "models",
                    title: "models",
                    width: 100,
                    filterable: true
                },
                {
                    field: "goodsPrice",
                    title: "goodsPrice",
                    width: 100,
                    filterable: true
                },
                {
                    field: "evaluate",
                    title: "evaluate",
                    width: 100,
                    filterable: true
                },
                {
                    field: "goodsNumber",
                    title: "goodsNumber",
                    width: 100,
                    filterable: true
                },
                {
                    field: "assertStorageBusiness",
                    title: "assertStorageBusiness",
                    width: 100,
                    filterable: true
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                            "vm.del('" + item.id + "')", item.id);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true
            };

        }// end fun grid

    }
})();
(function () {
    'use strict';

    angular.module('app').controller('userAssertDetailAddCtrl', userAssertDetail);

    userAssertDetail.$inject = ['$location', 'userAssertDetailSvc', '$state'];

    function userAssertDetail($location, userAssertDetailSvc, $state) {
        /* jshint validthis:true */
        var vm = this;
        vm.model = {};
        vm.conMaxIndex = 0;                   //条件号
        vm.conditions = new Array();         //条件列表
        vm.title = '添加用户资产明细';
        vm.isuserExist = false;
        vm.id = $state.params.id;
        if (vm.id) {
            vm.isUpdate = true;
            vm.title = '更新用户资产明细';
        }

        vm.create = function () {
            userAssertDetailSvc.createUserAssertDetail(vm);
        };
        vm.update = function () {
            userAssertDetailSvc.updateUserAssertDetail(vm);
        };

        vm.addCondition = function () {
            vm.condition = {};
            vm.condition.sort = vm.conMaxIndex+1;
            vm.conditions.push(vm.condition);
            vm.conMaxIndex++;
         /*   if(vm.showFlag.addBooksDeatail){
                vm.condition.sort = vm.conMaxIndex+1;
            }else{
                vm.conMaxIndex = vm.conditions.length;
                vm.condition.sort = vm.conditions.length+1;
            }
            vm.conditions.push(vm.condition);
            vm.conMaxIndex++;*/
        }

        activate();
        function activate() {
            if (vm.isUpdate) {
                userAssertDetailSvc.getUserAssertDetailById(vm);
            }else{
                userAssertDetailSvc.initFillData(function(data){
                    vm.goodsDetailDtoList = data.reObj.goodsDetailDtoList
                });
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').controller('userAssertDetailCtrl', userAssertDetail);

    userAssertDetail.$inject = ['$location', 'userAssertDetailSvc'];

    function userAssertDetail($location, userAssertDetailSvc) {
        var vm = this;
        vm.title = '用户资产明细';

        vm.del = function (id) {
            common.confirm({
                vm: vm,
                title: "",
                msg: "确认删除数据吗？",
                fn: function () {
                    $('.confirmDialog').modal('hide');
                    userAssertDetailSvc.deleteUserAssertDetail(vm, id);
                }
            });
        }
        vm.dels = function () {
            var selectIds = common.getKendoCheckId('.grid');
            if (selectIds.length == 0) {
                common.alert({
                    vm: vm,
                    msg: '请选择数据'
                });
            } else {
                var ids = [];
                for (var i = 0; i < selectIds.length; i++) {
                    ids.push(selectIds[i].value);
                }
                var idStr = ids.join(',');
                vm.del(idStr);
            }
        };

        activate();
        function activate() {
            userAssertDetailSvc.grid(vm);
        }
    }
})();

(function () {
    'use strict';

    angular.module('app').factory('userAssertDetailSvc', userAssertDetail);

    userAssertDetail.$inject = ['$http'];

    function userAssertDetail($http) {
        var url_userAssertDetail = rootPath + "/userAssertDetail", url_back = '#/userAssertDetailList';
        var service = {
            grid: grid,
            getUserAssertDetailById: getUserAssertDetailById,
            createUserAssertDetail: createUserAssertDetail,
            deleteUserAssertDetail: deleteUserAssertDetail,
            updateUserAssertDetail: updateUserAssertDetail,
            initFillData: initFillData
        };

        return service;

        // begin#updateUserAssertDetail
        function updateUserAssertDetail(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;
                vm.model.id = vm.id;// id

                var httpOptions = {
                    method: 'put',
                    url: url_userAssertDetail,
                    data: vm.model
                }

                var httpSuccess = function success(response) {

                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {

                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                fn: function () {
                                    vm.isSubmit = false;
                                    $('.alertDialog').modal('hide');
                                }
                            })
                        }

                    })
                }

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            } else {
                // common.alert({
                // vm:vm,
                // msg:"您填写的信息不正确,请核对后提交!"
                // })
            }

        }

        // begin#deleteUserAssertDetail
        function deleteUserAssertDetail(vm, id) {
            vm.isSubmit = true;
            var httpOptions = {
                method: 'delete',
                url: url_userAssertDetail,
                data: id
            };

            var httpSuccess = function success(response) {
                common.requestSuccess({
                    vm: vm,
                    response: response,
                    fn: function () {
                    	common.alert({
                            vm: vm,
                            msg: "操作成功",
                            closeDialog :true,
                            fn: function () {
                            	vm.isSubmit = false;
                                vm.gridOptions.dataSource.read();
                            }
                        })
                    }
                });
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }

        // begin#createUserAssertDetail
        function createUserAssertDetail(vm) {
            common.initJqValidation();
            var isValid = $('form').valid();
            if (isValid) {
                vm.isSubmit = true;

                var httpOptions = {
                    method: 'post',
                    url: url_userAssertDetail,
                    data: vm.model
                };

                var httpSuccess = function success(response) {
                    common.requestSuccess({
                        vm: vm,
                        response: response,
                        fn: function () {
                            common.alert({
                                vm: vm,
                                msg: "操作成功",
                                closeDialog :true,
                                fn: function () {
                                    vm.isSubmit = false;
                                    location.href = url_back;
                                }
                            });
                        }
                    });
                };

                common.http({
                    vm: vm,
                    $http: $http,
                    httpOptions: httpOptions,
                    success: httpSuccess
                });

            }
        }

        // begin#getUserAssertDetailById
        function getUserAssertDetailById(vm) {
        	var httpOptions = {
                method: 'get',
                url: rootPath + "/userAssertDetail/html/findById",
                params:{id:vm.id}
            };
            var httpSuccess = function success(response) {
                vm.model = response.data;
            };

            common.http({
                vm: vm,
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });                       
        }

        //S_初始化资产申请使用页面数据
        function initFillData(callBack) {
            var httpOptions = {
                method: 'post',
                url: rootPath + "/userAssertDetail/html/initFillPageData",
            }
            var httpSuccess = function success(response) {
                if (callBack != undefined && typeof callBack == 'function') {
                    callBack(response.data);
                }
            }
            common.http({
                $http: $http,
                httpOptions: httpOptions,
                success: httpSuccess
            });
        }//E_初始化资产申请使用页面数据

        // begin#grid
        function grid(vm) {

            // Begin:dataSource
            var dataSource = new kendo.data.DataSource({
                type: 'odata',
                transport: common.kendoGridConfig().transport(url_userAssertDetail),
                schema: common.kendoGridConfig().schema({
                    id: "id",
                    fields: {
                        createdDate: {
                            type: "date"
                        }
                    }
                }),
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                pageSize: 10,
                sort: {
                    field: "createdDate",
                    dir: "desc"
                }
            });

            // End:dataSource

            // Begin:column
            var columns = [
                {
                    template: function (item) {
                        return kendo.format("<input type='checkbox'  relId='{0}' name='checkbox' class='checkbox' />",
                            item.id)
                    },
                    filterable: false,
                    width: 40,
                    title: "<input id='checkboxAll' type='checkbox'  class='checkbox'  />"
                },
                {
                    field: "id",
                    title: "id",
                    width: 100,
                    filterable: true
                },
                {
                    field: "userId",
                    title: "userId",
                    width: 100,
                    filterable: true
                },
                {
                    field: "userName",
                    title: "userName",
                    width: 100,
                    filterable: true
                },
                {
                    field: "goodId",
                    title: "goodId",
                    width: 100,
                    filterable: true
                },
                {
                    field: "goodsName",
                    title: "goodsName",
                    width: 100,
                    filterable: true
                },
                {
                    field: "goodsNumber",
                    title: "goodsNumber",
                    width: 100,
                    filterable: true
                },
                {
                    field: "",
                    title: "操作",
                    width: 140,
                    template: function (item) {
                        return common.format($('#columnBtns').html(),
                            "vm.del('" + item.id + "')", item.id);
                    }
                }
            ];
            // End:column

            vm.gridOptions = {
                dataSource: common.gridDataSource(dataSource),
                filterable: common.kendoGridConfig().filterable,
                pageable: common.kendoGridConfig().pageable,
                noRecords: common.kendoGridConfig().noRecordMessage,
                columns: columns,
                resizable: true
            };

        }// end fun grid

    }
})();